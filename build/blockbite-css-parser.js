(()=>{var __webpack_modules__={1650:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval("// ESM COMPAT FLAG\n__webpack_require__.r(__webpack_exports__);\n\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  createTailwindcss: () => (/* binding */ createTailwindcss),\n  createTailwindcssPlugin: () => (/* binding */ createTailwindcssPlugin),\n  \"default\": () => (/* binding */ src_default),\n  jitBrowserTailwindcss: () => (/* binding */ jitBrowserTailwindcss)\n});\n\n// EXTERNAL MODULE: ./node_modules/postcss/lib/postcss.js\nvar postcss = __webpack_require__(12895);\n;// ./node_modules/postcss/lib/postcss.mjs\n\n\n/* harmony default export */ const lib_postcss = (postcss);\n\nconst stringify = postcss.stringify\nconst fromJSON = postcss.fromJSON\nconst postcss_plugin = postcss.plugin\nconst parse = postcss.parse\nconst list = postcss.list\n\nconst postcss_document = postcss.document\nconst comment = postcss.comment\nconst atRule = postcss.atRule\nconst rule = postcss.rule\nconst decl = postcss.decl\nconst root = postcss.root\n\nconst CssSyntaxError = postcss.CssSyntaxError\nconst Declaration = postcss.Declaration\nconst Container = postcss.Container\nconst Processor = postcss.Processor\nconst Document = postcss.Document\nconst Comment = postcss.Comment\nconst Warning = postcss.Warning\nconst AtRule = postcss.AtRule\nconst Result = postcss.Result\nconst Input = postcss.Input\nconst Rule = postcss.Rule\nconst Root = postcss.Root\nconst Node = postcss.Node\n\n// EXTERNAL MODULE: ./node_modules/postcss-selector-parser/dist/index.js\nvar dist = __webpack_require__(97149);\nvar dist_default = /*#__PURE__*/__webpack_require__.n(dist);\n// EXTERNAL MODULE: ./node_modules/postcss-nested/index.js\nvar postcss_nested = __webpack_require__(22110);\nvar postcss_nested_default = /*#__PURE__*/__webpack_require__.n(postcss_nested);\n// EXTERNAL MODULE: ./node_modules/postcss-js/index.js\nvar postcss_js = __webpack_require__(58166);\n;// ./node_modules/postcss-js/index.mjs\n\n\n/* harmony default export */ const node_modules_postcss_js = (postcss_js);\n\nconst objectify = postcss_js.objectify\nconst postcss_js_parse = postcss_js.parse\nconst postcss_js_async = postcss_js.async\nconst sync = postcss_js.sync\n\n// EXTERNAL MODULE: ./node_modules/postcss-selector-parser/dist/util/unesc.js\nvar unesc = __webpack_require__(35286);\nvar unesc_default = /*#__PURE__*/__webpack_require__.n(unesc);\n// EXTERNAL MODULE: ./node_modules/dlv/dist/dlv.umd.js\nvar dlv_umd = __webpack_require__(32144);\nvar dlv_umd_default = /*#__PURE__*/__webpack_require__.n(dlv_umd);\n// EXTERNAL MODULE: ./node_modules/didyoumean/didYouMean-1.2.1.js\nvar didYouMean_1_2_1 = __webpack_require__(71492);\nvar didYouMean_1_2_1_default = /*#__PURE__*/__webpack_require__.n(didYouMean_1_2_1);\n;// ./src/css-parser/module.esm.js\nvar _excluded = [\"filterDefault\"],\n  _excluded2 = [\"DEFAULT\"],\n  _excluded3 = [\"DEFAULT\"],\n  _excluded4 = [\"DEFAULT\"],\n  _excluded5 = [\"DEFAULT\"],\n  _excluded6 = [\"type\"],\n  _excluded7 = [\"extend\"];\nfunction asyncGeneratorStep(n, t, e, r, o, a, c) {\n  try {\n    var i = n[a](c),\n      u = i.value;\n  } catch (n) {\n    return void e(n);\n  }\n  i.done ? t(u) : Promise.resolve(u).then(r, o);\n}\nfunction _asyncToGenerator(n) {\n  return function () {\n    var t = this,\n      e = arguments;\n    return new Promise(function (r, o) {\n      var a = n.apply(t, e);\n      function _next(n) {\n        asyncGeneratorStep(a, r, o, _next, _throw, \"next\", n);\n      }\n      function _throw(n) {\n        asyncGeneratorStep(a, r, o, _next, _throw, \"throw\", n);\n      }\n      _next(void 0);\n    });\n  };\n}\nfunction _toArray(r) {\n  return _arrayWithHoles(r) || _iterableToArray(r) || _unsupportedIterableToArray(r) || _nonIterableRest();\n}\nfunction _objectWithoutProperties(e, t) {\n  if (null == e) return {};\n  var o,\n    r,\n    i = _objectWithoutPropertiesLoose(e, t);\n  if (Object.getOwnPropertySymbols) {\n    var s = Object.getOwnPropertySymbols(e);\n    for (r = 0; r < s.length; r++) o = s[r], t.includes(o) || {}.propertyIsEnumerable.call(e, o) && (i[o] = e[o]);\n  }\n  return i;\n}\nfunction _objectWithoutPropertiesLoose(r, e) {\n  if (null == r) return {};\n  var t = {};\n  for (var n in r) if ({}.hasOwnProperty.call(r, n)) {\n    if (e.includes(n)) continue;\n    t[n] = r[n];\n  }\n  return t;\n}\nvar _marked = /*#__PURE__*/_regeneratorRuntime().mark(getMatchingTypes),\n  _marked2 = /*#__PURE__*/_regeneratorRuntime().mark(candidatePermutations),\n  _marked3 = /*#__PURE__*/_regeneratorRuntime().mark(resolveMatchedPlugins),\n  _marked4 = /*#__PURE__*/_regeneratorRuntime().mark(recordCandidates),\n  _marked5 = /*#__PURE__*/_regeneratorRuntime().mark(resolveMatches),\n  _marked6 = /*#__PURE__*/_regeneratorRuntime().mark(buildRegExps),\n  _marked7 = /*#__PURE__*/_regeneratorRuntime().mark(pathToRoot),\n  _marked8 = /*#__PURE__*/_regeneratorRuntime().mark(toPaths),\n  _marked9 = /*#__PURE__*/_regeneratorRuntime().mark(toPaths2);\nfunction ownKeys(e, r) {\n  var t = Object.keys(e);\n  if (Object.getOwnPropertySymbols) {\n    var o = Object.getOwnPropertySymbols(e);\n    r && (o = o.filter(function (r) {\n      return Object.getOwnPropertyDescriptor(e, r).enumerable;\n    })), t.push.apply(t, o);\n  }\n  return t;\n}\nfunction _objectSpread(e) {\n  for (var r = 1; r < arguments.length; r++) {\n    var t = null != arguments[r] ? arguments[r] : {};\n    r % 2 ? ownKeys(Object(t), !0).forEach(function (r) {\n      _defineProperty(e, r, t[r]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) {\n      Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r));\n    });\n  }\n  return e;\n}\nfunction _defineProperty(e, r, t) {\n  return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, {\n    value: t,\n    enumerable: !0,\n    configurable: !0,\n    writable: !0\n  }) : e[r] = t, e;\n}\nfunction _toConsumableArray(r) {\n  return _arrayWithoutHoles(r) || _iterableToArray(r) || _unsupportedIterableToArray(r) || _nonIterableSpread();\n}\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _iterableToArray(r) {\n  if (\"undefined\" != typeof Symbol && null != r[Symbol.iterator] || null != r[\"@@iterator\"]) return Array.from(r);\n}\nfunction _arrayWithoutHoles(r) {\n  if (Array.isArray(r)) return _arrayLikeToArray(r);\n}\nfunction _regeneratorRuntime() {\n  \"use strict\";\n\n  /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */\n  _regeneratorRuntime = function _regeneratorRuntime() {\n    return e;\n  };\n  var t,\n    e = {},\n    r = Object.prototype,\n    n = r.hasOwnProperty,\n    o = Object.defineProperty || function (t, e, r) {\n      t[e] = r.value;\n    },\n    i = \"function\" == typeof Symbol ? Symbol : {},\n    a = i.iterator || \"@@iterator\",\n    c = i.asyncIterator || \"@@asyncIterator\",\n    u = i.toStringTag || \"@@toStringTag\";\n  function define(t, e, r) {\n    return Object.defineProperty(t, e, {\n      value: r,\n      enumerable: !0,\n      configurable: !0,\n      writable: !0\n    }), t[e];\n  }\n  try {\n    define({}, \"\");\n  } catch (t) {\n    define = function define(t, e, r) {\n      return t[e] = r;\n    };\n  }\n  function wrap(t, e, r, n) {\n    var i = e && e.prototype instanceof Generator ? e : Generator,\n      a = Object.create(i.prototype),\n      c = new Context(n || []);\n    return o(a, \"_invoke\", {\n      value: makeInvokeMethod(t, r, c)\n    }), a;\n  }\n  function tryCatch(t, e, r) {\n    try {\n      return {\n        type: \"normal\",\n        arg: t.call(e, r)\n      };\n    } catch (t) {\n      return {\n        type: \"throw\",\n        arg: t\n      };\n    }\n  }\n  e.wrap = wrap;\n  var h = \"suspendedStart\",\n    l = \"suspendedYield\",\n    f = \"executing\",\n    s = \"completed\",\n    y = {};\n  function Generator() {}\n  function GeneratorFunction() {}\n  function GeneratorFunctionPrototype() {}\n  var p = {};\n  define(p, a, function () {\n    return this;\n  });\n  var d = Object.getPrototypeOf,\n    v = d && d(d(values([])));\n  v && v !== r && n.call(v, a) && (p = v);\n  var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p);\n  function defineIteratorMethods(t) {\n    [\"next\", \"throw\", \"return\"].forEach(function (e) {\n      define(t, e, function (t) {\n        return this._invoke(e, t);\n      });\n    });\n  }\n  function AsyncIterator(t, e) {\n    function invoke(r, o, i, a) {\n      var c = tryCatch(t[r], t, o);\n      if (\"throw\" !== c.type) {\n        var u = c.arg,\n          h = u.value;\n        return h && \"object\" == _typeof(h) && n.call(h, \"__await\") ? e.resolve(h.__await).then(function (t) {\n          invoke(\"next\", t, i, a);\n        }, function (t) {\n          invoke(\"throw\", t, i, a);\n        }) : e.resolve(h).then(function (t) {\n          u.value = t, i(u);\n        }, function (t) {\n          return invoke(\"throw\", t, i, a);\n        });\n      }\n      a(c.arg);\n    }\n    var r;\n    o(this, \"_invoke\", {\n      value: function value(t, n) {\n        function callInvokeWithMethodAndArg() {\n          return new e(function (e, r) {\n            invoke(t, n, e, r);\n          });\n        }\n        return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();\n      }\n    });\n  }\n  function makeInvokeMethod(e, r, n) {\n    var o = h;\n    return function (i, a) {\n      if (o === f) throw Error(\"Generator is already running\");\n      if (o === s) {\n        if (\"throw\" === i) throw a;\n        return {\n          value: t,\n          done: !0\n        };\n      }\n      for (n.method = i, n.arg = a;;) {\n        var c = n.delegate;\n        if (c) {\n          var u = maybeInvokeDelegate(c, n);\n          if (u) {\n            if (u === y) continue;\n            return u;\n          }\n        }\n        if (\"next\" === n.method) n.sent = n._sent = n.arg;else if (\"throw\" === n.method) {\n          if (o === h) throw o = s, n.arg;\n          n.dispatchException(n.arg);\n        } else \"return\" === n.method && n.abrupt(\"return\", n.arg);\n        o = f;\n        var p = tryCatch(e, r, n);\n        if (\"normal\" === p.type) {\n          if (o = n.done ? s : l, p.arg === y) continue;\n          return {\n            value: p.arg,\n            done: n.done\n          };\n        }\n        \"throw\" === p.type && (o = s, n.method = \"throw\", n.arg = p.arg);\n      }\n    };\n  }\n  function maybeInvokeDelegate(e, r) {\n    var n = r.method,\n      o = e.iterator[n];\n    if (o === t) return r.delegate = null, \"throw\" === n && e.iterator[\"return\"] && (r.method = \"return\", r.arg = t, maybeInvokeDelegate(e, r), \"throw\" === r.method) || \"return\" !== n && (r.method = \"throw\", r.arg = new TypeError(\"The iterator does not provide a '\" + n + \"' method\")), y;\n    var i = tryCatch(o, e.iterator, r.arg);\n    if (\"throw\" === i.type) return r.method = \"throw\", r.arg = i.arg, r.delegate = null, y;\n    var a = i.arg;\n    return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, \"return\" !== r.method && (r.method = \"next\", r.arg = t), r.delegate = null, y) : a : (r.method = \"throw\", r.arg = new TypeError(\"iterator result is not an object\"), r.delegate = null, y);\n  }\n  function pushTryEntry(t) {\n    var e = {\n      tryLoc: t[0]\n    };\n    1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e);\n  }\n  function resetTryEntry(t) {\n    var e = t.completion || {};\n    e.type = \"normal\", delete e.arg, t.completion = e;\n  }\n  function Context(t) {\n    this.tryEntries = [{\n      tryLoc: \"root\"\n    }], t.forEach(pushTryEntry, this), this.reset(!0);\n  }\n  function values(e) {\n    if (e || \"\" === e) {\n      var r = e[a];\n      if (r) return r.call(e);\n      if (\"function\" == typeof e.next) return e;\n      if (!isNaN(e.length)) {\n        var o = -1,\n          i = function next() {\n            for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next;\n            return next.value = t, next.done = !0, next;\n          };\n        return i.next = i;\n      }\n    }\n    throw new TypeError(_typeof(e) + \" is not iterable\");\n  }\n  return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, \"constructor\", {\n    value: GeneratorFunctionPrototype,\n    configurable: !0\n  }), o(GeneratorFunctionPrototype, \"constructor\", {\n    value: GeneratorFunction,\n    configurable: !0\n  }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, \"GeneratorFunction\"), e.isGeneratorFunction = function (t) {\n    var e = \"function\" == typeof t && t.constructor;\n    return !!e && (e === GeneratorFunction || \"GeneratorFunction\" === (e.displayName || e.name));\n  }, e.mark = function (t) {\n    return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, \"GeneratorFunction\")), t.prototype = Object.create(g), t;\n  }, e.awrap = function (t) {\n    return {\n      __await: t\n    };\n  }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () {\n    return this;\n  }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) {\n    void 0 === i && (i = Promise);\n    var a = new AsyncIterator(wrap(t, r, n, o), i);\n    return e.isGeneratorFunction(r) ? a : a.next().then(function (t) {\n      return t.done ? t.value : a.next();\n    });\n  }, defineIteratorMethods(g), define(g, u, \"Generator\"), define(g, a, function () {\n    return this;\n  }), define(g, \"toString\", function () {\n    return \"[object Generator]\";\n  }), e.keys = function (t) {\n    var e = Object(t),\n      r = [];\n    for (var n in e) r.push(n);\n    return r.reverse(), function next() {\n      for (; r.length;) {\n        var t = r.pop();\n        if (t in e) return next.value = t, next.done = !1, next;\n      }\n      return next.done = !0, next;\n    };\n  }, e.values = values, Context.prototype = {\n    constructor: Context,\n    reset: function reset(e) {\n      if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) \"t\" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t);\n    },\n    stop: function stop() {\n      this.done = !0;\n      var t = this.tryEntries[0].completion;\n      if (\"throw\" === t.type) throw t.arg;\n      return this.rval;\n    },\n    dispatchException: function dispatchException(e) {\n      if (this.done) throw e;\n      var r = this;\n      function handle(n, o) {\n        return a.type = \"throw\", a.arg = e, r.next = n, o && (r.method = \"next\", r.arg = t), !!o;\n      }\n      for (var o = this.tryEntries.length - 1; o >= 0; --o) {\n        var i = this.tryEntries[o],\n          a = i.completion;\n        if (\"root\" === i.tryLoc) return handle(\"end\");\n        if (i.tryLoc <= this.prev) {\n          var c = n.call(i, \"catchLoc\"),\n            u = n.call(i, \"finallyLoc\");\n          if (c && u) {\n            if (this.prev < i.catchLoc) return handle(i.catchLoc, !0);\n            if (this.prev < i.finallyLoc) return handle(i.finallyLoc);\n          } else if (c) {\n            if (this.prev < i.catchLoc) return handle(i.catchLoc, !0);\n          } else {\n            if (!u) throw Error(\"try statement without catch or finally\");\n            if (this.prev < i.finallyLoc) return handle(i.finallyLoc);\n          }\n        }\n      }\n    },\n    abrupt: function abrupt(t, e) {\n      for (var r = this.tryEntries.length - 1; r >= 0; --r) {\n        var o = this.tryEntries[r];\n        if (o.tryLoc <= this.prev && n.call(o, \"finallyLoc\") && this.prev < o.finallyLoc) {\n          var i = o;\n          break;\n        }\n      }\n      i && (\"break\" === t || \"continue\" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null);\n      var a = i ? i.completion : {};\n      return a.type = t, a.arg = e, i ? (this.method = \"next\", this.next = i.finallyLoc, y) : this.complete(a);\n    },\n    complete: function complete(t, e) {\n      if (\"throw\" === t.type) throw t.arg;\n      return \"break\" === t.type || \"continue\" === t.type ? this.next = t.arg : \"return\" === t.type ? (this.rval = this.arg = t.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === t.type && e && (this.next = e), y;\n    },\n    finish: function finish(t) {\n      for (var e = this.tryEntries.length - 1; e >= 0; --e) {\n        var r = this.tryEntries[e];\n        if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y;\n      }\n    },\n    \"catch\": function _catch(t) {\n      for (var e = this.tryEntries.length - 1; e >= 0; --e) {\n        var r = this.tryEntries[e];\n        if (r.tryLoc === t) {\n          var n = r.completion;\n          if (\"throw\" === n.type) {\n            var o = n.arg;\n            resetTryEntry(r);\n          }\n          return o;\n        }\n      }\n      throw Error(\"illegal catch attempt\");\n    },\n    delegateYield: function delegateYield(e, r, n) {\n      return this.delegate = {\n        iterator: values(e),\n        resultName: r,\n        nextLoc: n\n      }, \"next\" === this.method && (this.arg = t), y;\n    }\n  }, e;\n}\nfunction _slicedToArray(r, e) {\n  return _arrayWithHoles(r) || _iterableToArrayLimit(r, e) || _unsupportedIterableToArray(r, e) || _nonIterableRest();\n}\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _iterableToArrayLimit(r, l) {\n  var t = null == r ? null : \"undefined\" != typeof Symbol && r[Symbol.iterator] || r[\"@@iterator\"];\n  if (null != t) {\n    var e,\n      n,\n      i,\n      u,\n      a = [],\n      f = !0,\n      o = !1;\n    try {\n      if (i = (t = t.call(r)).next, 0 === l) {\n        if (Object(t) !== t) return;\n        f = !1;\n      } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0);\n    } catch (r) {\n      o = !0, n = r;\n    } finally {\n      try {\n        if (!f && null != t[\"return\"] && (u = t[\"return\"](), Object(u) !== u)) return;\n      } finally {\n        if (o) throw n;\n      }\n    }\n    return a;\n  }\n}\nfunction _arrayWithHoles(r) {\n  if (Array.isArray(r)) return r;\n}\nfunction _classCallCheck(a, n) {\n  if (!(a instanceof n)) throw new TypeError(\"Cannot call a class as a function\");\n}\nfunction _defineProperties(e, r) {\n  for (var t = 0; t < r.length; t++) {\n    var o = r[t];\n    o.enumerable = o.enumerable || !1, o.configurable = !0, \"value\" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o);\n  }\n}\nfunction _createClass(e, r, t) {\n  return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, \"prototype\", {\n    writable: !1\n  }), e;\n}\nfunction _toPropertyKey(t) {\n  var i = _toPrimitive(t, \"string\");\n  return \"symbol\" == _typeof(i) ? i : i + \"\";\n}\nfunction _toPrimitive(t, r) {\n  if (\"object\" != _typeof(t) || !t) return t;\n  var e = t[Symbol.toPrimitive];\n  if (void 0 !== e) {\n    var i = e.call(t, r || \"default\");\n    if (\"object\" != _typeof(i)) return i;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n  return (\"string\" === r ? String : Number)(t);\n}\nfunction _createForOfIteratorHelper(r, e) {\n  var t = \"undefined\" != typeof Symbol && r[Symbol.iterator] || r[\"@@iterator\"];\n  if (!t) {\n    if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e && r && \"number\" == typeof r.length) {\n      t && (r = t);\n      var _n = 0,\n        F = function F() {};\n      return {\n        s: F,\n        n: function n() {\n          return _n >= r.length ? {\n            done: !0\n          } : {\n            done: !1,\n            value: r[_n++]\n          };\n        },\n        e: function e(r) {\n          throw r;\n        },\n        f: F\n      };\n    }\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n  var o,\n    a = !0,\n    u = !1;\n  return {\n    s: function s() {\n      t = t.call(r);\n    },\n    n: function n() {\n      var r = t.next();\n      return a = r.done, r;\n    },\n    e: function e(r) {\n      u = !0, o = r;\n    },\n    f: function f() {\n      try {\n        a || null == t[\"return\"] || t[\"return\"]();\n      } finally {\n        if (u) throw o;\n      }\n    }\n  };\n}\nfunction _unsupportedIterableToArray(r, a) {\n  if (r) {\n    if (\"string\" == typeof r) return _arrayLikeToArray(r, a);\n    var t = {}.toString.call(r).slice(8, -1);\n    return \"Object\" === t && r.constructor && (t = r.constructor.name), \"Map\" === t || \"Set\" === t ? Array.from(r) : \"Arguments\" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0;\n  }\n}\nfunction _arrayLikeToArray(r, a) {\n  (null == a || a > r.length) && (a = r.length);\n  for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e];\n  return n;\n}\nfunction _typeof(o) {\n  \"@babel/helpers - typeof\";\n\n  return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) {\n    return typeof o;\n  } : function (o) {\n    return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o;\n  }, _typeof(o);\n}\nvar __create = Object.create;\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __getProtoOf = Object.getPrototypeOf;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __commonJS = function __commonJS(cb, mod) {\n  return function __require() {\n    return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = {\n      exports: {}\n    }).exports, mod), mod.exports;\n  };\n};\nvar __copyProps = function __copyProps(to, from, except, desc) {\n  if (from && _typeof(from) === 'object' || typeof from === 'function') {\n    var _iterator = _createForOfIteratorHelper(__getOwnPropNames(from)),\n      _step;\n    try {\n      var _loop = function _loop() {\n        var key = _step.value;\n        if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {\n          get: function get() {\n            return from[key];\n          },\n          enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable\n        });\n      };\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        _loop();\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n  }\n  return to;\n};\nvar __toESM = function __toESM(mod, isNodeMode, target) {\n  return target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(isNodeMode || !mod || !mod.__esModule ? __defProp(target, 'default', {\n    value: mod,\n    enumerable: true\n  }) : target, mod);\n};\n\n// node_modules/@alloc/quick-lru/index.js\nvar require_quick_lru = __commonJS({\n  'node_modules/@alloc/quick-lru/index.js': function node_modules_Alloc_quickLru_indexJs(exports, module) {\n    'use strict';\n\n    var QuickLRU = /*#__PURE__*/function () {\n      function QuickLRU() {\n        var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n        _classCallCheck(this, QuickLRU);\n        if (!(options.maxSize && options.maxSize > 0)) {\n          throw new TypeError('`maxSize` must be a number greater than 0');\n        }\n        if (typeof options.maxAge === 'number' && options.maxAge === 0) {\n          throw new TypeError('`maxAge` must be a number greater than 0');\n        }\n        this.maxSize = options.maxSize;\n        this.maxAge = options.maxAge || Infinity;\n        this.onEviction = options.onEviction;\n        this.cache = /* @__PURE__ */new Map();\n        this.oldCache = /* @__PURE__ */new Map();\n        this._size = 0;\n      }\n      return _createClass(QuickLRU, [{\n        key: \"_emitEvictions\",\n        value: function _emitEvictions(cache2) {\n          if (typeof this.onEviction !== 'function') {\n            return;\n          }\n          var _iterator2 = _createForOfIteratorHelper(cache2),\n            _step2;\n          try {\n            for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n              var _step2$value = _slicedToArray(_step2.value, 2),\n                key = _step2$value[0],\n                item = _step2$value[1];\n              this.onEviction(key, item.value);\n            }\n          } catch (err) {\n            _iterator2.e(err);\n          } finally {\n            _iterator2.f();\n          }\n        }\n      }, {\n        key: \"_deleteIfExpired\",\n        value: function _deleteIfExpired(key, item) {\n          if (typeof item.expiry === 'number' && item.expiry <= Date.now()) {\n            if (typeof this.onEviction === 'function') {\n              this.onEviction(key, item.value);\n            }\n            return this[\"delete\"](key);\n          }\n          return false;\n        }\n      }, {\n        key: \"_getOrDeleteIfExpired\",\n        value: function _getOrDeleteIfExpired(key, item) {\n          var deleted = this._deleteIfExpired(key, item);\n          if (deleted === false) {\n            return item.value;\n          }\n        }\n      }, {\n        key: \"_getItemValue\",\n        value: function _getItemValue(key, item) {\n          return item.expiry ? this._getOrDeleteIfExpired(key, item) : item.value;\n        }\n      }, {\n        key: \"_peek\",\n        value: function _peek(key, cache2) {\n          var item = cache2.get(key);\n          return this._getItemValue(key, item);\n        }\n      }, {\n        key: \"_set\",\n        value: function _set(key, value2) {\n          this.cache.set(key, value2);\n          this._size++;\n          if (this._size >= this.maxSize) {\n            this._size = 0;\n            this._emitEvictions(this.oldCache);\n            this.oldCache = this.cache;\n            this.cache = /* @__PURE__ */new Map();\n          }\n        }\n      }, {\n        key: \"_moveToRecent\",\n        value: function _moveToRecent(key, item) {\n          this.oldCache[\"delete\"](key);\n          this._set(key, item);\n        }\n      }, {\n        key: \"_entriesAscending\",\n        value: /*#__PURE__*/_regeneratorRuntime().mark(function _entriesAscending() {\n          var _iterator3, _step3, item, _item, key, value2, deleted, _iterator4, _step4, _item2, _item3, _key, _value, _deleted;\n          return _regeneratorRuntime().wrap(function _entriesAscending$(_context2) {\n            while (1) switch (_context2.prev = _context2.next) {\n              case 0:\n                _iterator3 = _createForOfIteratorHelper(this.oldCache);\n                _context2.prev = 1;\n                _iterator3.s();\n              case 3:\n                if ((_step3 = _iterator3.n()).done) {\n                  _context2.next = 13;\n                  break;\n                }\n                item = _step3.value;\n                _item = _slicedToArray(item, 2), key = _item[0], value2 = _item[1];\n                if (this.cache.has(key)) {\n                  _context2.next = 11;\n                  break;\n                }\n                deleted = this._deleteIfExpired(key, value2);\n                if (!(deleted === false)) {\n                  _context2.next = 11;\n                  break;\n                }\n                _context2.next = 11;\n                return item;\n              case 11:\n                _context2.next = 3;\n                break;\n              case 13:\n                _context2.next = 18;\n                break;\n              case 15:\n                _context2.prev = 15;\n                _context2.t0 = _context2[\"catch\"](1);\n                _iterator3.e(_context2.t0);\n              case 18:\n                _context2.prev = 18;\n                _iterator3.f();\n                return _context2.finish(18);\n              case 21:\n                _iterator4 = _createForOfIteratorHelper(this.cache);\n                _context2.prev = 22;\n                _iterator4.s();\n              case 24:\n                if ((_step4 = _iterator4.n()).done) {\n                  _context2.next = 33;\n                  break;\n                }\n                _item2 = _step4.value;\n                _item3 = _slicedToArray(_item2, 2), _key = _item3[0], _value = _item3[1];\n                _deleted = this._deleteIfExpired(_key, _value);\n                if (!(_deleted === false)) {\n                  _context2.next = 31;\n                  break;\n                }\n                _context2.next = 31;\n                return _item2;\n              case 31:\n                _context2.next = 24;\n                break;\n              case 33:\n                _context2.next = 38;\n                break;\n              case 35:\n                _context2.prev = 35;\n                _context2.t1 = _context2[\"catch\"](22);\n                _iterator4.e(_context2.t1);\n              case 38:\n                _context2.prev = 38;\n                _iterator4.f();\n                return _context2.finish(38);\n              case 41:\n              case \"end\":\n                return _context2.stop();\n            }\n          }, _entriesAscending, this, [[1, 15, 18, 21], [22, 35, 38, 41]]);\n        })\n      }, {\n        key: \"get\",\n        value: function get(key) {\n          if (this.cache.has(key)) {\n            var item = this.cache.get(key);\n            return this._getItemValue(key, item);\n          }\n          if (this.oldCache.has(key)) {\n            var _item4 = this.oldCache.get(key);\n            if (this._deleteIfExpired(key, _item4) === false) {\n              this._moveToRecent(key, _item4);\n              return _item4.value;\n            }\n          }\n        }\n      }, {\n        key: \"set\",\n        value: function set(key, value2) {\n          var _ref = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},\n            _ref$maxAge = _ref.maxAge,\n            maxAge = _ref$maxAge === void 0 ? this.maxAge === Infinity ? void 0 : Date.now() + this.maxAge : _ref$maxAge;\n          if (this.cache.has(key)) {\n            this.cache.set(key, {\n              value: value2,\n              maxAge: maxAge\n            });\n          } else {\n            this._set(key, {\n              value: value2,\n              expiry: maxAge\n            });\n          }\n        }\n      }, {\n        key: \"has\",\n        value: function has(key) {\n          if (this.cache.has(key)) {\n            return !this._deleteIfExpired(key, this.cache.get(key));\n          }\n          if (this.oldCache.has(key)) {\n            return !this._deleteIfExpired(key, this.oldCache.get(key));\n          }\n          return false;\n        }\n      }, {\n        key: \"peek\",\n        value: function peek(key) {\n          if (this.cache.has(key)) {\n            return this._peek(key, this.cache);\n          }\n          if (this.oldCache.has(key)) {\n            return this._peek(key, this.oldCache);\n          }\n        }\n      }, {\n        key: \"delete\",\n        value: function _delete(key) {\n          var deleted = this.cache[\"delete\"](key);\n          if (deleted) {\n            this._size--;\n          }\n          return this.oldCache[\"delete\"](key) || deleted;\n        }\n      }, {\n        key: \"clear\",\n        value: function clear() {\n          this.cache.clear();\n          this.oldCache.clear();\n          this._size = 0;\n        }\n      }, {\n        key: \"resize\",\n        value: function resize(newSize) {\n          if (!(newSize && newSize > 0)) {\n            throw new TypeError('`maxSize` must be a number greater than 0');\n          }\n          var items = _toConsumableArray(this._entriesAscending());\n          var removeCount = items.length - newSize;\n          if (removeCount < 0) {\n            this.cache = new Map(items);\n            this.oldCache = /* @__PURE__ */new Map();\n            this._size = items.length;\n          } else {\n            if (removeCount > 0) {\n              this._emitEvictions(items.slice(0, removeCount));\n            }\n            this.oldCache = new Map(items.slice(removeCount));\n            this.cache = /* @__PURE__ */new Map();\n            this._size = 0;\n          }\n          this.maxSize = newSize;\n        }\n      }, {\n        key: \"keys\",\n        value: /*#__PURE__*/_regeneratorRuntime().mark(function keys() {\n          var _iterator5, _step5, _step5$value, key;\n          return _regeneratorRuntime().wrap(function keys$(_context3) {\n            while (1) switch (_context3.prev = _context3.next) {\n              case 0:\n                _iterator5 = _createForOfIteratorHelper(this);\n                _context3.prev = 1;\n                _iterator5.s();\n              case 3:\n                if ((_step5 = _iterator5.n()).done) {\n                  _context3.next = 9;\n                  break;\n                }\n                _step5$value = _slicedToArray(_step5.value, 1), key = _step5$value[0];\n                _context3.next = 7;\n                return key;\n              case 7:\n                _context3.next = 3;\n                break;\n              case 9:\n                _context3.next = 14;\n                break;\n              case 11:\n                _context3.prev = 11;\n                _context3.t0 = _context3[\"catch\"](1);\n                _iterator5.e(_context3.t0);\n              case 14:\n                _context3.prev = 14;\n                _iterator5.f();\n                return _context3.finish(14);\n              case 17:\n              case \"end\":\n                return _context3.stop();\n            }\n          }, keys, this, [[1, 11, 14, 17]]);\n        })\n      }, {\n        key: \"values\",\n        value: /*#__PURE__*/_regeneratorRuntime().mark(function values() {\n          var _iterator6, _step6, _step6$value, value2;\n          return _regeneratorRuntime().wrap(function values$(_context4) {\n            while (1) switch (_context4.prev = _context4.next) {\n              case 0:\n                _iterator6 = _createForOfIteratorHelper(this);\n                _context4.prev = 1;\n                _iterator6.s();\n              case 3:\n                if ((_step6 = _iterator6.n()).done) {\n                  _context4.next = 9;\n                  break;\n                }\n                _step6$value = _slicedToArray(_step6.value, 2), value2 = _step6$value[1];\n                _context4.next = 7;\n                return value2;\n              case 7:\n                _context4.next = 3;\n                break;\n              case 9:\n                _context4.next = 14;\n                break;\n              case 11:\n                _context4.prev = 11;\n                _context4.t0 = _context4[\"catch\"](1);\n                _iterator6.e(_context4.t0);\n              case 14:\n                _context4.prev = 14;\n                _iterator6.f();\n                return _context4.finish(14);\n              case 17:\n              case \"end\":\n                return _context4.stop();\n            }\n          }, values, this, [[1, 11, 14, 17]]);\n        })\n      }, {\n        key: Symbol.iterator,\n        value: /*#__PURE__*/_regeneratorRuntime().mark(function value() {\n          var _iterator7, _step7, item, _item5, key, value2, deleted, _iterator8, _step8, _item6, _item7, _key2, _value2, _deleted2;\n          return _regeneratorRuntime().wrap(function value$(_context5) {\n            while (1) switch (_context5.prev = _context5.next) {\n              case 0:\n                _iterator7 = _createForOfIteratorHelper(this.cache);\n                _context5.prev = 1;\n                _iterator7.s();\n              case 3:\n                if ((_step7 = _iterator7.n()).done) {\n                  _context5.next = 12;\n                  break;\n                }\n                item = _step7.value;\n                _item5 = _slicedToArray(item, 2), key = _item5[0], value2 = _item5[1];\n                deleted = this._deleteIfExpired(key, value2);\n                if (!(deleted === false)) {\n                  _context5.next = 10;\n                  break;\n                }\n                _context5.next = 10;\n                return [key, value2.value];\n              case 10:\n                _context5.next = 3;\n                break;\n              case 12:\n                _context5.next = 17;\n                break;\n              case 14:\n                _context5.prev = 14;\n                _context5.t0 = _context5[\"catch\"](1);\n                _iterator7.e(_context5.t0);\n              case 17:\n                _context5.prev = 17;\n                _iterator7.f();\n                return _context5.finish(17);\n              case 20:\n                _iterator8 = _createForOfIteratorHelper(this.oldCache);\n                _context5.prev = 21;\n                _iterator8.s();\n              case 23:\n                if ((_step8 = _iterator8.n()).done) {\n                  _context5.next = 33;\n                  break;\n                }\n                _item6 = _step8.value;\n                _item7 = _slicedToArray(_item6, 2), _key2 = _item7[0], _value2 = _item7[1];\n                if (this.cache.has(_key2)) {\n                  _context5.next = 31;\n                  break;\n                }\n                _deleted2 = this._deleteIfExpired(_key2, _value2);\n                if (!(_deleted2 === false)) {\n                  _context5.next = 31;\n                  break;\n                }\n                _context5.next = 31;\n                return [_key2, _value2.value];\n              case 31:\n                _context5.next = 23;\n                break;\n              case 33:\n                _context5.next = 38;\n                break;\n              case 35:\n                _context5.prev = 35;\n                _context5.t1 = _context5[\"catch\"](21);\n                _iterator8.e(_context5.t1);\n              case 38:\n                _context5.prev = 38;\n                _iterator8.f();\n                return _context5.finish(38);\n              case 41:\n              case \"end\":\n                return _context5.stop();\n            }\n          }, value, this, [[1, 14, 17, 20], [21, 35, 38, 41]]);\n        })\n      }, {\n        key: \"entriesDescending\",\n        value: /*#__PURE__*/_regeneratorRuntime().mark(function entriesDescending() {\n          var items, i, item, _item8, key, value2, deleted, _i, _item9, _item10, _key3, _value3, _deleted3;\n          return _regeneratorRuntime().wrap(function entriesDescending$(_context6) {\n            while (1) switch (_context6.prev = _context6.next) {\n              case 0:\n                items = _toConsumableArray(this.cache);\n                i = items.length - 1;\n              case 2:\n                if (!(i >= 0)) {\n                  _context6.next = 12;\n                  break;\n                }\n                item = items[i];\n                _item8 = _slicedToArray(item, 2), key = _item8[0], value2 = _item8[1];\n                deleted = this._deleteIfExpired(key, value2);\n                if (!(deleted === false)) {\n                  _context6.next = 9;\n                  break;\n                }\n                _context6.next = 9;\n                return [key, value2.value];\n              case 9:\n                --i;\n                _context6.next = 2;\n                break;\n              case 12:\n                items = _toConsumableArray(this.oldCache);\n                _i = items.length - 1;\n              case 14:\n                if (!(_i >= 0)) {\n                  _context6.next = 25;\n                  break;\n                }\n                _item9 = items[_i];\n                _item10 = _slicedToArray(_item9, 2), _key3 = _item10[0], _value3 = _item10[1];\n                if (this.cache.has(_key3)) {\n                  _context6.next = 22;\n                  break;\n                }\n                _deleted3 = this._deleteIfExpired(_key3, _value3);\n                if (!(_deleted3 === false)) {\n                  _context6.next = 22;\n                  break;\n                }\n                _context6.next = 22;\n                return [_key3, _value3.value];\n              case 22:\n                --_i;\n                _context6.next = 14;\n                break;\n              case 25:\n              case \"end\":\n                return _context6.stop();\n            }\n          }, entriesDescending, this);\n        })\n      }, {\n        key: \"entriesAscending\",\n        value: /*#__PURE__*/_regeneratorRuntime().mark(function entriesAscending() {\n          var _iterator9, _step9, _step9$value, key, value2;\n          return _regeneratorRuntime().wrap(function entriesAscending$(_context7) {\n            while (1) switch (_context7.prev = _context7.next) {\n              case 0:\n                _iterator9 = _createForOfIteratorHelper(this._entriesAscending());\n                _context7.prev = 1;\n                _iterator9.s();\n              case 3:\n                if ((_step9 = _iterator9.n()).done) {\n                  _context7.next = 9;\n                  break;\n                }\n                _step9$value = _slicedToArray(_step9.value, 2), key = _step9$value[0], value2 = _step9$value[1];\n                _context7.next = 7;\n                return [key, value2.value];\n              case 7:\n                _context7.next = 3;\n                break;\n              case 9:\n                _context7.next = 14;\n                break;\n              case 11:\n                _context7.prev = 11;\n                _context7.t0 = _context7[\"catch\"](1);\n                _iterator9.e(_context7.t0);\n              case 14:\n                _context7.prev = 14;\n                _iterator9.f();\n                return _context7.finish(14);\n              case 17:\n              case \"end\":\n                return _context7.stop();\n            }\n          }, entriesAscending, this, [[1, 11, 14, 17]]);\n        })\n      }, {\n        key: \"size\",\n        get: function get() {\n          if (!this._size) {\n            return this.oldCache.size;\n          }\n          var oldCacheSize = 0;\n          var _iterator10 = _createForOfIteratorHelper(this.oldCache.keys()),\n            _step10;\n          try {\n            for (_iterator10.s(); !(_step10 = _iterator10.n()).done;) {\n              var key = _step10.value;\n              if (!this.cache.has(key)) {\n                oldCacheSize++;\n              }\n            }\n          } catch (err) {\n            _iterator10.e(err);\n          } finally {\n            _iterator10.f();\n          }\n          return Math.min(this._size + oldCacheSize, this.maxSize);\n        }\n      }]);\n    }();\n    module.exports = QuickLRU;\n  }\n});\n\n// node_modules/tailwindcss/src/value-parser/parse.js\nvar require_parse = __commonJS({\n  'node_modules/tailwindcss/src/value-parser/parse.js': function node_modules_tailwindcss_src_valueParser_parseJs(exports, module) {\n    var openParentheses = '('.charCodeAt(0);\n    var closeParentheses = ')'.charCodeAt(0);\n    var singleQuote = \"'\".charCodeAt(0);\n    var doubleQuote = '\"'.charCodeAt(0);\n    var backslash = '\\\\'.charCodeAt(0);\n    var slash = '/'.charCodeAt(0);\n    var comma = ','.charCodeAt(0);\n    var colon = ':'.charCodeAt(0);\n    var star = '*'.charCodeAt(0);\n    var uLower = 'u'.charCodeAt(0);\n    var uUpper = 'U'.charCodeAt(0);\n    var plus = '+'.charCodeAt(0);\n    var isUnicodeRange = /^[a-f0-9?-]+$/i;\n    module.exports = function (input) {\n      var tokens = [];\n      var value2 = input;\n      var next, quote, prev, token, escape2, escapePos, whitespacePos, parenthesesOpenPos;\n      var pos = 0;\n      var code = value2.charCodeAt(pos);\n      var max2 = value2.length;\n      var stack = [{\n        nodes: tokens\n      }];\n      var balanced = 0;\n      var parent;\n      var name = '';\n      var before = '';\n      var after = '';\n      while (pos < max2) {\n        if (code <= 32) {\n          next = pos;\n          do {\n            next += 1;\n            code = value2.charCodeAt(next);\n          } while (code <= 32);\n          token = value2.slice(pos, next);\n          prev = tokens[tokens.length - 1];\n          if (code === closeParentheses && balanced) {\n            after = token;\n          } else if (prev && prev.type === 'div') {\n            prev.after = token;\n            prev.sourceEndIndex += token.length;\n          } else if (code === comma || code === colon || code === slash && value2.charCodeAt(next + 1) !== star && (!parent || parent && parent.type === 'function' && false)) {\n            before = token;\n          } else {\n            tokens.push({\n              type: 'space',\n              sourceIndex: pos,\n              sourceEndIndex: next,\n              value: token\n            });\n          }\n          pos = next;\n        } else if (code === singleQuote || code === doubleQuote) {\n          next = pos;\n          quote = code === singleQuote ? \"'\" : '\"';\n          token = {\n            type: 'string',\n            sourceIndex: pos,\n            quote: quote\n          };\n          do {\n            escape2 = false;\n            next = value2.indexOf(quote, next + 1);\n            if (~next) {\n              escapePos = next;\n              while (value2.charCodeAt(escapePos - 1) === backslash) {\n                escapePos -= 1;\n                escape2 = !escape2;\n              }\n            } else {\n              value2 += quote;\n              next = value2.length - 1;\n              token.unclosed = true;\n            }\n          } while (escape2);\n          token.value = value2.slice(pos + 1, next);\n          token.sourceEndIndex = token.unclosed ? next : next + 1;\n          tokens.push(token);\n          pos = next + 1;\n          code = value2.charCodeAt(pos);\n        } else if (code === slash && value2.charCodeAt(pos + 1) === star) {\n          next = value2.indexOf('*/', pos);\n          token = {\n            type: 'comment',\n            sourceIndex: pos,\n            sourceEndIndex: next + 2\n          };\n          if (next === -1) {\n            token.unclosed = true;\n            next = value2.length;\n            token.sourceEndIndex = next;\n          }\n          token.value = value2.slice(pos + 2, next);\n          tokens.push(token);\n          pos = next + 2;\n          code = value2.charCodeAt(pos);\n        } else if ((code === slash || code === star) && parent && parent.type === 'function' && true) {\n          token = value2[pos];\n          tokens.push({\n            type: 'word',\n            sourceIndex: pos - before.length,\n            sourceEndIndex: pos + token.length,\n            value: token\n          });\n          pos += 1;\n          code = value2.charCodeAt(pos);\n        } else if (code === slash || code === comma || code === colon) {\n          token = value2[pos];\n          tokens.push({\n            type: 'div',\n            sourceIndex: pos - before.length,\n            sourceEndIndex: pos + token.length,\n            value: token,\n            before: before,\n            after: ''\n          });\n          before = '';\n          pos += 1;\n          code = value2.charCodeAt(pos);\n        } else if (openParentheses === code) {\n          next = pos;\n          do {\n            next += 1;\n            code = value2.charCodeAt(next);\n          } while (code <= 32);\n          parenthesesOpenPos = pos;\n          token = {\n            type: 'function',\n            sourceIndex: pos - name.length,\n            value: name,\n            before: value2.slice(parenthesesOpenPos + 1, next)\n          };\n          pos = next;\n          if (name === 'url' && code !== singleQuote && code !== doubleQuote) {\n            next -= 1;\n            do {\n              escape2 = false;\n              next = value2.indexOf(')', next + 1);\n              if (~next) {\n                escapePos = next;\n                while (value2.charCodeAt(escapePos - 1) === backslash) {\n                  escapePos -= 1;\n                  escape2 = !escape2;\n                }\n              } else {\n                value2 += ')';\n                next = value2.length - 1;\n                token.unclosed = true;\n              }\n            } while (escape2);\n            whitespacePos = next;\n            do {\n              whitespacePos -= 1;\n              code = value2.charCodeAt(whitespacePos);\n            } while (code <= 32);\n            if (parenthesesOpenPos < whitespacePos) {\n              if (pos !== whitespacePos + 1) {\n                token.nodes = [{\n                  type: 'word',\n                  sourceIndex: pos,\n                  sourceEndIndex: whitespacePos + 1,\n                  value: value2.slice(pos, whitespacePos + 1)\n                }];\n              } else {\n                token.nodes = [];\n              }\n              if (token.unclosed && whitespacePos + 1 !== next) {\n                token.after = '';\n                token.nodes.push({\n                  type: 'space',\n                  sourceIndex: whitespacePos + 1,\n                  sourceEndIndex: next,\n                  value: value2.slice(whitespacePos + 1, next)\n                });\n              } else {\n                token.after = value2.slice(whitespacePos + 1, next);\n                token.sourceEndIndex = next;\n              }\n            } else {\n              token.after = '';\n              token.nodes = [];\n            }\n            pos = next + 1;\n            token.sourceEndIndex = token.unclosed ? next : pos;\n            code = value2.charCodeAt(pos);\n            tokens.push(token);\n          } else {\n            balanced += 1;\n            token.after = '';\n            token.sourceEndIndex = pos + 1;\n            tokens.push(token);\n            stack.push(token);\n            tokens = token.nodes = [];\n            parent = token;\n          }\n          name = '';\n        } else if (closeParentheses === code && balanced) {\n          pos += 1;\n          code = value2.charCodeAt(pos);\n          parent.after = after;\n          parent.sourceEndIndex += after.length;\n          after = '';\n          balanced -= 1;\n          stack[stack.length - 1].sourceEndIndex = pos;\n          stack.pop();\n          parent = stack[balanced];\n          tokens = parent.nodes;\n        } else {\n          next = pos;\n          do {\n            if (code === backslash) {\n              next += 1;\n            }\n            next += 1;\n            code = value2.charCodeAt(next);\n          } while (next < max2 && !(code <= 32 || code === singleQuote || code === doubleQuote || code === comma || code === colon || code === slash || code === openParentheses || code === star && parent && parent.type === 'function' && true || code === slash && parent.type === 'function' && true || code === closeParentheses && balanced));\n          token = value2.slice(pos, next);\n          if (openParentheses === code) {\n            name = token;\n          } else if ((uLower === token.charCodeAt(0) || uUpper === token.charCodeAt(0)) && plus === token.charCodeAt(1) && isUnicodeRange.test(token.slice(2))) {\n            tokens.push({\n              type: 'unicode-range',\n              sourceIndex: pos,\n              sourceEndIndex: next,\n              value: token\n            });\n          } else {\n            tokens.push({\n              type: 'word',\n              sourceIndex: pos,\n              sourceEndIndex: next,\n              value: token\n            });\n          }\n          pos = next;\n        }\n      }\n      for (pos = stack.length - 1; pos; pos -= 1) {\n        stack[pos].unclosed = true;\n        stack[pos].sourceEndIndex = value2.length;\n      }\n      return stack[0].nodes;\n    };\n  }\n});\n\n// node_modules/tailwindcss/src/value-parser/walk.js\nvar require_walk = __commonJS({\n  'node_modules/tailwindcss/src/value-parser/walk.js': function node_modules_tailwindcss_src_valueParser_walkJs(exports, module) {\n    module.exports = function walk(nodes, cb, bubble) {\n      var i, max2, node, result;\n      for (i = 0, max2 = nodes.length; i < max2; i += 1) {\n        node = nodes[i];\n        if (!bubble) {\n          result = cb(node, i, nodes);\n        }\n        if (result !== false && node.type === 'function' && Array.isArray(node.nodes)) {\n          walk(node.nodes, cb, bubble);\n        }\n        if (bubble) {\n          cb(node, i, nodes);\n        }\n      }\n    };\n  }\n});\n\n// node_modules/tailwindcss/src/value-parser/stringify.js\nvar require_stringify = __commonJS({\n  'node_modules/tailwindcss/src/value-parser/stringify.js': function node_modules_tailwindcss_src_valueParser_stringifyJs(exports, module) {\n    function stringifyNode(node, custom) {\n      var type = node.type;\n      var value2 = node.value;\n      var buf;\n      var customResult;\n      if (custom && (customResult = custom(node)) !== void 0) {\n        return customResult;\n      } else if (type === 'word' || type === 'space') {\n        return value2;\n      } else if (type === 'string') {\n        buf = node.quote || '';\n        return buf + value2 + (node.unclosed ? '' : buf);\n      } else if (type === 'comment') {\n        return '/*' + value2 + (node.unclosed ? '' : '*/');\n      } else if (type === 'div') {\n        return (node.before || '') + value2 + (node.after || '');\n      } else if (Array.isArray(node.nodes)) {\n        buf = stringify(node.nodes, custom);\n        if (type !== 'function') {\n          return buf;\n        }\n        return value2 + '(' + (node.before || '') + buf + (node.after || '') + (node.unclosed ? '' : ')');\n      }\n      return value2;\n    }\n    function stringify(nodes, custom) {\n      var result, i;\n      if (Array.isArray(nodes)) {\n        result = '';\n        for (i = nodes.length - 1; ~i; i -= 1) {\n          result = stringifyNode(nodes[i], custom) + result;\n        }\n        return result;\n      }\n      return stringifyNode(nodes, custom);\n    }\n    module.exports = stringify;\n  }\n});\n\n// node_modules/tailwindcss/src/value-parser/unit.js\nvar require_unit = __commonJS({\n  'node_modules/tailwindcss/src/value-parser/unit.js': function node_modules_tailwindcss_src_valueParser_unitJs(exports, module) {\n    var minus = '-'.charCodeAt(0);\n    var plus = '+'.charCodeAt(0);\n    var dot = '.'.charCodeAt(0);\n    var exp = 'e'.charCodeAt(0);\n    var EXP = 'E'.charCodeAt(0);\n    function likeNumber(value2) {\n      var code = value2.charCodeAt(0);\n      var nextCode;\n      if (code === plus || code === minus) {\n        nextCode = value2.charCodeAt(1);\n        if (nextCode >= 48 && nextCode <= 57) {\n          return true;\n        }\n        var nextNextCode = value2.charCodeAt(2);\n        if (nextCode === dot && nextNextCode >= 48 && nextNextCode <= 57) {\n          return true;\n        }\n        return false;\n      }\n      if (code === dot) {\n        nextCode = value2.charCodeAt(1);\n        if (nextCode >= 48 && nextCode <= 57) {\n          return true;\n        }\n        return false;\n      }\n      if (code >= 48 && code <= 57) {\n        return true;\n      }\n      return false;\n    }\n    module.exports = function (value2) {\n      var pos = 0;\n      var length2 = value2.length;\n      var code;\n      var nextCode;\n      var nextNextCode;\n      if (length2 === 0 || !likeNumber(value2)) {\n        return false;\n      }\n      code = value2.charCodeAt(pos);\n      if (code === plus || code === minus) {\n        pos++;\n      }\n      while (pos < length2) {\n        code = value2.charCodeAt(pos);\n        if (code < 48 || code > 57) {\n          break;\n        }\n        pos += 1;\n      }\n      code = value2.charCodeAt(pos);\n      nextCode = value2.charCodeAt(pos + 1);\n      if (code === dot && nextCode >= 48 && nextCode <= 57) {\n        pos += 2;\n        while (pos < length2) {\n          code = value2.charCodeAt(pos);\n          if (code < 48 || code > 57) {\n            break;\n          }\n          pos += 1;\n        }\n      }\n      code = value2.charCodeAt(pos);\n      nextCode = value2.charCodeAt(pos + 1);\n      nextNextCode = value2.charCodeAt(pos + 2);\n      if ((code === exp || code === EXP) && (nextCode >= 48 && nextCode <= 57 || (nextCode === plus || nextCode === minus) && nextNextCode >= 48 && nextNextCode <= 57)) {\n        pos += nextCode === plus || nextCode === minus ? 3 : 2;\n        while (pos < length2) {\n          code = value2.charCodeAt(pos);\n          if (code < 48 || code > 57) {\n            break;\n          }\n          pos += 1;\n        }\n      }\n      return {\n        number: value2.slice(0, pos),\n        unit: value2.slice(pos)\n      };\n    };\n  }\n});\n\n// node_modules/tailwindcss/src/value-parser/index.js\nvar require_value_parser = __commonJS({\n  'node_modules/tailwindcss/src/value-parser/index.js': function node_modules_tailwindcss_src_valueParser_indexJs(exports, module) {\n    var parse = require_parse();\n    var walk = require_walk();\n    var stringify = require_stringify();\n    function ValueParser(value2) {\n      if (this instanceof ValueParser) {\n        this.nodes = parse(value2);\n        return this;\n      }\n      return new ValueParser(value2);\n    }\n    ValueParser.prototype.toString = function () {\n      return Array.isArray(this.nodes) ? stringify(this.nodes) : '';\n    };\n    ValueParser.prototype.walk = function (cb, bubble) {\n      walk(this.nodes, cb, bubble);\n      return this;\n    };\n    ValueParser.unit = require_unit();\n    ValueParser.walk = walk;\n    ValueParser.stringify = stringify;\n    module.exports = ValueParser;\n  }\n});\n\n// node_modules/tailwindcss/stubs/config.full.js\nvar require_config_full = __commonJS({\n  'node_modules/tailwindcss/stubs/config.full.js': function node_modules_tailwindcss_stubs_configFullJs(exports, module) {\n    module.exports = {\n      content: [],\n      presets: [],\n      darkMode: 'media',\n      theme: {\n        accentColor: function accentColor(_ref2) {\n          var theme = _ref2.theme;\n          return _objectSpread(_objectSpread({}, theme('colors')), {}, {\n            auto: 'auto'\n          });\n        },\n        animation: {\n          none: 'none',\n          spin: 'spin 1s linear infinite',\n          ping: 'ping 1s cubic-bezier(0, 0, 0.2, 1) infinite',\n          pulse: 'pulse 2s cubic-bezier(0.4, 0, 0.6, 1) infinite',\n          bounce: 'bounce 1s infinite'\n        },\n        aria: {\n          busy: 'busy=\"true\"',\n          checked: 'checked=\"true\"',\n          disabled: 'disabled=\"true\"',\n          expanded: 'expanded=\"true\"',\n          hidden: 'hidden=\"true\"',\n          pressed: 'pressed=\"true\"',\n          readonly: 'readonly=\"true\"',\n          required: 'required=\"true\"',\n          selected: 'selected=\"true\"'\n        },\n        aspectRatio: {\n          auto: 'auto',\n          square: '1 / 1',\n          video: '16 / 9'\n        },\n        backdropBlur: function backdropBlur(_ref3) {\n          var theme = _ref3.theme;\n          return theme('blur');\n        },\n        backdropBrightness: function backdropBrightness(_ref4) {\n          var theme = _ref4.theme;\n          return theme('brightness');\n        },\n        backdropContrast: function backdropContrast(_ref5) {\n          var theme = _ref5.theme;\n          return theme('contrast');\n        },\n        backdropGrayscale: function backdropGrayscale(_ref6) {\n          var theme = _ref6.theme;\n          return theme('grayscale');\n        },\n        backdropHueRotate: function backdropHueRotate(_ref7) {\n          var theme = _ref7.theme;\n          return theme('hueRotate');\n        },\n        backdropInvert: function backdropInvert(_ref8) {\n          var theme = _ref8.theme;\n          return theme('invert');\n        },\n        backdropOpacity: function backdropOpacity(_ref9) {\n          var theme = _ref9.theme;\n          return theme('opacity');\n        },\n        backdropSaturate: function backdropSaturate(_ref10) {\n          var theme = _ref10.theme;\n          return theme('saturate');\n        },\n        backdropSepia: function backdropSepia(_ref11) {\n          var theme = _ref11.theme;\n          return theme('sepia');\n        },\n        backgroundColor: function backgroundColor(_ref12) {\n          var theme = _ref12.theme;\n          return theme('colors');\n        },\n        backgroundImage: {\n          none: 'none',\n          'gradient-to-t': 'linear-gradient(to top, var(--tw-gradient-stops))',\n          'gradient-to-tr': 'linear-gradient(to top right, var(--tw-gradient-stops))',\n          'gradient-to-r': 'linear-gradient(to right, var(--tw-gradient-stops))',\n          'gradient-to-br': 'linear-gradient(to bottom right, var(--tw-gradient-stops))',\n          'gradient-to-b': 'linear-gradient(to bottom, var(--tw-gradient-stops))',\n          'gradient-to-bl': 'linear-gradient(to bottom left, var(--tw-gradient-stops))',\n          'gradient-to-l': 'linear-gradient(to left, var(--tw-gradient-stops))',\n          'gradient-to-tl': 'linear-gradient(to top left, var(--tw-gradient-stops))'\n        },\n        backgroundOpacity: function backgroundOpacity(_ref13) {\n          var theme = _ref13.theme;\n          return theme('opacity');\n        },\n        backgroundPosition: {\n          bottom: 'bottom',\n          center: 'center',\n          left: 'left',\n          'left-bottom': 'left bottom',\n          'left-top': 'left top',\n          right: 'right',\n          'right-bottom': 'right bottom',\n          'right-top': 'right top',\n          top: 'top'\n        },\n        backgroundSize: {\n          auto: 'auto',\n          cover: 'cover',\n          contain: 'contain'\n        },\n        blur: {\n          0: '0',\n          none: '0',\n          sm: '4px',\n          DEFAULT: '8px',\n          md: '12px',\n          lg: '16px',\n          xl: '24px',\n          '2xl': '40px',\n          '3xl': '64px'\n        },\n        borderColor: function borderColor(_ref14) {\n          var theme = _ref14.theme;\n          return _objectSpread(_objectSpread({}, theme('colors')), {}, {\n            DEFAULT: theme('colors.gray.200', 'currentColor')\n          });\n        },\n        borderOpacity: function borderOpacity(_ref15) {\n          var theme = _ref15.theme;\n          return theme('opacity');\n        },\n        borderRadius: {\n          none: '0px',\n          sm: '0.125rem',\n          DEFAULT: '0.25rem',\n          md: '0.375rem',\n          lg: '0.5rem',\n          xl: '0.75rem',\n          '2xl': '1rem',\n          '3xl': '1.5rem',\n          full: '9999px'\n        },\n        borderSpacing: function borderSpacing(_ref16) {\n          var theme = _ref16.theme;\n          return _objectSpread({}, theme('spacing'));\n        },\n        borderWidth: {\n          DEFAULT: '1px',\n          0: '0px',\n          2: '2px',\n          4: '4px',\n          8: '8px'\n        },\n        boxShadow: {\n          sm: '0 1px 2px 0 rgb(0 0 0 / 0.05)',\n          DEFAULT: '0 1px 3px 0 rgb(0 0 0 / 0.1), 0 1px 2px -1px rgb(0 0 0 / 0.1)',\n          md: '0 4px 6px -1px rgb(0 0 0 / 0.1), 0 2px 4px -2px rgb(0 0 0 / 0.1)',\n          lg: '0 10px 15px -3px rgb(0 0 0 / 0.1), 0 4px 6px -4px rgb(0 0 0 / 0.1)',\n          xl: '0 20px 25px -5px rgb(0 0 0 / 0.1), 0 8px 10px -6px rgb(0 0 0 / 0.1)',\n          '2xl': '0 25px 50px -12px rgb(0 0 0 / 0.25)',\n          inner: 'inset 0 2px 4px 0 rgb(0 0 0 / 0.05)',\n          none: 'none'\n        },\n        boxShadowColor: function boxShadowColor(_ref17) {\n          var theme = _ref17.theme;\n          return theme('colors');\n        },\n        brightness: {\n          0: '0',\n          50: '.5',\n          75: '.75',\n          90: '.9',\n          95: '.95',\n          100: '1',\n          105: '1.05',\n          110: '1.1',\n          125: '1.25',\n          150: '1.5',\n          200: '2'\n        },\n        caretColor: function caretColor(_ref18) {\n          var theme = _ref18.theme;\n          return theme('colors');\n        },\n        colors: function colors(_ref19) {\n          var _colors = _ref19.colors;\n          return {\n            inherit: _colors.inherit,\n            current: _colors.current,\n            transparent: _colors.transparent,\n            black: _colors.black,\n            white: _colors.white,\n            slate: _colors.slate,\n            gray: _colors.gray,\n            zinc: _colors.zinc,\n            neutral: _colors.neutral,\n            stone: _colors.stone,\n            red: _colors.red,\n            orange: _colors.orange,\n            amber: _colors.amber,\n            yellow: _colors.yellow,\n            lime: _colors.lime,\n            green: _colors.green,\n            emerald: _colors.emerald,\n            teal: _colors.teal,\n            cyan: _colors.cyan,\n            sky: _colors.sky,\n            blue: _colors.blue,\n            indigo: _colors.indigo,\n            violet: _colors.violet,\n            purple: _colors.purple,\n            fuchsia: _colors.fuchsia,\n            pink: _colors.pink,\n            rose: _colors.rose\n          };\n        },\n        columns: {\n          auto: 'auto',\n          1: '1',\n          2: '2',\n          3: '3',\n          4: '4',\n          5: '5',\n          6: '6',\n          7: '7',\n          8: '8',\n          9: '9',\n          10: '10',\n          11: '11',\n          12: '12',\n          '3xs': '16rem',\n          '2xs': '18rem',\n          xs: '20rem',\n          sm: '24rem',\n          md: '28rem',\n          lg: '32rem',\n          xl: '36rem',\n          '2xl': '42rem',\n          '3xl': '48rem',\n          '4xl': '56rem',\n          '5xl': '64rem',\n          '6xl': '72rem',\n          '7xl': '80rem'\n        },\n        container: {},\n        content: {\n          none: 'none'\n        },\n        contrast: {\n          0: '0',\n          50: '.5',\n          75: '.75',\n          100: '1',\n          125: '1.25',\n          150: '1.5',\n          200: '2'\n        },\n        cursor: {\n          auto: 'auto',\n          \"default\": 'default',\n          pointer: 'pointer',\n          wait: 'wait',\n          text: 'text',\n          move: 'move',\n          help: 'help',\n          'not-allowed': 'not-allowed',\n          none: 'none',\n          'context-menu': 'context-menu',\n          progress: 'progress',\n          cell: 'cell',\n          crosshair: 'crosshair',\n          'vertical-text': 'vertical-text',\n          alias: 'alias',\n          copy: 'copy',\n          'no-drop': 'no-drop',\n          grab: 'grab',\n          grabbing: 'grabbing',\n          'all-scroll': 'all-scroll',\n          'col-resize': 'col-resize',\n          'row-resize': 'row-resize',\n          'n-resize': 'n-resize',\n          'e-resize': 'e-resize',\n          's-resize': 's-resize',\n          'w-resize': 'w-resize',\n          'ne-resize': 'ne-resize',\n          'nw-resize': 'nw-resize',\n          'se-resize': 'se-resize',\n          'sw-resize': 'sw-resize',\n          'ew-resize': 'ew-resize',\n          'ns-resize': 'ns-resize',\n          'nesw-resize': 'nesw-resize',\n          'nwse-resize': 'nwse-resize',\n          'zoom-in': 'zoom-in',\n          'zoom-out': 'zoom-out'\n        },\n        divideColor: function divideColor(_ref20) {\n          var theme = _ref20.theme;\n          return theme('borderColor');\n        },\n        divideOpacity: function divideOpacity(_ref21) {\n          var theme = _ref21.theme;\n          return theme('borderOpacity');\n        },\n        divideWidth: function divideWidth(_ref22) {\n          var theme = _ref22.theme;\n          return theme('borderWidth');\n        },\n        dropShadow: {\n          sm: '0 1px 1px rgb(0 0 0 / 0.05)',\n          DEFAULT: ['0 1px 2px rgb(0 0 0 / 0.1)', '0 1px 1px rgb(0 0 0 / 0.06)'],\n          md: ['0 4px 3px rgb(0 0 0 / 0.07)', '0 2px 2px rgb(0 0 0 / 0.06)'],\n          lg: ['0 10px 8px rgb(0 0 0 / 0.04)', '0 4px 3px rgb(0 0 0 / 0.1)'],\n          xl: ['0 20px 13px rgb(0 0 0 / 0.03)', '0 8px 5px rgb(0 0 0 / 0.08)'],\n          '2xl': '0 25px 25px rgb(0 0 0 / 0.15)',\n          none: '0 0 #0000'\n        },\n        fill: function fill(_ref23) {\n          var theme = _ref23.theme;\n          return _objectSpread({\n            none: 'none'\n          }, theme('colors'));\n        },\n        flex: {\n          1: '1 1 0%',\n          auto: '1 1 auto',\n          initial: '0 1 auto',\n          none: 'none'\n        },\n        flexBasis: function flexBasis(_ref24) {\n          var theme = _ref24.theme;\n          return _objectSpread(_objectSpread({\n            auto: 'auto'\n          }, theme('spacing')), {}, {\n            '1/2': '50%',\n            '1/3': '33.333333%',\n            '2/3': '66.666667%',\n            '1/4': '25%',\n            '2/4': '50%',\n            '3/4': '75%',\n            '1/5': '20%',\n            '2/5': '40%',\n            '3/5': '60%',\n            '4/5': '80%',\n            '1/6': '16.666667%',\n            '2/6': '33.333333%',\n            '3/6': '50%',\n            '4/6': '66.666667%',\n            '5/6': '83.333333%',\n            '1/12': '8.333333%',\n            '2/12': '16.666667%',\n            '3/12': '25%',\n            '4/12': '33.333333%',\n            '5/12': '41.666667%',\n            '6/12': '50%',\n            '7/12': '58.333333%',\n            '8/12': '66.666667%',\n            '9/12': '75%',\n            '10/12': '83.333333%',\n            '11/12': '91.666667%',\n            full: '100%'\n          });\n        },\n        flexGrow: {\n          0: '0',\n          DEFAULT: '1'\n        },\n        flexShrink: {\n          0: '0',\n          DEFAULT: '1'\n        },\n        fontFamily: {\n          sans: ['ui-sans-serif', 'system-ui', 'sans-serif', '\"Apple Color Emoji\"', '\"Segoe UI Emoji\"', '\"Segoe UI Symbol\"', '\"Noto Color Emoji\"'],\n          serif: ['ui-serif', 'Georgia', 'Cambria', '\"Times New Roman\"', 'Times', 'serif'],\n          mono: ['ui-monospace', 'SFMono-Regular', 'Menlo', 'Monaco', 'Consolas', '\"Liberation Mono\"', '\"Courier New\"', 'monospace']\n        },\n        fontSize: {\n          xs: ['0.75rem', {\n            lineHeight: '1rem'\n          }],\n          sm: ['0.875rem', {\n            lineHeight: '1.25rem'\n          }],\n          base: ['1rem', {\n            lineHeight: '1.5rem'\n          }],\n          lg: ['1.125rem', {\n            lineHeight: '1.75rem'\n          }],\n          xl: ['1.25rem', {\n            lineHeight: '1.75rem'\n          }],\n          '2xl': ['1.5rem', {\n            lineHeight: '2rem'\n          }],\n          '3xl': ['1.875rem', {\n            lineHeight: '2.25rem'\n          }],\n          '4xl': ['2.25rem', {\n            lineHeight: '2.5rem'\n          }],\n          '5xl': ['3rem', {\n            lineHeight: '1'\n          }],\n          '6xl': ['3.75rem', {\n            lineHeight: '1'\n          }],\n          '7xl': ['4.5rem', {\n            lineHeight: '1'\n          }],\n          '8xl': ['6rem', {\n            lineHeight: '1'\n          }],\n          '9xl': ['8rem', {\n            lineHeight: '1'\n          }]\n        },\n        fontWeight: {\n          thin: '100',\n          extralight: '200',\n          light: '300',\n          normal: '400',\n          medium: '500',\n          semibold: '600',\n          bold: '700',\n          extrabold: '800',\n          black: '900'\n        },\n        gap: function gap(_ref25) {\n          var theme = _ref25.theme;\n          return theme('spacing');\n        },\n        gradientColorStops: function gradientColorStops(_ref26) {\n          var theme = _ref26.theme;\n          return theme('colors');\n        },\n        gradientColorStopPositions: {\n          '0%': '0%',\n          '5%': '5%',\n          '10%': '10%',\n          '15%': '15%',\n          '20%': '20%',\n          '25%': '25%',\n          '30%': '30%',\n          '35%': '35%',\n          '40%': '40%',\n          '45%': '45%',\n          '50%': '50%',\n          '55%': '55%',\n          '60%': '60%',\n          '65%': '65%',\n          '70%': '70%',\n          '75%': '75%',\n          '80%': '80%',\n          '85%': '85%',\n          '90%': '90%',\n          '95%': '95%',\n          '100%': '100%'\n        },\n        grayscale: {\n          0: '0',\n          DEFAULT: '100%'\n        },\n        gridAutoColumns: {\n          auto: 'auto',\n          min: 'min-content',\n          max: 'max-content',\n          fr: 'minmax(0, 1fr)'\n        },\n        gridAutoRows: {\n          auto: 'auto',\n          min: 'min-content',\n          max: 'max-content',\n          fr: 'minmax(0, 1fr)'\n        },\n        gridColumn: {\n          auto: 'auto',\n          'span-1': 'span 1 / span 1',\n          'span-2': 'span 2 / span 2',\n          'span-3': 'span 3 / span 3',\n          'span-4': 'span 4 / span 4',\n          'span-5': 'span 5 / span 5',\n          'span-6': 'span 6 / span 6',\n          'span-7': 'span 7 / span 7',\n          'span-8': 'span 8 / span 8',\n          'span-9': 'span 9 / span 9',\n          'span-10': 'span 10 / span 10',\n          'span-11': 'span 11 / span 11',\n          'span-12': 'span 12 / span 12',\n          'span-full': '1 / -1'\n        },\n        gridColumnEnd: {\n          auto: 'auto',\n          1: '1',\n          2: '2',\n          3: '3',\n          4: '4',\n          5: '5',\n          6: '6',\n          7: '7',\n          8: '8',\n          9: '9',\n          10: '10',\n          11: '11',\n          12: '12',\n          13: '13'\n        },\n        gridColumnStart: {\n          auto: 'auto',\n          1: '1',\n          2: '2',\n          3: '3',\n          4: '4',\n          5: '5',\n          6: '6',\n          7: '7',\n          8: '8',\n          9: '9',\n          10: '10',\n          11: '11',\n          12: '12',\n          13: '13'\n        },\n        gridRow: {\n          auto: 'auto',\n          'span-1': 'span 1 / span 1',\n          'span-2': 'span 2 / span 2',\n          'span-3': 'span 3 / span 3',\n          'span-4': 'span 4 / span 4',\n          'span-5': 'span 5 / span 5',\n          'span-6': 'span 6 / span 6',\n          'span-7': 'span 7 / span 7',\n          'span-8': 'span 8 / span 8',\n          'span-9': 'span 9 / span 9',\n          'span-10': 'span 10 / span 10',\n          'span-11': 'span 11 / span 11',\n          'span-12': 'span 12 / span 12',\n          'span-full': '1 / -1'\n        },\n        gridRowEnd: {\n          auto: 'auto',\n          1: '1',\n          2: '2',\n          3: '3',\n          4: '4',\n          5: '5',\n          6: '6',\n          7: '7',\n          8: '8',\n          9: '9',\n          10: '10',\n          11: '11',\n          12: '12',\n          13: '13'\n        },\n        gridRowStart: {\n          auto: 'auto',\n          1: '1',\n          2: '2',\n          3: '3',\n          4: '4',\n          5: '5',\n          6: '6',\n          7: '7',\n          8: '8',\n          9: '9',\n          10: '10',\n          11: '11',\n          12: '12',\n          13: '13'\n        },\n        gridTemplateColumns: {\n          none: 'none',\n          subgrid: 'subgrid',\n          1: 'repeat(1, minmax(0, 1fr))',\n          2: 'repeat(2, minmax(0, 1fr))',\n          3: 'repeat(3, minmax(0, 1fr))',\n          4: 'repeat(4, minmax(0, 1fr))',\n          5: 'repeat(5, minmax(0, 1fr))',\n          6: 'repeat(6, minmax(0, 1fr))',\n          7: 'repeat(7, minmax(0, 1fr))',\n          8: 'repeat(8, minmax(0, 1fr))',\n          9: 'repeat(9, minmax(0, 1fr))',\n          10: 'repeat(10, minmax(0, 1fr))',\n          11: 'repeat(11, minmax(0, 1fr))',\n          12: 'repeat(12, minmax(0, 1fr))'\n        },\n        gridTemplateRows: {\n          none: 'none',\n          subgrid: 'subgrid',\n          1: 'repeat(1, minmax(0, 1fr))',\n          2: 'repeat(2, minmax(0, 1fr))',\n          3: 'repeat(3, minmax(0, 1fr))',\n          4: 'repeat(4, minmax(0, 1fr))',\n          5: 'repeat(5, minmax(0, 1fr))',\n          6: 'repeat(6, minmax(0, 1fr))',\n          7: 'repeat(7, minmax(0, 1fr))',\n          8: 'repeat(8, minmax(0, 1fr))',\n          9: 'repeat(9, minmax(0, 1fr))',\n          10: 'repeat(10, minmax(0, 1fr))',\n          11: 'repeat(11, minmax(0, 1fr))',\n          12: 'repeat(12, minmax(0, 1fr))'\n        },\n        height: function height(_ref27) {\n          var theme = _ref27.theme;\n          return _objectSpread(_objectSpread({\n            auto: 'auto'\n          }, theme('spacing')), {}, {\n            '1/2': '50%',\n            '1/3': '33.333333%',\n            '2/3': '66.666667%',\n            '1/4': '25%',\n            '2/4': '50%',\n            '3/4': '75%',\n            '1/5': '20%',\n            '2/5': '40%',\n            '3/5': '60%',\n            '4/5': '80%',\n            '1/6': '16.666667%',\n            '2/6': '33.333333%',\n            '3/6': '50%',\n            '4/6': '66.666667%',\n            '5/6': '83.333333%',\n            full: '100%',\n            screen: '100vh',\n            svh: '100svh',\n            lvh: '100lvh',\n            dvh: '100dvh',\n            min: 'min-content',\n            max: 'max-content',\n            fit: 'fit-content'\n          });\n        },\n        hueRotate: {\n          0: '0deg',\n          15: '15deg',\n          30: '30deg',\n          60: '60deg',\n          90: '90deg',\n          180: '180deg'\n        },\n        inset: function inset(_ref28) {\n          var theme = _ref28.theme;\n          return _objectSpread(_objectSpread({\n            auto: 'auto'\n          }, theme('spacing')), {}, {\n            '1/2': '50%',\n            '1/3': '33.333333%',\n            '2/3': '66.666667%',\n            '1/4': '25%',\n            '2/4': '50%',\n            '3/4': '75%',\n            full: '100%'\n          });\n        },\n        invert: {\n          0: '0',\n          DEFAULT: '100%'\n        },\n        keyframes: {\n          spin: {\n            to: {\n              transform: 'rotate(360deg)'\n            }\n          },\n          ping: {\n            '75%, 100%': {\n              transform: 'scale(2)',\n              opacity: '0'\n            }\n          },\n          pulse: {\n            '50%': {\n              opacity: '.5'\n            }\n          },\n          bounce: {\n            '0%, 100%': {\n              transform: 'translateY(-25%)',\n              animationTimingFunction: 'cubic-bezier(0.8,0,1,1)'\n            },\n            '50%': {\n              transform: 'none',\n              animationTimingFunction: 'cubic-bezier(0,0,0.2,1)'\n            }\n          }\n        },\n        letterSpacing: {\n          tighter: '-0.05em',\n          tight: '-0.025em',\n          normal: '0em',\n          wide: '0.025em',\n          wider: '0.05em',\n          widest: '0.1em'\n        },\n        lineHeight: {\n          none: '1',\n          tight: '1.25',\n          snug: '1.375',\n          normal: '1.5',\n          relaxed: '1.625',\n          loose: '2',\n          3: '.75rem',\n          4: '1rem',\n          5: '1.25rem',\n          6: '1.5rem',\n          7: '1.75rem',\n          8: '2rem',\n          9: '2.25rem',\n          10: '2.5rem'\n        },\n        listStyleType: {\n          none: 'none',\n          disc: 'disc',\n          decimal: 'decimal'\n        },\n        listStyleImage: {\n          none: 'none'\n        },\n        margin: function margin(_ref29) {\n          var theme = _ref29.theme;\n          return _objectSpread({\n            auto: 'auto'\n          }, theme('spacing'));\n        },\n        lineClamp: {\n          1: '1',\n          2: '2',\n          3: '3',\n          4: '4',\n          5: '5',\n          6: '6'\n        },\n        maxHeight: function maxHeight(_ref30) {\n          var theme = _ref30.theme;\n          return _objectSpread(_objectSpread({}, theme('spacing')), {}, {\n            none: 'none',\n            full: '100%',\n            screen: '100vh',\n            svh: '100svh',\n            lvh: '100lvh',\n            dvh: '100dvh',\n            min: 'min-content',\n            max: 'max-content',\n            fit: 'fit-content'\n          });\n        },\n        maxWidth: function maxWidth(_ref31) {\n          var theme = _ref31.theme,\n            breakpoints = _ref31.breakpoints;\n          return _objectSpread(_objectSpread({}, theme('spacing')), {}, {\n            none: 'none',\n            xs: '20rem',\n            sm: '24rem',\n            md: '28rem',\n            lg: '32rem',\n            xl: '36rem',\n            '2xl': '42rem',\n            '3xl': '48rem',\n            '4xl': '56rem',\n            '5xl': '64rem',\n            '6xl': '72rem',\n            '7xl': '80rem',\n            full: '100%',\n            min: 'min-content',\n            max: 'max-content',\n            fit: 'fit-content',\n            prose: '65ch'\n          }, breakpoints(theme('screens')));\n        },\n        minHeight: function minHeight(_ref32) {\n          var theme = _ref32.theme;\n          return _objectSpread(_objectSpread({}, theme('spacing')), {}, {\n            full: '100%',\n            screen: '100vh',\n            svh: '100svh',\n            lvh: '100lvh',\n            dvh: '100dvh',\n            min: 'min-content',\n            max: 'max-content',\n            fit: 'fit-content'\n          });\n        },\n        minWidth: function minWidth(_ref33) {\n          var theme = _ref33.theme;\n          return _objectSpread(_objectSpread({}, theme('spacing')), {}, {\n            full: '100%',\n            min: 'min-content',\n            max: 'max-content',\n            fit: 'fit-content'\n          });\n        },\n        objectPosition: {\n          bottom: 'bottom',\n          center: 'center',\n          left: 'left',\n          'left-bottom': 'left bottom',\n          'left-top': 'left top',\n          right: 'right',\n          'right-bottom': 'right bottom',\n          'right-top': 'right top',\n          top: 'top'\n        },\n        opacity: {\n          0: '0',\n          5: '0.05',\n          10: '0.1',\n          15: '0.15',\n          20: '0.2',\n          25: '0.25',\n          30: '0.3',\n          35: '0.35',\n          40: '0.4',\n          45: '0.45',\n          50: '0.5',\n          55: '0.55',\n          60: '0.6',\n          65: '0.65',\n          70: '0.7',\n          75: '0.75',\n          80: '0.8',\n          85: '0.85',\n          90: '0.9',\n          95: '0.95',\n          100: '1'\n        },\n        order: {\n          first: '-9999',\n          last: '9999',\n          none: '0',\n          1: '1',\n          2: '2',\n          3: '3',\n          4: '4',\n          5: '5',\n          6: '6',\n          7: '7',\n          8: '8',\n          9: '9',\n          10: '10',\n          11: '11',\n          12: '12'\n        },\n        outlineColor: function outlineColor(_ref34) {\n          var theme = _ref34.theme;\n          return theme('colors');\n        },\n        outlineOffset: {\n          0: '0px',\n          1: '1px',\n          2: '2px',\n          4: '4px',\n          8: '8px'\n        },\n        outlineWidth: {\n          0: '0px',\n          1: '1px',\n          2: '2px',\n          4: '4px',\n          8: '8px'\n        },\n        padding: function padding(_ref35) {\n          var theme = _ref35.theme;\n          return theme('spacing');\n        },\n        placeholderColor: function placeholderColor(_ref36) {\n          var theme = _ref36.theme;\n          return theme('colors');\n        },\n        placeholderOpacity: function placeholderOpacity(_ref37) {\n          var theme = _ref37.theme;\n          return theme('opacity');\n        },\n        ringColor: function ringColor(_ref38) {\n          var theme = _ref38.theme;\n          return _objectSpread({\n            DEFAULT: theme('colors.blue.500', '#3b82f6')\n          }, theme('colors'));\n        },\n        ringOffsetColor: function ringOffsetColor(_ref39) {\n          var theme = _ref39.theme;\n          return theme('colors');\n        },\n        ringOffsetWidth: {\n          0: '0px',\n          1: '1px',\n          2: '2px',\n          4: '4px',\n          8: '8px'\n        },\n        ringOpacity: function ringOpacity(_ref40) {\n          var theme = _ref40.theme;\n          return _objectSpread({\n            DEFAULT: '0.5'\n          }, theme('opacity'));\n        },\n        ringWidth: {\n          DEFAULT: '3px',\n          0: '0px',\n          1: '1px',\n          2: '2px',\n          4: '4px',\n          8: '8px'\n        },\n        rotate: {\n          0: '0deg',\n          1: '1deg',\n          2: '2deg',\n          3: '3deg',\n          6: '6deg',\n          12: '12deg',\n          45: '45deg',\n          90: '90deg',\n          180: '180deg'\n        },\n        saturate: {\n          0: '0',\n          50: '.5',\n          100: '1',\n          150: '1.5',\n          200: '2'\n        },\n        scale: {\n          0: '0',\n          50: '.5',\n          75: '.75',\n          90: '.9',\n          95: '.95',\n          100: '1',\n          105: '1.05',\n          110: '1.1',\n          125: '1.25',\n          150: '1.5'\n        },\n        screens: {\n          sm: '640px',\n          md: '768px',\n          lg: '1024px',\n          xl: '1280px',\n          '2xl': '1536px'\n        },\n        scrollMargin: function scrollMargin(_ref41) {\n          var theme = _ref41.theme;\n          return _objectSpread({}, theme('spacing'));\n        },\n        scrollPadding: function scrollPadding(_ref42) {\n          var theme = _ref42.theme;\n          return theme('spacing');\n        },\n        sepia: {\n          0: '0',\n          DEFAULT: '100%'\n        },\n        skew: {\n          0: '0deg',\n          1: '1deg',\n          2: '2deg',\n          3: '3deg',\n          6: '6deg',\n          12: '12deg'\n        },\n        space: function space(_ref43) {\n          var theme = _ref43.theme;\n          return _objectSpread({}, theme('spacing'));\n        },\n        spacing: {\n          px: '1px',\n          0: '0px',\n          0.5: '0.125rem',\n          1: '0.25rem',\n          1.5: '0.375rem',\n          2: '0.5rem',\n          2.5: '0.625rem',\n          3: '0.75rem',\n          3.5: '0.875rem',\n          4: '1rem',\n          5: '1.25rem',\n          6: '1.5rem',\n          7: '1.75rem',\n          8: '2rem',\n          9: '2.25rem',\n          10: '2.5rem',\n          11: '2.75rem',\n          12: '3rem',\n          14: '3.5rem',\n          16: '4rem',\n          20: '5rem',\n          24: '6rem',\n          28: '7rem',\n          32: '8rem',\n          36: '9rem',\n          40: '10rem',\n          44: '11rem',\n          48: '12rem',\n          52: '13rem',\n          56: '14rem',\n          60: '15rem',\n          64: '16rem',\n          72: '18rem',\n          80: '20rem',\n          96: '24rem'\n        },\n        stroke: function stroke(_ref44) {\n          var theme = _ref44.theme;\n          return _objectSpread({\n            none: 'none'\n          }, theme('colors'));\n        },\n        strokeWidth: {\n          0: '0',\n          1: '1',\n          2: '2'\n        },\n        supports: {},\n        data: {},\n        textColor: function textColor(_ref45) {\n          var theme = _ref45.theme;\n          return theme('colors');\n        },\n        textDecorationColor: function textDecorationColor(_ref46) {\n          var theme = _ref46.theme;\n          return theme('colors');\n        },\n        textDecorationThickness: {\n          auto: 'auto',\n          'from-font': 'from-font',\n          0: '0px',\n          1: '1px',\n          2: '2px',\n          4: '4px',\n          8: '8px'\n        },\n        textIndent: function textIndent(_ref47) {\n          var theme = _ref47.theme;\n          return _objectSpread({}, theme('spacing'));\n        },\n        textOpacity: function textOpacity(_ref48) {\n          var theme = _ref48.theme;\n          return theme('opacity');\n        },\n        textUnderlineOffset: {\n          auto: 'auto',\n          0: '0px',\n          1: '1px',\n          2: '2px',\n          4: '4px',\n          8: '8px'\n        },\n        transformOrigin: {\n          center: 'center',\n          top: 'top',\n          'top-right': 'top right',\n          right: 'right',\n          'bottom-right': 'bottom right',\n          bottom: 'bottom',\n          'bottom-left': 'bottom left',\n          left: 'left',\n          'top-left': 'top left'\n        },\n        transitionDelay: {\n          0: '0s',\n          75: '75ms',\n          100: '100ms',\n          150: '150ms',\n          200: '200ms',\n          300: '300ms',\n          500: '500ms',\n          700: '700ms',\n          1e3: '1000ms'\n        },\n        transitionDuration: {\n          DEFAULT: '150ms',\n          0: '0s',\n          75: '75ms',\n          100: '100ms',\n          150: '150ms',\n          200: '200ms',\n          300: '300ms',\n          500: '500ms',\n          700: '700ms',\n          1e3: '1000ms'\n        },\n        transitionProperty: {\n          none: 'none',\n          all: 'all',\n          DEFAULT: 'color, background-color, border-color, text-decoration-color, fill, stroke, opacity, box-shadow, transform, filter, backdrop-filter',\n          colors: 'color, background-color, border-color, text-decoration-color, fill, stroke',\n          opacity: 'opacity',\n          shadow: 'box-shadow',\n          transform: 'transform'\n        },\n        transitionTimingFunction: {\n          DEFAULT: 'cubic-bezier(0.4, 0, 0.2, 1)',\n          linear: 'linear',\n          \"in\": 'cubic-bezier(0.4, 0, 1, 1)',\n          out: 'cubic-bezier(0, 0, 0.2, 1)',\n          'in-out': 'cubic-bezier(0.4, 0, 0.2, 1)'\n        },\n        translate: function translate(_ref49) {\n          var theme = _ref49.theme;\n          return _objectSpread(_objectSpread({}, theme('spacing')), {}, {\n            '1/2': '50%',\n            '1/3': '33.333333%',\n            '2/3': '66.666667%',\n            '1/4': '25%',\n            '2/4': '50%',\n            '3/4': '75%',\n            full: '100%'\n          });\n        },\n        size: function size(_ref50) {\n          var theme = _ref50.theme;\n          return _objectSpread(_objectSpread({\n            auto: 'auto'\n          }, theme('spacing')), {}, {\n            '1/2': '50%',\n            '1/3': '33.333333%',\n            '2/3': '66.666667%',\n            '1/4': '25%',\n            '2/4': '50%',\n            '3/4': '75%',\n            '1/5': '20%',\n            '2/5': '40%',\n            '3/5': '60%',\n            '4/5': '80%',\n            '1/6': '16.666667%',\n            '2/6': '33.333333%',\n            '3/6': '50%',\n            '4/6': '66.666667%',\n            '5/6': '83.333333%',\n            '1/12': '8.333333%',\n            '2/12': '16.666667%',\n            '3/12': '25%',\n            '4/12': '33.333333%',\n            '5/12': '41.666667%',\n            '6/12': '50%',\n            '7/12': '58.333333%',\n            '8/12': '66.666667%',\n            '9/12': '75%',\n            '10/12': '83.333333%',\n            '11/12': '91.666667%',\n            full: '100%',\n            min: 'min-content',\n            max: 'max-content',\n            fit: 'fit-content'\n          });\n        },\n        width: function width(_ref51) {\n          var theme = _ref51.theme;\n          return _objectSpread(_objectSpread({\n            auto: 'auto'\n          }, theme('spacing')), {}, {\n            '1/2': '50%',\n            '1/3': '33.333333%',\n            '2/3': '66.666667%',\n            '1/4': '25%',\n            '2/4': '50%',\n            '3/4': '75%',\n            '1/5': '20%',\n            '2/5': '40%',\n            '3/5': '60%',\n            '4/5': '80%',\n            '1/6': '16.666667%',\n            '2/6': '33.333333%',\n            '3/6': '50%',\n            '4/6': '66.666667%',\n            '5/6': '83.333333%',\n            '1/12': '8.333333%',\n            '2/12': '16.666667%',\n            '3/12': '25%',\n            '4/12': '33.333333%',\n            '5/12': '41.666667%',\n            '6/12': '50%',\n            '7/12': '58.333333%',\n            '8/12': '66.666667%',\n            '9/12': '75%',\n            '10/12': '83.333333%',\n            '11/12': '91.666667%',\n            full: '100%',\n            screen: '100vw',\n            svw: '100svw',\n            lvw: '100lvw',\n            dvw: '100dvw',\n            min: 'min-content',\n            max: 'max-content',\n            fit: 'fit-content'\n          });\n        },\n        willChange: {\n          auto: 'auto',\n          scroll: 'scroll-position',\n          contents: 'contents',\n          transform: 'transform'\n        },\n        zIndex: {\n          auto: 'auto',\n          0: '0',\n          10: '10',\n          20: '20',\n          30: '30',\n          40: '40',\n          50: '50'\n        }\n      },\n      plugins: []\n    };\n  }\n});\n\n// src/index.ts\n\n\n// src/stubs/tailwindcss/utils/log.ts\nfunction log() {}\nfunction dim(input) {\n  return input;\n}\nvar log_default = {\n  info: log,\n  warn: log,\n  risk: log\n};\n\n// node_modules/tailwindcss/src/lib/normalizeTailwindDirectives.js\nfunction normalizeTailwindDirectives(root) {\n  var tailwindDirectives = /* @__PURE__ */new Set();\n  var layerDirectives = /* @__PURE__ */new Set();\n  var applyDirectives = /* @__PURE__ */new Set();\n  root.walkAtRules(function (atRule) {\n    if (atRule.name === 'apply') {\n      applyDirectives.add(atRule);\n    }\n    if (atRule.name === 'import') {\n      if (atRule.params === '\"tailwindcss/base\"' || atRule.params === \"'tailwindcss/base'\") {\n        atRule.name = 'tailwind';\n        atRule.params = 'base';\n      } else if (atRule.params === '\"tailwindcss/components\"' || atRule.params === \"'tailwindcss/components'\") {\n        atRule.name = 'tailwind';\n        atRule.params = 'components';\n      } else if (atRule.params === '\"tailwindcss/utilities\"' || atRule.params === \"'tailwindcss/utilities'\") {\n        atRule.name = 'tailwind';\n        atRule.params = 'utilities';\n      } else if (atRule.params === '\"tailwindcss/screens\"' || atRule.params === \"'tailwindcss/screens'\" || atRule.params === '\"tailwindcss/variants\"' || atRule.params === \"'tailwindcss/variants'\") {\n        atRule.name = 'tailwind';\n        atRule.params = 'variants';\n      }\n    }\n    if (atRule.name === 'tailwind') {\n      if (atRule.params === 'screens') {\n        atRule.params = 'variants';\n      }\n      tailwindDirectives.add(atRule.params);\n    }\n    if (['layer', 'responsive', 'variants'].includes(atRule.name)) {\n      if (['responsive', 'variants'].includes(atRule.name)) {\n        log_default.warn(\"\".concat(atRule.name, \"-at-rule-deprecated\"), [\"The `@\".concat(atRule.name, \"` directive has been deprecated in Tailwind CSS v3.0.\"), \"Use `@layer utilities` or `@layer components` instead.\", 'https://tailwindcss.com/docs/upgrade-guide#replace-variants-with-layer']);\n      }\n      layerDirectives.add(atRule);\n    }\n  });\n  if (!tailwindDirectives.has('base') || !tailwindDirectives.has('components') || !tailwindDirectives.has('utilities')) {\n    var _iterator11 = _createForOfIteratorHelper(layerDirectives),\n      _step11;\n    try {\n      for (_iterator11.s(); !(_step11 = _iterator11.n()).done;) {\n        var rule = _step11.value;\n        if (rule.name === 'layer' && ['base', 'components', 'utilities'].includes(rule.params)) {\n          if (!tailwindDirectives.has(rule.params)) {\n            throw rule.error(\"`@layer \".concat(rule.params, \"` is used but no matching `@tailwind \").concat(rule.params, \"` directive is present.\"));\n          }\n        } else if (rule.name === 'responsive') {\n          if (!tailwindDirectives.has('utilities')) {\n            throw rule.error('`@responsive` is used but `@tailwind utilities` is missing.');\n          }\n        } else if (rule.name === 'variants') {\n          if (!tailwindDirectives.has('utilities')) {\n            throw rule.error('`@variants` is used but `@tailwind utilities` is missing.');\n          }\n        }\n      }\n    } catch (err) {\n      _iterator11.e(err);\n    } finally {\n      _iterator11.f();\n    }\n  }\n  return {\n    tailwindDirectives: tailwindDirectives,\n    applyDirectives: applyDirectives\n  };\n}\n\n// node_modules/tailwindcss/src/css/preflight.css\nvar preflight_default = '*,:before,:after{box-sizing:border-box;border-width:0;border-style:solid;border-color:theme(\"borderColor.DEFAULT\",currentColor)}:before,:after{--tw-content: \"\"}html,:host{line-height:1.5;-webkit-text-size-adjust:100%;-moz-tab-size:4;tab-size:4;font-family:theme(\"fontFamily.sans\",ui-sans-serif,system-ui,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\",\"Segoe UI Symbol\",\"Noto Color Emoji\");font-feature-settings:theme(\"fontFamily.sans[1].fontFeatureSettings\",normal);font-variation-settings:theme(\"fontFamily.sans[1].fontVariationSettings\",normal);-webkit-tap-highlight-color:transparent}body{margin:0;line-height:inherit}hr{height:0;color:inherit;border-top-width:1px}abbr:where([title]){text-decoration:underline dotted}h1,h2,h3,h4,h5,h6{font-size:inherit;font-weight:inherit}a{color:inherit;text-decoration:inherit}b,strong{font-weight:bolder}code,kbd,samp,pre{font-family:theme(\"fontFamily.mono\",ui-monospace,SFMono-Regular,Menlo,Monaco,Consolas,\"Liberation Mono\",\"Courier New\",monospace);font-feature-settings:theme(\"fontFamily.mono[1].fontFeatureSettings\",normal);font-variation-settings:theme(\"fontFamily.mono[1].fontVariationSettings\",normal);font-size:1em}small{font-size:80%}sub,sup{font-size:75%;line-height:0;position:relative;vertical-align:baseline}sub{bottom:-.25em}sup{top:-.5em}table{text-indent:0;border-color:inherit;border-collapse:collapse}button,input,optgroup,select,textarea{font-family:inherit;font-feature-settings:inherit;font-variation-settings:inherit;font-size:100%;font-weight:inherit;line-height:inherit;color:inherit;margin:0;padding:0}button,select{text-transform:none}button,[type=button],[type=reset],[type=submit]{-webkit-appearance:button;background-color:transparent;background-image:none}:-moz-focusring{outline:auto}:-moz-ui-invalid{box-shadow:none}progress{vertical-align:baseline}::-webkit-inner-spin-button,::-webkit-outer-spin-button{height:auto}[type=search]{-webkit-appearance:textfield;outline-offset:-2px}::-webkit-search-decoration{-webkit-appearance:none}::-webkit-file-upload-button{-webkit-appearance:button;font:inherit}summary{display:list-item}blockquote,dl,dd,h1,h2,h3,h4,h5,h6,hr,figure,p,pre{margin:0}fieldset{margin:0;padding:0}legend{padding:0}ol,ul,menu{list-style:none;margin:0;padding:0}dialog{padding:0}textarea{resize:vertical}input::placeholder,textarea::placeholder{opacity:1;color:theme(\"colors.gray.400\",#9ca3af)}button,[role=button]{cursor:pointer}:disabled{cursor:default}img,svg,video,canvas,audio,iframe,embed,object{display:block;vertical-align:middle}img,video{max-width:100%;height:auto}[hidden]{display:none}\\n';\n\n// src/stubs/fs.ts\nvar fs_default = {\n  readFileSync: function readFileSync() {\n    return preflight_default;\n  }\n};\n\n// node_modules/tailwindcss/src/lib/expandTailwindAtRules.js\nvar import_quick_lru = __toESM(require_quick_lru());\n\n// node_modules/tailwindcss/package.json\nvar version = '3.4.1';\nvar package_default = {\n  name: 'tailwindcss',\n  version: version,\n  description: 'A utility-first CSS framework for rapidly building custom user interfaces.',\n  license: 'MIT',\n  main: 'lib/index.js',\n  types: 'types/index.d.ts',\n  repository: 'https://github.com/tailwindlabs/tailwindcss.git',\n  bugs: 'https://github.com/tailwindlabs/tailwindcss/issues',\n  homepage: 'https://tailwindcss.com',\n  bin: {\n    tailwind: 'lib/cli.js',\n    tailwindcss: 'lib/cli.js'\n  },\n  tailwindcss: {\n    engine: 'stable'\n  },\n  scripts: {\n    prebuild: 'npm run generate && rimraf lib',\n    build: \"swc src --out-dir lib --copy-files --config jsc.transform.optimizer.globals.vars.__OXIDE__='\\\"false\\\"'\",\n    postbuild: 'esbuild lib/cli-peer-dependencies.js --bundle --platform=node --outfile=peers/index.js --define:process.env.CSS_TRANSFORMER_WASM=false',\n    'rebuild-fixtures': 'npm run build && node -r @swc/register scripts/rebuildFixtures.js',\n    style: 'eslint .',\n    pretest: 'npm run generate',\n    test: 'jest',\n    'test:integrations': 'npm run test --prefix ./integrations',\n    'install:integrations': 'node scripts/install-integrations.js',\n    'generate:plugin-list': 'node -r @swc/register scripts/create-plugin-list.js',\n    'generate:types': 'node -r @swc/register scripts/generate-types.js',\n    generate: 'npm run generate:plugin-list && npm run generate:types',\n    'release-channel': 'node ./scripts/release-channel.js',\n    'release-notes': 'node ./scripts/release-notes.js',\n    prepublishOnly: 'npm install --force && npm run build'\n  },\n  files: ['src/*', 'cli/*', 'lib/*', 'peers/*', 'scripts/*.js', 'stubs/*', 'nesting/*', 'types/**/*', '*.d.ts', '*.css', '*.js'],\n  devDependencies: {\n    '@swc/cli': '^0.1.62',\n    '@swc/core': '^1.3.55',\n    '@swc/jest': '^0.2.26',\n    '@swc/register': '^0.1.10',\n    autoprefixer: '^10.4.14',\n    browserslist: '^4.21.5',\n    concurrently: '^8.0.1',\n    cssnano: '^6.0.0',\n    esbuild: '^0.17.18',\n    eslint: '^8.39.0',\n    'eslint-config-prettier': '^8.8.0',\n    'eslint-plugin-prettier': '^4.2.1',\n    jest: '^29.6.0',\n    'jest-diff': '^29.6.0',\n    lightningcss: '1.18.0',\n    prettier: '^2.8.8',\n    rimraf: '^5.0.0',\n    'source-map-js': '^1.0.2',\n    turbo: '^1.9.3'\n  },\n  dependencies: {\n    '@alloc/quick-lru': '^5.2.0',\n    arg: '^5.0.2',\n    chokidar: '^3.5.3',\n    didyoumean: '^1.2.2',\n    dlv: '^1.1.3',\n    'fast-glob': '^3.3.0',\n    'glob-parent': '^6.0.2',\n    'is-glob': '^4.0.3',\n    jiti: '^1.19.1',\n    lilconfig: '^2.1.0',\n    micromatch: '^4.0.5',\n    'normalize-path': '^3.0.0',\n    'object-hash': '^3.0.0',\n    picocolors: '^1.0.0',\n    postcss: '^8.4.23',\n    'postcss-import': '^15.1.0',\n    'postcss-js': '^4.0.1',\n    'postcss-load-config': '^4.0.1',\n    'postcss-nested': '^6.0.1',\n    'postcss-selector-parser': '^6.0.11',\n    resolve: '^1.22.2',\n    sucrase: '^3.32.0'\n  },\n  browserslist: ['> 1%', 'not edge <= 18', 'not ie 11', 'not op_mini all'],\n  jest: {\n    testTimeout: 3e4,\n    setupFilesAfterEnv: ['<rootDir>/jest/customMatchers.js'],\n    testPathIgnorePatterns: ['/node_modules/', '/integrations/', '/standalone-cli/', '\\\\.test\\\\.skip\\\\.js$'],\n    transformIgnorePatterns: ['node_modules/(?!lightningcss)'],\n    transform: {\n      '\\\\.js$': '@swc/jest',\n      '\\\\.ts$': '@swc/jest'\n    }\n  },\n  engines: {\n    node: '>=14.0.0'\n  }\n};\n\n// node_modules/tailwindcss/src/lib/sharedState.js\nvar env = typeof process !== 'undefined' ? {\n  NODE_ENV: 'development',\n  DEBUG: resolveDebug(void 0),\n  ENGINE: package_default.tailwindcss.engine\n} : {\n  NODE_ENV: 'production',\n  DEBUG: false,\n  ENGINE: package_default.tailwindcss.engine\n};\nvar contextSourcesMap = /* @__PURE__ */new Map();\nvar NOT_ON_DEMAND = new String('*');\nvar NONE = Symbol('__NONE__');\nfunction resolveDebug(debug) {\n  if (debug === void 0) {\n    return false;\n  }\n  if (debug === 'true' || debug === '1') {\n    return true;\n  }\n  if (debug === 'false' || debug === '0') {\n    return false;\n  }\n  if (debug === '*') {\n    return true;\n  }\n  var debuggers = debug.split(',').map(function (d) {\n    return d.split(':')[0];\n  });\n  if (debuggers.includes('-tailwindcss')) {\n    return false;\n  }\n  if (debuggers.includes('tailwindcss')) {\n    return true;\n  }\n  return false;\n}\n\n// node_modules/tailwindcss/src/lib/generateRules.js\n\n\n\n// node_modules/tailwindcss/src/util/parseObjectStyles.js\n\n\n\nfunction parseObjectStyles(styles) {\n  if (!Array.isArray(styles)) {\n    return parseObjectStyles([styles]);\n  }\n  return styles.flatMap(function (style) {\n    return lib_postcss([postcss_nested_default()({\n      bubble: ['screen']\n    })]).process(style, {\n      parser: node_modules_postcss_js\n    }).root.nodes;\n  });\n}\n\n// node_modules/tailwindcss/src/util/isPlainObject.js\nfunction isPlainObject(value2) {\n  if (Object.prototype.toString.call(value2) !== '[object Object]') {\n    return false;\n  }\n  var prototype = Object.getPrototypeOf(value2);\n  return prototype === null || Object.getPrototypeOf(prototype) === null;\n}\n\n// node_modules/tailwindcss/src/util/prefixSelector.js\n\nfunction prefixSelector_default(prefix3, selector) {\n  var prependNegative = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  if (prefix3 === '') {\n    return selector;\n  }\n  var ast = typeof selector === 'string' ? dist_default()().astSync(selector) : selector;\n  ast.walkClasses(function (classSelector) {\n    var baseClass = classSelector.value;\n    var shouldPlaceNegativeBeforePrefix = prependNegative && baseClass.startsWith('-');\n    classSelector.value = shouldPlaceNegativeBeforePrefix ? \"-\".concat(prefix3).concat(baseClass.slice(1)) : \"\".concat(prefix3).concat(baseClass);\n  });\n  return typeof selector === 'string' ? ast.toString() : ast;\n}\n\n// node_modules/tailwindcss/src/util/escapeCommas.js\nfunction escapeCommas(className) {\n  return className.replace(/\\\\,/g, '\\\\2c ');\n}\n\n// node_modules/tailwindcss/src/util/colorNames.js\nvar colorNames_default = {\n  aliceblue: [240, 248, 255],\n  antiquewhite: [250, 235, 215],\n  aqua: [0, 255, 255],\n  aquamarine: [127, 255, 212],\n  azure: [240, 255, 255],\n  beige: [245, 245, 220],\n  bisque: [255, 228, 196],\n  black: [0, 0, 0],\n  blanchedalmond: [255, 235, 205],\n  blue: [0, 0, 255],\n  blueviolet: [138, 43, 226],\n  brown: [165, 42, 42],\n  burlywood: [222, 184, 135],\n  cadetblue: [95, 158, 160],\n  chartreuse: [127, 255, 0],\n  chocolate: [210, 105, 30],\n  coral: [255, 127, 80],\n  cornflowerblue: [100, 149, 237],\n  cornsilk: [255, 248, 220],\n  crimson: [220, 20, 60],\n  cyan: [0, 255, 255],\n  darkblue: [0, 0, 139],\n  darkcyan: [0, 139, 139],\n  darkgoldenrod: [184, 134, 11],\n  darkgray: [169, 169, 169],\n  darkgreen: [0, 100, 0],\n  darkgrey: [169, 169, 169],\n  darkkhaki: [189, 183, 107],\n  darkmagenta: [139, 0, 139],\n  darkolivegreen: [85, 107, 47],\n  darkorange: [255, 140, 0],\n  darkorchid: [153, 50, 204],\n  darkred: [139, 0, 0],\n  darksalmon: [233, 150, 122],\n  darkseagreen: [143, 188, 143],\n  darkslateblue: [72, 61, 139],\n  darkslategray: [47, 79, 79],\n  darkslategrey: [47, 79, 79],\n  darkturquoise: [0, 206, 209],\n  darkviolet: [148, 0, 211],\n  deeppink: [255, 20, 147],\n  deepskyblue: [0, 191, 255],\n  dimgray: [105, 105, 105],\n  dimgrey: [105, 105, 105],\n  dodgerblue: [30, 144, 255],\n  firebrick: [178, 34, 34],\n  floralwhite: [255, 250, 240],\n  forestgreen: [34, 139, 34],\n  fuchsia: [255, 0, 255],\n  gainsboro: [220, 220, 220],\n  ghostwhite: [248, 248, 255],\n  gold: [255, 215, 0],\n  goldenrod: [218, 165, 32],\n  gray: [128, 128, 128],\n  green: [0, 128, 0],\n  greenyellow: [173, 255, 47],\n  grey: [128, 128, 128],\n  honeydew: [240, 255, 240],\n  hotpink: [255, 105, 180],\n  indianred: [205, 92, 92],\n  indigo: [75, 0, 130],\n  ivory: [255, 255, 240],\n  khaki: [240, 230, 140],\n  lavender: [230, 230, 250],\n  lavenderblush: [255, 240, 245],\n  lawngreen: [124, 252, 0],\n  lemonchiffon: [255, 250, 205],\n  lightblue: [173, 216, 230],\n  lightcoral: [240, 128, 128],\n  lightcyan: [224, 255, 255],\n  lightgoldenrodyellow: [250, 250, 210],\n  lightgray: [211, 211, 211],\n  lightgreen: [144, 238, 144],\n  lightgrey: [211, 211, 211],\n  lightpink: [255, 182, 193],\n  lightsalmon: [255, 160, 122],\n  lightseagreen: [32, 178, 170],\n  lightskyblue: [135, 206, 250],\n  lightslategray: [119, 136, 153],\n  lightslategrey: [119, 136, 153],\n  lightsteelblue: [176, 196, 222],\n  lightyellow: [255, 255, 224],\n  lime: [0, 255, 0],\n  limegreen: [50, 205, 50],\n  linen: [250, 240, 230],\n  magenta: [255, 0, 255],\n  maroon: [128, 0, 0],\n  mediumaquamarine: [102, 205, 170],\n  mediumblue: [0, 0, 205],\n  mediumorchid: [186, 85, 211],\n  mediumpurple: [147, 112, 219],\n  mediumseagreen: [60, 179, 113],\n  mediumslateblue: [123, 104, 238],\n  mediumspringgreen: [0, 250, 154],\n  mediumturquoise: [72, 209, 204],\n  mediumvioletred: [199, 21, 133],\n  midnightblue: [25, 25, 112],\n  mintcream: [245, 255, 250],\n  mistyrose: [255, 228, 225],\n  moccasin: [255, 228, 181],\n  navajowhite: [255, 222, 173],\n  navy: [0, 0, 128],\n  oldlace: [253, 245, 230],\n  olive: [128, 128, 0],\n  olivedrab: [107, 142, 35],\n  orange: [255, 165, 0],\n  orangered: [255, 69, 0],\n  orchid: [218, 112, 214],\n  palegoldenrod: [238, 232, 170],\n  palegreen: [152, 251, 152],\n  paleturquoise: [175, 238, 238],\n  palevioletred: [219, 112, 147],\n  papayawhip: [255, 239, 213],\n  peachpuff: [255, 218, 185],\n  peru: [205, 133, 63],\n  pink: [255, 192, 203],\n  plum: [221, 160, 221],\n  powderblue: [176, 224, 230],\n  purple: [128, 0, 128],\n  rebeccapurple: [102, 51, 153],\n  red: [255, 0, 0],\n  rosybrown: [188, 143, 143],\n  royalblue: [65, 105, 225],\n  saddlebrown: [139, 69, 19],\n  salmon: [250, 128, 114],\n  sandybrown: [244, 164, 96],\n  seagreen: [46, 139, 87],\n  seashell: [255, 245, 238],\n  sienna: [160, 82, 45],\n  silver: [192, 192, 192],\n  skyblue: [135, 206, 235],\n  slateblue: [106, 90, 205],\n  slategray: [112, 128, 144],\n  slategrey: [112, 128, 144],\n  snow: [255, 250, 250],\n  springgreen: [0, 255, 127],\n  steelblue: [70, 130, 180],\n  tan: [210, 180, 140],\n  teal: [0, 128, 128],\n  thistle: [216, 191, 216],\n  tomato: [255, 99, 71],\n  turquoise: [64, 224, 208],\n  violet: [238, 130, 238],\n  wheat: [245, 222, 179],\n  white: [255, 255, 255],\n  whitesmoke: [245, 245, 245],\n  yellow: [255, 255, 0],\n  yellowgreen: [154, 205, 50]\n};\n\n// node_modules/tailwindcss/src/util/color.js\nvar HEX = /^#([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})?$/i;\nvar SHORT_HEX = /^#([a-f\\d])([a-f\\d])([a-f\\d])([a-f\\d])?$/i;\nvar VALUE = /(?:\\d+|\\d*\\.\\d+)%?/;\nvar SEP = /(?:\\s*,\\s*|\\s+)/;\nvar ALPHA_SEP = /\\s*[,/]\\s*/;\nvar CUSTOM_PROPERTY = /var\\(--(?:[^ )]*?)(?:,(?:[^ )]*?|var\\(--[^ )]*?\\)))?\\)/;\nvar RGB = new RegExp(\"^(rgba?)\\\\(\\\\s*(\".concat(VALUE.source, \"|\").concat(CUSTOM_PROPERTY.source, \")(?:\").concat(SEP.source, \"(\").concat(VALUE.source, \"|\").concat(CUSTOM_PROPERTY.source, \"))?(?:\").concat(SEP.source, \"(\").concat(VALUE.source, \"|\").concat(CUSTOM_PROPERTY.source, \"))?(?:\").concat(ALPHA_SEP.source, \"(\").concat(VALUE.source, \"|\").concat(CUSTOM_PROPERTY.source, \"))?\\\\s*\\\\)$\"));\nvar HSL = new RegExp(\"^(hsla?)\\\\(\\\\s*((?:\".concat(VALUE.source, \")(?:deg|rad|grad|turn)?|\").concat(CUSTOM_PROPERTY.source, \")(?:\").concat(SEP.source, \"(\").concat(VALUE.source, \"|\").concat(CUSTOM_PROPERTY.source, \"))?(?:\").concat(SEP.source, \"(\").concat(VALUE.source, \"|\").concat(CUSTOM_PROPERTY.source, \"))?(?:\").concat(ALPHA_SEP.source, \"(\").concat(VALUE.source, \"|\").concat(CUSTOM_PROPERTY.source, \"))?\\\\s*\\\\)$\"));\nfunction parseColor(value2) {\n  var _value2$match, _match$, _match$$toString;\n  var _ref52 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n    _ref52$loose = _ref52.loose,\n    loose = _ref52$loose === void 0 ? false : _ref52$loose;\n  if (typeof value2 !== 'string') {\n    return null;\n  }\n  value2 = value2.trim();\n  if (value2 === 'transparent') {\n    return {\n      mode: 'rgb',\n      color: ['0', '0', '0'],\n      alpha: '0'\n    };\n  }\n  if (value2 in colorNames_default) {\n    return {\n      mode: 'rgb',\n      color: colorNames_default[value2].map(function (v) {\n        return v.toString();\n      })\n    };\n  }\n  var hex = value2.replace(SHORT_HEX, function (_, r, g, b, a) {\n    return ['#', r, r, g, g, b, b, a ? a + a : ''].join('');\n  }).match(HEX);\n  if (hex !== null) {\n    return {\n      mode: 'rgb',\n      color: [parseInt(hex[1], 16), parseInt(hex[2], 16), parseInt(hex[3], 16)].map(function (v) {\n        return v.toString();\n      }),\n      alpha: hex[4] ? (parseInt(hex[4], 16) / 255).toString() : void 0\n    };\n  }\n  var match = (_value2$match = value2.match(RGB)) !== null && _value2$match !== void 0 ? _value2$match : value2.match(HSL);\n  if (match === null) {\n    return null;\n  }\n  var color2 = [match[2], match[3], match[4]].filter(Boolean).map(function (v) {\n    return v.toString();\n  });\n  if (color2.length === 2 && color2[0].startsWith('var(')) {\n    return {\n      mode: match[1],\n      color: [color2[0]],\n      alpha: color2[1]\n    };\n  }\n  if (!loose && color2.length !== 3) {\n    return null;\n  }\n  if (color2.length < 3 && !color2.some(function (part) {\n    return /^var\\(.*?\\)$/.test(part);\n  })) {\n    return null;\n  }\n  return {\n    mode: match[1],\n    color: color2,\n    alpha: (_match$ = match[5]) === null || _match$ === void 0 || (_match$$toString = _match$.toString) === null || _match$$toString === void 0 ? void 0 : _match$$toString.call(_match$)\n  };\n}\nfunction formatColor(_ref53) {\n  var mode = _ref53.mode,\n    color2 = _ref53.color,\n    alpha = _ref53.alpha;\n  var hasAlpha = alpha !== void 0;\n  if (mode === 'rgba' || mode === 'hsla') {\n    return \"\".concat(mode, \"(\").concat(color2.join(', ')).concat(hasAlpha ? \", \".concat(alpha) : '', \")\");\n  }\n  return \"\".concat(mode, \"(\").concat(color2.join(' ')).concat(hasAlpha ? \" / \".concat(alpha) : '', \")\");\n}\n\n// node_modules/tailwindcss/src/util/withAlphaVariable.js\nfunction withAlphaValue(color2, alphaValue, defaultValue) {\n  if (typeof color2 === 'function') {\n    return color2({\n      opacityValue: alphaValue\n    });\n  }\n  var parsed = parseColor(color2, {\n    loose: true\n  });\n  if (parsed === null) {\n    return defaultValue;\n  }\n  return formatColor(_objectSpread(_objectSpread({}, parsed), {}, {\n    alpha: alphaValue\n  }));\n}\nfunction withAlphaVariable(_ref54) {\n  var color2 = _ref54.color,\n    property = _ref54.property,\n    variable = _ref54.variable;\n  var properties = [].concat(property);\n  if (typeof color2 === 'function') {\n    return _objectSpread(_defineProperty({}, variable, '1'), Object.fromEntries(properties.map(function (p) {\n      return [p, color2({\n        opacityVariable: variable,\n        opacityValue: \"var(\".concat(variable, \")\")\n      })];\n    })));\n  }\n  var parsed = parseColor(color2);\n  if (parsed === null) {\n    return Object.fromEntries(properties.map(function (p) {\n      return [p, color2];\n    }));\n  }\n  if (parsed.alpha !== void 0) {\n    return Object.fromEntries(properties.map(function (p) {\n      return [p, color2];\n    }));\n  }\n  return _objectSpread(_defineProperty({}, variable, '1'), Object.fromEntries(properties.map(function (p) {\n    return [p, formatColor(_objectSpread(_objectSpread({}, parsed), {}, {\n      alpha: \"var(\".concat(variable, \")\")\n    }))];\n  })));\n}\n\n// node_modules/tailwindcss/src/util/splitAtTopLevelOnly.js\nfunction splitAtTopLevelOnly(input, separator) {\n  var stack = [];\n  var parts = [];\n  var lastPos = 0;\n  var isEscaped = false;\n  for (var idx = 0; idx < input.length; idx++) {\n    var _char = input[idx];\n    if (stack.length === 0 && _char === separator[0] && !isEscaped) {\n      if (separator.length === 1 || input.slice(idx, idx + separator.length) === separator) {\n        parts.push(input.slice(lastPos, idx));\n        lastPos = idx + separator.length;\n      }\n    }\n    if (isEscaped) {\n      isEscaped = false;\n    } else if (_char === '\\\\') {\n      isEscaped = true;\n    }\n    if (_char === '(' || _char === '[' || _char === '{') {\n      stack.push(_char);\n    } else if (_char === ')' && stack[stack.length - 1] === '(' || _char === ']' && stack[stack.length - 1] === '[' || _char === '}' && stack[stack.length - 1] === '{') {\n      stack.pop();\n    }\n  }\n  parts.push(input.slice(lastPos));\n  return parts;\n}\n\n// node_modules/tailwindcss/src/util/parseBoxShadowValue.js\nvar KEYWORDS = /* @__PURE__ */new Set(['inset', 'inherit', 'initial', 'revert', 'unset']);\nvar SPACE = /\\ +(?![^(]*\\))/g;\nvar LENGTH = /^-?(\\d+|\\.\\d+)(.*?)$/g;\nfunction parseBoxShadowValue(input) {\n  var shadows = splitAtTopLevelOnly(input, ',');\n  return shadows.map(function (shadow2) {\n    var value2 = shadow2.trim();\n    var result = {\n      raw: value2\n    };\n    var parts = value2.split(SPACE);\n    var seen = /* @__PURE__ */new Set();\n    var _iterator12 = _createForOfIteratorHelper(parts),\n      _step12;\n    try {\n      for (_iterator12.s(); !(_step12 = _iterator12.n()).done;) {\n        var part = _step12.value;\n        LENGTH.lastIndex = 0;\n        if (!seen.has('KEYWORD') && KEYWORDS.has(part)) {\n          result.keyword = part;\n          seen.add('KEYWORD');\n        } else if (LENGTH.test(part)) {\n          if (!seen.has('X')) {\n            result.x = part;\n            seen.add('X');\n          } else if (!seen.has('Y')) {\n            result.y = part;\n            seen.add('Y');\n          } else if (!seen.has('BLUR')) {\n            result.blur = part;\n            seen.add('BLUR');\n          } else if (!seen.has('SPREAD')) {\n            result.spread = part;\n            seen.add('SPREAD');\n          }\n        } else {\n          if (!result.color) {\n            result.color = part;\n          } else {\n            if (!result.unknown) result.unknown = [];\n            result.unknown.push(part);\n          }\n        }\n      }\n    } catch (err) {\n      _iterator12.e(err);\n    } finally {\n      _iterator12.f();\n    }\n    result.valid = result.x !== void 0 && result.y !== void 0;\n    return result;\n  });\n}\nfunction formatBoxShadowValue(shadows) {\n  return shadows.map(function (shadow2) {\n    if (!shadow2.valid) {\n      return shadow2.raw;\n    }\n    return [shadow2.keyword, shadow2.x, shadow2.y, shadow2.blur, shadow2.spread, shadow2.color].filter(Boolean).join(' ');\n  }).join(', ');\n}\n\n// node_modules/tailwindcss/src/util/dataTypes.js\nvar cssFunctions = ['min', 'max', 'clamp', 'calc'];\nfunction isCSSFunction(value2) {\n  return cssFunctions.some(function (fn) {\n    return new RegExp(\"^\".concat(fn, \"\\\\(.*\\\\)\")).test(value2);\n  });\n}\nvar AUTO_VAR_INJECTION_EXCEPTIONS = /* @__PURE__ */new Set(['scroll-timeline-name', 'timeline-scope', 'view-timeline-name', 'font-palette', 'scroll-timeline', 'animation-timeline', 'view-timeline']);\nfunction normalize(value2) {\n  var context = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n  var isRoot2 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n  var isVarException = context && AUTO_VAR_INJECTION_EXCEPTIONS.has(context.property);\n  if (value2.startsWith('--') && !isVarException) {\n    return \"var(\".concat(value2, \")\");\n  }\n  if (value2.includes('url(')) {\n    return value2.split(/(url\\(.*?\\))/g).filter(Boolean).map(function (part) {\n      if (/^url\\(.*?\\)$/.test(part)) {\n        return part;\n      }\n      return normalize(part, context, false);\n    }).join('');\n  }\n  value2 = value2.replace(/([^\\\\])_+/g, function (fullMatch, characterBefore) {\n    return characterBefore + ' '.repeat(fullMatch.length - 1);\n  }).replace(/^_/g, ' ').replace(/\\\\_/g, '_');\n  if (isRoot2) {\n    value2 = value2.trim();\n  }\n  value2 = normalizeMathOperatorSpacing(value2);\n  return value2;\n}\nfunction normalizeMathOperatorSpacing(value2) {\n  var preventFormattingInFunctions = ['theme'];\n  var preventFormattingKeywords = ['min-content', 'max-content', 'fit-content', 'safe-area-inset-top', 'safe-area-inset-right', 'safe-area-inset-bottom', 'safe-area-inset-left', 'titlebar-area-x', 'titlebar-area-y', 'titlebar-area-width', 'titlebar-area-height', 'keyboard-inset-top', 'keyboard-inset-right', 'keyboard-inset-bottom', 'keyboard-inset-left', 'keyboard-inset-width', 'keyboard-inset-height', 'radial-gradient', 'linear-gradient', 'conic-gradient', 'repeating-radial-gradient', 'repeating-linear-gradient', 'repeating-conic-gradient'];\n  return value2.replace(/(calc|min|max|clamp)\\(.+\\)/g, function (match) {\n    var result = '';\n    function lastChar() {\n      var _char2 = result.trimEnd();\n      return _char2[_char2.length - 1];\n    }\n    var _loop2 = function _loop2(_i2) {\n      var peek = function peek(word) {\n          return word.split('').every(function (char2, j) {\n            return match[_i2 + j] === char2;\n          });\n        },\n        consumeUntil = function consumeUntil(chars) {\n          var minIndex = Infinity;\n          var _iterator13 = _createForOfIteratorHelper(chars),\n            _step13;\n          try {\n            for (_iterator13.s(); !(_step13 = _iterator13.n()).done;) {\n              var char2 = _step13.value;\n              var index = match.indexOf(char2, _i2);\n              if (index !== -1 && index < minIndex) {\n                minIndex = index;\n              }\n            }\n          } catch (err) {\n            _iterator13.e(err);\n          } finally {\n            _iterator13.f();\n          }\n          var result2 = match.slice(_i2, minIndex);\n          _i2 += result2.length - 1;\n          return result2;\n        };\n      var _char3 = match[_i2];\n      if (peek('var')) {\n        result += consumeUntil([')', ',']);\n      } else if (preventFormattingKeywords.some(function (keyword) {\n        return peek(keyword);\n      })) {\n        var keyword = preventFormattingKeywords.find(function (keyword2) {\n          return peek(keyword2);\n        });\n        result += keyword;\n        _i2 += keyword.length - 1;\n      } else if (preventFormattingInFunctions.some(function (fn) {\n        return peek(fn);\n      })) {\n        result += consumeUntil([')']);\n      } else if (peek('[')) {\n        result += consumeUntil([']']);\n      } else if (['+', '-', '*', '/'].includes(_char3) && !['(', '+', '-', '*', '/', ','].includes(lastChar())) {\n        result += \" \".concat(_char3, \" \");\n      } else {\n        result += _char3;\n      }\n      i = _i2;\n    };\n    for (var i = 0; i < match.length; i++) {\n      _loop2(i);\n    }\n    return result.replace(/\\s+/g, ' ');\n  });\n}\nfunction url(value2) {\n  return value2.startsWith('url(');\n}\nfunction number(value2) {\n  return !isNaN(Number(value2)) || isCSSFunction(value2);\n}\nfunction percentage(value2) {\n  return value2.endsWith('%') && number(value2.slice(0, -1)) || isCSSFunction(value2);\n}\nvar lengthUnits = ['cm', 'mm', 'Q', 'in', 'pc', 'pt', 'px', 'em', 'ex', 'ch', 'rem', 'lh', 'rlh', 'vw', 'vh', 'vmin', 'vmax', 'vb', 'vi', 'svw', 'svh', 'lvw', 'lvh', 'dvw', 'dvh', 'cqw', 'cqh', 'cqi', 'cqb', 'cqmin', 'cqmax'];\nvar lengthUnitsPattern = \"(?:\".concat(lengthUnits.join('|'), \")\");\nfunction module_esm_length(value2) {\n  return value2 === '0' || new RegExp(\"^[+-]?[0-9]*.?[0-9]+(?:[eE][+-]?[0-9]+)?\".concat(lengthUnitsPattern, \"$\")).test(value2) || isCSSFunction(value2);\n}\nvar lineWidths = /* @__PURE__ */new Set(['thin', 'medium', 'thick']);\nfunction lineWidth(value2) {\n  return lineWidths.has(value2);\n}\nfunction shadow(value2) {\n  var parsedShadows = parseBoxShadowValue(normalize(value2));\n  var _iterator14 = _createForOfIteratorHelper(parsedShadows),\n    _step14;\n  try {\n    for (_iterator14.s(); !(_step14 = _iterator14.n()).done;) {\n      var parsedShadow = _step14.value;\n      if (!parsedShadow.valid) {\n        return false;\n      }\n    }\n  } catch (err) {\n    _iterator14.e(err);\n  } finally {\n    _iterator14.f();\n  }\n  return true;\n}\nfunction color(value2) {\n  var colors = 0;\n  var result = splitAtTopLevelOnly(value2, '_').every(function (part) {\n    part = normalize(part);\n    if (part.startsWith('var(')) return true;\n    if (parseColor(part, {\n      loose: true\n    }) !== null) return colors++, true;\n    return false;\n  });\n  if (!result) return false;\n  return colors > 0;\n}\nfunction module_esm_image(value2) {\n  var images = 0;\n  var result = splitAtTopLevelOnly(value2, ',').every(function (part) {\n    part = normalize(part);\n    if (part.startsWith('var(')) return true;\n    if (url(part) || gradient(part) || ['element(', 'image(', 'cross-fade(', 'image-set('].some(function (fn) {\n      return part.startsWith(fn);\n    })) {\n      images++;\n      return true;\n    }\n    return false;\n  });\n  if (!result) return false;\n  return images > 0;\n}\nvar gradientTypes = /* @__PURE__ */new Set(['conic-gradient', 'linear-gradient', 'radial-gradient', 'repeating-conic-gradient', 'repeating-linear-gradient', 'repeating-radial-gradient']);\nfunction gradient(value2) {\n  value2 = normalize(value2);\n  var _iterator15 = _createForOfIteratorHelper(gradientTypes),\n    _step15;\n  try {\n    for (_iterator15.s(); !(_step15 = _iterator15.n()).done;) {\n      var type = _step15.value;\n      if (value2.startsWith(\"\".concat(type, \"(\"))) {\n        return true;\n      }\n    }\n  } catch (err) {\n    _iterator15.e(err);\n  } finally {\n    _iterator15.f();\n  }\n  return false;\n}\nvar validPositions = /* @__PURE__ */new Set(['center', 'top', 'right', 'bottom', 'left']);\nfunction position(value2) {\n  var positions = 0;\n  var result = splitAtTopLevelOnly(value2, '_').every(function (part) {\n    part = normalize(part);\n    if (part.startsWith('var(')) return true;\n    if (validPositions.has(part) || module_esm_length(part) || percentage(part)) {\n      positions++;\n      return true;\n    }\n    return false;\n  });\n  if (!result) return false;\n  return positions > 0;\n}\nfunction familyName(value2) {\n  var fonts = 0;\n  var result = splitAtTopLevelOnly(value2, ',').every(function (part) {\n    part = normalize(part);\n    if (part.startsWith('var(')) return true;\n    if (part.includes(' ')) {\n      if (!/(['\"])([^\"']+)\\1/g.test(part)) {\n        return false;\n      }\n    }\n    if (/^\\d/g.test(part)) {\n      return false;\n    }\n    fonts++;\n    return true;\n  });\n  if (!result) return false;\n  return fonts > 0;\n}\nvar genericNames = /* @__PURE__ */new Set(['serif', 'sans-serif', 'monospace', 'cursive', 'fantasy', 'system-ui', 'ui-serif', 'ui-sans-serif', 'ui-monospace', 'ui-rounded', 'math', 'emoji', 'fangsong']);\nfunction genericName(value2) {\n  return genericNames.has(value2);\n}\nvar absoluteSizes = /* @__PURE__ */new Set(['xx-small', 'x-small', 'small', 'medium', 'large', 'x-large', 'x-large', 'xxx-large']);\nfunction absoluteSize(value2) {\n  return absoluteSizes.has(value2);\n}\nvar relativeSizes = /* @__PURE__ */new Set(['larger', 'smaller']);\nfunction relativeSize(value2) {\n  return relativeSizes.has(value2);\n}\n\n// node_modules/tailwindcss/src/util/negateValue.js\nfunction negateValue(value2) {\n  value2 = \"\".concat(value2);\n  if (value2 === '0') {\n    return '0';\n  }\n  if (/^[+-]?(\\d+|\\d*\\.\\d+)(e[+-]?\\d+)?(%|\\w+)?$/.test(value2)) {\n    return value2.replace(/^[+-]?/, function (sign) {\n      return sign === '-' ? '' : '-';\n    });\n  }\n  var numericFunctions = ['var', 'calc', 'min', 'max', 'clamp'];\n  for (var _i3 = 0, _numericFunctions = numericFunctions; _i3 < _numericFunctions.length; _i3++) {\n    var fn = _numericFunctions[_i3];\n    if (value2.includes(\"\".concat(fn, \"(\"))) {\n      return \"calc(\".concat(value2, \" * -1)\");\n    }\n  }\n}\n\n// node_modules/tailwindcss/src/util/validateFormalSyntax.js\nfunction backgroundSize(value2) {\n  var keywordValues = ['cover', 'contain'];\n  return splitAtTopLevelOnly(value2, ',').every(function (part) {\n    var sizes = splitAtTopLevelOnly(part, '_').filter(Boolean);\n    if (sizes.length === 1 && keywordValues.includes(sizes[0])) return true;\n    if (sizes.length !== 1 && sizes.length !== 2) return false;\n    return sizes.every(function (size) {\n      return module_esm_length(size) || percentage(size) || size === 'auto';\n    });\n  });\n}\n\n// src/stubs/picocolors.ts\nvar picocolors_default = {\n  yellow: function yellow(input) {\n    return input;\n  }\n};\n\n// node_modules/tailwindcss/src/featureFlags.js\nvar defaults = {\n  optimizeUniversalDefaults: false,\n  generalizedModifiers: true,\n  get disableColorOpacityUtilitiesByDefault() {\n    return false;\n  },\n  get relativeContentPathsByDefault() {\n    return false;\n  }\n};\nvar featureFlags = {\n  future: ['hoverOnlyWhenSupported', 'respectDefaultRingColorOpacity', 'disableColorOpacityUtilitiesByDefault', 'relativeContentPathsByDefault'],\n  experimental: ['optimizeUniversalDefaults', 'generalizedModifiers']\n};\nfunction flagEnabled(config, flag) {\n  if (featureFlags.future.includes(flag)) {\n    var _ref55, _config$future$flag, _config$future;\n    return config.future === 'all' || ((_ref55 = (_config$future$flag = config === null || config === void 0 || (_config$future = config.future) === null || _config$future === void 0 ? void 0 : _config$future[flag]) !== null && _config$future$flag !== void 0 ? _config$future$flag : defaults[flag]) !== null && _ref55 !== void 0 ? _ref55 : false);\n  }\n  if (featureFlags.experimental.includes(flag)) {\n    var _ref56, _config$experimental$, _config$experimental;\n    return config.experimental === 'all' || ((_ref56 = (_config$experimental$ = config === null || config === void 0 || (_config$experimental = config.experimental) === null || _config$experimental === void 0 ? void 0 : _config$experimental[flag]) !== null && _config$experimental$ !== void 0 ? _config$experimental$ : defaults[flag]) !== null && _ref56 !== void 0 ? _ref56 : false);\n  }\n  return false;\n}\nfunction experimentalFlagsEnabled(config) {\n  var _config$experimental2;\n  if (config.experimental === 'all') {\n    return featureFlags.experimental;\n  }\n  return Object.keys((_config$experimental2 = config === null || config === void 0 ? void 0 : config.experimental) !== null && _config$experimental2 !== void 0 ? _config$experimental2 : {}).filter(function (flag) {\n    return featureFlags.experimental.includes(flag) && config.experimental[flag];\n  });\n}\nfunction issueFlagNotices(config) {\n  if (1 !== void 0) {\n    return;\n  }\n  if (experimentalFlagsEnabled(config).length > 0) {\n    var changes = experimentalFlagsEnabled(config).map(function (s) {\n      return picocolors_default.yellow(s);\n    }).join(', ');\n    log_default.warn('experimental-flags-enabled', [\"You have enabled experimental features: \".concat(changes), 'Experimental features in Tailwind CSS are not covered by semver, may introduce breaking changes, and can change at any time.']);\n  }\n}\n\n// node_modules/tailwindcss/src/util/pluginUtils.js\nfunction updateAllClasses(selectors, updateClass) {\n  selectors.walkClasses(function (sel) {\n    sel.value = updateClass(sel.value);\n    if (sel.raws && sel.raws.value) {\n      sel.raws.value = escapeCommas(sel.raws.value);\n    }\n  });\n}\nfunction resolveArbitraryValue(modifier, validate) {\n  if (!isArbitraryValue(modifier)) {\n    return void 0;\n  }\n  var value2 = modifier.slice(1, -1);\n  if (!validate(value2)) {\n    return void 0;\n  }\n  return normalize(value2);\n}\nfunction asNegativeValue(modifier) {\n  var lookup = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var validate = arguments.length > 2 ? arguments[2] : undefined;\n  var positiveValue = lookup[modifier];\n  if (positiveValue !== void 0) {\n    return negateValue(positiveValue);\n  }\n  if (isArbitraryValue(modifier)) {\n    var resolved = resolveArbitraryValue(modifier, validate);\n    if (resolved === void 0) {\n      return void 0;\n    }\n    return negateValue(resolved);\n  }\n}\nfunction asValue(modifier) {\n  var _options$values;\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var _ref57 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},\n    _ref57$validate = _ref57.validate,\n    validate = _ref57$validate === void 0 ? function () {\n      return true;\n    } : _ref57$validate;\n  var value2 = (_options$values = options.values) === null || _options$values === void 0 ? void 0 : _options$values[modifier];\n  if (value2 !== void 0) {\n    return value2;\n  }\n  if (options.supportsNegativeValues && modifier.startsWith('-')) {\n    return asNegativeValue(modifier.slice(1), options.values, validate);\n  }\n  return resolveArbitraryValue(modifier, validate);\n}\nfunction isArbitraryValue(input) {\n  return input.startsWith('[') && input.endsWith(']');\n}\nfunction splitUtilityModifier(modifier) {\n  var slashIdx = modifier.lastIndexOf('/');\n  var arbitraryStartIdx = modifier.lastIndexOf('[', slashIdx);\n  var arbitraryEndIdx = modifier.indexOf(']', slashIdx);\n  var isNextToArbitrary = modifier[slashIdx - 1] === ']' || modifier[slashIdx + 1] === '[';\n  if (!isNextToArbitrary) {\n    if (arbitraryStartIdx !== -1 && arbitraryEndIdx !== -1) {\n      if (arbitraryStartIdx < slashIdx && slashIdx < arbitraryEndIdx) {\n        slashIdx = modifier.lastIndexOf('/', arbitraryStartIdx);\n      }\n    }\n  }\n  if (slashIdx === -1 || slashIdx === modifier.length - 1) {\n    return [modifier, void 0];\n  }\n  var arbitrary = isArbitraryValue(modifier);\n  if (arbitrary && !modifier.includes(']/[')) {\n    return [modifier, void 0];\n  }\n  return [modifier.slice(0, slashIdx), modifier.slice(slashIdx + 1)];\n}\nfunction parseColorFormat(value2) {\n  if (typeof value2 === 'string' && value2.includes('<alpha-value>')) {\n    var oldValue = value2;\n    return function (_ref58) {\n      var _ref58$opacityValue = _ref58.opacityValue,\n        opacityValue = _ref58$opacityValue === void 0 ? 1 : _ref58$opacityValue;\n      return oldValue.replace('<alpha-value>', opacityValue);\n    };\n  }\n  return value2;\n}\nfunction unwrapArbitraryModifier(modifier) {\n  return normalize(modifier.slice(1, -1));\n}\nfunction asColor(modifier) {\n  var _options$values2;\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var _ref59 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},\n    _ref59$tailwindConfig = _ref59.tailwindConfig,\n    tailwindConfig = _ref59$tailwindConfig === void 0 ? {} : _ref59$tailwindConfig;\n  if (((_options$values2 = options.values) === null || _options$values2 === void 0 ? void 0 : _options$values2[modifier]) !== void 0) {\n    var _options$values3;\n    return parseColorFormat((_options$values3 = options.values) === null || _options$values3 === void 0 ? void 0 : _options$values3[modifier]);\n  }\n  var _splitUtilityModifier = splitUtilityModifier(modifier),\n    _splitUtilityModifier2 = _slicedToArray(_splitUtilityModifier, 2),\n    color2 = _splitUtilityModifier2[0],\n    alpha = _splitUtilityModifier2[1];\n  if (alpha !== void 0) {\n    var _options$values$color, _options$values4, _tailwindConfig$theme;\n    var normalizedColor = (_options$values$color = (_options$values4 = options.values) === null || _options$values4 === void 0 ? void 0 : _options$values4[color2]) !== null && _options$values$color !== void 0 ? _options$values$color : isArbitraryValue(color2) ? color2.slice(1, -1) : void 0;\n    if (normalizedColor === void 0) {\n      return void 0;\n    }\n    normalizedColor = parseColorFormat(normalizedColor);\n    if (isArbitraryValue(alpha)) {\n      return withAlphaValue(normalizedColor, unwrapArbitraryModifier(alpha));\n    }\n    if (((_tailwindConfig$theme = tailwindConfig.theme) === null || _tailwindConfig$theme === void 0 || (_tailwindConfig$theme = _tailwindConfig$theme.opacity) === null || _tailwindConfig$theme === void 0 ? void 0 : _tailwindConfig$theme[alpha]) === void 0) {\n      return void 0;\n    }\n    return withAlphaValue(normalizedColor, tailwindConfig.theme.opacity[alpha]);\n  }\n  return asValue(modifier, options, {\n    validate: color\n  });\n}\nfunction asLookupValue(modifier) {\n  var _options$values5;\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  return (_options$values5 = options.values) === null || _options$values5 === void 0 ? void 0 : _options$values5[modifier];\n}\nfunction guess(validate) {\n  return function (modifier, options) {\n    return asValue(modifier, options, {\n      validate: validate\n    });\n  };\n}\nvar typeMap = {\n  any: asValue,\n  color: asColor,\n  url: guess(url),\n  image: guess(module_esm_image),\n  length: guess(module_esm_length),\n  percentage: guess(percentage),\n  position: guess(position),\n  lookup: asLookupValue,\n  'generic-name': guess(genericName),\n  'family-name': guess(familyName),\n  number: guess(number),\n  'line-width': guess(lineWidth),\n  'absolute-size': guess(absoluteSize),\n  'relative-size': guess(relativeSize),\n  shadow: guess(shadow),\n  size: guess(backgroundSize)\n};\nvar supportedTypes = Object.keys(typeMap);\nfunction splitAtFirst(input, delim) {\n  var idx = input.indexOf(delim);\n  if (idx === -1) return [void 0, input];\n  return [input.slice(0, idx), input.slice(idx + 1)];\n}\nfunction coerceValue(types2, modifier, options, tailwindConfig) {\n  if (options.values && modifier in options.values) {\n    var _iterator16 = _createForOfIteratorHelper(types2 !== null && types2 !== void 0 ? types2 : []),\n      _step16;\n    try {\n      for (_iterator16.s(); !(_step16 = _iterator16.n()).done;) {\n        var type = _step16.value.type;\n        var result = typeMap[type](modifier, options, {\n          tailwindConfig: tailwindConfig\n        });\n        if (result === void 0) {\n          continue;\n        }\n        return [result, type, null];\n      }\n    } catch (err) {\n      _iterator16.e(err);\n    } finally {\n      _iterator16.f();\n    }\n  }\n  if (isArbitraryValue(modifier)) {\n    var arbitraryValue = modifier.slice(1, -1);\n    var _splitAtFirst = splitAtFirst(arbitraryValue, ':'),\n      _splitAtFirst2 = _slicedToArray(_splitAtFirst, 2),\n      explicitType = _splitAtFirst2[0],\n      value2 = _splitAtFirst2[1];\n    if (!/^[\\w-_]+$/g.test(explicitType)) {\n      value2 = arbitraryValue;\n    } else if (explicitType !== void 0 && !supportedTypes.includes(explicitType)) {\n      return [];\n    }\n    if (value2.length > 0 && supportedTypes.includes(explicitType)) {\n      return [asValue(\"[\".concat(value2, \"]\"), options), explicitType, null];\n    }\n  }\n  var matches = getMatchingTypes(types2, modifier, options, tailwindConfig);\n  var _iterator17 = _createForOfIteratorHelper(matches),\n    _step17;\n  try {\n    for (_iterator17.s(); !(_step17 = _iterator17.n()).done;) {\n      var match = _step17.value;\n      return match;\n    }\n  } catch (err) {\n    _iterator17.e(err);\n  } finally {\n    _iterator17.f();\n  }\n  return [];\n}\nfunction getMatchingTypes(types2, rawModifier, options, tailwindConfig) {\n  var modifiersEnabled, _splitUtilityModifier3, _splitUtilityModifier4, modifier, utilityModifier, canUseUtilityModifier, _options$modifiers$ut, _options$modifiers, configValue, _iterator18, _step18, _utilityModifier, type, result;\n  return _regeneratorRuntime().wrap(function getMatchingTypes$(_context8) {\n    while (1) switch (_context8.prev = _context8.next) {\n      case 0:\n        modifiersEnabled = flagEnabled(tailwindConfig, 'generalizedModifiers');\n        _splitUtilityModifier3 = splitUtilityModifier(rawModifier), _splitUtilityModifier4 = _slicedToArray(_splitUtilityModifier3, 2), modifier = _splitUtilityModifier4[0], utilityModifier = _splitUtilityModifier4[1];\n        canUseUtilityModifier = modifiersEnabled && options.modifiers != null && (options.modifiers === 'any' || _typeof(options.modifiers) === 'object' && (utilityModifier && isArbitraryValue(utilityModifier) || utilityModifier in options.modifiers));\n        if (!canUseUtilityModifier) {\n          modifier = rawModifier;\n          utilityModifier = void 0;\n        }\n        if (utilityModifier !== void 0 && modifier === '') {\n          modifier = 'DEFAULT';\n        }\n        if (utilityModifier !== void 0) {\n          if (_typeof(options.modifiers) === 'object') {\n            configValue = (_options$modifiers$ut = (_options$modifiers = options.modifiers) === null || _options$modifiers === void 0 ? void 0 : _options$modifiers[utilityModifier]) !== null && _options$modifiers$ut !== void 0 ? _options$modifiers$ut : null;\n            if (configValue !== null) {\n              utilityModifier = configValue;\n            } else if (isArbitraryValue(utilityModifier)) {\n              utilityModifier = unwrapArbitraryModifier(utilityModifier);\n            }\n          }\n        }\n        _iterator18 = _createForOfIteratorHelper(types2 !== null && types2 !== void 0 ? types2 : []);\n        _context8.prev = 7;\n        _iterator18.s();\n      case 9:\n        if ((_step18 = _iterator18.n()).done) {\n          _context8.next = 18;\n          break;\n        }\n        type = _step18.value.type;\n        result = typeMap[type](modifier, options, {\n          tailwindConfig: tailwindConfig\n        });\n        if (!(result === void 0)) {\n          _context8.next = 14;\n          break;\n        }\n        return _context8.abrupt(\"continue\", 16);\n      case 14:\n        _context8.next = 16;\n        return [result, type, (_utilityModifier = utilityModifier) !== null && _utilityModifier !== void 0 ? _utilityModifier : null];\n      case 16:\n        _context8.next = 9;\n        break;\n      case 18:\n        _context8.next = 23;\n        break;\n      case 20:\n        _context8.prev = 20;\n        _context8.t0 = _context8[\"catch\"](7);\n        _iterator18.e(_context8.t0);\n      case 23:\n        _context8.prev = 23;\n        _iterator18.f();\n        return _context8.finish(23);\n      case 26:\n      case \"end\":\n        return _context8.stop();\n    }\n  }, _marked, null, [[7, 20, 23, 26]]);\n}\n\n// node_modules/tailwindcss/src/util/formatVariantSelector.js\n\n\n\n// node_modules/tailwindcss/src/util/escapeClassName.js\n\nfunction escapeClassName(className) {\n  var _node$raws$value, _node$raws;\n  var node = dist_default().className();\n  node.value = className;\n  return escapeCommas((_node$raws$value = node === null || node === void 0 || (_node$raws = node.raws) === null || _node$raws === void 0 ? void 0 : _node$raws.value) !== null && _node$raws$value !== void 0 ? _node$raws$value : node.value);\n}\n\n// node_modules/tailwindcss/src/util/pseudoElements.js\nvar elementProperties = {\n  '::after': ['terminal', 'jumpable'],\n  '::backdrop': ['terminal', 'jumpable'],\n  '::before': ['terminal', 'jumpable'],\n  '::cue': ['terminal'],\n  '::cue-region': ['terminal'],\n  '::first-letter': ['terminal', 'jumpable'],\n  '::first-line': ['terminal', 'jumpable'],\n  '::grammar-error': ['terminal'],\n  '::marker': ['terminal', 'jumpable'],\n  '::part': ['terminal', 'actionable'],\n  '::placeholder': ['terminal', 'jumpable'],\n  '::selection': ['terminal', 'jumpable'],\n  '::slotted': ['terminal'],\n  '::spelling-error': ['terminal'],\n  '::target-text': ['terminal'],\n  '::file-selector-button': ['terminal', 'actionable'],\n  '::deep': ['actionable'],\n  '::v-deep': ['actionable'],\n  '::ng-deep': ['actionable'],\n  ':after': ['terminal', 'jumpable'],\n  ':before': ['terminal', 'jumpable'],\n  ':first-letter': ['terminal', 'jumpable'],\n  ':first-line': ['terminal', 'jumpable'],\n  ':where': [],\n  ':is': [],\n  ':has': [],\n  __default__: ['terminal', 'actionable']\n};\nfunction movePseudos(sel) {\n  var _sel$nodes;\n  var _movablePseudos = movablePseudos(sel),\n    _movablePseudos2 = _slicedToArray(_movablePseudos, 1),\n    pseudos = _movablePseudos2[0];\n  pseudos.forEach(function (_ref60) {\n    var _ref61 = _slicedToArray(_ref60, 2),\n      sel2 = _ref61[0],\n      pseudo = _ref61[1];\n    return sel2.removeChild(pseudo);\n  });\n  (_sel$nodes = sel.nodes).push.apply(_sel$nodes, _toConsumableArray(pseudos.map(function (_ref62) {\n    var _ref63 = _slicedToArray(_ref62, 2),\n      pseudo = _ref63[1];\n    return pseudo;\n  })));\n  return sel;\n}\nfunction movablePseudos(sel) {\n  var buffer = [];\n  var lastSeenElement = null;\n  var _iterator19 = _createForOfIteratorHelper(sel.nodes),\n    _step19;\n  try {\n    for (_iterator19.s(); !(_step19 = _iterator19.n()).done;) {\n      var node = _step19.value;\n      if (node.type === 'combinator') {\n        buffer = buffer.filter(function (_ref64) {\n          var _ref65 = _slicedToArray(_ref64, 2),\n            node2 = _ref65[1];\n          return propertiesForPseudo(node2).includes('jumpable');\n        });\n        lastSeenElement = null;\n      } else if (node.type === 'pseudo') {\n        var _node$nodes;\n        if (isMovablePseudoElement(node)) {\n          lastSeenElement = node;\n          buffer.push([sel, node, null]);\n        } else if (lastSeenElement && isAttachablePseudoClass(node, lastSeenElement)) {\n          buffer.push([sel, node, lastSeenElement]);\n        } else {\n          lastSeenElement = null;\n        }\n        var _iterator20 = _createForOfIteratorHelper((_node$nodes = node.nodes) !== null && _node$nodes !== void 0 ? _node$nodes : []),\n          _step20;\n        try {\n          for (_iterator20.s(); !(_step20 = _iterator20.n()).done;) {\n            var _buffer;\n            var sub = _step20.value;\n            var _movablePseudos3 = movablePseudos(sub),\n              _movablePseudos4 = _slicedToArray(_movablePseudos3, 2),\n              movable = _movablePseudos4[0],\n              lastSeenElementInSub = _movablePseudos4[1];\n            lastSeenElement = lastSeenElementInSub || lastSeenElement;\n            (_buffer = buffer).push.apply(_buffer, _toConsumableArray(movable));\n          }\n        } catch (err) {\n          _iterator20.e(err);\n        } finally {\n          _iterator20.f();\n        }\n      }\n    }\n  } catch (err) {\n    _iterator19.e(err);\n  } finally {\n    _iterator19.f();\n  }\n  return [buffer, lastSeenElement];\n}\nfunction isPseudoElement(node) {\n  return node.value.startsWith('::') || elementProperties[node.value] !== void 0;\n}\nfunction isMovablePseudoElement(node) {\n  return isPseudoElement(node) && propertiesForPseudo(node).includes('terminal');\n}\nfunction isAttachablePseudoClass(node, pseudo) {\n  if (node.type !== 'pseudo') return false;\n  if (isPseudoElement(node)) return false;\n  return propertiesForPseudo(pseudo).includes('actionable');\n}\nfunction propertiesForPseudo(pseudo) {\n  var _elementProperties$ps;\n  return (_elementProperties$ps = elementProperties[pseudo.value]) !== null && _elementProperties$ps !== void 0 ? _elementProperties$ps : elementProperties.__default__;\n}\n\n// node_modules/tailwindcss/src/util/formatVariantSelector.js\nvar MERGE = ':merge';\nfunction formatVariantSelector(formats, _ref66) {\n  var _context$tailwindConf;\n  var context = _ref66.context,\n    candidate = _ref66.candidate;\n  var prefix3 = (_context$tailwindConf = context === null || context === void 0 ? void 0 : context.tailwindConfig.prefix) !== null && _context$tailwindConf !== void 0 ? _context$tailwindConf : '';\n  var parsedFormats = formats.map(function (format) {\n    var ast = dist_default()().astSync(format.format);\n    return _objectSpread(_objectSpread({}, format), {}, {\n      ast: format.respectPrefix ? prefixSelector_default(prefix3, ast) : ast\n    });\n  });\n  var formatAst = dist_default().root({\n    nodes: [dist_default().selector({\n      nodes: [dist_default().className({\n        value: escapeClassName(candidate)\n      })]\n    })]\n  });\n  var _iterator21 = _createForOfIteratorHelper(parsedFormats),\n    _step21;\n  try {\n    for (_iterator21.s(); !(_step21 = _iterator21.n()).done;) {\n      var ast = _step21.value.ast;\n      var _handleMergePseudo = handleMergePseudo(formatAst, ast);\n      var _handleMergePseudo2 = _slicedToArray(_handleMergePseudo, 2);\n      formatAst = _handleMergePseudo2[0];\n      ast = _handleMergePseudo2[1];\n      ast.walkNesting(function (nesting) {\n        return nesting.replaceWith.apply(nesting, _toConsumableArray(formatAst.nodes[0].nodes));\n      });\n      formatAst = ast;\n    }\n  } catch (err) {\n    _iterator21.e(err);\n  } finally {\n    _iterator21.f();\n  }\n  return formatAst;\n}\nfunction simpleSelectorForNode(node) {\n  var nodes = [];\n  while (node.prev() && node.prev().type !== 'combinator') {\n    node = node.prev();\n  }\n  while (node && node.type !== 'combinator') {\n    nodes.push(node);\n    node = node.next();\n  }\n  return nodes;\n}\nfunction resortSelector(sel) {\n  sel.sort(function (a, b) {\n    if (a.type === 'tag' && b.type === 'class') {\n      return -1;\n    } else if (a.type === 'class' && b.type === 'tag') {\n      return 1;\n    } else if (a.type === 'class' && b.type === 'pseudo' && b.value.startsWith('::')) {\n      return -1;\n    } else if (a.type === 'pseudo' && a.value.startsWith('::') && b.type === 'class') {\n      return 1;\n    }\n    return sel.index(a) - sel.index(b);\n  });\n  return sel;\n}\nfunction eliminateIrrelevantSelectors(sel, base) {\n  var hasClassesMatchingCandidate = false;\n  sel.walk(function (child) {\n    if (child.type === 'class' && child.value === base) {\n      hasClassesMatchingCandidate = true;\n      return false;\n    }\n  });\n  if (!hasClassesMatchingCandidate) {\n    sel.remove();\n  }\n}\nfunction finalizeSelector(current, formats, _ref67) {\n  var _context$tailwindConf2, _context$tailwindConf3, _base;\n  var context = _ref67.context,\n    candidate = _ref67.candidate,\n    base = _ref67.base;\n  var separator = (_context$tailwindConf2 = context === null || context === void 0 || (_context$tailwindConf3 = context.tailwindConfig) === null || _context$tailwindConf3 === void 0 ? void 0 : _context$tailwindConf3.separator) !== null && _context$tailwindConf2 !== void 0 ? _context$tailwindConf2 : ':';\n  base = (_base = base) !== null && _base !== void 0 ? _base : splitAtTopLevelOnly(candidate, separator).pop();\n  var selector = dist_default()().astSync(current);\n  selector.walkClasses(function (node) {\n    if (node.raws && node.value.includes(base)) {\n      node.raws.value = escapeClassName(unesc_default()(node.raws.value));\n    }\n  });\n  selector.each(function (sel) {\n    return eliminateIrrelevantSelectors(sel, base);\n  });\n  if (selector.length === 0) {\n    return null;\n  }\n  var formatAst = Array.isArray(formats) ? formatVariantSelector(formats, {\n    context: context,\n    candidate: candidate\n  }) : formats;\n  if (formatAst === null) {\n    return selector.toString();\n  }\n  var simpleStart = dist_default().comment({\n    value: '/*__simple__*/'\n  });\n  var simpleEnd = dist_default().comment({\n    value: '/*__simple__*/'\n  });\n  selector.walkClasses(function (node) {\n    var _parent$nodes;\n    if (node.value !== base) {\n      return;\n    }\n    var parent = node.parent;\n    var formatNodes = formatAst.nodes[0].nodes;\n    if (parent.nodes.length === 1) {\n      node.replaceWith.apply(node, _toConsumableArray(formatNodes));\n      return;\n    }\n    var simpleSelector = simpleSelectorForNode(node);\n    parent.insertBefore(simpleSelector[0], simpleStart);\n    parent.insertAfter(simpleSelector[simpleSelector.length - 1], simpleEnd);\n    var _iterator22 = _createForOfIteratorHelper(formatNodes),\n      _step22;\n    try {\n      for (_iterator22.s(); !(_step22 = _iterator22.n()).done;) {\n        var child = _step22.value;\n        parent.insertBefore(simpleSelector[0], child.clone());\n      }\n    } catch (err) {\n      _iterator22.e(err);\n    } finally {\n      _iterator22.f();\n    }\n    node.remove();\n    simpleSelector = simpleSelectorForNode(simpleStart);\n    var firstNode = parent.index(simpleStart);\n    (_parent$nodes = parent.nodes).splice.apply(_parent$nodes, [firstNode, simpleSelector.length].concat(_toConsumableArray(resortSelector(dist_default().selector({\n      nodes: simpleSelector\n    })).nodes)));\n    simpleStart.remove();\n    simpleEnd.remove();\n  });\n  selector.walkPseudos(function (p) {\n    if (p.value === MERGE) {\n      p.replaceWith(p.nodes);\n    }\n  });\n  selector.each(function (sel) {\n    return movePseudos(sel);\n  });\n  return selector.toString();\n}\nfunction handleMergePseudo(selector, format) {\n  var merges = [];\n  selector.walkPseudos(function (pseudo) {\n    if (pseudo.value === MERGE) {\n      merges.push({\n        pseudo: pseudo,\n        value: pseudo.nodes[0].toString()\n      });\n    }\n  });\n  format.walkPseudos(function (pseudo) {\n    if (pseudo.value !== MERGE) {\n      return;\n    }\n    var value2 = pseudo.nodes[0].toString();\n    var existing = merges.find(function (merge) {\n      return merge.value === value2;\n    });\n    if (!existing) {\n      return;\n    }\n    var attachments = [];\n    var next = pseudo.next();\n    while (next && next.type !== 'combinator') {\n      attachments.push(next);\n      next = next.next();\n    }\n    var combinator = next;\n    existing.pseudo.parent.insertAfter(existing.pseudo, dist_default().selector({\n      nodes: attachments.map(function (node) {\n        return node.clone();\n      })\n    }));\n    pseudo.remove();\n    attachments.forEach(function (node) {\n      return node.remove();\n    });\n    if (combinator && combinator.type === 'combinator') {\n      combinator.remove();\n    }\n  });\n  return [selector, format];\n}\n\n// node_modules/tailwindcss/src/util/nameClass.js\nfunction asClass(name) {\n  return escapeCommas(\".\".concat(escapeClassName(name)));\n}\nfunction nameClass(classPrefix, key) {\n  return asClass(formatClass(classPrefix, key));\n}\nfunction formatClass(classPrefix, key) {\n  if (key === 'DEFAULT') {\n    return classPrefix;\n  }\n  if (key === '-' || key === '-DEFAULT') {\n    return \"-\".concat(classPrefix);\n  }\n  if (key.startsWith('-')) {\n    return \"-\".concat(classPrefix).concat(key);\n  }\n  if (key.startsWith('/')) {\n    return \"\".concat(classPrefix).concat(key);\n  }\n  return \"\".concat(classPrefix, \"-\").concat(key);\n}\n\n// node_modules/tailwindcss/src/lib/setupContextUtils.js\n\n\n\n\n// node_modules/tailwindcss/src/util/transformThemeValue.js\n\nfunction transformThemeValue(themeSection) {\n  if (['fontSize', 'outline'].includes(themeSection)) {\n    return function (value2) {\n      if (typeof value2 === 'function') value2 = value2({});\n      if (Array.isArray(value2)) value2 = value2[0];\n      return value2;\n    };\n  }\n  if (themeSection === 'fontFamily') {\n    return function (value2) {\n      if (typeof value2 === 'function') value2 = value2({});\n      var families = Array.isArray(value2) && isPlainObject(value2[1]) ? value2[0] : value2;\n      return Array.isArray(families) ? families.join(', ') : families;\n    };\n  }\n  if (['boxShadow', 'transitionProperty', 'transitionDuration', 'transitionDelay', 'transitionTimingFunction', 'backgroundImage', 'backgroundSize', 'backgroundColor', 'cursor', 'animation'].includes(themeSection)) {\n    return function (value2) {\n      if (typeof value2 === 'function') value2 = value2({});\n      if (Array.isArray(value2)) value2 = value2.join(', ');\n      return value2;\n    };\n  }\n  if (['gridTemplateColumns', 'gridTemplateRows', 'objectPosition'].includes(themeSection)) {\n    return function (value2) {\n      if (typeof value2 === 'function') value2 = value2({});\n      if (typeof value2 === 'string') value2 = lib_postcss.list.comma(value2).join(' ');\n      return value2;\n    };\n  }\n  return function (value2) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    if (typeof value2 === 'function') {\n      value2 = value2(opts);\n    }\n    return value2;\n  };\n}\n\n// src/stubs/path.ts\nvar join = function join() {\n  return '';\n};\n\n// node_modules/tailwindcss/src/corePlugins.js\n\n\n// node_modules/tailwindcss/src/util/createUtilityPlugin.js\nfunction createUtilityPlugin(themeKey) {\n  var utilityVariations = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [[themeKey, [themeKey]]];\n  var _ref68 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},\n    _ref68$filterDefault = _ref68.filterDefault,\n    filterDefault = _ref68$filterDefault === void 0 ? false : _ref68$filterDefault,\n    options = _objectWithoutProperties(_ref68, _excluded);\n  var transformValue = transformThemeValue(themeKey);\n  return function (_ref69) {\n    var matchUtilities = _ref69.matchUtilities,\n      theme = _ref69.theme;\n    var _iterator23 = _createForOfIteratorHelper(utilityVariations),\n      _step23;\n    try {\n      for (_iterator23.s(); !(_step23 = _iterator23.n()).done;) {\n        var _theme;\n        var utilityVariation = _step23.value;\n        var group = Array.isArray(utilityVariation[0]) ? utilityVariation : [utilityVariation];\n        matchUtilities(group.reduce(function (obj, _ref70) {\n          var _ref71 = _slicedToArray(_ref70, 2),\n            classPrefix = _ref71[0],\n            properties = _ref71[1];\n          return Object.assign(obj, _defineProperty({}, classPrefix, function (value2) {\n            return properties.reduce(function (obj2, name) {\n              if (Array.isArray(name)) {\n                return Object.assign(obj2, _defineProperty({}, name[0], name[1]));\n              }\n              return Object.assign(obj2, _defineProperty({}, name, transformValue(value2)));\n            }, {});\n          }));\n        }, {}), _objectSpread(_objectSpread({}, options), {}, {\n          values: filterDefault ? Object.fromEntries(Object.entries((_theme = theme(themeKey)) !== null && _theme !== void 0 ? _theme : {}).filter(function (_ref72) {\n            var _ref73 = _slicedToArray(_ref72, 1),\n              modifier = _ref73[0];\n            return modifier !== 'DEFAULT';\n          })) : theme(themeKey)\n        }));\n      }\n    } catch (err) {\n      _iterator23.e(err);\n    } finally {\n      _iterator23.f();\n    }\n  };\n}\n\n// node_modules/tailwindcss/src/util/buildMediaQuery.js\nfunction buildMediaQuery(screens) {\n  screens = Array.isArray(screens) ? screens : [screens];\n  return screens.map(function (screen) {\n    var values = screen.values.map(function (screen2) {\n      if (screen2.raw !== void 0) {\n        return screen2.raw;\n      }\n      return [screen2.min && \"(min-width: \".concat(screen2.min, \")\"), screen2.max && \"(max-width: \".concat(screen2.max, \")\")].filter(Boolean).join(' and ');\n    });\n    return screen.not ? \"not all and \".concat(values) : values;\n  }).join(', ');\n}\n\n// node_modules/tailwindcss/src/util/parseAnimationValue.js\nvar DIRECTIONS = /* @__PURE__ */new Set(['normal', 'reverse', 'alternate', 'alternate-reverse']);\nvar PLAY_STATES = /* @__PURE__ */new Set(['running', 'paused']);\nvar FILL_MODES = /* @__PURE__ */new Set(['none', 'forwards', 'backwards', 'both']);\nvar ITERATION_COUNTS = /* @__PURE__ */new Set(['infinite']);\nvar TIMINGS = /* @__PURE__ */new Set(['linear', 'ease', 'ease-in', 'ease-out', 'ease-in-out', 'step-start', 'step-end']);\nvar TIMING_FNS = ['cubic-bezier', 'steps'];\nvar COMMA = /\\,(?![^(]*\\))/g;\nvar SPACE2 = /\\ +(?![^(]*\\))/g;\nvar TIME = /^(-?[\\d.]+m?s)$/;\nvar DIGIT = /^(\\d+)$/;\nfunction parseAnimationValue(input) {\n  var animations = input.split(COMMA);\n  return animations.map(function (animation) {\n    var value2 = animation.trim();\n    var result = {\n      value: value2\n    };\n    var parts = value2.split(SPACE2);\n    var seen = /* @__PURE__ */new Set();\n    var _iterator24 = _createForOfIteratorHelper(parts),\n      _step24;\n    try {\n      var _loop3 = function _loop3() {\n        var part = _step24.value;\n        if (!seen.has('DIRECTIONS') && DIRECTIONS.has(part)) {\n          result.direction = part;\n          seen.add('DIRECTIONS');\n        } else if (!seen.has('PLAY_STATES') && PLAY_STATES.has(part)) {\n          result.playState = part;\n          seen.add('PLAY_STATES');\n        } else if (!seen.has('FILL_MODES') && FILL_MODES.has(part)) {\n          result.fillMode = part;\n          seen.add('FILL_MODES');\n        } else if (!seen.has('ITERATION_COUNTS') && (ITERATION_COUNTS.has(part) || DIGIT.test(part))) {\n          result.iterationCount = part;\n          seen.add('ITERATION_COUNTS');\n        } else if (!seen.has('TIMING_FUNCTION') && TIMINGS.has(part)) {\n          result.timingFunction = part;\n          seen.add('TIMING_FUNCTION');\n        } else if (!seen.has('TIMING_FUNCTION') && TIMING_FNS.some(function (f) {\n          return part.startsWith(\"\".concat(f, \"(\"));\n        })) {\n          result.timingFunction = part;\n          seen.add('TIMING_FUNCTION');\n        } else if (!seen.has('DURATION') && TIME.test(part)) {\n          result.duration = part;\n          seen.add('DURATION');\n        } else if (!seen.has('DELAY') && TIME.test(part)) {\n          result.delay = part;\n          seen.add('DELAY');\n        } else if (!seen.has('NAME')) {\n          result.name = part;\n          seen.add('NAME');\n        } else {\n          if (!result.unknown) result.unknown = [];\n          result.unknown.push(part);\n        }\n      };\n      for (_iterator24.s(); !(_step24 = _iterator24.n()).done;) {\n        _loop3();\n      }\n    } catch (err) {\n      _iterator24.e(err);\n    } finally {\n      _iterator24.f();\n    }\n    return result;\n  });\n}\n\n// node_modules/tailwindcss/src/util/flattenColorPalette.js\nvar _flattenColorPalette = function flattenColorPalette(colors) {\n  return Object.assign.apply(Object, [{}].concat(_toConsumableArray(Object.entries(colors !== null && colors !== void 0 ? colors : {}).flatMap(function (_ref74) {\n    var _ref75 = _slicedToArray(_ref74, 2),\n      color2 = _ref75[0],\n      values = _ref75[1];\n    return _typeof(values) == 'object' ? Object.entries(_flattenColorPalette(values)).map(function (_ref76) {\n      var _ref77 = _slicedToArray(_ref76, 2),\n        number2 = _ref77[0],\n        hex = _ref77[1];\n      return _defineProperty({}, color2 + (number2 === 'DEFAULT' ? '' : \"-\".concat(number2)), hex);\n    }) : [_defineProperty({}, \"\".concat(color2), values)];\n  }))));\n};\nvar flattenColorPalette_default = _flattenColorPalette;\n\n// node_modules/tailwindcss/src/util/toColorValue.js\nfunction toColorValue(maybeFunction) {\n  return typeof maybeFunction === 'function' ? maybeFunction({}) : maybeFunction;\n}\n\n// node_modules/tailwindcss/src/util/normalizeScreens.js\nfunction normalizeScreens(screens) {\n  var root = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n  if (Array.isArray(screens)) {\n    return screens.map(function (screen) {\n      if (root && Array.isArray(screen)) {\n        throw new Error('The tuple syntax is not supported for `screens`.');\n      }\n      if (typeof screen === 'string') {\n        return {\n          name: screen.toString(),\n          not: false,\n          values: [{\n            min: screen,\n            max: void 0\n          }]\n        };\n      }\n      var _screen = _slicedToArray(screen, 2),\n        name = _screen[0],\n        options = _screen[1];\n      name = name.toString();\n      if (typeof options === 'string') {\n        return {\n          name: name,\n          not: false,\n          values: [{\n            min: options,\n            max: void 0\n          }]\n        };\n      }\n      if (Array.isArray(options)) {\n        return {\n          name: name,\n          not: false,\n          values: options.map(function (option) {\n            return resolveValue(option);\n          })\n        };\n      }\n      return {\n        name: name,\n        not: false,\n        values: [resolveValue(options)]\n      };\n    });\n  }\n  return normalizeScreens(Object.entries(screens !== null && screens !== void 0 ? screens : {}), false);\n}\nfunction isScreenSortable(screen) {\n  if (screen.values.length !== 1) {\n    return {\n      result: false,\n      reason: 'multiple-values'\n    };\n  } else if (screen.values[0].raw !== void 0) {\n    return {\n      result: false,\n      reason: 'raw-values'\n    };\n  } else if (screen.values[0].min !== void 0 && screen.values[0].max !== void 0) {\n    return {\n      result: false,\n      reason: 'min-and-max'\n    };\n  }\n  return {\n    result: true,\n    reason: null\n  };\n}\nfunction compareScreens(type, a, z) {\n  var aScreen = toScreen(a, type);\n  var zScreen = toScreen(z, type);\n  var aSorting = isScreenSortable(aScreen);\n  var bSorting = isScreenSortable(zScreen);\n  if (aSorting.reason === 'multiple-values' || bSorting.reason === 'multiple-values') {\n    throw new Error('Attempted to sort a screen with multiple values. This should never happen. Please open a bug report.');\n  } else if (aSorting.reason === 'raw-values' || bSorting.reason === 'raw-values') {\n    throw new Error('Attempted to sort a screen with raw values. This should never happen. Please open a bug report.');\n  } else if (aSorting.reason === 'min-and-max' || bSorting.reason === 'min-and-max') {\n    throw new Error('Attempted to sort a screen with both min and max values. This should never happen. Please open a bug report.');\n  }\n  var _aScreen$values$ = aScreen.values[0],\n    aMin = _aScreen$values$.min,\n    aMax = _aScreen$values$.max;\n  var _zScreen$values$ = zScreen.values[0],\n    zMin = _zScreen$values$.min,\n    zMax = _zScreen$values$.max;\n  if (a.not) {\n    var _ref80 = [aMax, aMin];\n    aMin = _ref80[0];\n    aMax = _ref80[1];\n  }\n  if (z.not) {\n    var _ref81 = [zMax, zMin];\n    zMin = _ref81[0];\n    zMax = _ref81[1];\n  }\n  aMin = aMin === void 0 ? aMin : parseFloat(aMin);\n  aMax = aMax === void 0 ? aMax : parseFloat(aMax);\n  zMin = zMin === void 0 ? zMin : parseFloat(zMin);\n  zMax = zMax === void 0 ? zMax : parseFloat(zMax);\n  var _ref82 = type === 'min' ? [aMin, zMin] : [zMax, aMax],\n    _ref83 = _slicedToArray(_ref82, 2),\n    aValue = _ref83[0],\n    zValue = _ref83[1];\n  return aValue - zValue;\n}\nfunction toScreen(value2, type) {\n  if (_typeof(value2) === 'object') {\n    return value2;\n  }\n  return {\n    name: 'arbitrary-screen',\n    values: [_defineProperty({}, type, value2)]\n  };\n}\nfunction resolveValue() {\n  var _ref85 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n    _minWidth = _ref85['min-width'],\n    _ref85$min = _ref85.min,\n    min = _ref85$min === void 0 ? _minWidth : _ref85$min,\n    max2 = _ref85.max,\n    raw = _ref85.raw;\n  return {\n    min: min,\n    max: max2,\n    raw: raw\n  };\n}\n\n// node_modules/tailwindcss/src/util/removeAlphaVariables.js\nfunction removeAlphaVariables(container, toRemove) {\n  container.walkDecls(function (decl) {\n    if (toRemove.includes(decl.prop)) {\n      decl.remove();\n      return;\n    }\n    var _iterator25 = _createForOfIteratorHelper(toRemove),\n      _step25;\n    try {\n      for (_iterator25.s(); !(_step25 = _iterator25.n()).done;) {\n        var varName = _step25.value;\n        if (decl.value.includes(\"/ var(\".concat(varName, \")\"))) {\n          decl.value = decl.value.replace(\"/ var(\".concat(varName, \")\"), '');\n        }\n      }\n    } catch (err) {\n      _iterator25.e(err);\n    } finally {\n      _iterator25.f();\n    }\n  });\n}\n\n// node_modules/tailwindcss/src/corePlugins.js\nvar variantPlugins = {\n  childVariant: function childVariant(_ref86) {\n    var addVariant = _ref86.addVariant;\n    addVariant('*', '& > *');\n  },\n  pseudoElementVariants: function pseudoElementVariants(_ref87) {\n    var addVariant = _ref87.addVariant;\n    addVariant('first-letter', '&::first-letter');\n    addVariant('first-line', '&::first-line');\n    addVariant('marker', [function (_ref88) {\n      var container = _ref88.container;\n      removeAlphaVariables(container, ['--tw-text-opacity']);\n      return '& *::marker';\n    }, function (_ref89) {\n      var container = _ref89.container;\n      removeAlphaVariables(container, ['--tw-text-opacity']);\n      return '&::marker';\n    }]);\n    addVariant('selection', ['& *::selection', '&::selection']);\n    addVariant('file', '&::file-selector-button');\n    addVariant('placeholder', '&::placeholder');\n    addVariant('backdrop', '&::backdrop');\n    addVariant('before', function (_ref90) {\n      var container = _ref90.container;\n      container.walkRules(function (rule) {\n        var foundContent = false;\n        rule.walkDecls('content', function () {\n          foundContent = true;\n        });\n        if (!foundContent) {\n          rule.prepend(lib_postcss.decl({\n            prop: 'content',\n            value: 'var(--tw-content)'\n          }));\n        }\n      });\n      return '&::before';\n    });\n    addVariant('after', function (_ref91) {\n      var container = _ref91.container;\n      container.walkRules(function (rule) {\n        var foundContent = false;\n        rule.walkDecls('content', function () {\n          foundContent = true;\n        });\n        if (!foundContent) {\n          rule.prepend(lib_postcss.decl({\n            prop: 'content',\n            value: 'var(--tw-content)'\n          }));\n        }\n      });\n      return '&::after';\n    });\n  },\n  pseudoClassVariants: function pseudoClassVariants(_ref92) {\n    var addVariant = _ref92.addVariant,\n      matchVariant = _ref92.matchVariant,\n      config = _ref92.config,\n      prefix3 = _ref92.prefix;\n    var pseudoVariants = [['first', '&:first-child'], ['last', '&:last-child'], ['only', '&:only-child'], ['odd', '&:nth-child(odd)'], ['even', '&:nth-child(even)'], 'first-of-type', 'last-of-type', 'only-of-type', ['visited', function (_ref93) {\n      var container = _ref93.container;\n      removeAlphaVariables(container, ['--tw-text-opacity', '--tw-border-opacity', '--tw-bg-opacity']);\n      return '&:visited';\n    }], 'target', ['open', '&[open]'], 'default', 'checked', 'indeterminate', 'placeholder-shown', 'autofill', 'optional', 'required', 'valid', 'invalid', 'in-range', 'out-of-range', 'read-only', 'empty', 'focus-within', ['hover', !flagEnabled(config(), 'hoverOnlyWhenSupported') ? '&:hover' : '@media (hover: hover) and (pointer: fine) { &:hover }'], 'focus', 'focus-visible', 'active', 'enabled', 'disabled'].map(function (variant) {\n      return Array.isArray(variant) ? variant : [variant, \"&:\".concat(variant)];\n    });\n    var _iterator26 = _createForOfIteratorHelper(pseudoVariants),\n      _step26;\n    try {\n      var _loop5 = function _loop5() {\n        var _step26$value = _slicedToArray(_step26.value, 2),\n          variantName = _step26$value[0],\n          state = _step26$value[1];\n        addVariant(variantName, function (ctx) {\n          var result = typeof state === 'function' ? state(ctx) : state;\n          return result;\n        });\n      };\n      for (_iterator26.s(); !(_step26 = _iterator26.n()).done;) {\n        _loop5();\n      }\n    } catch (err) {\n      _iterator26.e(err);\n    } finally {\n      _iterator26.f();\n    }\n    var variants = {\n      group: function group(_, _ref94) {\n        var modifier = _ref94.modifier;\n        return modifier ? [\":merge(\".concat(prefix3('.group'), \"\\\\/\").concat(escapeClassName(modifier), \")\"), ' &'] : [\":merge(\".concat(prefix3('.group'), \")\"), ' &'];\n      },\n      peer: function peer(_, _ref95) {\n        var modifier = _ref95.modifier;\n        return modifier ? [\":merge(\".concat(prefix3('.peer'), \"\\\\/\").concat(escapeClassName(modifier), \")\"), ' ~ &'] : [\":merge(\".concat(prefix3('.peer'), \")\"), ' ~ &'];\n      }\n    };\n    var _loop4 = function _loop4() {\n      var _Object$entries$_i = _slicedToArray(_Object$entries[_i4], 2),\n        name = _Object$entries$_i[0],\n        fn = _Object$entries$_i[1];\n      matchVariant(name, function () {\n        var value2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n        var extra = arguments.length > 1 ? arguments[1] : undefined;\n        var result = normalize(typeof value2 === 'function' ? value2(extra) : value2);\n        if (!result.includes('&')) result = '&' + result;\n        var _fn = fn('', extra),\n          _fn2 = _slicedToArray(_fn, 2),\n          a = _fn2[0],\n          b = _fn2[1];\n        var start = null;\n        var end = null;\n        var quotes2 = 0;\n        for (var i = 0; i < result.length; ++i) {\n          var c = result[i];\n          if (c === '&') {\n            start = i;\n          } else if (c === \"'\" || c === '\"') {\n            quotes2 += 1;\n          } else if (start !== null && c === ' ' && !quotes2) {\n            end = i;\n          }\n        }\n        if (start !== null && end === null) {\n          end = result.length;\n        }\n        return result.slice(0, start) + a + result.slice(start + 1, end) + b + result.slice(end);\n      }, _defineProperty({\n        values: Object.fromEntries(pseudoVariants)\n      }, INTERNAL_FEATURES, {\n        respectPrefix: false\n      }));\n    };\n    for (var _i4 = 0, _Object$entries = Object.entries(variants); _i4 < _Object$entries.length; _i4++) {\n      _loop4();\n    }\n  },\n  directionVariants: function directionVariants(_ref96) {\n    var addVariant = _ref96.addVariant;\n    addVariant('ltr', '&:where([dir=\"ltr\"], [dir=\"ltr\"] *)');\n    addVariant('rtl', '&:where([dir=\"rtl\"], [dir=\"rtl\"] *)');\n  },\n  reducedMotionVariants: function reducedMotionVariants(_ref97) {\n    var addVariant = _ref97.addVariant;\n    addVariant('motion-safe', '@media (prefers-reduced-motion: no-preference)');\n    addVariant('motion-reduce', '@media (prefers-reduced-motion: reduce)');\n  },\n  darkVariants: function darkVariants(_ref98) {\n    var config = _ref98.config,\n      addVariant = _ref98.addVariant;\n    var _concat = [].concat(config('darkMode', 'media')),\n      _concat2 = _slicedToArray(_concat, 2),\n      mode = _concat2[0],\n      _concat2$ = _concat2[1],\n      selector = _concat2$ === void 0 ? '.dark' : _concat2$;\n    if (mode === false) {\n      mode = 'media';\n      log_default.warn('darkmode-false', ['The `darkMode` option in your Tailwind CSS configuration is set to `false`, which now behaves the same as `media`.', 'Change `darkMode` to `media` or remove it entirely.', 'https://tailwindcss.com/docs/upgrade-guide#remove-dark-mode-configuration']);\n    }\n    if (mode === 'variant') {\n      var formats;\n      if (Array.isArray(selector)) {\n        formats = selector;\n      } else if (typeof selector === 'function') {\n        formats = selector;\n      } else if (typeof selector === 'string') {\n        formats = [selector];\n      }\n      if (Array.isArray(formats)) {\n        var _iterator27 = _createForOfIteratorHelper(formats),\n          _step27;\n        try {\n          for (_iterator27.s(); !(_step27 = _iterator27.n()).done;) {\n            var format = _step27.value;\n            if (format === '.dark') {\n              mode = false;\n              log_default.warn('darkmode-variant-without-selector', ['When using `variant` for `darkMode`, you must provide a selector.', 'Example: `darkMode: [\"variant\", \".your-selector &\"]`']);\n            } else if (!format.includes('&')) {\n              mode = false;\n              log_default.warn('darkmode-variant-without-ampersand', ['When using `variant` for `darkMode`, your selector must contain `&`.', 'Example `darkMode: [\"variant\", \".your-selector &\"]`']);\n            }\n          }\n        } catch (err) {\n          _iterator27.e(err);\n        } finally {\n          _iterator27.f();\n        }\n      }\n      selector = formats;\n    }\n    if (mode === 'selector') {\n      addVariant('dark', \"&:where(\".concat(selector, \", \").concat(selector, \" *)\"));\n    } else if (mode === 'media') {\n      addVariant('dark', '@media (prefers-color-scheme: dark)');\n    } else if (mode === 'variant') {\n      addVariant('dark', selector);\n    } else if (mode === 'class') {\n      addVariant('dark', \":is(\".concat(selector, \" &)\"));\n    }\n  },\n  printVariant: function printVariant(_ref99) {\n    var addVariant = _ref99.addVariant;\n    addVariant('print', '@media print');\n  },\n  screenVariants: function screenVariants(_ref100) {\n    var _theme2;\n    var theme = _ref100.theme,\n      addVariant = _ref100.addVariant,\n      matchVariant = _ref100.matchVariant;\n    var rawScreens = (_theme2 = theme('screens')) !== null && _theme2 !== void 0 ? _theme2 : {};\n    var areSimpleScreens = Object.values(rawScreens).every(function (v) {\n      return typeof v === 'string';\n    });\n    var screens = normalizeScreens(theme('screens'));\n    var unitCache = /* @__PURE__ */new Set([]);\n    function units(value2) {\n      var _value2$match$, _value2$match2;\n      return (_value2$match$ = (_value2$match2 = value2.match(/(\\D+)$/)) === null || _value2$match2 === void 0 ? void 0 : _value2$match2[1]) !== null && _value2$match$ !== void 0 ? _value2$match$ : '(none)';\n    }\n    function recordUnits(value2) {\n      if (value2 !== void 0) {\n        unitCache.add(units(value2));\n      }\n    }\n    function canUseUnits(value2) {\n      recordUnits(value2);\n      return unitCache.size === 1;\n    }\n    var _iterator28 = _createForOfIteratorHelper(screens),\n      _step28;\n    try {\n      for (_iterator28.s(); !(_step28 = _iterator28.n()).done;) {\n        var screen = _step28.value;\n        var _iterator30 = _createForOfIteratorHelper(screen.values),\n          _step30;\n        try {\n          for (_iterator30.s(); !(_step30 = _iterator30.n()).done;) {\n            var value2 = _step30.value;\n            recordUnits(value2.min);\n            recordUnits(value2.max);\n          }\n        } catch (err) {\n          _iterator30.e(err);\n        } finally {\n          _iterator30.f();\n        }\n      }\n    } catch (err) {\n      _iterator28.e(err);\n    } finally {\n      _iterator28.f();\n    }\n    var screensUseConsistentUnits = unitCache.size <= 1;\n    function buildScreenValues(type) {\n      return Object.fromEntries(screens.filter(function (screen) {\n        return isScreenSortable(screen).result;\n      }).map(function (screen) {\n        var _screen$values$ = screen.values[0],\n          min = _screen$values$.min,\n          max2 = _screen$values$.max;\n        if (type === 'min' && min !== void 0) {\n          return screen;\n        } else if (type === 'min' && max2 !== void 0) {\n          return _objectSpread(_objectSpread({}, screen), {}, {\n            not: !screen.not\n          });\n        } else if (type === 'max' && max2 !== void 0) {\n          return screen;\n        } else if (type === 'max' && min !== void 0) {\n          return _objectSpread(_objectSpread({}, screen), {}, {\n            not: !screen.not\n          });\n        }\n      }).map(function (screen) {\n        return [screen.name, screen];\n      }));\n    }\n    function buildSort(type) {\n      return function (a, z) {\n        return compareScreens(type, a.value, z.value);\n      };\n    }\n    var maxSort = buildSort('max');\n    var minSort = buildSort('min');\n    function buildScreenVariant(type) {\n      return function (value2) {\n        if (!areSimpleScreens) {\n          log_default.warn('complex-screen-config', ['The `min-*` and `max-*` variants are not supported with a `screens` configuration containing objects.']);\n          return [];\n        } else if (!screensUseConsistentUnits) {\n          log_default.warn('mixed-screen-units', ['The `min-*` and `max-*` variants are not supported with a `screens` configuration containing mixed units.']);\n          return [];\n        } else if (typeof value2 === 'string' && !canUseUnits(value2)) {\n          log_default.warn('minmax-have-mixed-units', ['The `min-*` and `max-*` variants are not supported with a `screens` configuration containing mixed units.']);\n          return [];\n        }\n        return [\"@media \".concat(buildMediaQuery(toScreen(value2, type)))];\n      };\n    }\n    matchVariant('max', buildScreenVariant('max'), {\n      sort: maxSort,\n      values: areSimpleScreens ? buildScreenValues('max') : {}\n    });\n    var id = 'min-screens';\n    var _iterator29 = _createForOfIteratorHelper(screens),\n      _step29;\n    try {\n      for (_iterator29.s(); !(_step29 = _iterator29.n()).done;) {\n        var _screen2 = _step29.value;\n        addVariant(_screen2.name, \"@media \".concat(buildMediaQuery(_screen2)), {\n          id: id,\n          sort: areSimpleScreens && screensUseConsistentUnits ? minSort : void 0,\n          value: _screen2\n        });\n      }\n    } catch (err) {\n      _iterator29.e(err);\n    } finally {\n      _iterator29.f();\n    }\n    matchVariant('min', buildScreenVariant('min'), {\n      id: id,\n      sort: minSort\n    });\n  },\n  supportsVariants: function supportsVariants(_ref101) {\n    var _theme3;\n    var matchVariant = _ref101.matchVariant,\n      theme = _ref101.theme;\n    matchVariant('supports', function () {\n      var value2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n      var check = normalize(value2);\n      var isRaw = /^\\w*\\s*\\(/.test(check);\n      check = isRaw ? check.replace(/\\b(and|or|not)\\b/g, ' $1 ') : check;\n      if (isRaw) {\n        return \"@supports \".concat(check);\n      }\n      if (!check.includes(':')) {\n        check = \"\".concat(check, \": var(--tw)\");\n      }\n      if (!(check.startsWith('(') && check.endsWith(')'))) {\n        check = \"(\".concat(check, \")\");\n      }\n      return \"@supports \".concat(check);\n    }, {\n      values: (_theme3 = theme('supports')) !== null && _theme3 !== void 0 ? _theme3 : {}\n    });\n  },\n  hasVariants: function hasVariants(_ref102) {\n    var matchVariant = _ref102.matchVariant;\n    matchVariant('has', function (value2) {\n      return \"&:has(\".concat(normalize(value2), \")\");\n    }, {\n      values: {}\n    });\n    matchVariant('group-has', function (value2, _ref103) {\n      var modifier = _ref103.modifier;\n      return modifier ? \":merge(.group\\\\/\".concat(modifier, \"):has(\").concat(normalize(value2), \") &\") : \":merge(.group):has(\".concat(normalize(value2), \") &\");\n    }, {\n      values: {}\n    });\n    matchVariant('peer-has', function (value2, _ref104) {\n      var modifier = _ref104.modifier;\n      return modifier ? \":merge(.peer\\\\/\".concat(modifier, \"):has(\").concat(normalize(value2), \") ~ &\") : \":merge(.peer):has(\".concat(normalize(value2), \") ~ &\");\n    }, {\n      values: {}\n    });\n  },\n  ariaVariants: function ariaVariants(_ref105) {\n    var _theme4, _theme5, _theme6;\n    var matchVariant = _ref105.matchVariant,\n      theme = _ref105.theme;\n    matchVariant('aria', function (value2) {\n      return \"&[aria-\".concat(normalize(value2), \"]\");\n    }, {\n      values: (_theme4 = theme('aria')) !== null && _theme4 !== void 0 ? _theme4 : {}\n    });\n    matchVariant('group-aria', function (value2, _ref106) {\n      var modifier = _ref106.modifier;\n      return modifier ? \":merge(.group\\\\/\".concat(modifier, \")[aria-\").concat(normalize(value2), \"] &\") : \":merge(.group)[aria-\".concat(normalize(value2), \"] &\");\n    }, {\n      values: (_theme5 = theme('aria')) !== null && _theme5 !== void 0 ? _theme5 : {}\n    });\n    matchVariant('peer-aria', function (value2, _ref107) {\n      var modifier = _ref107.modifier;\n      return modifier ? \":merge(.peer\\\\/\".concat(modifier, \")[aria-\").concat(normalize(value2), \"] ~ &\") : \":merge(.peer)[aria-\".concat(normalize(value2), \"] ~ &\");\n    }, {\n      values: (_theme6 = theme('aria')) !== null && _theme6 !== void 0 ? _theme6 : {}\n    });\n  },\n  dataVariants: function dataVariants(_ref108) {\n    var _theme7, _theme8, _theme9;\n    var matchVariant = _ref108.matchVariant,\n      theme = _ref108.theme;\n    matchVariant('data', function (value2) {\n      return \"&[data-\".concat(normalize(value2), \"]\");\n    }, {\n      values: (_theme7 = theme('data')) !== null && _theme7 !== void 0 ? _theme7 : {}\n    });\n    matchVariant('group-data', function (value2, _ref109) {\n      var modifier = _ref109.modifier;\n      return modifier ? \":merge(.group\\\\/\".concat(modifier, \")[data-\").concat(normalize(value2), \"] &\") : \":merge(.group)[data-\".concat(normalize(value2), \"] &\");\n    }, {\n      values: (_theme8 = theme('data')) !== null && _theme8 !== void 0 ? _theme8 : {}\n    });\n    matchVariant('peer-data', function (value2, _ref110) {\n      var modifier = _ref110.modifier;\n      return modifier ? \":merge(.peer\\\\/\".concat(modifier, \")[data-\").concat(normalize(value2), \"] ~ &\") : \":merge(.peer)[data-\".concat(normalize(value2), \"] ~ &\");\n    }, {\n      values: (_theme9 = theme('data')) !== null && _theme9 !== void 0 ? _theme9 : {}\n    });\n  },\n  orientationVariants: function orientationVariants(_ref111) {\n    var addVariant = _ref111.addVariant;\n    addVariant('portrait', '@media (orientation: portrait)');\n    addVariant('landscape', '@media (orientation: landscape)');\n  },\n  prefersContrastVariants: function prefersContrastVariants(_ref112) {\n    var addVariant = _ref112.addVariant;\n    addVariant('contrast-more', '@media (prefers-contrast: more)');\n    addVariant('contrast-less', '@media (prefers-contrast: less)');\n  },\n  forcedColorsVariants: function forcedColorsVariants(_ref113) {\n    var addVariant = _ref113.addVariant;\n    addVariant('forced-colors', '@media (forced-colors: active)');\n  }\n};\nvar cssTransformValue = ['translate(var(--tw-translate-x), var(--tw-translate-y))', 'rotate(var(--tw-rotate))', 'skewX(var(--tw-skew-x))', 'skewY(var(--tw-skew-y))', 'scaleX(var(--tw-scale-x))', 'scaleY(var(--tw-scale-y))'].join(' ');\nvar cssFilterValue = ['var(--tw-blur)', 'var(--tw-brightness)', 'var(--tw-contrast)', 'var(--tw-grayscale)', 'var(--tw-hue-rotate)', 'var(--tw-invert)', 'var(--tw-saturate)', 'var(--tw-sepia)', 'var(--tw-drop-shadow)'].join(' ');\nvar cssBackdropFilterValue = ['var(--tw-backdrop-blur)', 'var(--tw-backdrop-brightness)', 'var(--tw-backdrop-contrast)', 'var(--tw-backdrop-grayscale)', 'var(--tw-backdrop-hue-rotate)', 'var(--tw-backdrop-invert)', 'var(--tw-backdrop-opacity)', 'var(--tw-backdrop-saturate)', 'var(--tw-backdrop-sepia)'].join(' ');\nvar corePlugins = {\n  preflight: function preflight(_ref114) {\n    var addBase = _ref114.addBase;\n    var preflightStyles = lib_postcss.parse(fs_default.readFileSync(join('/', './css/preflight.css'), 'utf8'));\n    addBase([lib_postcss.comment({\n      text: \"! tailwindcss v\".concat(version, \" | MIT License | https://tailwindcss.com\")\n    })].concat(_toConsumableArray(preflightStyles.nodes)));\n  },\n  container: function () {\n    function extractMinWidths() {\n      var breakpoints = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n      return breakpoints.flatMap(function (breakpoint) {\n        return breakpoint.values.map(function (breakpoint2) {\n          return breakpoint2.min;\n        });\n      }).filter(function (v) {\n        return v !== void 0;\n      });\n    }\n    function mapMinWidthsToPadding(minWidths, screens, paddings) {\n      if (typeof paddings === 'undefined') {\n        return [];\n      }\n      if (!(_typeof(paddings) === 'object' && paddings !== null)) {\n        return [{\n          screen: 'DEFAULT',\n          minWidth: 0,\n          padding: paddings\n        }];\n      }\n      var mapping = [];\n      if (paddings.DEFAULT) {\n        mapping.push({\n          screen: 'DEFAULT',\n          minWidth: 0,\n          padding: paddings.DEFAULT\n        });\n      }\n      var _iterator31 = _createForOfIteratorHelper(minWidths),\n        _step31;\n      try {\n        for (_iterator31.s(); !(_step31 = _iterator31.n()).done;) {\n          var minWidth = _step31.value;\n          var _iterator32 = _createForOfIteratorHelper(screens),\n            _step32;\n          try {\n            for (_iterator32.s(); !(_step32 = _iterator32.n()).done;) {\n              var screen = _step32.value;\n              var _iterator33 = _createForOfIteratorHelper(screen.values),\n                _step33;\n              try {\n                for (_iterator33.s(); !(_step33 = _iterator33.n()).done;) {\n                  var min = _step33.value.min;\n                  if (min === minWidth) {\n                    mapping.push({\n                      minWidth: minWidth,\n                      padding: paddings[screen.name]\n                    });\n                  }\n                }\n              } catch (err) {\n                _iterator33.e(err);\n              } finally {\n                _iterator33.f();\n              }\n            }\n          } catch (err) {\n            _iterator32.e(err);\n          } finally {\n            _iterator32.f();\n          }\n        }\n      } catch (err) {\n        _iterator31.e(err);\n      } finally {\n        _iterator31.f();\n      }\n      return mapping;\n    }\n    return function (_ref115) {\n      var addComponents = _ref115.addComponents,\n        theme = _ref115.theme;\n      var screens = normalizeScreens(theme('container.screens', theme('screens')));\n      var minWidths = extractMinWidths(screens);\n      var paddings = mapMinWidthsToPadding(minWidths, screens, theme('container.padding'));\n      var generatePaddingFor = function generatePaddingFor(minWidth) {\n        var paddingConfig = paddings.find(function (padding) {\n          return padding.minWidth === minWidth;\n        });\n        if (!paddingConfig) {\n          return {};\n        }\n        return {\n          paddingRight: paddingConfig.padding,\n          paddingLeft: paddingConfig.padding\n        };\n      };\n      var atRules = Array.from(new Set(minWidths.slice().sort(function (a, z) {\n        return parseInt(a) - parseInt(z);\n      }))).map(function (minWidth) {\n        return _defineProperty({}, \"@media (min-width: \".concat(minWidth, \")\"), {\n          '.container': _objectSpread({\n            'max-width': minWidth\n          }, generatePaddingFor(minWidth))\n        });\n      });\n      addComponents([{\n        '.container': Object.assign({\n          width: '100%'\n        }, theme('container.center', false) ? {\n          marginRight: 'auto',\n          marginLeft: 'auto'\n        } : {}, generatePaddingFor(0))\n      }].concat(_toConsumableArray(atRules)));\n    };\n  }(),\n  accessibility: function accessibility(_ref117) {\n    var addUtilities = _ref117.addUtilities;\n    addUtilities({\n      '.sr-only': {\n        position: 'absolute',\n        width: '1px',\n        height: '1px',\n        padding: '0',\n        margin: '-1px',\n        overflow: 'hidden',\n        clip: 'rect(0, 0, 0, 0)',\n        whiteSpace: 'nowrap',\n        borderWidth: '0'\n      },\n      '.not-sr-only': {\n        position: 'static',\n        width: 'auto',\n        height: 'auto',\n        padding: '0',\n        margin: '0',\n        overflow: 'visible',\n        clip: 'auto',\n        whiteSpace: 'normal'\n      }\n    });\n  },\n  pointerEvents: function pointerEvents(_ref118) {\n    var addUtilities = _ref118.addUtilities;\n    addUtilities({\n      '.pointer-events-none': {\n        'pointer-events': 'none'\n      },\n      '.pointer-events-auto': {\n        'pointer-events': 'auto'\n      }\n    });\n  },\n  visibility: function visibility(_ref119) {\n    var addUtilities = _ref119.addUtilities;\n    addUtilities({\n      '.visible': {\n        visibility: 'visible'\n      },\n      '.invisible': {\n        visibility: 'hidden'\n      },\n      '.collapse': {\n        visibility: 'collapse'\n      }\n    });\n  },\n  position: function position(_ref120) {\n    var addUtilities = _ref120.addUtilities;\n    addUtilities({\n      '.static': {\n        position: 'static'\n      },\n      '.fixed': {\n        position: 'fixed'\n      },\n      '.absolute': {\n        position: 'absolute'\n      },\n      '.relative': {\n        position: 'relative'\n      },\n      '.sticky': {\n        position: 'sticky'\n      }\n    });\n  },\n  inset: createUtilityPlugin('inset', [['inset', ['inset']], [['inset-x', ['left', 'right']], ['inset-y', ['top', 'bottom']]], [['start', ['inset-inline-start']], ['end', ['inset-inline-end']], ['top', ['top']], ['right', ['right']], ['bottom', ['bottom']], ['left', ['left']]]], {\n    supportsNegativeValues: true\n  }),\n  isolation: function isolation(_ref121) {\n    var addUtilities = _ref121.addUtilities;\n    addUtilities({\n      '.isolate': {\n        isolation: 'isolate'\n      },\n      '.isolation-auto': {\n        isolation: 'auto'\n      }\n    });\n  },\n  zIndex: createUtilityPlugin('zIndex', [['z', ['zIndex']]], {\n    supportsNegativeValues: true\n  }),\n  order: createUtilityPlugin('order', void 0, {\n    supportsNegativeValues: true\n  }),\n  gridColumn: createUtilityPlugin('gridColumn', [['col', ['gridColumn']]]),\n  gridColumnStart: createUtilityPlugin('gridColumnStart', [['col-start', ['gridColumnStart']]]),\n  gridColumnEnd: createUtilityPlugin('gridColumnEnd', [['col-end', ['gridColumnEnd']]]),\n  gridRow: createUtilityPlugin('gridRow', [['row', ['gridRow']]]),\n  gridRowStart: createUtilityPlugin('gridRowStart', [['row-start', ['gridRowStart']]]),\n  gridRowEnd: createUtilityPlugin('gridRowEnd', [['row-end', ['gridRowEnd']]]),\n  \"float\": function float(_ref122) {\n    var addUtilities = _ref122.addUtilities;\n    addUtilities({\n      '.float-start': {\n        \"float\": 'inline-start'\n      },\n      '.float-end': {\n        \"float\": 'inline-end'\n      },\n      '.float-right': {\n        \"float\": 'right'\n      },\n      '.float-left': {\n        \"float\": 'left'\n      },\n      '.float-none': {\n        \"float\": 'none'\n      }\n    });\n  },\n  clear: function clear(_ref123) {\n    var addUtilities = _ref123.addUtilities;\n    addUtilities({\n      '.clear-start': {\n        clear: 'inline-start'\n      },\n      '.clear-end': {\n        clear: 'inline-end'\n      },\n      '.clear-left': {\n        clear: 'left'\n      },\n      '.clear-right': {\n        clear: 'right'\n      },\n      '.clear-both': {\n        clear: 'both'\n      },\n      '.clear-none': {\n        clear: 'none'\n      }\n    });\n  },\n  margin: createUtilityPlugin('margin', [['m', ['margin']], [['mx', ['margin-left', 'margin-right']], ['my', ['margin-top', 'margin-bottom']]], [['ms', ['margin-inline-start']], ['me', ['margin-inline-end']], ['mt', ['margin-top']], ['mr', ['margin-right']], ['mb', ['margin-bottom']], ['ml', ['margin-left']]]], {\n    supportsNegativeValues: true\n  }),\n  boxSizing: function boxSizing(_ref124) {\n    var addUtilities = _ref124.addUtilities;\n    addUtilities({\n      '.box-border': {\n        'box-sizing': 'border-box'\n      },\n      '.box-content': {\n        'box-sizing': 'content-box'\n      }\n    });\n  },\n  lineClamp: function lineClamp(_ref125) {\n    var matchUtilities = _ref125.matchUtilities,\n      addUtilities = _ref125.addUtilities,\n      theme = _ref125.theme;\n    matchUtilities({\n      'line-clamp': function lineClamp(value2) {\n        return {\n          overflow: 'hidden',\n          display: '-webkit-box',\n          '-webkit-box-orient': 'vertical',\n          '-webkit-line-clamp': \"\".concat(value2)\n        };\n      }\n    }, {\n      values: theme('lineClamp')\n    });\n    addUtilities({\n      '.line-clamp-none': {\n        overflow: 'visible',\n        display: 'block',\n        '-webkit-box-orient': 'horizontal',\n        '-webkit-line-clamp': 'none'\n      }\n    });\n  },\n  display: function display(_ref126) {\n    var addUtilities = _ref126.addUtilities;\n    addUtilities({\n      '.block': {\n        display: 'block'\n      },\n      '.inline-block': {\n        display: 'inline-block'\n      },\n      '.inline': {\n        display: 'inline'\n      },\n      '.flex': {\n        display: 'flex'\n      },\n      '.inline-flex': {\n        display: 'inline-flex'\n      },\n      '.table': {\n        display: 'table'\n      },\n      '.inline-table': {\n        display: 'inline-table'\n      },\n      '.table-caption': {\n        display: 'table-caption'\n      },\n      '.table-cell': {\n        display: 'table-cell'\n      },\n      '.table-column': {\n        display: 'table-column'\n      },\n      '.table-column-group': {\n        display: 'table-column-group'\n      },\n      '.table-footer-group': {\n        display: 'table-footer-group'\n      },\n      '.table-header-group': {\n        display: 'table-header-group'\n      },\n      '.table-row-group': {\n        display: 'table-row-group'\n      },\n      '.table-row': {\n        display: 'table-row'\n      },\n      '.flow-root': {\n        display: 'flow-root'\n      },\n      '.grid': {\n        display: 'grid'\n      },\n      '.inline-grid': {\n        display: 'inline-grid'\n      },\n      '.contents': {\n        display: 'contents'\n      },\n      '.list-item': {\n        display: 'list-item'\n      },\n      '.hidden': {\n        display: 'none'\n      }\n    });\n  },\n  aspectRatio: createUtilityPlugin('aspectRatio', [['aspect', ['aspect-ratio']]]),\n  size: createUtilityPlugin('size', [['size', ['width', 'height']]]),\n  height: createUtilityPlugin('height', [['h', ['height']]]),\n  maxHeight: createUtilityPlugin('maxHeight', [['max-h', ['maxHeight']]]),\n  minHeight: createUtilityPlugin('minHeight', [['min-h', ['minHeight']]]),\n  width: createUtilityPlugin('width', [['w', ['width']]]),\n  minWidth: createUtilityPlugin('minWidth', [['min-w', ['minWidth']]]),\n  maxWidth: createUtilityPlugin('maxWidth', [['max-w', ['maxWidth']]]),\n  flex: createUtilityPlugin('flex'),\n  flexShrink: createUtilityPlugin('flexShrink', [['flex-shrink', ['flex-shrink']], ['shrink', ['flex-shrink']]]),\n  flexGrow: createUtilityPlugin('flexGrow', [['flex-grow', ['flex-grow']], ['grow', ['flex-grow']]]),\n  flexBasis: createUtilityPlugin('flexBasis', [['basis', ['flex-basis']]]),\n  tableLayout: function tableLayout(_ref127) {\n    var addUtilities = _ref127.addUtilities;\n    addUtilities({\n      '.table-auto': {\n        'table-layout': 'auto'\n      },\n      '.table-fixed': {\n        'table-layout': 'fixed'\n      }\n    });\n  },\n  captionSide: function captionSide(_ref128) {\n    var addUtilities = _ref128.addUtilities;\n    addUtilities({\n      '.caption-top': {\n        'caption-side': 'top'\n      },\n      '.caption-bottom': {\n        'caption-side': 'bottom'\n      }\n    });\n  },\n  borderCollapse: function borderCollapse(_ref129) {\n    var addUtilities = _ref129.addUtilities;\n    addUtilities({\n      '.border-collapse': {\n        'border-collapse': 'collapse'\n      },\n      '.border-separate': {\n        'border-collapse': 'separate'\n      }\n    });\n  },\n  borderSpacing: function borderSpacing(_ref130) {\n    var addDefaults = _ref130.addDefaults,\n      matchUtilities = _ref130.matchUtilities,\n      theme = _ref130.theme;\n    addDefaults('border-spacing', {\n      '--tw-border-spacing-x': 0,\n      '--tw-border-spacing-y': 0\n    });\n    matchUtilities({\n      'border-spacing': function borderSpacing(value2) {\n        return {\n          '--tw-border-spacing-x': value2,\n          '--tw-border-spacing-y': value2,\n          '@defaults border-spacing': {},\n          'border-spacing': 'var(--tw-border-spacing-x) var(--tw-border-spacing-y)'\n        };\n      },\n      'border-spacing-x': function borderSpacingX(value2) {\n        return {\n          '--tw-border-spacing-x': value2,\n          '@defaults border-spacing': {},\n          'border-spacing': 'var(--tw-border-spacing-x) var(--tw-border-spacing-y)'\n        };\n      },\n      'border-spacing-y': function borderSpacingY(value2) {\n        return {\n          '--tw-border-spacing-y': value2,\n          '@defaults border-spacing': {},\n          'border-spacing': 'var(--tw-border-spacing-x) var(--tw-border-spacing-y)'\n        };\n      }\n    }, {\n      values: theme('borderSpacing')\n    });\n  },\n  transformOrigin: createUtilityPlugin('transformOrigin', [['origin', ['transformOrigin']]]),\n  translate: createUtilityPlugin('translate', [[['translate-x', [['@defaults transform', {}], '--tw-translate-x', ['transform', cssTransformValue]]], ['translate-y', [['@defaults transform', {}], '--tw-translate-y', ['transform', cssTransformValue]]]]], {\n    supportsNegativeValues: true\n  }),\n  rotate: createUtilityPlugin('rotate', [['rotate', [['@defaults transform', {}], '--tw-rotate', ['transform', cssTransformValue]]]], {\n    supportsNegativeValues: true\n  }),\n  skew: createUtilityPlugin('skew', [[['skew-x', [['@defaults transform', {}], '--tw-skew-x', ['transform', cssTransformValue]]], ['skew-y', [['@defaults transform', {}], '--tw-skew-y', ['transform', cssTransformValue]]]]], {\n    supportsNegativeValues: true\n  }),\n  scale: createUtilityPlugin('scale', [['scale', [['@defaults transform', {}], '--tw-scale-x', '--tw-scale-y', ['transform', cssTransformValue]]], [['scale-x', [['@defaults transform', {}], '--tw-scale-x', ['transform', cssTransformValue]]], ['scale-y', [['@defaults transform', {}], '--tw-scale-y', ['transform', cssTransformValue]]]]], {\n    supportsNegativeValues: true\n  }),\n  transform: function transform(_ref131) {\n    var addDefaults = _ref131.addDefaults,\n      addUtilities = _ref131.addUtilities;\n    addDefaults('transform', {\n      '--tw-translate-x': '0',\n      '--tw-translate-y': '0',\n      '--tw-rotate': '0',\n      '--tw-skew-x': '0',\n      '--tw-skew-y': '0',\n      '--tw-scale-x': '1',\n      '--tw-scale-y': '1'\n    });\n    addUtilities({\n      '.transform': {\n        '@defaults transform': {},\n        transform: cssTransformValue\n      },\n      '.transform-cpu': {\n        transform: cssTransformValue\n      },\n      '.transform-gpu': {\n        transform: cssTransformValue.replace('translate(var(--tw-translate-x), var(--tw-translate-y))', 'translate3d(var(--tw-translate-x), var(--tw-translate-y), 0)')\n      },\n      '.transform-none': {\n        transform: 'none'\n      }\n    });\n  },\n  animation: function animation(_ref132) {\n    var _theme10;\n    var matchUtilities = _ref132.matchUtilities,\n      theme = _ref132.theme,\n      config = _ref132.config;\n    var prefixName = function prefixName(name) {\n      return escapeClassName(config('prefix') + name);\n    };\n    var keyframes = Object.fromEntries(Object.entries((_theme10 = theme('keyframes')) !== null && _theme10 !== void 0 ? _theme10 : {}).map(function (_ref133) {\n      var _ref134 = _slicedToArray(_ref133, 2),\n        key = _ref134[0],\n        value2 = _ref134[1];\n      return [key, _defineProperty({}, \"@keyframes \".concat(prefixName(key)), value2)];\n    }));\n    matchUtilities({\n      animate: function animate(value2) {\n        var animations = parseAnimationValue(value2);\n        return [].concat(_toConsumableArray(animations.flatMap(function (animation) {\n          return keyframes[animation.name];\n        })), [{\n          animation: animations.map(function (_ref136) {\n            var name = _ref136.name,\n              value3 = _ref136.value;\n            if (name === void 0 || keyframes[name] === void 0) {\n              return value3;\n            }\n            return value3.replace(name, prefixName(name));\n          }).join(', ')\n        }]);\n      }\n    }, {\n      values: theme('animation')\n    });\n  },\n  cursor: createUtilityPlugin('cursor'),\n  touchAction: function touchAction(_ref137) {\n    var addDefaults = _ref137.addDefaults,\n      addUtilities = _ref137.addUtilities;\n    addDefaults('touch-action', {\n      '--tw-pan-x': ' ',\n      '--tw-pan-y': ' ',\n      '--tw-pinch-zoom': ' '\n    });\n    var cssTouchActionValue = 'var(--tw-pan-x) var(--tw-pan-y) var(--tw-pinch-zoom)';\n    addUtilities({\n      '.touch-auto': {\n        'touch-action': 'auto'\n      },\n      '.touch-none': {\n        'touch-action': 'none'\n      },\n      '.touch-pan-x': {\n        '@defaults touch-action': {},\n        '--tw-pan-x': 'pan-x',\n        'touch-action': cssTouchActionValue\n      },\n      '.touch-pan-left': {\n        '@defaults touch-action': {},\n        '--tw-pan-x': 'pan-left',\n        'touch-action': cssTouchActionValue\n      },\n      '.touch-pan-right': {\n        '@defaults touch-action': {},\n        '--tw-pan-x': 'pan-right',\n        'touch-action': cssTouchActionValue\n      },\n      '.touch-pan-y': {\n        '@defaults touch-action': {},\n        '--tw-pan-y': 'pan-y',\n        'touch-action': cssTouchActionValue\n      },\n      '.touch-pan-up': {\n        '@defaults touch-action': {},\n        '--tw-pan-y': 'pan-up',\n        'touch-action': cssTouchActionValue\n      },\n      '.touch-pan-down': {\n        '@defaults touch-action': {},\n        '--tw-pan-y': 'pan-down',\n        'touch-action': cssTouchActionValue\n      },\n      '.touch-pinch-zoom': {\n        '@defaults touch-action': {},\n        '--tw-pinch-zoom': 'pinch-zoom',\n        'touch-action': cssTouchActionValue\n      },\n      '.touch-manipulation': {\n        'touch-action': 'manipulation'\n      }\n    });\n  },\n  userSelect: function userSelect(_ref138) {\n    var addUtilities = _ref138.addUtilities;\n    addUtilities({\n      '.select-none': {\n        'user-select': 'none'\n      },\n      '.select-text': {\n        'user-select': 'text'\n      },\n      '.select-all': {\n        'user-select': 'all'\n      },\n      '.select-auto': {\n        'user-select': 'auto'\n      }\n    });\n  },\n  resize: function resize(_ref139) {\n    var addUtilities = _ref139.addUtilities;\n    addUtilities({\n      '.resize-none': {\n        resize: 'none'\n      },\n      '.resize-y': {\n        resize: 'vertical'\n      },\n      '.resize-x': {\n        resize: 'horizontal'\n      },\n      '.resize': {\n        resize: 'both'\n      }\n    });\n  },\n  scrollSnapType: function scrollSnapType(_ref140) {\n    var addDefaults = _ref140.addDefaults,\n      addUtilities = _ref140.addUtilities;\n    addDefaults('scroll-snap-type', {\n      '--tw-scroll-snap-strictness': 'proximity'\n    });\n    addUtilities({\n      '.snap-none': {\n        'scroll-snap-type': 'none'\n      },\n      '.snap-x': {\n        '@defaults scroll-snap-type': {},\n        'scroll-snap-type': 'x var(--tw-scroll-snap-strictness)'\n      },\n      '.snap-y': {\n        '@defaults scroll-snap-type': {},\n        'scroll-snap-type': 'y var(--tw-scroll-snap-strictness)'\n      },\n      '.snap-both': {\n        '@defaults scroll-snap-type': {},\n        'scroll-snap-type': 'both var(--tw-scroll-snap-strictness)'\n      },\n      '.snap-mandatory': {\n        '--tw-scroll-snap-strictness': 'mandatory'\n      },\n      '.snap-proximity': {\n        '--tw-scroll-snap-strictness': 'proximity'\n      }\n    });\n  },\n  scrollSnapAlign: function scrollSnapAlign(_ref141) {\n    var addUtilities = _ref141.addUtilities;\n    addUtilities({\n      '.snap-start': {\n        'scroll-snap-align': 'start'\n      },\n      '.snap-end': {\n        'scroll-snap-align': 'end'\n      },\n      '.snap-center': {\n        'scroll-snap-align': 'center'\n      },\n      '.snap-align-none': {\n        'scroll-snap-align': 'none'\n      }\n    });\n  },\n  scrollSnapStop: function scrollSnapStop(_ref142) {\n    var addUtilities = _ref142.addUtilities;\n    addUtilities({\n      '.snap-normal': {\n        'scroll-snap-stop': 'normal'\n      },\n      '.snap-always': {\n        'scroll-snap-stop': 'always'\n      }\n    });\n  },\n  scrollMargin: createUtilityPlugin('scrollMargin', [['scroll-m', ['scroll-margin']], [['scroll-mx', ['scroll-margin-left', 'scroll-margin-right']], ['scroll-my', ['scroll-margin-top', 'scroll-margin-bottom']]], [['scroll-ms', ['scroll-margin-inline-start']], ['scroll-me', ['scroll-margin-inline-end']], ['scroll-mt', ['scroll-margin-top']], ['scroll-mr', ['scroll-margin-right']], ['scroll-mb', ['scroll-margin-bottom']], ['scroll-ml', ['scroll-margin-left']]]], {\n    supportsNegativeValues: true\n  }),\n  scrollPadding: createUtilityPlugin('scrollPadding', [['scroll-p', ['scroll-padding']], [['scroll-px', ['scroll-padding-left', 'scroll-padding-right']], ['scroll-py', ['scroll-padding-top', 'scroll-padding-bottom']]], [['scroll-ps', ['scroll-padding-inline-start']], ['scroll-pe', ['scroll-padding-inline-end']], ['scroll-pt', ['scroll-padding-top']], ['scroll-pr', ['scroll-padding-right']], ['scroll-pb', ['scroll-padding-bottom']], ['scroll-pl', ['scroll-padding-left']]]]),\n  listStylePosition: function listStylePosition(_ref143) {\n    var addUtilities = _ref143.addUtilities;\n    addUtilities({\n      '.list-inside': {\n        'list-style-position': 'inside'\n      },\n      '.list-outside': {\n        'list-style-position': 'outside'\n      }\n    });\n  },\n  listStyleType: createUtilityPlugin('listStyleType', [['list', ['listStyleType']]]),\n  listStyleImage: createUtilityPlugin('listStyleImage', [['list-image', ['listStyleImage']]]),\n  appearance: function appearance(_ref144) {\n    var addUtilities = _ref144.addUtilities;\n    addUtilities({\n      '.appearance-none': {\n        appearance: 'none'\n      },\n      '.appearance-auto': {\n        appearance: 'auto'\n      }\n    });\n  },\n  columns: createUtilityPlugin('columns', [['columns', ['columns']]]),\n  breakBefore: function breakBefore(_ref145) {\n    var addUtilities = _ref145.addUtilities;\n    addUtilities({\n      '.break-before-auto': {\n        'break-before': 'auto'\n      },\n      '.break-before-avoid': {\n        'break-before': 'avoid'\n      },\n      '.break-before-all': {\n        'break-before': 'all'\n      },\n      '.break-before-avoid-page': {\n        'break-before': 'avoid-page'\n      },\n      '.break-before-page': {\n        'break-before': 'page'\n      },\n      '.break-before-left': {\n        'break-before': 'left'\n      },\n      '.break-before-right': {\n        'break-before': 'right'\n      },\n      '.break-before-column': {\n        'break-before': 'column'\n      }\n    });\n  },\n  breakInside: function breakInside(_ref146) {\n    var addUtilities = _ref146.addUtilities;\n    addUtilities({\n      '.break-inside-auto': {\n        'break-inside': 'auto'\n      },\n      '.break-inside-avoid': {\n        'break-inside': 'avoid'\n      },\n      '.break-inside-avoid-page': {\n        'break-inside': 'avoid-page'\n      },\n      '.break-inside-avoid-column': {\n        'break-inside': 'avoid-column'\n      }\n    });\n  },\n  breakAfter: function breakAfter(_ref147) {\n    var addUtilities = _ref147.addUtilities;\n    addUtilities({\n      '.break-after-auto': {\n        'break-after': 'auto'\n      },\n      '.break-after-avoid': {\n        'break-after': 'avoid'\n      },\n      '.break-after-all': {\n        'break-after': 'all'\n      },\n      '.break-after-avoid-page': {\n        'break-after': 'avoid-page'\n      },\n      '.break-after-page': {\n        'break-after': 'page'\n      },\n      '.break-after-left': {\n        'break-after': 'left'\n      },\n      '.break-after-right': {\n        'break-after': 'right'\n      },\n      '.break-after-column': {\n        'break-after': 'column'\n      }\n    });\n  },\n  gridAutoColumns: createUtilityPlugin('gridAutoColumns', [['auto-cols', ['gridAutoColumns']]]),\n  gridAutoFlow: function gridAutoFlow(_ref148) {\n    var addUtilities = _ref148.addUtilities;\n    addUtilities({\n      '.grid-flow-row': {\n        gridAutoFlow: 'row'\n      },\n      '.grid-flow-col': {\n        gridAutoFlow: 'column'\n      },\n      '.grid-flow-dense': {\n        gridAutoFlow: 'dense'\n      },\n      '.grid-flow-row-dense': {\n        gridAutoFlow: 'row dense'\n      },\n      '.grid-flow-col-dense': {\n        gridAutoFlow: 'column dense'\n      }\n    });\n  },\n  gridAutoRows: createUtilityPlugin('gridAutoRows', [['auto-rows', ['gridAutoRows']]]),\n  gridTemplateColumns: createUtilityPlugin('gridTemplateColumns', [['grid-cols', ['gridTemplateColumns']]]),\n  gridTemplateRows: createUtilityPlugin('gridTemplateRows', [['grid-rows', ['gridTemplateRows']]]),\n  flexDirection: function flexDirection(_ref149) {\n    var addUtilities = _ref149.addUtilities;\n    addUtilities({\n      '.flex-row': {\n        'flex-direction': 'row'\n      },\n      '.flex-row-reverse': {\n        'flex-direction': 'row-reverse'\n      },\n      '.flex-col': {\n        'flex-direction': 'column'\n      },\n      '.flex-col-reverse': {\n        'flex-direction': 'column-reverse'\n      }\n    });\n  },\n  flexWrap: function flexWrap(_ref150) {\n    var addUtilities = _ref150.addUtilities;\n    addUtilities({\n      '.flex-wrap': {\n        'flex-wrap': 'wrap'\n      },\n      '.flex-wrap-reverse': {\n        'flex-wrap': 'wrap-reverse'\n      },\n      '.flex-nowrap': {\n        'flex-wrap': 'nowrap'\n      }\n    });\n  },\n  placeContent: function placeContent(_ref151) {\n    var addUtilities = _ref151.addUtilities;\n    addUtilities({\n      '.place-content-center': {\n        'place-content': 'center'\n      },\n      '.place-content-start': {\n        'place-content': 'start'\n      },\n      '.place-content-end': {\n        'place-content': 'end'\n      },\n      '.place-content-between': {\n        'place-content': 'space-between'\n      },\n      '.place-content-around': {\n        'place-content': 'space-around'\n      },\n      '.place-content-evenly': {\n        'place-content': 'space-evenly'\n      },\n      '.place-content-baseline': {\n        'place-content': 'baseline'\n      },\n      '.place-content-stretch': {\n        'place-content': 'stretch'\n      }\n    });\n  },\n  placeItems: function placeItems(_ref152) {\n    var addUtilities = _ref152.addUtilities;\n    addUtilities({\n      '.place-items-start': {\n        'place-items': 'start'\n      },\n      '.place-items-end': {\n        'place-items': 'end'\n      },\n      '.place-items-center': {\n        'place-items': 'center'\n      },\n      '.place-items-baseline': {\n        'place-items': 'baseline'\n      },\n      '.place-items-stretch': {\n        'place-items': 'stretch'\n      }\n    });\n  },\n  alignContent: function alignContent(_ref153) {\n    var addUtilities = _ref153.addUtilities;\n    addUtilities({\n      '.content-normal': {\n        'align-content': 'normal'\n      },\n      '.content-center': {\n        'align-content': 'center'\n      },\n      '.content-start': {\n        'align-content': 'flex-start'\n      },\n      '.content-end': {\n        'align-content': 'flex-end'\n      },\n      '.content-between': {\n        'align-content': 'space-between'\n      },\n      '.content-around': {\n        'align-content': 'space-around'\n      },\n      '.content-evenly': {\n        'align-content': 'space-evenly'\n      },\n      '.content-baseline': {\n        'align-content': 'baseline'\n      },\n      '.content-stretch': {\n        'align-content': 'stretch'\n      }\n    });\n  },\n  alignItems: function alignItems(_ref154) {\n    var addUtilities = _ref154.addUtilities;\n    addUtilities({\n      '.items-start': {\n        'align-items': 'flex-start'\n      },\n      '.items-end': {\n        'align-items': 'flex-end'\n      },\n      '.items-center': {\n        'align-items': 'center'\n      },\n      '.items-baseline': {\n        'align-items': 'baseline'\n      },\n      '.items-stretch': {\n        'align-items': 'stretch'\n      }\n    });\n  },\n  justifyContent: function justifyContent(_ref155) {\n    var addUtilities = _ref155.addUtilities;\n    addUtilities({\n      '.justify-normal': {\n        'justify-content': 'normal'\n      },\n      '.justify-start': {\n        'justify-content': 'flex-start'\n      },\n      '.justify-end': {\n        'justify-content': 'flex-end'\n      },\n      '.justify-center': {\n        'justify-content': 'center'\n      },\n      '.justify-between': {\n        'justify-content': 'space-between'\n      },\n      '.justify-around': {\n        'justify-content': 'space-around'\n      },\n      '.justify-evenly': {\n        'justify-content': 'space-evenly'\n      },\n      '.justify-stretch': {\n        'justify-content': 'stretch'\n      }\n    });\n  },\n  justifyItems: function justifyItems(_ref156) {\n    var addUtilities = _ref156.addUtilities;\n    addUtilities({\n      '.justify-items-start': {\n        'justify-items': 'start'\n      },\n      '.justify-items-end': {\n        'justify-items': 'end'\n      },\n      '.justify-items-center': {\n        'justify-items': 'center'\n      },\n      '.justify-items-stretch': {\n        'justify-items': 'stretch'\n      }\n    });\n  },\n  gap: createUtilityPlugin('gap', [['gap', ['gap']], [['gap-x', ['columnGap']], ['gap-y', ['rowGap']]]]),\n  space: function space(_ref157) {\n    var matchUtilities = _ref157.matchUtilities,\n      addUtilities = _ref157.addUtilities,\n      theme = _ref157.theme;\n    matchUtilities({\n      'space-x': function spaceX(value2) {\n        value2 = value2 === '0' ? '0px' : value2;\n        if (false) {}\n        return {\n          '& > :not([hidden]) ~ :not([hidden])': {\n            '--tw-space-x-reverse': '0',\n            'margin-right': \"calc(\".concat(value2, \" * var(--tw-space-x-reverse))\"),\n            'margin-left': \"calc(\".concat(value2, \" * calc(1 - var(--tw-space-x-reverse)))\")\n          }\n        };\n      },\n      'space-y': function spaceY(value2) {\n        value2 = value2 === '0' ? '0px' : value2;\n        return {\n          '& > :not([hidden]) ~ :not([hidden])': {\n            '--tw-space-y-reverse': '0',\n            'margin-top': \"calc(\".concat(value2, \" * calc(1 - var(--tw-space-y-reverse)))\"),\n            'margin-bottom': \"calc(\".concat(value2, \" * var(--tw-space-y-reverse))\")\n          }\n        };\n      }\n    }, {\n      values: theme('space'),\n      supportsNegativeValues: true\n    });\n    addUtilities({\n      '.space-y-reverse > :not([hidden]) ~ :not([hidden])': {\n        '--tw-space-y-reverse': '1'\n      },\n      '.space-x-reverse > :not([hidden]) ~ :not([hidden])': {\n        '--tw-space-x-reverse': '1'\n      }\n    });\n  },\n  divideWidth: function divideWidth(_ref158) {\n    var matchUtilities = _ref158.matchUtilities,\n      addUtilities = _ref158.addUtilities,\n      theme = _ref158.theme;\n    matchUtilities({\n      'divide-x': function divideX(value2) {\n        value2 = value2 === '0' ? '0px' : value2;\n        if (false) {}\n        return {\n          '& > :not([hidden]) ~ :not([hidden])': {\n            '@defaults border-width': {},\n            '--tw-divide-x-reverse': '0',\n            'border-right-width': \"calc(\".concat(value2, \" * var(--tw-divide-x-reverse))\"),\n            'border-left-width': \"calc(\".concat(value2, \" * calc(1 - var(--tw-divide-x-reverse)))\")\n          }\n        };\n      },\n      'divide-y': function divideY(value2) {\n        value2 = value2 === '0' ? '0px' : value2;\n        return {\n          '& > :not([hidden]) ~ :not([hidden])': {\n            '@defaults border-width': {},\n            '--tw-divide-y-reverse': '0',\n            'border-top-width': \"calc(\".concat(value2, \" * calc(1 - var(--tw-divide-y-reverse)))\"),\n            'border-bottom-width': \"calc(\".concat(value2, \" * var(--tw-divide-y-reverse))\")\n          }\n        };\n      }\n    }, {\n      values: theme('divideWidth'),\n      type: ['line-width', 'length', 'any']\n    });\n    addUtilities({\n      '.divide-y-reverse > :not([hidden]) ~ :not([hidden])': {\n        '@defaults border-width': {},\n        '--tw-divide-y-reverse': '1'\n      },\n      '.divide-x-reverse > :not([hidden]) ~ :not([hidden])': {\n        '@defaults border-width': {},\n        '--tw-divide-x-reverse': '1'\n      }\n    });\n  },\n  divideStyle: function divideStyle(_ref159) {\n    var addUtilities = _ref159.addUtilities;\n    addUtilities({\n      '.divide-solid > :not([hidden]) ~ :not([hidden])': {\n        'border-style': 'solid'\n      },\n      '.divide-dashed > :not([hidden]) ~ :not([hidden])': {\n        'border-style': 'dashed'\n      },\n      '.divide-dotted > :not([hidden]) ~ :not([hidden])': {\n        'border-style': 'dotted'\n      },\n      '.divide-double > :not([hidden]) ~ :not([hidden])': {\n        'border-style': 'double'\n      },\n      '.divide-none > :not([hidden]) ~ :not([hidden])': {\n        'border-style': 'none'\n      }\n    });\n  },\n  divideColor: function divideColor(_ref160) {\n    var matchUtilities = _ref160.matchUtilities,\n      theme = _ref160.theme,\n      corePlugins2 = _ref160.corePlugins;\n    matchUtilities({\n      divide: function divide(value2) {\n        if (!corePlugins2('divideOpacity')) {\n          return _defineProperty({}, '& > :not([hidden]) ~ :not([hidden])', {\n            'border-color': toColorValue(value2)\n          });\n        }\n        return _defineProperty({}, '& > :not([hidden]) ~ :not([hidden])', withAlphaVariable({\n          color: value2,\n          property: 'border-color',\n          variable: '--tw-divide-opacity'\n        }));\n      }\n    }, {\n      values: function (_ref163) {\n        var _ = _ref163.DEFAULT,\n          colors = _objectWithoutProperties(_ref163, _excluded2);\n        return colors;\n      }(flattenColorPalette_default(theme('divideColor'))),\n      type: ['color', 'any']\n    });\n  },\n  divideOpacity: function divideOpacity(_ref164) {\n    var matchUtilities = _ref164.matchUtilities,\n      theme = _ref164.theme;\n    matchUtilities({\n      'divide-opacity': function divideOpacity(value2) {\n        return _defineProperty({}, \"& > :not([hidden]) ~ :not([hidden])\", {\n          '--tw-divide-opacity': value2\n        });\n      }\n    }, {\n      values: theme('divideOpacity')\n    });\n  },\n  placeSelf: function placeSelf(_ref166) {\n    var addUtilities = _ref166.addUtilities;\n    addUtilities({\n      '.place-self-auto': {\n        'place-self': 'auto'\n      },\n      '.place-self-start': {\n        'place-self': 'start'\n      },\n      '.place-self-end': {\n        'place-self': 'end'\n      },\n      '.place-self-center': {\n        'place-self': 'center'\n      },\n      '.place-self-stretch': {\n        'place-self': 'stretch'\n      }\n    });\n  },\n  alignSelf: function alignSelf(_ref167) {\n    var addUtilities = _ref167.addUtilities;\n    addUtilities({\n      '.self-auto': {\n        'align-self': 'auto'\n      },\n      '.self-start': {\n        'align-self': 'flex-start'\n      },\n      '.self-end': {\n        'align-self': 'flex-end'\n      },\n      '.self-center': {\n        'align-self': 'center'\n      },\n      '.self-stretch': {\n        'align-self': 'stretch'\n      },\n      '.self-baseline': {\n        'align-self': 'baseline'\n      }\n    });\n  },\n  justifySelf: function justifySelf(_ref168) {\n    var addUtilities = _ref168.addUtilities;\n    addUtilities({\n      '.justify-self-auto': {\n        'justify-self': 'auto'\n      },\n      '.justify-self-start': {\n        'justify-self': 'start'\n      },\n      '.justify-self-end': {\n        'justify-self': 'end'\n      },\n      '.justify-self-center': {\n        'justify-self': 'center'\n      },\n      '.justify-self-stretch': {\n        'justify-self': 'stretch'\n      }\n    });\n  },\n  overflow: function overflow(_ref169) {\n    var addUtilities = _ref169.addUtilities;\n    addUtilities({\n      '.overflow-auto': {\n        overflow: 'auto'\n      },\n      '.overflow-hidden': {\n        overflow: 'hidden'\n      },\n      '.overflow-clip': {\n        overflow: 'clip'\n      },\n      '.overflow-visible': {\n        overflow: 'visible'\n      },\n      '.overflow-scroll': {\n        overflow: 'scroll'\n      },\n      '.overflow-x-auto': {\n        'overflow-x': 'auto'\n      },\n      '.overflow-y-auto': {\n        'overflow-y': 'auto'\n      },\n      '.overflow-x-hidden': {\n        'overflow-x': 'hidden'\n      },\n      '.overflow-y-hidden': {\n        'overflow-y': 'hidden'\n      },\n      '.overflow-x-clip': {\n        'overflow-x': 'clip'\n      },\n      '.overflow-y-clip': {\n        'overflow-y': 'clip'\n      },\n      '.overflow-x-visible': {\n        'overflow-x': 'visible'\n      },\n      '.overflow-y-visible': {\n        'overflow-y': 'visible'\n      },\n      '.overflow-x-scroll': {\n        'overflow-x': 'scroll'\n      },\n      '.overflow-y-scroll': {\n        'overflow-y': 'scroll'\n      }\n    });\n  },\n  overscrollBehavior: function overscrollBehavior(_ref170) {\n    var addUtilities = _ref170.addUtilities;\n    addUtilities({\n      '.overscroll-auto': {\n        'overscroll-behavior': 'auto'\n      },\n      '.overscroll-contain': {\n        'overscroll-behavior': 'contain'\n      },\n      '.overscroll-none': {\n        'overscroll-behavior': 'none'\n      },\n      '.overscroll-y-auto': {\n        'overscroll-behavior-y': 'auto'\n      },\n      '.overscroll-y-contain': {\n        'overscroll-behavior-y': 'contain'\n      },\n      '.overscroll-y-none': {\n        'overscroll-behavior-y': 'none'\n      },\n      '.overscroll-x-auto': {\n        'overscroll-behavior-x': 'auto'\n      },\n      '.overscroll-x-contain': {\n        'overscroll-behavior-x': 'contain'\n      },\n      '.overscroll-x-none': {\n        'overscroll-behavior-x': 'none'\n      }\n    });\n  },\n  scrollBehavior: function scrollBehavior(_ref171) {\n    var addUtilities = _ref171.addUtilities;\n    addUtilities({\n      '.scroll-auto': {\n        'scroll-behavior': 'auto'\n      },\n      '.scroll-smooth': {\n        'scroll-behavior': 'smooth'\n      }\n    });\n  },\n  textOverflow: function textOverflow(_ref172) {\n    var addUtilities = _ref172.addUtilities;\n    addUtilities({\n      '.truncate': {\n        overflow: 'hidden',\n        'text-overflow': 'ellipsis',\n        'white-space': 'nowrap'\n      },\n      '.overflow-ellipsis': {\n        'text-overflow': 'ellipsis'\n      },\n      '.text-ellipsis': {\n        'text-overflow': 'ellipsis'\n      },\n      '.text-clip': {\n        'text-overflow': 'clip'\n      }\n    });\n  },\n  hyphens: function hyphens(_ref173) {\n    var addUtilities = _ref173.addUtilities;\n    addUtilities({\n      '.hyphens-none': {\n        hyphens: 'none'\n      },\n      '.hyphens-manual': {\n        hyphens: 'manual'\n      },\n      '.hyphens-auto': {\n        hyphens: 'auto'\n      }\n    });\n  },\n  whitespace: function whitespace(_ref174) {\n    var addUtilities = _ref174.addUtilities;\n    addUtilities({\n      '.whitespace-normal': {\n        'white-space': 'normal'\n      },\n      '.whitespace-nowrap': {\n        'white-space': 'nowrap'\n      },\n      '.whitespace-pre': {\n        'white-space': 'pre'\n      },\n      '.whitespace-pre-line': {\n        'white-space': 'pre-line'\n      },\n      '.whitespace-pre-wrap': {\n        'white-space': 'pre-wrap'\n      },\n      '.whitespace-break-spaces': {\n        'white-space': 'break-spaces'\n      }\n    });\n  },\n  textWrap: function textWrap(_ref175) {\n    var addUtilities = _ref175.addUtilities;\n    addUtilities({\n      '.text-wrap': {\n        'text-wrap': 'wrap'\n      },\n      '.text-nowrap': {\n        'text-wrap': 'nowrap'\n      },\n      '.text-balance': {\n        'text-wrap': 'balance'\n      },\n      '.text-pretty': {\n        'text-wrap': 'pretty'\n      }\n    });\n  },\n  wordBreak: function wordBreak(_ref176) {\n    var addUtilities = _ref176.addUtilities;\n    addUtilities({\n      '.break-normal': {\n        'overflow-wrap': 'normal',\n        'word-break': 'normal'\n      },\n      '.break-words': {\n        'overflow-wrap': 'break-word'\n      },\n      '.break-all': {\n        'word-break': 'break-all'\n      },\n      '.break-keep': {\n        'word-break': 'keep-all'\n      }\n    });\n  },\n  borderRadius: createUtilityPlugin('borderRadius', [['rounded', ['border-radius']], [['rounded-s', ['border-start-start-radius', 'border-end-start-radius']], ['rounded-e', ['border-start-end-radius', 'border-end-end-radius']], ['rounded-t', ['border-top-left-radius', 'border-top-right-radius']], ['rounded-r', ['border-top-right-radius', 'border-bottom-right-radius']], ['rounded-b', ['border-bottom-right-radius', 'border-bottom-left-radius']], ['rounded-l', ['border-top-left-radius', 'border-bottom-left-radius']]], [['rounded-ss', ['border-start-start-radius']], ['rounded-se', ['border-start-end-radius']], ['rounded-ee', ['border-end-end-radius']], ['rounded-es', ['border-end-start-radius']], ['rounded-tl', ['border-top-left-radius']], ['rounded-tr', ['border-top-right-radius']], ['rounded-br', ['border-bottom-right-radius']], ['rounded-bl', ['border-bottom-left-radius']]]]),\n  borderWidth: createUtilityPlugin('borderWidth', [['border', [['@defaults border-width', {}], 'border-width']], [['border-x', [['@defaults border-width', {}], 'border-left-width', 'border-right-width']], ['border-y', [['@defaults border-width', {}], 'border-top-width', 'border-bottom-width']]], [['border-s', [['@defaults border-width', {}], 'border-inline-start-width']], ['border-e', [['@defaults border-width', {}], 'border-inline-end-width']], ['border-t', [['@defaults border-width', {}], 'border-top-width']], ['border-r', [['@defaults border-width', {}], 'border-right-width']], ['border-b', [['@defaults border-width', {}], 'border-bottom-width']], ['border-l', [['@defaults border-width', {}], 'border-left-width']]]], {\n    type: ['line-width', 'length']\n  }),\n  borderStyle: function borderStyle(_ref177) {\n    var addUtilities = _ref177.addUtilities;\n    addUtilities({\n      '.border-solid': {\n        'border-style': 'solid'\n      },\n      '.border-dashed': {\n        'border-style': 'dashed'\n      },\n      '.border-dotted': {\n        'border-style': 'dotted'\n      },\n      '.border-double': {\n        'border-style': 'double'\n      },\n      '.border-hidden': {\n        'border-style': 'hidden'\n      },\n      '.border-none': {\n        'border-style': 'none'\n      }\n    });\n  },\n  borderColor: function borderColor(_ref178) {\n    var matchUtilities = _ref178.matchUtilities,\n      theme = _ref178.theme,\n      corePlugins2 = _ref178.corePlugins;\n    matchUtilities({\n      border: function border(value2) {\n        if (!corePlugins2('borderOpacity')) {\n          return {\n            'border-color': toColorValue(value2)\n          };\n        }\n        return withAlphaVariable({\n          color: value2,\n          property: 'border-color',\n          variable: '--tw-border-opacity'\n        });\n      }\n    }, {\n      values: function (_ref179) {\n        var _ = _ref179.DEFAULT,\n          colors = _objectWithoutProperties(_ref179, _excluded3);\n        return colors;\n      }(flattenColorPalette_default(theme('borderColor'))),\n      type: ['color', 'any']\n    });\n    matchUtilities({\n      'border-x': function borderX(value2) {\n        if (!corePlugins2('borderOpacity')) {\n          return {\n            'border-left-color': toColorValue(value2),\n            'border-right-color': toColorValue(value2)\n          };\n        }\n        return withAlphaVariable({\n          color: value2,\n          property: ['border-left-color', 'border-right-color'],\n          variable: '--tw-border-opacity'\n        });\n      },\n      'border-y': function borderY(value2) {\n        if (!corePlugins2('borderOpacity')) {\n          return {\n            'border-top-color': toColorValue(value2),\n            'border-bottom-color': toColorValue(value2)\n          };\n        }\n        return withAlphaVariable({\n          color: value2,\n          property: ['border-top-color', 'border-bottom-color'],\n          variable: '--tw-border-opacity'\n        });\n      }\n    }, {\n      values: function (_ref180) {\n        var _ = _ref180.DEFAULT,\n          colors = _objectWithoutProperties(_ref180, _excluded4);\n        return colors;\n      }(flattenColorPalette_default(theme('borderColor'))),\n      type: ['color', 'any']\n    });\n    matchUtilities({\n      'border-s': function borderS(value2) {\n        if (!corePlugins2('borderOpacity')) {\n          return {\n            'border-inline-start-color': toColorValue(value2)\n          };\n        }\n        return withAlphaVariable({\n          color: value2,\n          property: 'border-inline-start-color',\n          variable: '--tw-border-opacity'\n        });\n      },\n      'border-e': function borderE(value2) {\n        if (!corePlugins2('borderOpacity')) {\n          return {\n            'border-inline-end-color': toColorValue(value2)\n          };\n        }\n        return withAlphaVariable({\n          color: value2,\n          property: 'border-inline-end-color',\n          variable: '--tw-border-opacity'\n        });\n      },\n      'border-t': function borderT(value2) {\n        if (!corePlugins2('borderOpacity')) {\n          return {\n            'border-top-color': toColorValue(value2)\n          };\n        }\n        return withAlphaVariable({\n          color: value2,\n          property: 'border-top-color',\n          variable: '--tw-border-opacity'\n        });\n      },\n      'border-r': function borderR(value2) {\n        if (!corePlugins2('borderOpacity')) {\n          return {\n            'border-right-color': toColorValue(value2)\n          };\n        }\n        return withAlphaVariable({\n          color: value2,\n          property: 'border-right-color',\n          variable: '--tw-border-opacity'\n        });\n      },\n      'border-b': function borderB(value2) {\n        if (!corePlugins2('borderOpacity')) {\n          return {\n            'border-bottom-color': toColorValue(value2)\n          };\n        }\n        return withAlphaVariable({\n          color: value2,\n          property: 'border-bottom-color',\n          variable: '--tw-border-opacity'\n        });\n      },\n      'border-l': function borderL(value2) {\n        if (!corePlugins2('borderOpacity')) {\n          return {\n            'border-left-color': toColorValue(value2)\n          };\n        }\n        return withAlphaVariable({\n          color: value2,\n          property: 'border-left-color',\n          variable: '--tw-border-opacity'\n        });\n      }\n    }, {\n      values: function (_ref181) {\n        var _ = _ref181.DEFAULT,\n          colors = _objectWithoutProperties(_ref181, _excluded5);\n        return colors;\n      }(flattenColorPalette_default(theme('borderColor'))),\n      type: ['color', 'any']\n    });\n  },\n  borderOpacity: createUtilityPlugin('borderOpacity', [['border-opacity', ['--tw-border-opacity']]]),\n  backgroundColor: function backgroundColor(_ref182) {\n    var matchUtilities = _ref182.matchUtilities,\n      theme = _ref182.theme,\n      corePlugins2 = _ref182.corePlugins;\n    matchUtilities({\n      bg: function bg(value2) {\n        if (!corePlugins2('backgroundOpacity')) {\n          return {\n            'background-color': toColorValue(value2)\n          };\n        }\n        return withAlphaVariable({\n          color: value2,\n          property: 'background-color',\n          variable: '--tw-bg-opacity'\n        });\n      }\n    }, {\n      values: flattenColorPalette_default(theme('backgroundColor')),\n      type: ['color', 'any']\n    });\n  },\n  backgroundOpacity: createUtilityPlugin('backgroundOpacity', [['bg-opacity', ['--tw-bg-opacity']]]),\n  backgroundImage: createUtilityPlugin('backgroundImage', [['bg', ['background-image']]], {\n    type: ['lookup', 'image', 'url']\n  }),\n  gradientColorStops: function () {\n    function transparentTo(value2) {\n      return withAlphaValue(value2, 0, 'rgb(255 255 255 / 0)');\n    }\n    return function (_ref183) {\n      var matchUtilities = _ref183.matchUtilities,\n        theme = _ref183.theme,\n        addDefaults = _ref183.addDefaults;\n      addDefaults('gradient-color-stops', {\n        '--tw-gradient-from-position': ' ',\n        '--tw-gradient-via-position': ' ',\n        '--tw-gradient-to-position': ' '\n      });\n      var options = {\n        values: flattenColorPalette_default(theme('gradientColorStops')),\n        type: ['color', 'any']\n      };\n      var positionOptions = {\n        values: theme('gradientColorStopPositions'),\n        type: ['length', 'percentage']\n      };\n      matchUtilities({\n        from: function from(value2) {\n          var transparentToValue = transparentTo(value2);\n          return {\n            '@defaults gradient-color-stops': {},\n            '--tw-gradient-from': \"\".concat(toColorValue(value2), \" var(--tw-gradient-from-position)\"),\n            '--tw-gradient-to': \"\".concat(transparentToValue, \" var(--tw-gradient-to-position)\"),\n            '--tw-gradient-stops': \"var(--tw-gradient-from), var(--tw-gradient-to)\"\n          };\n        }\n      }, options);\n      matchUtilities({\n        from: function from(value2) {\n          return {\n            '--tw-gradient-from-position': value2\n          };\n        }\n      }, positionOptions);\n      matchUtilities({\n        via: function via(value2) {\n          var transparentToValue = transparentTo(value2);\n          return {\n            '@defaults gradient-color-stops': {},\n            '--tw-gradient-to': \"\".concat(transparentToValue, \"  var(--tw-gradient-to-position)\"),\n            '--tw-gradient-stops': \"var(--tw-gradient-from), \".concat(toColorValue(value2), \" var(--tw-gradient-via-position), var(--tw-gradient-to)\")\n          };\n        }\n      }, options);\n      matchUtilities({\n        via: function via(value2) {\n          return {\n            '--tw-gradient-via-position': value2\n          };\n        }\n      }, positionOptions);\n      matchUtilities({\n        to: function to(value2) {\n          return {\n            '@defaults gradient-color-stops': {},\n            '--tw-gradient-to': \"\".concat(toColorValue(value2), \" var(--tw-gradient-to-position)\")\n          };\n        }\n      }, options);\n      matchUtilities({\n        to: function to(value2) {\n          return {\n            '--tw-gradient-to-position': value2\n          };\n        }\n      }, positionOptions);\n    };\n  }(),\n  boxDecorationBreak: function boxDecorationBreak(_ref184) {\n    var addUtilities = _ref184.addUtilities;\n    addUtilities({\n      '.decoration-slice': {\n        'box-decoration-break': 'slice'\n      },\n      '.decoration-clone': {\n        'box-decoration-break': 'clone'\n      },\n      '.box-decoration-slice': {\n        'box-decoration-break': 'slice'\n      },\n      '.box-decoration-clone': {\n        'box-decoration-break': 'clone'\n      }\n    });\n  },\n  backgroundSize: createUtilityPlugin('backgroundSize', [['bg', ['background-size']]], {\n    type: ['lookup', 'length', 'percentage', 'size']\n  }),\n  backgroundAttachment: function backgroundAttachment(_ref185) {\n    var addUtilities = _ref185.addUtilities;\n    addUtilities({\n      '.bg-fixed': {\n        'background-attachment': 'fixed'\n      },\n      '.bg-local': {\n        'background-attachment': 'local'\n      },\n      '.bg-scroll': {\n        'background-attachment': 'scroll'\n      }\n    });\n  },\n  backgroundClip: function backgroundClip(_ref186) {\n    var addUtilities = _ref186.addUtilities;\n    addUtilities({\n      '.bg-clip-border': {\n        'background-clip': 'border-box'\n      },\n      '.bg-clip-padding': {\n        'background-clip': 'padding-box'\n      },\n      '.bg-clip-content': {\n        'background-clip': 'content-box'\n      },\n      '.bg-clip-text': {\n        'background-clip': 'text'\n      }\n    });\n  },\n  backgroundPosition: createUtilityPlugin('backgroundPosition', [['bg', ['background-position']]], {\n    type: ['lookup', ['position', {\n      preferOnConflict: true\n    }]]\n  }),\n  backgroundRepeat: function backgroundRepeat(_ref187) {\n    var addUtilities = _ref187.addUtilities;\n    addUtilities({\n      '.bg-repeat': {\n        'background-repeat': 'repeat'\n      },\n      '.bg-no-repeat': {\n        'background-repeat': 'no-repeat'\n      },\n      '.bg-repeat-x': {\n        'background-repeat': 'repeat-x'\n      },\n      '.bg-repeat-y': {\n        'background-repeat': 'repeat-y'\n      },\n      '.bg-repeat-round': {\n        'background-repeat': 'round'\n      },\n      '.bg-repeat-space': {\n        'background-repeat': 'space'\n      }\n    });\n  },\n  backgroundOrigin: function backgroundOrigin(_ref188) {\n    var addUtilities = _ref188.addUtilities;\n    addUtilities({\n      '.bg-origin-border': {\n        'background-origin': 'border-box'\n      },\n      '.bg-origin-padding': {\n        'background-origin': 'padding-box'\n      },\n      '.bg-origin-content': {\n        'background-origin': 'content-box'\n      }\n    });\n  },\n  fill: function fill(_ref189) {\n    var matchUtilities = _ref189.matchUtilities,\n      theme = _ref189.theme;\n    matchUtilities({\n      fill: function fill(value2) {\n        return {\n          fill: toColorValue(value2)\n        };\n      }\n    }, {\n      values: flattenColorPalette_default(theme('fill')),\n      type: ['color', 'any']\n    });\n  },\n  stroke: function stroke(_ref190) {\n    var matchUtilities = _ref190.matchUtilities,\n      theme = _ref190.theme;\n    matchUtilities({\n      stroke: function stroke(value2) {\n        return {\n          stroke: toColorValue(value2)\n        };\n      }\n    }, {\n      values: flattenColorPalette_default(theme('stroke')),\n      type: ['color', 'url', 'any']\n    });\n  },\n  strokeWidth: createUtilityPlugin('strokeWidth', [['stroke', ['stroke-width']]], {\n    type: ['length', 'number', 'percentage']\n  }),\n  objectFit: function objectFit(_ref191) {\n    var addUtilities = _ref191.addUtilities;\n    addUtilities({\n      '.object-contain': {\n        'object-fit': 'contain'\n      },\n      '.object-cover': {\n        'object-fit': 'cover'\n      },\n      '.object-fill': {\n        'object-fit': 'fill'\n      },\n      '.object-none': {\n        'object-fit': 'none'\n      },\n      '.object-scale-down': {\n        'object-fit': 'scale-down'\n      }\n    });\n  },\n  objectPosition: createUtilityPlugin('objectPosition', [['object', ['object-position']]]),\n  padding: createUtilityPlugin('padding', [['p', ['padding']], [['px', ['padding-left', 'padding-right']], ['py', ['padding-top', 'padding-bottom']]], [['ps', ['padding-inline-start']], ['pe', ['padding-inline-end']], ['pt', ['padding-top']], ['pr', ['padding-right']], ['pb', ['padding-bottom']], ['pl', ['padding-left']]]]),\n  textAlign: function textAlign(_ref192) {\n    var addUtilities = _ref192.addUtilities;\n    addUtilities({\n      '.text-left': {\n        'text-align': 'left'\n      },\n      '.text-center': {\n        'text-align': 'center'\n      },\n      '.text-right': {\n        'text-align': 'right'\n      },\n      '.text-justify': {\n        'text-align': 'justify'\n      },\n      '.text-start': {\n        'text-align': 'start'\n      },\n      '.text-end': {\n        'text-align': 'end'\n      }\n    });\n  },\n  textIndent: createUtilityPlugin('textIndent', [['indent', ['text-indent']]], {\n    supportsNegativeValues: true\n  }),\n  verticalAlign: function verticalAlign(_ref193) {\n    var addUtilities = _ref193.addUtilities,\n      matchUtilities = _ref193.matchUtilities;\n    addUtilities({\n      '.align-baseline': {\n        'vertical-align': 'baseline'\n      },\n      '.align-top': {\n        'vertical-align': 'top'\n      },\n      '.align-middle': {\n        'vertical-align': 'middle'\n      },\n      '.align-bottom': {\n        'vertical-align': 'bottom'\n      },\n      '.align-text-top': {\n        'vertical-align': 'text-top'\n      },\n      '.align-text-bottom': {\n        'vertical-align': 'text-bottom'\n      },\n      '.align-sub': {\n        'vertical-align': 'sub'\n      },\n      '.align-super': {\n        'vertical-align': 'super'\n      }\n    });\n    matchUtilities({\n      align: function align(value2) {\n        return {\n          'vertical-align': value2\n        };\n      }\n    });\n  },\n  fontFamily: function fontFamily(_ref194) {\n    var matchUtilities = _ref194.matchUtilities,\n      theme = _ref194.theme;\n    matchUtilities({\n      font: function font(value2) {\n        var _ref195 = Array.isArray(value2) && isPlainObject(value2[1]) ? value2 : [value2],\n          _ref196 = _slicedToArray(_ref195, 2),\n          families = _ref196[0],\n          _ref196$ = _ref196[1],\n          options = _ref196$ === void 0 ? {} : _ref196$;\n        var fontFeatureSettings = options.fontFeatureSettings,\n          fontVariationSettings = options.fontVariationSettings;\n        return _objectSpread(_objectSpread({\n          'font-family': Array.isArray(families) ? families.join(', ') : families\n        }, fontFeatureSettings === void 0 ? {} : {\n          'font-feature-settings': fontFeatureSettings\n        }), fontVariationSettings === void 0 ? {} : {\n          'font-variation-settings': fontVariationSettings\n        });\n      }\n    }, {\n      values: theme('fontFamily'),\n      type: ['lookup', 'generic-name', 'family-name']\n    });\n  },\n  fontSize: function fontSize(_ref197) {\n    var matchUtilities = _ref197.matchUtilities,\n      theme = _ref197.theme;\n    matchUtilities({\n      text: function text(value2, _ref198) {\n        var modifier = _ref198.modifier;\n        var _ref199 = Array.isArray(value2) ? value2 : [value2],\n          _ref200 = _slicedToArray(_ref199, 2),\n          fontSize = _ref200[0],\n          options = _ref200[1];\n        if (modifier) {\n          return {\n            'font-size': fontSize,\n            'line-height': modifier\n          };\n        }\n        var _ref201 = isPlainObject(options) ? options : {\n            lineHeight: options\n          },\n          lineHeight = _ref201.lineHeight,\n          letterSpacing = _ref201.letterSpacing,\n          fontWeight = _ref201.fontWeight;\n        return _objectSpread(_objectSpread(_objectSpread({\n          'font-size': fontSize\n        }, lineHeight === void 0 ? {} : {\n          'line-height': lineHeight\n        }), letterSpacing === void 0 ? {} : {\n          'letter-spacing': letterSpacing\n        }), fontWeight === void 0 ? {} : {\n          'font-weight': fontWeight\n        });\n      }\n    }, {\n      values: theme('fontSize'),\n      modifiers: theme('lineHeight'),\n      type: ['absolute-size', 'relative-size', 'length', 'percentage']\n    });\n  },\n  fontWeight: createUtilityPlugin('fontWeight', [['font', ['fontWeight']]], {\n    type: ['lookup', 'number', 'any']\n  }),\n  textTransform: function textTransform(_ref202) {\n    var addUtilities = _ref202.addUtilities;\n    addUtilities({\n      '.uppercase': {\n        'text-transform': 'uppercase'\n      },\n      '.lowercase': {\n        'text-transform': 'lowercase'\n      },\n      '.capitalize': {\n        'text-transform': 'capitalize'\n      },\n      '.normal-case': {\n        'text-transform': 'none'\n      }\n    });\n  },\n  fontStyle: function fontStyle(_ref203) {\n    var addUtilities = _ref203.addUtilities;\n    addUtilities({\n      '.italic': {\n        'font-style': 'italic'\n      },\n      '.not-italic': {\n        'font-style': 'normal'\n      }\n    });\n  },\n  fontVariantNumeric: function fontVariantNumeric(_ref204) {\n    var addDefaults = _ref204.addDefaults,\n      addUtilities = _ref204.addUtilities;\n    var cssFontVariantNumericValue = 'var(--tw-ordinal) var(--tw-slashed-zero) var(--tw-numeric-figure) var(--tw-numeric-spacing) var(--tw-numeric-fraction)';\n    addDefaults('font-variant-numeric', {\n      '--tw-ordinal': ' ',\n      '--tw-slashed-zero': ' ',\n      '--tw-numeric-figure': ' ',\n      '--tw-numeric-spacing': ' ',\n      '--tw-numeric-fraction': ' '\n    });\n    addUtilities({\n      '.normal-nums': {\n        'font-variant-numeric': 'normal'\n      },\n      '.ordinal': {\n        '@defaults font-variant-numeric': {},\n        '--tw-ordinal': 'ordinal',\n        'font-variant-numeric': cssFontVariantNumericValue\n      },\n      '.slashed-zero': {\n        '@defaults font-variant-numeric': {},\n        '--tw-slashed-zero': 'slashed-zero',\n        'font-variant-numeric': cssFontVariantNumericValue\n      },\n      '.lining-nums': {\n        '@defaults font-variant-numeric': {},\n        '--tw-numeric-figure': 'lining-nums',\n        'font-variant-numeric': cssFontVariantNumericValue\n      },\n      '.oldstyle-nums': {\n        '@defaults font-variant-numeric': {},\n        '--tw-numeric-figure': 'oldstyle-nums',\n        'font-variant-numeric': cssFontVariantNumericValue\n      },\n      '.proportional-nums': {\n        '@defaults font-variant-numeric': {},\n        '--tw-numeric-spacing': 'proportional-nums',\n        'font-variant-numeric': cssFontVariantNumericValue\n      },\n      '.tabular-nums': {\n        '@defaults font-variant-numeric': {},\n        '--tw-numeric-spacing': 'tabular-nums',\n        'font-variant-numeric': cssFontVariantNumericValue\n      },\n      '.diagonal-fractions': {\n        '@defaults font-variant-numeric': {},\n        '--tw-numeric-fraction': 'diagonal-fractions',\n        'font-variant-numeric': cssFontVariantNumericValue\n      },\n      '.stacked-fractions': {\n        '@defaults font-variant-numeric': {},\n        '--tw-numeric-fraction': 'stacked-fractions',\n        'font-variant-numeric': cssFontVariantNumericValue\n      }\n    });\n  },\n  lineHeight: createUtilityPlugin('lineHeight', [['leading', ['lineHeight']]]),\n  letterSpacing: createUtilityPlugin('letterSpacing', [['tracking', ['letterSpacing']]], {\n    supportsNegativeValues: true\n  }),\n  textColor: function textColor(_ref205) {\n    var matchUtilities = _ref205.matchUtilities,\n      theme = _ref205.theme,\n      corePlugins2 = _ref205.corePlugins;\n    matchUtilities({\n      text: function text(value2) {\n        if (!corePlugins2('textOpacity')) {\n          return {\n            color: toColorValue(value2)\n          };\n        }\n        return withAlphaVariable({\n          color: value2,\n          property: 'color',\n          variable: '--tw-text-opacity'\n        });\n      }\n    }, {\n      values: flattenColorPalette_default(theme('textColor')),\n      type: ['color', 'any']\n    });\n  },\n  textOpacity: createUtilityPlugin('textOpacity', [['text-opacity', ['--tw-text-opacity']]]),\n  textDecoration: function textDecoration(_ref206) {\n    var addUtilities = _ref206.addUtilities;\n    addUtilities({\n      '.underline': {\n        'text-decoration-line': 'underline'\n      },\n      '.overline': {\n        'text-decoration-line': 'overline'\n      },\n      '.line-through': {\n        'text-decoration-line': 'line-through'\n      },\n      '.no-underline': {\n        'text-decoration-line': 'none'\n      }\n    });\n  },\n  textDecorationColor: function textDecorationColor(_ref207) {\n    var matchUtilities = _ref207.matchUtilities,\n      theme = _ref207.theme;\n    matchUtilities({\n      decoration: function decoration(value2) {\n        return {\n          'text-decoration-color': toColorValue(value2)\n        };\n      }\n    }, {\n      values: flattenColorPalette_default(theme('textDecorationColor')),\n      type: ['color', 'any']\n    });\n  },\n  textDecorationStyle: function textDecorationStyle(_ref208) {\n    var addUtilities = _ref208.addUtilities;\n    addUtilities({\n      '.decoration-solid': {\n        'text-decoration-style': 'solid'\n      },\n      '.decoration-double': {\n        'text-decoration-style': 'double'\n      },\n      '.decoration-dotted': {\n        'text-decoration-style': 'dotted'\n      },\n      '.decoration-dashed': {\n        'text-decoration-style': 'dashed'\n      },\n      '.decoration-wavy': {\n        'text-decoration-style': 'wavy'\n      }\n    });\n  },\n  textDecorationThickness: createUtilityPlugin('textDecorationThickness', [['decoration', ['text-decoration-thickness']]], {\n    type: ['length', 'percentage']\n  }),\n  textUnderlineOffset: createUtilityPlugin('textUnderlineOffset', [['underline-offset', ['text-underline-offset']]], {\n    type: ['length', 'percentage', 'any']\n  }),\n  fontSmoothing: function fontSmoothing(_ref209) {\n    var addUtilities = _ref209.addUtilities;\n    addUtilities({\n      '.antialiased': {\n        '-webkit-font-smoothing': 'antialiased',\n        '-moz-osx-font-smoothing': 'grayscale'\n      },\n      '.subpixel-antialiased': {\n        '-webkit-font-smoothing': 'auto',\n        '-moz-osx-font-smoothing': 'auto'\n      }\n    });\n  },\n  placeholderColor: function placeholderColor(_ref210) {\n    var matchUtilities = _ref210.matchUtilities,\n      theme = _ref210.theme,\n      corePlugins2 = _ref210.corePlugins;\n    matchUtilities({\n      placeholder: function placeholder(value2) {\n        if (!corePlugins2('placeholderOpacity')) {\n          return {\n            '&::placeholder': {\n              color: toColorValue(value2)\n            }\n          };\n        }\n        return {\n          '&::placeholder': withAlphaVariable({\n            color: value2,\n            property: 'color',\n            variable: '--tw-placeholder-opacity'\n          })\n        };\n      }\n    }, {\n      values: flattenColorPalette_default(theme('placeholderColor')),\n      type: ['color', 'any']\n    });\n  },\n  placeholderOpacity: function placeholderOpacity(_ref211) {\n    var matchUtilities = _ref211.matchUtilities,\n      theme = _ref211.theme;\n    matchUtilities({\n      'placeholder-opacity': function placeholderOpacity(value2) {\n        return _defineProperty({}, '&::placeholder', {\n          '--tw-placeholder-opacity': value2\n        });\n      }\n    }, {\n      values: theme('placeholderOpacity')\n    });\n  },\n  caretColor: function caretColor(_ref213) {\n    var matchUtilities = _ref213.matchUtilities,\n      theme = _ref213.theme;\n    matchUtilities({\n      caret: function caret(value2) {\n        return {\n          'caret-color': toColorValue(value2)\n        };\n      }\n    }, {\n      values: flattenColorPalette_default(theme('caretColor')),\n      type: ['color', 'any']\n    });\n  },\n  accentColor: function accentColor(_ref214) {\n    var matchUtilities = _ref214.matchUtilities,\n      theme = _ref214.theme;\n    matchUtilities({\n      accent: function accent(value2) {\n        return {\n          'accent-color': toColorValue(value2)\n        };\n      }\n    }, {\n      values: flattenColorPalette_default(theme('accentColor')),\n      type: ['color', 'any']\n    });\n  },\n  opacity: createUtilityPlugin('opacity', [['opacity', ['opacity']]]),\n  backgroundBlendMode: function backgroundBlendMode(_ref215) {\n    var addUtilities = _ref215.addUtilities;\n    addUtilities({\n      '.bg-blend-normal': {\n        'background-blend-mode': 'normal'\n      },\n      '.bg-blend-multiply': {\n        'background-blend-mode': 'multiply'\n      },\n      '.bg-blend-screen': {\n        'background-blend-mode': 'screen'\n      },\n      '.bg-blend-overlay': {\n        'background-blend-mode': 'overlay'\n      },\n      '.bg-blend-darken': {\n        'background-blend-mode': 'darken'\n      },\n      '.bg-blend-lighten': {\n        'background-blend-mode': 'lighten'\n      },\n      '.bg-blend-color-dodge': {\n        'background-blend-mode': 'color-dodge'\n      },\n      '.bg-blend-color-burn': {\n        'background-blend-mode': 'color-burn'\n      },\n      '.bg-blend-hard-light': {\n        'background-blend-mode': 'hard-light'\n      },\n      '.bg-blend-soft-light': {\n        'background-blend-mode': 'soft-light'\n      },\n      '.bg-blend-difference': {\n        'background-blend-mode': 'difference'\n      },\n      '.bg-blend-exclusion': {\n        'background-blend-mode': 'exclusion'\n      },\n      '.bg-blend-hue': {\n        'background-blend-mode': 'hue'\n      },\n      '.bg-blend-saturation': {\n        'background-blend-mode': 'saturation'\n      },\n      '.bg-blend-color': {\n        'background-blend-mode': 'color'\n      },\n      '.bg-blend-luminosity': {\n        'background-blend-mode': 'luminosity'\n      }\n    });\n  },\n  mixBlendMode: function mixBlendMode(_ref216) {\n    var addUtilities = _ref216.addUtilities;\n    addUtilities({\n      '.mix-blend-normal': {\n        'mix-blend-mode': 'normal'\n      },\n      '.mix-blend-multiply': {\n        'mix-blend-mode': 'multiply'\n      },\n      '.mix-blend-screen': {\n        'mix-blend-mode': 'screen'\n      },\n      '.mix-blend-overlay': {\n        'mix-blend-mode': 'overlay'\n      },\n      '.mix-blend-darken': {\n        'mix-blend-mode': 'darken'\n      },\n      '.mix-blend-lighten': {\n        'mix-blend-mode': 'lighten'\n      },\n      '.mix-blend-color-dodge': {\n        'mix-blend-mode': 'color-dodge'\n      },\n      '.mix-blend-color-burn': {\n        'mix-blend-mode': 'color-burn'\n      },\n      '.mix-blend-hard-light': {\n        'mix-blend-mode': 'hard-light'\n      },\n      '.mix-blend-soft-light': {\n        'mix-blend-mode': 'soft-light'\n      },\n      '.mix-blend-difference': {\n        'mix-blend-mode': 'difference'\n      },\n      '.mix-blend-exclusion': {\n        'mix-blend-mode': 'exclusion'\n      },\n      '.mix-blend-hue': {\n        'mix-blend-mode': 'hue'\n      },\n      '.mix-blend-saturation': {\n        'mix-blend-mode': 'saturation'\n      },\n      '.mix-blend-color': {\n        'mix-blend-mode': 'color'\n      },\n      '.mix-blend-luminosity': {\n        'mix-blend-mode': 'luminosity'\n      },\n      '.mix-blend-plus-lighter': {\n        'mix-blend-mode': 'plus-lighter'\n      }\n    });\n  },\n  boxShadow: function () {\n    var transformValue = transformThemeValue('boxShadow');\n    var defaultBoxShadow = [\"var(--tw-ring-offset-shadow, 0 0 #0000)\", \"var(--tw-ring-shadow, 0 0 #0000)\", \"var(--tw-shadow)\"].join(', ');\n    return function (_ref217) {\n      var matchUtilities = _ref217.matchUtilities,\n        addDefaults = _ref217.addDefaults,\n        theme = _ref217.theme;\n      addDefaults(' box-shadow', {\n        '--tw-ring-offset-shadow': '0 0 #0000',\n        '--tw-ring-shadow': '0 0 #0000',\n        '--tw-shadow': '0 0 #0000',\n        '--tw-shadow-colored': '0 0 #0000'\n      });\n      matchUtilities({\n        shadow: function shadow(value2) {\n          value2 = transformValue(value2);\n          var ast = parseBoxShadowValue(value2);\n          var _iterator34 = _createForOfIteratorHelper(ast),\n            _step34;\n          try {\n            for (_iterator34.s(); !(_step34 = _iterator34.n()).done;) {\n              var shadow2 = _step34.value;\n              if (!shadow2.valid) {\n                continue;\n              }\n              shadow2.color = 'var(--tw-shadow-color)';\n            }\n          } catch (err) {\n            _iterator34.e(err);\n          } finally {\n            _iterator34.f();\n          }\n          return {\n            '@defaults box-shadow': {},\n            '--tw-shadow': value2 === 'none' ? '0 0 #0000' : value2,\n            '--tw-shadow-colored': value2 === 'none' ? '0 0 #0000' : formatBoxShadowValue(ast),\n            'box-shadow': defaultBoxShadow\n          };\n        }\n      }, {\n        values: theme('boxShadow'),\n        type: ['shadow']\n      });\n    };\n  }(),\n  boxShadowColor: function boxShadowColor(_ref218) {\n    var matchUtilities = _ref218.matchUtilities,\n      theme = _ref218.theme;\n    matchUtilities({\n      shadow: function shadow(value2) {\n        return {\n          '--tw-shadow-color': toColorValue(value2),\n          '--tw-shadow': 'var(--tw-shadow-colored)'\n        };\n      }\n    }, {\n      values: flattenColorPalette_default(theme('boxShadowColor')),\n      type: ['color', 'any']\n    });\n  },\n  outlineStyle: function outlineStyle(_ref219) {\n    var addUtilities = _ref219.addUtilities;\n    addUtilities({\n      '.outline-none': {\n        outline: '2px solid transparent',\n        'outline-offset': '2px'\n      },\n      '.outline': {\n        'outline-style': 'solid'\n      },\n      '.outline-dashed': {\n        'outline-style': 'dashed'\n      },\n      '.outline-dotted': {\n        'outline-style': 'dotted'\n      },\n      '.outline-double': {\n        'outline-style': 'double'\n      }\n    });\n  },\n  outlineWidth: createUtilityPlugin('outlineWidth', [['outline', ['outline-width']]], {\n    type: ['length', 'number', 'percentage']\n  }),\n  outlineOffset: createUtilityPlugin('outlineOffset', [['outline-offset', ['outline-offset']]], {\n    type: ['length', 'number', 'percentage', 'any'],\n    supportsNegativeValues: true\n  }),\n  outlineColor: function outlineColor(_ref220) {\n    var matchUtilities = _ref220.matchUtilities,\n      theme = _ref220.theme;\n    matchUtilities({\n      outline: function outline(value2) {\n        return {\n          'outline-color': toColorValue(value2)\n        };\n      }\n    }, {\n      values: flattenColorPalette_default(theme('outlineColor')),\n      type: ['color', 'any']\n    });\n  },\n  ringWidth: function ringWidth(_ref221) {\n    var matchUtilities = _ref221.matchUtilities,\n      addDefaults = _ref221.addDefaults,\n      addUtilities = _ref221.addUtilities,\n      theme = _ref221.theme,\n      config = _ref221.config;\n    var ringColorDefault = function (_theme11, _theme12) {\n      if (flagEnabled(config(), 'respectDefaultRingColorOpacity')) {\n        return theme('ringColor.DEFAULT');\n      }\n      var ringOpacityDefault = theme('ringOpacity.DEFAULT', '0.5');\n      if (!((_theme11 = theme('ringColor')) !== null && _theme11 !== void 0 && _theme11.DEFAULT)) {\n        return \"rgb(147 197 253 / \".concat(ringOpacityDefault, \")\");\n      }\n      return withAlphaValue((_theme12 = theme('ringColor')) === null || _theme12 === void 0 ? void 0 : _theme12.DEFAULT, ringOpacityDefault, \"rgb(147 197 253 / \".concat(ringOpacityDefault, \")\"));\n    }();\n    addDefaults('ring-width', {\n      '--tw-ring-inset': ' ',\n      '--tw-ring-offset-width': theme('ringOffsetWidth.DEFAULT', '0px'),\n      '--tw-ring-offset-color': theme('ringOffsetColor.DEFAULT', '#fff'),\n      '--tw-ring-color': ringColorDefault,\n      '--tw-ring-offset-shadow': '0 0 #0000',\n      '--tw-ring-shadow': '0 0 #0000',\n      '--tw-shadow': '0 0 #0000',\n      '--tw-shadow-colored': '0 0 #0000'\n    });\n    matchUtilities({\n      ring: function ring(value2) {\n        return {\n          '@defaults ring-width': {},\n          '--tw-ring-offset-shadow': \"var(--tw-ring-inset) 0 0 0 var(--tw-ring-offset-width) var(--tw-ring-offset-color)\",\n          '--tw-ring-shadow': \"var(--tw-ring-inset) 0 0 0 calc(\".concat(value2, \" + var(--tw-ring-offset-width)) var(--tw-ring-color)\"),\n          'box-shadow': [\"var(--tw-ring-offset-shadow)\", \"var(--tw-ring-shadow)\", \"var(--tw-shadow, 0 0 #0000)\"].join(', ')\n        };\n      }\n    }, {\n      values: theme('ringWidth'),\n      type: 'length'\n    });\n    addUtilities({\n      '.ring-inset': {\n        '@defaults ring-width': {},\n        '--tw-ring-inset': 'inset'\n      }\n    });\n  },\n  ringColor: function ringColor(_ref222) {\n    var matchUtilities = _ref222.matchUtilities,\n      theme = _ref222.theme,\n      corePlugins2 = _ref222.corePlugins;\n    matchUtilities({\n      ring: function ring(value2) {\n        if (!corePlugins2('ringOpacity')) {\n          return {\n            '--tw-ring-color': toColorValue(value2)\n          };\n        }\n        return withAlphaVariable({\n          color: value2,\n          property: '--tw-ring-color',\n          variable: '--tw-ring-opacity'\n        });\n      }\n    }, {\n      values: Object.fromEntries(Object.entries(flattenColorPalette_default(theme('ringColor'))).filter(function (_ref223) {\n        var _ref224 = _slicedToArray(_ref223, 1),\n          modifier = _ref224[0];\n        return modifier !== 'DEFAULT';\n      })),\n      type: ['color', 'any']\n    });\n  },\n  ringOpacity: function ringOpacity(helpers) {\n    var config = helpers.config;\n    return createUtilityPlugin('ringOpacity', [['ring-opacity', ['--tw-ring-opacity']]], {\n      filterDefault: !flagEnabled(config(), 'respectDefaultRingColorOpacity')\n    })(helpers);\n  },\n  ringOffsetWidth: createUtilityPlugin('ringOffsetWidth', [['ring-offset', ['--tw-ring-offset-width']]], {\n    type: 'length'\n  }),\n  ringOffsetColor: function ringOffsetColor(_ref225) {\n    var matchUtilities = _ref225.matchUtilities,\n      theme = _ref225.theme;\n    matchUtilities({\n      'ring-offset': function ringOffset(value2) {\n        return {\n          '--tw-ring-offset-color': toColorValue(value2)\n        };\n      }\n    }, {\n      values: flattenColorPalette_default(theme('ringOffsetColor')),\n      type: ['color', 'any']\n    });\n  },\n  blur: function blur(_ref226) {\n    var matchUtilities = _ref226.matchUtilities,\n      theme = _ref226.theme;\n    matchUtilities({\n      blur: function blur(value2) {\n        return {\n          '--tw-blur': \"blur(\".concat(value2, \")\"),\n          '@defaults filter': {},\n          filter: cssFilterValue\n        };\n      }\n    }, {\n      values: theme('blur')\n    });\n  },\n  brightness: function brightness(_ref227) {\n    var matchUtilities = _ref227.matchUtilities,\n      theme = _ref227.theme;\n    matchUtilities({\n      brightness: function brightness(value2) {\n        return {\n          '--tw-brightness': \"brightness(\".concat(value2, \")\"),\n          '@defaults filter': {},\n          filter: cssFilterValue\n        };\n      }\n    }, {\n      values: theme('brightness')\n    });\n  },\n  contrast: function contrast(_ref228) {\n    var matchUtilities = _ref228.matchUtilities,\n      theme = _ref228.theme;\n    matchUtilities({\n      contrast: function contrast(value2) {\n        return {\n          '--tw-contrast': \"contrast(\".concat(value2, \")\"),\n          '@defaults filter': {},\n          filter: cssFilterValue\n        };\n      }\n    }, {\n      values: theme('contrast')\n    });\n  },\n  dropShadow: function dropShadow(_ref229) {\n    var matchUtilities = _ref229.matchUtilities,\n      theme = _ref229.theme;\n    matchUtilities({\n      'drop-shadow': function dropShadow(value2) {\n        return {\n          '--tw-drop-shadow': Array.isArray(value2) ? value2.map(function (v) {\n            return \"drop-shadow(\".concat(v, \")\");\n          }).join(' ') : \"drop-shadow(\".concat(value2, \")\"),\n          '@defaults filter': {},\n          filter: cssFilterValue\n        };\n      }\n    }, {\n      values: theme('dropShadow')\n    });\n  },\n  grayscale: function grayscale(_ref230) {\n    var matchUtilities = _ref230.matchUtilities,\n      theme = _ref230.theme;\n    matchUtilities({\n      grayscale: function grayscale(value2) {\n        return {\n          '--tw-grayscale': \"grayscale(\".concat(value2, \")\"),\n          '@defaults filter': {},\n          filter: cssFilterValue\n        };\n      }\n    }, {\n      values: theme('grayscale')\n    });\n  },\n  hueRotate: function hueRotate(_ref231) {\n    var matchUtilities = _ref231.matchUtilities,\n      theme = _ref231.theme;\n    matchUtilities({\n      'hue-rotate': function hueRotate(value2) {\n        return {\n          '--tw-hue-rotate': \"hue-rotate(\".concat(value2, \")\"),\n          '@defaults filter': {},\n          filter: cssFilterValue\n        };\n      }\n    }, {\n      values: theme('hueRotate'),\n      supportsNegativeValues: true\n    });\n  },\n  invert: function invert(_ref232) {\n    var matchUtilities = _ref232.matchUtilities,\n      theme = _ref232.theme;\n    matchUtilities({\n      invert: function invert(value2) {\n        return {\n          '--tw-invert': \"invert(\".concat(value2, \")\"),\n          '@defaults filter': {},\n          filter: cssFilterValue\n        };\n      }\n    }, {\n      values: theme('invert')\n    });\n  },\n  saturate: function saturate(_ref233) {\n    var matchUtilities = _ref233.matchUtilities,\n      theme = _ref233.theme;\n    matchUtilities({\n      saturate: function saturate(value2) {\n        return {\n          '--tw-saturate': \"saturate(\".concat(value2, \")\"),\n          '@defaults filter': {},\n          filter: cssFilterValue\n        };\n      }\n    }, {\n      values: theme('saturate')\n    });\n  },\n  sepia: function sepia(_ref234) {\n    var matchUtilities = _ref234.matchUtilities,\n      theme = _ref234.theme;\n    matchUtilities({\n      sepia: function sepia(value2) {\n        return {\n          '--tw-sepia': \"sepia(\".concat(value2, \")\"),\n          '@defaults filter': {},\n          filter: cssFilterValue\n        };\n      }\n    }, {\n      values: theme('sepia')\n    });\n  },\n  filter: function filter(_ref235) {\n    var addDefaults = _ref235.addDefaults,\n      addUtilities = _ref235.addUtilities;\n    addDefaults('filter', {\n      '--tw-blur': ' ',\n      '--tw-brightness': ' ',\n      '--tw-contrast': ' ',\n      '--tw-grayscale': ' ',\n      '--tw-hue-rotate': ' ',\n      '--tw-invert': ' ',\n      '--tw-saturate': ' ',\n      '--tw-sepia': ' ',\n      '--tw-drop-shadow': ' '\n    });\n    addUtilities({\n      '.filter': {\n        '@defaults filter': {},\n        filter: cssFilterValue\n      },\n      '.filter-none': {\n        filter: 'none'\n      }\n    });\n  },\n  backdropBlur: function backdropBlur(_ref236) {\n    var matchUtilities = _ref236.matchUtilities,\n      theme = _ref236.theme;\n    matchUtilities({\n      'backdrop-blur': function backdropBlur(value2) {\n        return {\n          '--tw-backdrop-blur': \"blur(\".concat(value2, \")\"),\n          '@defaults backdrop-filter': {},\n          'backdrop-filter': cssBackdropFilterValue\n        };\n      }\n    }, {\n      values: theme('backdropBlur')\n    });\n  },\n  backdropBrightness: function backdropBrightness(_ref237) {\n    var matchUtilities = _ref237.matchUtilities,\n      theme = _ref237.theme;\n    matchUtilities({\n      'backdrop-brightness': function backdropBrightness(value2) {\n        return {\n          '--tw-backdrop-brightness': \"brightness(\".concat(value2, \")\"),\n          '@defaults backdrop-filter': {},\n          'backdrop-filter': cssBackdropFilterValue\n        };\n      }\n    }, {\n      values: theme('backdropBrightness')\n    });\n  },\n  backdropContrast: function backdropContrast(_ref238) {\n    var matchUtilities = _ref238.matchUtilities,\n      theme = _ref238.theme;\n    matchUtilities({\n      'backdrop-contrast': function backdropContrast(value2) {\n        return {\n          '--tw-backdrop-contrast': \"contrast(\".concat(value2, \")\"),\n          '@defaults backdrop-filter': {},\n          'backdrop-filter': cssBackdropFilterValue\n        };\n      }\n    }, {\n      values: theme('backdropContrast')\n    });\n  },\n  backdropGrayscale: function backdropGrayscale(_ref239) {\n    var matchUtilities = _ref239.matchUtilities,\n      theme = _ref239.theme;\n    matchUtilities({\n      'backdrop-grayscale': function backdropGrayscale(value2) {\n        return {\n          '--tw-backdrop-grayscale': \"grayscale(\".concat(value2, \")\"),\n          '@defaults backdrop-filter': {},\n          'backdrop-filter': cssBackdropFilterValue\n        };\n      }\n    }, {\n      values: theme('backdropGrayscale')\n    });\n  },\n  backdropHueRotate: function backdropHueRotate(_ref240) {\n    var matchUtilities = _ref240.matchUtilities,\n      theme = _ref240.theme;\n    matchUtilities({\n      'backdrop-hue-rotate': function backdropHueRotate(value2) {\n        return {\n          '--tw-backdrop-hue-rotate': \"hue-rotate(\".concat(value2, \")\"),\n          '@defaults backdrop-filter': {},\n          'backdrop-filter': cssBackdropFilterValue\n        };\n      }\n    }, {\n      values: theme('backdropHueRotate'),\n      supportsNegativeValues: true\n    });\n  },\n  backdropInvert: function backdropInvert(_ref241) {\n    var matchUtilities = _ref241.matchUtilities,\n      theme = _ref241.theme;\n    matchUtilities({\n      'backdrop-invert': function backdropInvert(value2) {\n        return {\n          '--tw-backdrop-invert': \"invert(\".concat(value2, \")\"),\n          '@defaults backdrop-filter': {},\n          'backdrop-filter': cssBackdropFilterValue\n        };\n      }\n    }, {\n      values: theme('backdropInvert')\n    });\n  },\n  backdropOpacity: function backdropOpacity(_ref242) {\n    var matchUtilities = _ref242.matchUtilities,\n      theme = _ref242.theme;\n    matchUtilities({\n      'backdrop-opacity': function backdropOpacity(value2) {\n        return {\n          '--tw-backdrop-opacity': \"opacity(\".concat(value2, \")\"),\n          '@defaults backdrop-filter': {},\n          'backdrop-filter': cssBackdropFilterValue\n        };\n      }\n    }, {\n      values: theme('backdropOpacity')\n    });\n  },\n  backdropSaturate: function backdropSaturate(_ref243) {\n    var matchUtilities = _ref243.matchUtilities,\n      theme = _ref243.theme;\n    matchUtilities({\n      'backdrop-saturate': function backdropSaturate(value2) {\n        return {\n          '--tw-backdrop-saturate': \"saturate(\".concat(value2, \")\"),\n          '@defaults backdrop-filter': {},\n          'backdrop-filter': cssBackdropFilterValue\n        };\n      }\n    }, {\n      values: theme('backdropSaturate')\n    });\n  },\n  backdropSepia: function backdropSepia(_ref244) {\n    var matchUtilities = _ref244.matchUtilities,\n      theme = _ref244.theme;\n    matchUtilities({\n      'backdrop-sepia': function backdropSepia(value2) {\n        return {\n          '--tw-backdrop-sepia': \"sepia(\".concat(value2, \")\"),\n          '@defaults backdrop-filter': {},\n          'backdrop-filter': cssBackdropFilterValue\n        };\n      }\n    }, {\n      values: theme('backdropSepia')\n    });\n  },\n  backdropFilter: function backdropFilter(_ref245) {\n    var addDefaults = _ref245.addDefaults,\n      addUtilities = _ref245.addUtilities;\n    addDefaults('backdrop-filter', {\n      '--tw-backdrop-blur': ' ',\n      '--tw-backdrop-brightness': ' ',\n      '--tw-backdrop-contrast': ' ',\n      '--tw-backdrop-grayscale': ' ',\n      '--tw-backdrop-hue-rotate': ' ',\n      '--tw-backdrop-invert': ' ',\n      '--tw-backdrop-opacity': ' ',\n      '--tw-backdrop-saturate': ' ',\n      '--tw-backdrop-sepia': ' '\n    });\n    addUtilities({\n      '.backdrop-filter': {\n        '@defaults backdrop-filter': {},\n        'backdrop-filter': cssBackdropFilterValue\n      },\n      '.backdrop-filter-none': {\n        'backdrop-filter': 'none'\n      }\n    });\n  },\n  transitionProperty: function transitionProperty(_ref246) {\n    var matchUtilities = _ref246.matchUtilities,\n      theme = _ref246.theme;\n    var defaultTimingFunction = theme('transitionTimingFunction.DEFAULT');\n    var defaultDuration = theme('transitionDuration.DEFAULT');\n    matchUtilities({\n      transition: function transition(value2) {\n        return _objectSpread({\n          'transition-property': value2\n        }, value2 === 'none' ? {} : {\n          'transition-timing-function': defaultTimingFunction,\n          'transition-duration': defaultDuration\n        });\n      }\n    }, {\n      values: theme('transitionProperty')\n    });\n  },\n  transitionDelay: createUtilityPlugin('transitionDelay', [['delay', ['transitionDelay']]]),\n  transitionDuration: createUtilityPlugin('transitionDuration', [['duration', ['transitionDuration']]], {\n    filterDefault: true\n  }),\n  transitionTimingFunction: createUtilityPlugin('transitionTimingFunction', [['ease', ['transitionTimingFunction']]], {\n    filterDefault: true\n  }),\n  willChange: createUtilityPlugin('willChange', [['will-change', ['will-change']]]),\n  content: createUtilityPlugin('content', [['content', ['--tw-content', ['content', 'var(--tw-content)']]]]),\n  forcedColorAdjust: function forcedColorAdjust(_ref247) {\n    var addUtilities = _ref247.addUtilities;\n    addUtilities({\n      '.forced-color-adjust-auto': {\n        'forced-color-adjust': 'auto'\n      },\n      '.forced-color-adjust-none': {\n        'forced-color-adjust': 'none'\n      }\n    });\n  }\n};\n\n// node_modules/tailwindcss/src/util/toPath.js\nfunction toPath(path) {\n  if (Array.isArray(path)) return path;\n  var openBrackets = path.split('[').length - 1;\n  var closedBrackets = path.split(']').length - 1;\n  if (openBrackets !== closedBrackets) {\n    throw new Error(\"Path is invalid. Has unbalanced brackets: \".concat(path));\n  }\n  return path.split(/\\.(?![^\\[]*\\])|[\\[\\]]/g).filter(Boolean);\n}\n\n// node_modules/tailwindcss/src/util/isSyntacticallyValidPropertyValue.js\nvar matchingBrackets = /* @__PURE__ */new Map([['{', '}'], ['[', ']'], ['(', ')']]);\nvar inverseMatchingBrackets = new Map(Array.from(matchingBrackets.entries()).map(function (_ref248) {\n  var _ref249 = _slicedToArray(_ref248, 2),\n    k = _ref249[0],\n    v = _ref249[1];\n  return [v, k];\n}));\nvar quotes = /* @__PURE__ */new Set(['\"', \"'\", '`']);\nfunction isSyntacticallyValidPropertyValue(value2) {\n  var stack = [];\n  var inQuotes = false;\n  for (var i = 0; i < value2.length; i++) {\n    var _char4 = value2[i];\n    if (_char4 === ':' && !inQuotes && stack.length === 0) {\n      return false;\n    }\n    if (quotes.has(_char4) && value2[i - 1] !== '\\\\') {\n      inQuotes = !inQuotes;\n    }\n    if (inQuotes) continue;\n    if (value2[i - 1] === '\\\\') continue;\n    if (matchingBrackets.has(_char4)) {\n      stack.push(_char4);\n    } else if (inverseMatchingBrackets.has(_char4)) {\n      var inverse = inverseMatchingBrackets.get(_char4);\n      if (stack.length <= 0) {\n        return false;\n      }\n      if (stack.pop() !== inverse) {\n        return false;\n      }\n    }\n  }\n  if (stack.length > 0) {\n    return false;\n  }\n  return true;\n}\n\n// node_modules/tailwindcss/src/util/bigSign.js\nfunction bigSign(bigIntValue) {\n  return (bigIntValue > 0n) - (bigIntValue < 0n);\n}\n\n// node_modules/tailwindcss/src/lib/remap-bitfield.js\nfunction remapBitfield(num, mapping) {\n  var oldMask = 0n;\n  var newMask = 0n;\n  var _iterator35 = _createForOfIteratorHelper(mapping),\n    _step35;\n  try {\n    for (_iterator35.s(); !(_step35 = _iterator35.n()).done;) {\n      var _step35$value = _slicedToArray(_step35.value, 2),\n        oldBit = _step35$value[0],\n        newBit = _step35$value[1];\n      if (num & oldBit) {\n        oldMask = oldMask | oldBit;\n        newMask = newMask | newBit;\n      }\n    }\n  } catch (err) {\n    _iterator35.e(err);\n  } finally {\n    _iterator35.f();\n  }\n  return num & ~oldMask | newMask;\n}\n\n// node_modules/tailwindcss/src/lib/offsets.js\nvar Offsets = /*#__PURE__*/function () {\n  function Offsets() {\n    _classCallCheck(this, Offsets);\n    this.offsets = {\n      defaults: 0n,\n      base: 0n,\n      components: 0n,\n      utilities: 0n,\n      variants: 0n,\n      user: 0n\n    };\n    this.layerPositions = {\n      defaults: 0n,\n      base: 1n,\n      components: 2n,\n      utilities: 3n,\n      user: 4n,\n      variants: 5n\n    };\n    this.reservedVariantBits = 0n;\n    this.variantOffsets = /* @__PURE__ */new Map();\n  }\n  return _createClass(Offsets, [{\n    key: \"create\",\n    value: function create(layer) {\n      return {\n        layer: layer,\n        parentLayer: layer,\n        arbitrary: 0n,\n        variants: 0n,\n        parallelIndex: 0n,\n        index: this.offsets[layer]++,\n        options: []\n      };\n    }\n  }, {\n    key: \"arbitraryProperty\",\n    value: function arbitraryProperty() {\n      return _objectSpread(_objectSpread({}, this.create('utilities')), {}, {\n        arbitrary: 1n\n      });\n    }\n  }, {\n    key: \"forVariant\",\n    value: function forVariant(variant) {\n      var index = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      var offset = this.variantOffsets.get(variant);\n      if (offset === void 0) {\n        throw new Error(\"Cannot find offset for unknown variant \".concat(variant));\n      }\n      return _objectSpread(_objectSpread({}, this.create('variants')), {}, {\n        variants: offset << BigInt(index)\n      });\n    }\n  }, {\n    key: \"applyVariantOffset\",\n    value: function applyVariantOffset(rule, variant, options) {\n      options.variant = variant.variants;\n      return _objectSpread(_objectSpread({}, rule), {}, {\n        layer: 'variants',\n        parentLayer: rule.layer === 'variants' ? rule.parentLayer : rule.layer,\n        variants: rule.variants | variant.variants,\n        options: options.sort ? [].concat(options, rule.options) : rule.options,\n        parallelIndex: max([rule.parallelIndex, variant.parallelIndex])\n      });\n    }\n  }, {\n    key: \"applyParallelOffset\",\n    value: function applyParallelOffset(offset, parallelIndex) {\n      return _objectSpread(_objectSpread({}, offset), {}, {\n        parallelIndex: BigInt(parallelIndex)\n      });\n    }\n  }, {\n    key: \"recordVariants\",\n    value: function recordVariants(variants, getLength) {\n      var _iterator36 = _createForOfIteratorHelper(variants),\n        _step36;\n      try {\n        for (_iterator36.s(); !(_step36 = _iterator36.n()).done;) {\n          var variant = _step36.value;\n          this.recordVariant(variant, getLength(variant));\n        }\n      } catch (err) {\n        _iterator36.e(err);\n      } finally {\n        _iterator36.f();\n      }\n    }\n  }, {\n    key: \"recordVariant\",\n    value: function recordVariant(variant) {\n      var fnCount = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n      this.variantOffsets.set(variant, 1n << this.reservedVariantBits);\n      this.reservedVariantBits += BigInt(fnCount);\n      return _objectSpread(_objectSpread({}, this.create('variants')), {}, {\n        variants: this.variantOffsets.get(variant)\n      });\n    }\n  }, {\n    key: \"compare\",\n    value: function compare(a, b) {\n      if (a.layer !== b.layer) {\n        return this.layerPositions[a.layer] - this.layerPositions[b.layer];\n      }\n      if (a.parentLayer !== b.parentLayer) {\n        return this.layerPositions[a.parentLayer] - this.layerPositions[b.parentLayer];\n      }\n      var _iterator37 = _createForOfIteratorHelper(a.options),\n        _step37;\n      try {\n        for (_iterator37.s(); !(_step37 = _iterator37.n()).done;) {\n          var aOptions = _step37.value;\n          var _iterator38 = _createForOfIteratorHelper(b.options),\n            _step38;\n          try {\n            for (_iterator38.s(); !(_step38 = _iterator38.n()).done;) {\n              var _max;\n              var bOptions = _step38.value;\n              if (aOptions.id !== bOptions.id) continue;\n              if (!aOptions.sort || !bOptions.sort) continue;\n              var maxFnVariant = (_max = max([aOptions.variant, bOptions.variant])) !== null && _max !== void 0 ? _max : 0n;\n              var mask = ~(maxFnVariant | maxFnVariant - 1n);\n              var aVariantsAfterFn = a.variants & mask;\n              var bVariantsAfterFn = b.variants & mask;\n              if (aVariantsAfterFn !== bVariantsAfterFn) {\n                continue;\n              }\n              var result = aOptions.sort({\n                value: aOptions.value,\n                modifier: aOptions.modifier\n              }, {\n                value: bOptions.value,\n                modifier: bOptions.modifier\n              });\n              if (result !== 0) return result;\n            }\n          } catch (err) {\n            _iterator38.e(err);\n          } finally {\n            _iterator38.f();\n          }\n        }\n      } catch (err) {\n        _iterator37.e(err);\n      } finally {\n        _iterator37.f();\n      }\n      if (a.variants !== b.variants) {\n        return a.variants - b.variants;\n      }\n      if (a.parallelIndex !== b.parallelIndex) {\n        return a.parallelIndex - b.parallelIndex;\n      }\n      if (a.arbitrary !== b.arbitrary) {\n        return a.arbitrary - b.arbitrary;\n      }\n      return a.index - b.index;\n    }\n  }, {\n    key: \"recalculateVariantOffsets\",\n    value: function recalculateVariantOffsets() {\n      var variants = Array.from(this.variantOffsets.entries()).filter(function (_ref250) {\n        var _ref251 = _slicedToArray(_ref250, 1),\n          v = _ref251[0];\n        return v.startsWith('[');\n      }).sort(function (_ref252, _ref253) {\n        var _ref254 = _slicedToArray(_ref252, 1),\n          a = _ref254[0];\n        var _ref255 = _slicedToArray(_ref253, 1),\n          z = _ref255[0];\n        return fastCompare(a, z);\n      });\n      var newOffsets = variants.map(function (_ref256) {\n        var _ref257 = _slicedToArray(_ref256, 2),\n          offset = _ref257[1];\n        return offset;\n      }).sort(function (a, z) {\n        return bigSign(a - z);\n      });\n      var mapping = variants.map(function (_ref258, i) {\n        var _ref259 = _slicedToArray(_ref258, 2),\n          oldOffset = _ref259[1];\n        return [oldOffset, newOffsets[i]];\n      });\n      return mapping.filter(function (_ref260) {\n        var _ref261 = _slicedToArray(_ref260, 2),\n          a = _ref261[0],\n          z = _ref261[1];\n        return a !== z;\n      });\n    }\n  }, {\n    key: \"remapArbitraryVariantOffsets\",\n    value: function remapArbitraryVariantOffsets(list2) {\n      var mapping = this.recalculateVariantOffsets();\n      if (mapping.length === 0) {\n        return list2;\n      }\n      return list2.map(function (item) {\n        var _item11 = _slicedToArray(item, 2),\n          offset = _item11[0],\n          rule = _item11[1];\n        offset = _objectSpread(_objectSpread({}, offset), {}, {\n          variants: remapBitfield(offset.variants, mapping)\n        });\n        return [offset, rule];\n      });\n    }\n  }, {\n    key: \"sort\",\n    value: function sort(list2) {\n      var _this = this;\n      list2 = this.remapArbitraryVariantOffsets(list2);\n      return list2.sort(function (_ref262, _ref263) {\n        var _ref264 = _slicedToArray(_ref262, 1),\n          a = _ref264[0];\n        var _ref265 = _slicedToArray(_ref263, 1),\n          b = _ref265[0];\n        return bigSign(_this.compare(a, b));\n      });\n    }\n  }]);\n}();\nfunction max(nums) {\n  var max2 = null;\n  var _iterator39 = _createForOfIteratorHelper(nums),\n    _step39;\n  try {\n    for (_iterator39.s(); !(_step39 = _iterator39.n()).done;) {\n      var _max2;\n      var num = _step39.value;\n      max2 = (_max2 = max2) !== null && _max2 !== void 0 ? _max2 : num;\n      max2 = max2 > num ? max2 : num;\n    }\n  } catch (err) {\n    _iterator39.e(err);\n  } finally {\n    _iterator39.f();\n  }\n  return max2;\n}\nfunction fastCompare(a, b) {\n  var aLen = a.length;\n  var bLen = b.length;\n  var minLen = aLen < bLen ? aLen : bLen;\n  for (var i = 0; i < minLen; i++) {\n    var cmp = a.charCodeAt(i) - b.charCodeAt(i);\n    if (cmp !== 0) return cmp;\n  }\n  return aLen - bLen;\n}\n\n// node_modules/tailwindcss/src/lib/setupContextUtils.js\nvar INTERNAL_FEATURES = Symbol();\nvar VARIANT_TYPES = {\n  AddVariant: Symbol[\"for\"]('ADD_VARIANT'),\n  MatchVariant: Symbol[\"for\"]('MATCH_VARIANT')\n};\nvar VARIANT_INFO = {\n  Base: 1 << 0,\n  Dynamic: 1 << 1\n};\nfunction prefix(context, selector) {\n  var prefix3 = context.tailwindConfig.prefix;\n  return typeof prefix3 === 'function' ? prefix3(selector) : prefix3 + selector;\n}\nfunction normalizeOptionTypes(_ref266) {\n  var _ref266$type = _ref266.type,\n    type = _ref266$type === void 0 ? 'any' : _ref266$type,\n    options = _objectWithoutProperties(_ref266, _excluded6);\n  var types2 = [].concat(type);\n  return _objectSpread(_objectSpread({}, options), {}, {\n    types: types2.map(function (type2) {\n      if (Array.isArray(type2)) {\n        return _objectSpread({\n          type: type2[0]\n        }, type2[1]);\n      }\n      return {\n        type: type2,\n        preferOnConflict: false\n      };\n    })\n  });\n}\nfunction parseVariantFormatString(input) {\n  var parts = [];\n  var current = '';\n  var depth = 0;\n  for (var idx = 0; idx < input.length; idx++) {\n    var _char5 = input[idx];\n    if (_char5 === '\\\\') {\n      current += '\\\\' + input[++idx];\n    } else if (_char5 === '{') {\n      ++depth;\n      parts.push(current.trim());\n      current = '';\n    } else if (_char5 === '}') {\n      if (--depth < 0) {\n        throw new Error(\"Your { and } are unbalanced.\");\n      }\n      parts.push(current.trim());\n      current = '';\n    } else {\n      current += _char5;\n    }\n  }\n  if (current.length > 0) {\n    parts.push(current.trim());\n  }\n  parts = parts.filter(function (part) {\n    return part !== '';\n  });\n  return parts;\n}\nfunction insertInto(list2, value2) {\n  var _ref267 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},\n    _ref267$before = _ref267.before,\n    before = _ref267$before === void 0 ? [] : _ref267$before;\n  before = [].concat(before);\n  if (before.length <= 0) {\n    list2.push(value2);\n    return;\n  }\n  var idx = list2.length - 1;\n  var _iterator40 = _createForOfIteratorHelper(before),\n    _step40;\n  try {\n    for (_iterator40.s(); !(_step40 = _iterator40.n()).done;) {\n      var other = _step40.value;\n      var iidx = list2.indexOf(other);\n      if (iidx === -1) continue;\n      idx = Math.min(idx, iidx);\n    }\n  } catch (err) {\n    _iterator40.e(err);\n  } finally {\n    _iterator40.f();\n  }\n  list2.splice(idx, 0, value2);\n}\nfunction parseStyles(styles) {\n  if (!Array.isArray(styles)) {\n    return parseStyles([styles]);\n  }\n  return styles.flatMap(function (style) {\n    var isNode = !Array.isArray(style) && !isPlainObject(style);\n    return isNode ? style : parseObjectStyles(style);\n  });\n}\nfunction getClasses(selector, mutate) {\n  var parser5 = dist_default()(function (selectors) {\n    var allClasses = [];\n    if (mutate) {\n      mutate(selectors);\n    }\n    selectors.walkClasses(function (classNode) {\n      allClasses.push(classNode.value);\n    });\n    return allClasses;\n  });\n  return parser5.transformSync(selector);\n}\nfunction ignoreNot(selectors) {\n  selectors.walkPseudos(function (pseudo) {\n    if (pseudo.value === ':not') {\n      pseudo.remove();\n    }\n  });\n}\nfunction extractCandidates(node) {\n  var state = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n    containsNonOnDemandable: false\n  };\n  var depth = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n  var classes = [];\n  var selectors = [];\n  if (node.type === 'rule') {\n    selectors.push.apply(selectors, _toConsumableArray(node.selectors));\n  } else if (node.type === 'atrule') {\n    node.walkRules(function (rule) {\n      return selectors.push.apply(selectors, _toConsumableArray(rule.selectors));\n    });\n  }\n  for (var _i5 = 0, _selectors = selectors; _i5 < _selectors.length; _i5++) {\n    var selector = _selectors[_i5];\n    var classCandidates = getClasses(selector, ignoreNot);\n    if (classCandidates.length === 0) {\n      state.containsNonOnDemandable = true;\n    }\n    var _iterator41 = _createForOfIteratorHelper(classCandidates),\n      _step41;\n    try {\n      for (_iterator41.s(); !(_step41 = _iterator41.n()).done;) {\n        var classCandidate = _step41.value;\n        classes.push(classCandidate);\n      }\n    } catch (err) {\n      _iterator41.e(err);\n    } finally {\n      _iterator41.f();\n    }\n  }\n  if (depth === 0) {\n    return [state.containsNonOnDemandable || classes.length === 0, classes];\n  }\n  return classes;\n}\nfunction withIdentifiers(styles) {\n  return parseStyles(styles).flatMap(function (node) {\n    var nodeMap = /* @__PURE__ */new Map();\n    var _extractCandidates = extractCandidates(node),\n      _extractCandidates2 = _slicedToArray(_extractCandidates, 2),\n      containsNonOnDemandableSelectors = _extractCandidates2[0],\n      candidates = _extractCandidates2[1];\n    if (containsNonOnDemandableSelectors) {\n      candidates.unshift(NOT_ON_DEMAND);\n    }\n    return candidates.map(function (c) {\n      if (!nodeMap.has(node)) {\n        nodeMap.set(node, node);\n      }\n      return [c, nodeMap.get(node)];\n    });\n  });\n}\nfunction isValidVariantFormatString(format) {\n  return format.startsWith('@') || format.includes('&');\n}\nfunction parseVariant(variant) {\n  variant = variant.replace(/\\n+/g, '').replace(/\\s{1,}/g, ' ').trim();\n  var fns = parseVariantFormatString(variant).map(function (str) {\n    if (!str.startsWith('@')) {\n      return function (_ref268) {\n        var format = _ref268.format;\n        return format(str);\n      };\n    }\n    var _exec = /@(\\S*)( .+|[({].*)?/g.exec(str),\n      _exec2 = _slicedToArray(_exec, 3),\n      name = _exec2[1],\n      params = _exec2[2];\n    return function (_ref269) {\n      var _params$trim;\n      var wrap = _ref269.wrap;\n      return wrap(lib_postcss.atRule({\n        name: name,\n        params: (_params$trim = params === null || params === void 0 ? void 0 : params.trim()) !== null && _params$trim !== void 0 ? _params$trim : ''\n      }));\n    };\n  }).reverse();\n  return function (api) {\n    var _iterator42 = _createForOfIteratorHelper(fns),\n      _step42;\n    try {\n      for (_iterator42.s(); !(_step42 = _iterator42.n()).done;) {\n        var fn = _step42.value;\n        fn(api);\n      }\n    } catch (err) {\n      _iterator42.e(err);\n    } finally {\n      _iterator42.f();\n    }\n  };\n}\nfunction buildPluginApi(tailwindConfig, context, _ref270) {\n  var variantList = _ref270.variantList,\n    variantMap = _ref270.variantMap,\n    offsets = _ref270.offsets,\n    classList = _ref270.classList;\n  function getConfigValue(path, defaultValue) {\n    return path ? dlv_umd_default()(tailwindConfig, path, defaultValue) : tailwindConfig;\n  }\n  function applyConfiguredPrefix(selector) {\n    return prefixSelector_default(tailwindConfig.prefix, selector);\n  }\n  function prefixIdentifier(identifier, options) {\n    if (identifier === NOT_ON_DEMAND) {\n      return NOT_ON_DEMAND;\n    }\n    if (!options.respectPrefix) {\n      return identifier;\n    }\n    return context.tailwindConfig.prefix + identifier;\n  }\n  function resolveThemeValue(path, defaultValue) {\n    var opts = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    var parts = toPath(path);\n    var value2 = getConfigValue(['theme'].concat(_toConsumableArray(parts)), defaultValue);\n    return transformThemeValue(parts[0])(value2, opts);\n  }\n  var variantIdentifier = 0;\n  var api = {\n    postcss: lib_postcss,\n    prefix: applyConfiguredPrefix,\n    e: escapeClassName,\n    config: getConfigValue,\n    theme: resolveThemeValue,\n    corePlugins: function corePlugins(path) {\n      if (Array.isArray(tailwindConfig.corePlugins)) {\n        return tailwindConfig.corePlugins.includes(path);\n      }\n      return getConfigValue(['corePlugins', path], true);\n    },\n    variants: function variants() {\n      return [];\n    },\n    addBase: function addBase(base) {\n      var _iterator43 = _createForOfIteratorHelper(withIdentifiers(base)),\n        _step43;\n      try {\n        for (_iterator43.s(); !(_step43 = _iterator43.n()).done;) {\n          var _step43$value = _slicedToArray(_step43.value, 2),\n            identifier = _step43$value[0],\n            rule = _step43$value[1];\n          var prefixedIdentifier = prefixIdentifier(identifier, {});\n          var offset = offsets.create('base');\n          if (!context.candidateRuleMap.has(prefixedIdentifier)) {\n            context.candidateRuleMap.set(prefixedIdentifier, []);\n          }\n          context.candidateRuleMap.get(prefixedIdentifier).push([{\n            sort: offset,\n            layer: 'base'\n          }, rule]);\n        }\n      } catch (err) {\n        _iterator43.e(err);\n      } finally {\n        _iterator43.f();\n      }\n    },\n    addDefaults: function addDefaults(group, declarations) {\n      var groups = _defineProperty({}, \"@defaults \".concat(group), declarations);\n      var _iterator44 = _createForOfIteratorHelper(withIdentifiers(groups)),\n        _step44;\n      try {\n        for (_iterator44.s(); !(_step44 = _iterator44.n()).done;) {\n          var _step44$value = _slicedToArray(_step44.value, 2),\n            identifier = _step44$value[0],\n            rule = _step44$value[1];\n          var prefixedIdentifier = prefixIdentifier(identifier, {});\n          if (!context.candidateRuleMap.has(prefixedIdentifier)) {\n            context.candidateRuleMap.set(prefixedIdentifier, []);\n          }\n          context.candidateRuleMap.get(prefixedIdentifier).push([{\n            sort: offsets.create('defaults'),\n            layer: 'defaults'\n          }, rule]);\n        }\n      } catch (err) {\n        _iterator44.e(err);\n      } finally {\n        _iterator44.f();\n      }\n    },\n    addComponents: function addComponents(components, options) {\n      var defaultOptions = {\n        preserveSource: false,\n        respectPrefix: true,\n        respectImportant: false\n      };\n      options = Object.assign({}, defaultOptions, Array.isArray(options) ? {} : options);\n      var _iterator45 = _createForOfIteratorHelper(withIdentifiers(components)),\n        _step45;\n      try {\n        for (_iterator45.s(); !(_step45 = _iterator45.n()).done;) {\n          var _step45$value = _slicedToArray(_step45.value, 2),\n            identifier = _step45$value[0],\n            rule = _step45$value[1];\n          var prefixedIdentifier = prefixIdentifier(identifier, options);\n          classList.add(prefixedIdentifier);\n          if (!context.candidateRuleMap.has(prefixedIdentifier)) {\n            context.candidateRuleMap.set(prefixedIdentifier, []);\n          }\n          context.candidateRuleMap.get(prefixedIdentifier).push([{\n            sort: offsets.create('components'),\n            layer: 'components',\n            options: options\n          }, rule]);\n        }\n      } catch (err) {\n        _iterator45.e(err);\n      } finally {\n        _iterator45.f();\n      }\n    },\n    addUtilities: function addUtilities(utilities, options) {\n      var defaultOptions = {\n        preserveSource: false,\n        respectPrefix: true,\n        respectImportant: true\n      };\n      options = Object.assign({}, defaultOptions, Array.isArray(options) ? {} : options);\n      var _iterator46 = _createForOfIteratorHelper(withIdentifiers(utilities)),\n        _step46;\n      try {\n        for (_iterator46.s(); !(_step46 = _iterator46.n()).done;) {\n          var _step46$value = _slicedToArray(_step46.value, 2),\n            identifier = _step46$value[0],\n            rule = _step46$value[1];\n          var prefixedIdentifier = prefixIdentifier(identifier, options);\n          classList.add(prefixedIdentifier);\n          if (!context.candidateRuleMap.has(prefixedIdentifier)) {\n            context.candidateRuleMap.set(prefixedIdentifier, []);\n          }\n          context.candidateRuleMap.get(prefixedIdentifier).push([{\n            sort: offsets.create('utilities'),\n            layer: 'utilities',\n            options: options\n          }, rule]);\n        }\n      } catch (err) {\n        _iterator46.e(err);\n      } finally {\n        _iterator46.f();\n      }\n    },\n    matchUtilities: function matchUtilities(utilities, options) {\n      var defaultOptions = {\n        respectPrefix: true,\n        respectImportant: true,\n        modifiers: false\n      };\n      options = normalizeOptionTypes(_objectSpread(_objectSpread({}, defaultOptions), options));\n      var offset = offsets.create('utilities');\n      var _loop6 = function _loop6(identifier) {\n        var wrapped = function wrapped(modifier, _ref271) {\n          var isOnlyPlugin = _ref271.isOnlyPlugin;\n          var _coerceValue = coerceValue(options.types, modifier, options, tailwindConfig),\n            _coerceValue2 = _slicedToArray(_coerceValue, 3),\n            value2 = _coerceValue2[0],\n            coercedType = _coerceValue2[1],\n            utilityModifier = _coerceValue2[2];\n          if (value2 === void 0) {\n            return [];\n          }\n          if (!options.types.some(function (_ref272) {\n            var type = _ref272.type;\n            return type === coercedType;\n          })) {\n            if (isOnlyPlugin) {\n              log_default.warn([\"Unnecessary typehint `\".concat(coercedType, \"` in `\").concat(identifier, \"-\").concat(modifier, \"`.\"), \"You can safely update it to `\".concat(identifier, \"-\").concat(modifier.replace(coercedType + ':', ''), \"`.\")]);\n            } else {\n              return [];\n            }\n          }\n          if (!isSyntacticallyValidPropertyValue(value2)) {\n            return [];\n          }\n          var extras = {\n            get modifier() {\n              if (!options.modifiers) {\n                log_default.warn(\"modifier-used-without-options-for-\".concat(identifier), ['Your plugin must set `modifiers: true` in its options to support modifiers.']);\n              }\n              return utilityModifier;\n            }\n          };\n          var modifiersEnabled = flagEnabled(tailwindConfig, 'generalizedModifiers');\n          var ruleSets = [].concat(modifiersEnabled ? rule(value2, extras) : rule(value2)).filter(Boolean).map(function (declaration) {\n            return _defineProperty({}, nameClass(identifier, modifier), declaration);\n          });\n          return ruleSets;\n        };\n        var prefixedIdentifier = prefixIdentifier(identifier, options);\n        var rule = utilities[identifier];\n        classList.add([prefixedIdentifier, options]);\n        var withOffsets = [{\n          sort: offset,\n          layer: 'utilities',\n          options: options\n        }, wrapped];\n        if (!context.candidateRuleMap.has(prefixedIdentifier)) {\n          context.candidateRuleMap.set(prefixedIdentifier, []);\n        }\n        context.candidateRuleMap.get(prefixedIdentifier).push(withOffsets);\n      };\n      for (var identifier in utilities) {\n        _loop6(identifier);\n      }\n    },\n    matchComponents: function matchComponents(components, options) {\n      var defaultOptions = {\n        respectPrefix: true,\n        respectImportant: false,\n        modifiers: false\n      };\n      options = normalizeOptionTypes(_objectSpread(_objectSpread({}, defaultOptions), options));\n      var offset = offsets.create('components');\n      var _loop7 = function _loop7(identifier) {\n        var wrapped = function wrapped(modifier, _ref274) {\n          var isOnlyPlugin = _ref274.isOnlyPlugin;\n          var _coerceValue3 = coerceValue(options.types, modifier, options, tailwindConfig),\n            _coerceValue4 = _slicedToArray(_coerceValue3, 3),\n            value2 = _coerceValue4[0],\n            coercedType = _coerceValue4[1],\n            utilityModifier = _coerceValue4[2];\n          if (value2 === void 0) {\n            return [];\n          }\n          if (!options.types.some(function (_ref275) {\n            var type = _ref275.type;\n            return type === coercedType;\n          })) {\n            if (isOnlyPlugin) {\n              log_default.warn([\"Unnecessary typehint `\".concat(coercedType, \"` in `\").concat(identifier, \"-\").concat(modifier, \"`.\"), \"You can safely update it to `\".concat(identifier, \"-\").concat(modifier.replace(coercedType + ':', ''), \"`.\")]);\n            } else {\n              return [];\n            }\n          }\n          if (!isSyntacticallyValidPropertyValue(value2)) {\n            return [];\n          }\n          var extras = {\n            get modifier() {\n              if (!options.modifiers) {\n                log_default.warn(\"modifier-used-without-options-for-\".concat(identifier), ['Your plugin must set `modifiers: true` in its options to support modifiers.']);\n              }\n              return utilityModifier;\n            }\n          };\n          var modifiersEnabled = flagEnabled(tailwindConfig, 'generalizedModifiers');\n          var ruleSets = [].concat(modifiersEnabled ? rule(value2, extras) : rule(value2)).filter(Boolean).map(function (declaration) {\n            return _defineProperty({}, nameClass(identifier, modifier), declaration);\n          });\n          return ruleSets;\n        };\n        var prefixedIdentifier = prefixIdentifier(identifier, options);\n        var rule = components[identifier];\n        classList.add([prefixedIdentifier, options]);\n        var withOffsets = [{\n          sort: offset,\n          layer: 'components',\n          options: options\n        }, wrapped];\n        if (!context.candidateRuleMap.has(prefixedIdentifier)) {\n          context.candidateRuleMap.set(prefixedIdentifier, []);\n        }\n        context.candidateRuleMap.get(prefixedIdentifier).push(withOffsets);\n      };\n      for (var identifier in components) {\n        _loop7(identifier);\n      }\n    },\n    addVariant: function addVariant(variantName, variantFunctions) {\n      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      variantFunctions = [].concat(variantFunctions).map(function (variantFunction) {\n        if (typeof variantFunction !== 'string') {\n          return function () {\n            var api2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n            var args = api2.args,\n              modifySelectors = api2.modifySelectors,\n              container = api2.container,\n              separator = api2.separator,\n              wrap = api2.wrap,\n              format = api2.format;\n            var result = variantFunction(Object.assign({\n              modifySelectors: modifySelectors,\n              container: container,\n              separator: separator\n            }, options.type === VARIANT_TYPES.MatchVariant && {\n              args: args,\n              wrap: wrap,\n              format: format\n            }));\n            if (typeof result === 'string' && !isValidVariantFormatString(result)) {\n              throw new Error(\"Your custom variant `\".concat(variantName, \"` has an invalid format string. Make sure it's an at-rule or contains a `&` placeholder.\"));\n            }\n            if (Array.isArray(result)) {\n              return result.filter(function (variant) {\n                return typeof variant === 'string';\n              }).map(function (variant) {\n                return parseVariant(variant);\n              });\n            }\n            return result && typeof result === 'string' && parseVariant(result)(api2);\n          };\n        }\n        if (!isValidVariantFormatString(variantFunction)) {\n          throw new Error(\"Your custom variant `\".concat(variantName, \"` has an invalid format string. Make sure it's an at-rule or contains a `&` placeholder.\"));\n        }\n        return parseVariant(variantFunction);\n      });\n      insertInto(variantList, variantName, options);\n      variantMap.set(variantName, variantFunctions);\n      context.variantOptions.set(variantName, options);\n    },\n    matchVariant: function matchVariant(variant, variantFn, options) {\n      var _options$id, _options$values7;\n      var id = (_options$id = options === null || options === void 0 ? void 0 : options.id) !== null && _options$id !== void 0 ? _options$id : ++variantIdentifier;\n      var isSpecial = variant === '@';\n      var modifiersEnabled = flagEnabled(tailwindConfig, 'generalizedModifiers');\n      var _loop8 = function _loop8() {\n        var _Object$entries2$_i = _slicedToArray(_Object$entries2[_i6], 2),\n          key = _Object$entries2$_i[0],\n          value2 = _Object$entries2$_i[1];\n        if (key === 'DEFAULT') return 1; // continue\n        api.addVariant(isSpecial ? \"\".concat(variant).concat(key) : \"\".concat(variant, \"-\").concat(key), function (_ref277) {\n          var args = _ref277.args,\n            container = _ref277.container;\n          return variantFn(value2, modifiersEnabled ? {\n            modifier: args === null || args === void 0 ? void 0 : args.modifier,\n            container: container\n          } : {\n            container: container\n          });\n        }, _objectSpread(_objectSpread({}, options), {}, {\n          value: value2,\n          id: id,\n          type: VARIANT_TYPES.MatchVariant,\n          variantInfo: VARIANT_INFO.Base\n        }));\n      };\n      for (var _i6 = 0, _Object$entries2 = Object.entries((_options$values6 = options === null || options === void 0 ? void 0 : options.values) !== null && _options$values6 !== void 0 ? _options$values6 : {}); _i6 < _Object$entries2.length; _i6++) {\n        var _options$values6;\n        if (_loop8()) continue;\n      }\n      var hasDefault = 'DEFAULT' in ((_options$values7 = options === null || options === void 0 ? void 0 : options.values) !== null && _options$values7 !== void 0 ? _options$values7 : {});\n      api.addVariant(variant, function (_ref278) {\n        var _args$value;\n        var args = _ref278.args,\n          container = _ref278.container;\n        if ((args === null || args === void 0 ? void 0 : args.value) === NONE && !hasDefault) {\n          return null;\n        }\n        return variantFn((args === null || args === void 0 ? void 0 : args.value) === NONE ? options.values.DEFAULT : (_args$value = args === null || args === void 0 ? void 0 : args.value) !== null && _args$value !== void 0 ? _args$value : typeof args === 'string' ? args : '', modifiersEnabled ? {\n          modifier: args === null || args === void 0 ? void 0 : args.modifier,\n          container: container\n        } : {\n          container: container\n        });\n      }, _objectSpread(_objectSpread({}, options), {}, {\n        id: id,\n        type: VARIANT_TYPES.MatchVariant,\n        variantInfo: VARIANT_INFO.Dynamic\n      }));\n    }\n  };\n  return api;\n}\nfunction extractVariantAtRules(node) {\n  node.walkAtRules(function (atRule) {\n    if (['responsive', 'variants'].includes(atRule.name)) {\n      extractVariantAtRules(atRule);\n      atRule.before(atRule.nodes);\n      atRule.remove();\n    }\n  });\n}\nfunction collectLayerPlugins(root) {\n  var layerPlugins = [];\n  root.each(function (node) {\n    if (node.type === 'atrule' && ['responsive', 'variants'].includes(node.name)) {\n      node.name = 'layer';\n      node.params = 'utilities';\n    }\n  });\n  root.walkAtRules('layer', function (layerRule) {\n    extractVariantAtRules(layerRule);\n    if (layerRule.params === 'base') {\n      var _iterator47 = _createForOfIteratorHelper(layerRule.nodes),\n        _step47;\n      try {\n        var _loop9 = function _loop9() {\n          var node = _step47.value;\n          layerPlugins.push(function (_ref279) {\n            var addBase = _ref279.addBase;\n            addBase(node, {\n              respectPrefix: false\n            });\n          });\n        };\n        for (_iterator47.s(); !(_step47 = _iterator47.n()).done;) {\n          _loop9();\n        }\n      } catch (err) {\n        _iterator47.e(err);\n      } finally {\n        _iterator47.f();\n      }\n      layerRule.remove();\n    } else if (layerRule.params === 'components') {\n      var _iterator48 = _createForOfIteratorHelper(layerRule.nodes),\n        _step48;\n      try {\n        var _loop10 = function _loop10() {\n          var node = _step48.value;\n          layerPlugins.push(function (_ref280) {\n            var addComponents = _ref280.addComponents;\n            addComponents(node, {\n              respectPrefix: false,\n              preserveSource: true\n            });\n          });\n        };\n        for (_iterator48.s(); !(_step48 = _iterator48.n()).done;) {\n          _loop10();\n        }\n      } catch (err) {\n        _iterator48.e(err);\n      } finally {\n        _iterator48.f();\n      }\n      layerRule.remove();\n    } else if (layerRule.params === 'utilities') {\n      var _iterator49 = _createForOfIteratorHelper(layerRule.nodes),\n        _step49;\n      try {\n        var _loop11 = function _loop11() {\n          var node = _step49.value;\n          layerPlugins.push(function (_ref281) {\n            var addUtilities = _ref281.addUtilities;\n            addUtilities(node, {\n              respectPrefix: false,\n              preserveSource: true\n            });\n          });\n        };\n        for (_iterator49.s(); !(_step49 = _iterator49.n()).done;) {\n          _loop11();\n        }\n      } catch (err) {\n        _iterator49.e(err);\n      } finally {\n        _iterator49.f();\n      }\n      layerRule.remove();\n    }\n  });\n  return layerPlugins;\n}\nfunction resolvePlugins(context, root) {\n  var corePluginList = Object.entries(_objectSpread(_objectSpread({}, variantPlugins), corePlugins)).map(function (_ref282) {\n    var _ref283 = _slicedToArray(_ref282, 2),\n      name = _ref283[0],\n      plugin = _ref283[1];\n    if (!context.tailwindConfig.corePlugins.includes(name)) {\n      return null;\n    }\n    return plugin;\n  }).filter(Boolean);\n  var userPlugins = context.tailwindConfig.plugins.map(function (plugin) {\n    if (plugin.__isOptionsFunction) {\n      plugin = plugin();\n    }\n    return typeof plugin === 'function' ? plugin : plugin.handler;\n  });\n  var layerPlugins = collectLayerPlugins(root);\n  var beforeVariants = [variantPlugins['childVariant'], variantPlugins['pseudoElementVariants'], variantPlugins['pseudoClassVariants'], variantPlugins['hasVariants'], variantPlugins['ariaVariants'], variantPlugins['dataVariants']];\n  var afterVariants = [variantPlugins['supportsVariants'], variantPlugins['reducedMotionVariants'], variantPlugins['prefersContrastVariants'], variantPlugins['screenVariants'], variantPlugins['orientationVariants'], variantPlugins['directionVariants'], variantPlugins['darkVariants'], variantPlugins['forcedColorsVariants'], variantPlugins['printVariant']];\n  var isLegacyDarkMode = context.tailwindConfig.darkMode === 'class' || Array.isArray(context.tailwindConfig.darkMode) && context.tailwindConfig.darkMode[0] === 'class';\n  if (isLegacyDarkMode) {\n    afterVariants = [variantPlugins['supportsVariants'], variantPlugins['reducedMotionVariants'], variantPlugins['prefersContrastVariants'], variantPlugins['darkVariants'], variantPlugins['screenVariants'], variantPlugins['orientationVariants'], variantPlugins['directionVariants'], variantPlugins['forcedColorsVariants'], variantPlugins['printVariant']];\n  }\n  return [].concat(_toConsumableArray(corePluginList), beforeVariants, _toConsumableArray(userPlugins), _toConsumableArray(afterVariants), _toConsumableArray(layerPlugins));\n}\nfunction registerPlugins(plugins, context) {\n  var _context$tailwindConf4, _concat$, _context$tailwindConf5;\n  var variantList = [];\n  var variantMap = /* @__PURE__ */new Map();\n  context.variantMap = variantMap;\n  var offsets = new Offsets();\n  context.offsets = offsets;\n  var classList = /* @__PURE__ */new Set();\n  var pluginApi = buildPluginApi(context.tailwindConfig, context, {\n    variantList: variantList,\n    variantMap: variantMap,\n    offsets: offsets,\n    classList: classList\n  });\n  var _iterator50 = _createForOfIteratorHelper(plugins),\n    _step50;\n  try {\n    for (_iterator50.s(); !(_step50 = _iterator50.n()).done;) {\n      var plugin = _step50.value;\n      if (Array.isArray(plugin)) {\n        var _iterator63 = _createForOfIteratorHelper(plugin),\n          _step63;\n        try {\n          for (_iterator63.s(); !(_step63 = _iterator63.n()).done;) {\n            var pluginItem = _step63.value;\n            pluginItem(pluginApi);\n          }\n        } catch (err) {\n          _iterator63.e(err);\n        } finally {\n          _iterator63.f();\n        }\n      } else {\n        plugin === null || plugin === void 0 || plugin(pluginApi);\n      }\n    }\n  } catch (err) {\n    _iterator50.e(err);\n  } finally {\n    _iterator50.f();\n  }\n  offsets.recordVariants(variantList, function (variant) {\n    return variantMap.get(variant).length;\n  });\n  var _iterator51 = _createForOfIteratorHelper(variantMap.entries()),\n    _step51;\n  try {\n    var _loop15 = function _loop15() {\n      var _step51$value = _slicedToArray(_step51.value, 2),\n        variantName = _step51$value[0],\n        variantFunctions = _step51$value[1];\n      context.variantMap.set(variantName, variantFunctions.map(function (variantFunction, idx) {\n        return [offsets.forVariant(variantName, idx), variantFunction];\n      }));\n    };\n    for (_iterator51.s(); !(_step51 = _iterator51.n()).done;) {\n      _loop15();\n    }\n  } catch (err) {\n    _iterator51.e(err);\n  } finally {\n    _iterator51.f();\n  }\n  var safelist = ((_context$tailwindConf4 = context.tailwindConfig.safelist) !== null && _context$tailwindConf4 !== void 0 ? _context$tailwindConf4 : []).filter(Boolean);\n  if (safelist.length > 0) {\n    var checks = [];\n    var _iterator52 = _createForOfIteratorHelper(safelist),\n      _step52;\n    try {\n      for (_iterator52.s(); !(_step52 = _iterator52.n()).done;) {\n        var value2 = _step52.value;\n        if (typeof value2 === 'string') {\n          context.changedContent.push({\n            content: value2,\n            extension: 'html'\n          });\n          continue;\n        }\n        if (value2 instanceof RegExp) {\n          log_default.warn('root-regex', ['Regular expressions in `safelist` work differently in Tailwind CSS v3.0.', 'Update your `safelist` configuration to eliminate this warning.', 'https://tailwindcss.com/docs/content-configuration#safelisting-classes']);\n          continue;\n        }\n        checks.push(value2);\n      }\n    } catch (err) {\n      _iterator52.e(err);\n    } finally {\n      _iterator52.f();\n    }\n    if (checks.length > 0) {\n      var patternMatchingCount = /* @__PURE__ */new Map();\n      var prefixLength = context.tailwindConfig.prefix.length;\n      var checkImportantUtils = checks.some(function (check) {\n        return check.pattern.source.includes('!');\n      });\n      var _iterator53 = _createForOfIteratorHelper(classList),\n        _step53;\n      try {\n        var _loop12 = function _loop12() {\n          var util = _step53.value;\n          var utils = Array.isArray(util) ? function (_options$values8) {\n            var _util = _slicedToArray(util, 2),\n              utilName = _util[0],\n              options = _util[1];\n            var values = Object.keys((_options$values8 = options === null || options === void 0 ? void 0 : options.values) !== null && _options$values8 !== void 0 ? _options$values8 : {});\n            var classes = values.map(function (value2) {\n              return formatClass(utilName, value2);\n            });\n            if (options !== null && options !== void 0 && options.supportsNegativeValues) {\n              classes = [].concat(_toConsumableArray(classes), _toConsumableArray(classes.map(function (cls) {\n                return '-' + cls;\n              })));\n              classes = [].concat(_toConsumableArray(classes), _toConsumableArray(classes.map(function (cls) {\n                return cls.slice(0, prefixLength) + '-' + cls.slice(prefixLength);\n              })));\n            }\n            if (options.types.some(function (_ref284) {\n              var type = _ref284.type;\n              return type === 'color';\n            })) {\n              classes = [].concat(_toConsumableArray(classes), _toConsumableArray(classes.flatMap(function (cls) {\n                return Object.keys(context.tailwindConfig.theme.opacity).map(function (opacity) {\n                  return \"\".concat(cls, \"/\").concat(opacity);\n                });\n              })));\n            }\n            if (checkImportantUtils && options !== null && options !== void 0 && options.respectImportant) {\n              classes = [].concat(_toConsumableArray(classes), _toConsumableArray(classes.map(function (cls) {\n                return '!' + cls;\n              })));\n            }\n            return classes;\n          }() : [util];\n          var _iterator55 = _createForOfIteratorHelper(utils),\n            _step55;\n          try {\n            for (_iterator55.s(); !(_step55 = _iterator55.n()).done;) {\n              var util2 = _step55.value;\n              var _iterator56 = _createForOfIteratorHelper(checks),\n                _step56;\n              try {\n                for (_iterator56.s(); !(_step56 = _iterator56.n()).done;) {\n                  var _step56$value = _step56.value,\n                    pattern2 = _step56$value.pattern,\n                    _step56$value$variant = _step56$value.variants,\n                    variants = _step56$value$variant === void 0 ? [] : _step56$value$variant;\n                  pattern2.lastIndex = 0;\n                  if (!patternMatchingCount.has(pattern2)) {\n                    patternMatchingCount.set(pattern2, 0);\n                  }\n                  if (!pattern2.test(util2)) continue;\n                  patternMatchingCount.set(pattern2, patternMatchingCount.get(pattern2) + 1);\n                  context.changedContent.push({\n                    content: util2,\n                    extension: 'html'\n                  });\n                  var _iterator57 = _createForOfIteratorHelper(variants),\n                    _step57;\n                  try {\n                    for (_iterator57.s(); !(_step57 = _iterator57.n()).done;) {\n                      var variant = _step57.value;\n                      context.changedContent.push({\n                        content: variant + context.tailwindConfig.separator + util2,\n                        extension: 'html'\n                      });\n                    }\n                  } catch (err) {\n                    _iterator57.e(err);\n                  } finally {\n                    _iterator57.f();\n                  }\n                }\n              } catch (err) {\n                _iterator56.e(err);\n              } finally {\n                _iterator56.f();\n              }\n            }\n          } catch (err) {\n            _iterator55.e(err);\n          } finally {\n            _iterator55.f();\n          }\n        };\n        for (_iterator53.s(); !(_step53 = _iterator53.n()).done;) {\n          _loop12();\n        }\n      } catch (err) {\n        _iterator53.e(err);\n      } finally {\n        _iterator53.f();\n      }\n      var _iterator54 = _createForOfIteratorHelper(patternMatchingCount.entries()),\n        _step54;\n      try {\n        for (_iterator54.s(); !(_step54 = _iterator54.n()).done;) {\n          var _step54$value = _slicedToArray(_step54.value, 2),\n            regex = _step54$value[0],\n            count = _step54$value[1];\n          if (count !== 0) continue;\n          log_default.warn([\"The safelist pattern `\".concat(regex, \"` doesn't match any Tailwind CSS classes.\"), 'Fix this pattern or remove it from your `safelist` configuration.', 'https://tailwindcss.com/docs/content-configuration#safelisting-classes']);\n        }\n      } catch (err) {\n        _iterator54.e(err);\n      } finally {\n        _iterator54.f();\n      }\n    }\n  }\n  var darkClassName = (_concat$ = [].concat((_context$tailwindConf5 = context.tailwindConfig.darkMode) !== null && _context$tailwindConf5 !== void 0 ? _context$tailwindConf5 : 'media')[1]) !== null && _concat$ !== void 0 ? _concat$ : 'dark';\n  var parasiteUtilities = [prefix(context, darkClassName), prefix(context, 'group'), prefix(context, 'peer')];\n  context.getClassOrder = function getClassOrder(classes) {\n    var sorted = _toConsumableArray(classes).sort(function (a, z) {\n      if (a === z) return 0;\n      if (a < z) return -1;\n      return 1;\n    });\n    var sortedClassNames = new Map(sorted.map(function (className) {\n      return [className, null];\n    }));\n    var rules = generateRules(new Set(sorted), context, true);\n    rules = context.offsets.sort(rules);\n    var idx = BigInt(parasiteUtilities.length);\n    var _iterator58 = _createForOfIteratorHelper(rules),\n      _step58;\n    try {\n      for (_iterator58.s(); !(_step58 = _iterator58.n()).done;) {\n        var _sortedClassNames$get2;\n        var _step58$value = _slicedToArray(_step58.value, 2),\n          rule = _step58$value[1];\n        var candidate = rule.raws.tailwind.candidate;\n        sortedClassNames.set(candidate, (_sortedClassNames$get2 = sortedClassNames.get(candidate)) !== null && _sortedClassNames$get2 !== void 0 ? _sortedClassNames$get2 : idx++);\n      }\n    } catch (err) {\n      _iterator58.e(err);\n    } finally {\n      _iterator58.f();\n    }\n    return classes.map(function (className) {\n      var _sortedClassNames$get;\n      var order = (_sortedClassNames$get = sortedClassNames.get(className)) !== null && _sortedClassNames$get !== void 0 ? _sortedClassNames$get : null;\n      var parasiteIndex = parasiteUtilities.indexOf(className);\n      if (order === null && parasiteIndex !== -1) {\n        order = BigInt(parasiteIndex);\n      }\n      return [className, order];\n    });\n  };\n  context.getClassList = function getClassList() {\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    var output = [];\n    var _iterator59 = _createForOfIteratorHelper(classList),\n      _step59;\n    try {\n      for (_iterator59.s(); !(_step59 = _iterator59.n()).done;) {\n        var util = _step59.value;\n        if (Array.isArray(util)) {\n          var _utilOptions$modifier, _utilOptions$types;\n          var _util2 = _slicedToArray(util, 2),\n            utilName = _util2[0],\n            utilOptions = _util2[1];\n          var negativeClasses = [];\n          var modifiers = Object.keys((_utilOptions$modifier = utilOptions === null || utilOptions === void 0 ? void 0 : utilOptions.modifiers) !== null && _utilOptions$modifier !== void 0 ? _utilOptions$modifier : {});\n          if (utilOptions !== null && utilOptions !== void 0 && (_utilOptions$types = utilOptions.types) !== null && _utilOptions$types !== void 0 && _utilOptions$types.some(function (_ref285) {\n            var type = _ref285.type;\n            return type === 'color';\n          })) {\n            var _context$tailwindConf6;\n            modifiers.push.apply(modifiers, _toConsumableArray(Object.keys((_context$tailwindConf6 = context.tailwindConfig.theme.opacity) !== null && _context$tailwindConf6 !== void 0 ? _context$tailwindConf6 : {})));\n          }\n          var metadata = {\n            modifiers: modifiers\n          };\n          var includeMetadata = options.includeMetadata && modifiers.length > 0;\n          for (var _i7 = 0, _Object$entries3 = Object.entries((_utilOptions$values = utilOptions === null || utilOptions === void 0 ? void 0 : utilOptions.values) !== null && _utilOptions$values !== void 0 ? _utilOptions$values : {}); _i7 < _Object$entries3.length; _i7++) {\n            var _utilOptions$values;\n            var _Object$entries3$_i = _slicedToArray(_Object$entries3[_i7], 2),\n              key = _Object$entries3$_i[0],\n              _value4 = _Object$entries3$_i[1];\n            if (_value4 == null) {\n              continue;\n            }\n            var cls = formatClass(utilName, key);\n            output.push(includeMetadata ? [cls, metadata] : cls);\n            if (utilOptions !== null && utilOptions !== void 0 && utilOptions.supportsNegativeValues && negateValue(_value4)) {\n              var cls2 = formatClass(utilName, \"-\".concat(key));\n              negativeClasses.push(includeMetadata ? [cls2, metadata] : cls2);\n            }\n          }\n          output.push.apply(output, negativeClasses);\n        } else {\n          output.push(util);\n        }\n      }\n    } catch (err) {\n      _iterator59.e(err);\n    } finally {\n      _iterator59.f();\n    }\n    return output;\n  };\n  context.getVariants = function getVariants() {\n    var result = [];\n    var _iterator60 = _createForOfIteratorHelper(context.variantOptions.entries()),\n      _step60;\n    try {\n      var _loop13 = function _loop13() {\n        var _options$values9;\n        var _step60$value = _slicedToArray(_step60.value, 2),\n          name = _step60$value[0],\n          options = _step60$value[1];\n        if (options.variantInfo === VARIANT_INFO.Base) return 1; // continue\n        result.push({\n          name: name,\n          isArbitrary: options.type === Symbol[\"for\"]('MATCH_VARIANT'),\n          values: Object.keys((_options$values9 = options.values) !== null && _options$values9 !== void 0 ? _options$values9 : {}),\n          hasDash: name !== '@',\n          selectors: function selectors() {\n            var _context$variantMap$g, _options$values10, _options$INTERNAL_FEA;\n            var _ref286 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n              modifier = _ref286.modifier,\n              value2 = _ref286.value;\n            var candidate = '__TAILWIND_PLACEHOLDER__';\n            var rule = lib_postcss.rule({\n              selector: \".\".concat(candidate)\n            });\n            var container = lib_postcss.root({\n              nodes: [rule.clone()]\n            });\n            var before = container.toString();\n            var fns = ((_context$variantMap$g = context.variantMap.get(name)) !== null && _context$variantMap$g !== void 0 ? _context$variantMap$g : []).flatMap(function (_ref287) {\n              var _ref288 = _slicedToArray(_ref287, 2),\n                _ = _ref288[0],\n                fn = _ref288[1];\n              return fn;\n            });\n            var formatStrings = [];\n            var _iterator61 = _createForOfIteratorHelper(fns),\n              _step61;\n            try {\n              var _loop14 = function _loop14() {\n                var _options$values$value, _options$values11;\n                var fn = _step61.value;\n                var localFormatStrings = [];\n                var api = {\n                  args: {\n                    modifier: modifier,\n                    value: (_options$values$value = (_options$values11 = options.values) === null || _options$values11 === void 0 ? void 0 : _options$values11[value2]) !== null && _options$values$value !== void 0 ? _options$values$value : value2\n                  },\n                  separator: context.tailwindConfig.separator,\n                  modifySelectors: function modifySelectors(modifierFunction) {\n                    container.each(function (rule2) {\n                      if (rule2.type !== 'rule') {\n                        return;\n                      }\n                      rule2.selectors = rule2.selectors.map(function (selector) {\n                        return modifierFunction({\n                          get className() {\n                            return getClassNameFromSelector(selector);\n                          },\n                          selector: selector\n                        });\n                      });\n                    });\n                    return container;\n                  },\n                  format: function format(str) {\n                    localFormatStrings.push(str);\n                  },\n                  wrap: function wrap(wrapper) {\n                    localFormatStrings.push(\"@\".concat(wrapper.name, \" \").concat(wrapper.params, \" { & }\"));\n                  },\n                  container: container\n                };\n                var ruleWithVariant = fn(api);\n                if (localFormatStrings.length > 0) {\n                  formatStrings.push(localFormatStrings);\n                }\n                if (Array.isArray(ruleWithVariant)) {\n                  var _iterator62 = _createForOfIteratorHelper(ruleWithVariant),\n                    _step62;\n                  try {\n                    for (_iterator62.s(); !(_step62 = _iterator62.n()).done;) {\n                      var variantFunction = _step62.value;\n                      localFormatStrings = [];\n                      variantFunction(api);\n                      formatStrings.push(localFormatStrings);\n                    }\n                  } catch (err) {\n                    _iterator62.e(err);\n                  } finally {\n                    _iterator62.f();\n                  }\n                }\n              };\n              for (_iterator61.s(); !(_step61 = _iterator61.n()).done;) {\n                _loop14();\n              }\n            } catch (err) {\n              _iterator61.e(err);\n            } finally {\n              _iterator61.f();\n            }\n            var manualFormatStrings = [];\n            var after = container.toString();\n            if (before !== after) {\n              container.walkRules(function (rule2) {\n                var modified = rule2.selector;\n                var rebuiltBase = dist_default()(function (selectors) {\n                  selectors.walkClasses(function (classNode) {\n                    classNode.value = \"\".concat(name).concat(context.tailwindConfig.separator).concat(classNode.value);\n                  });\n                }).processSync(modified);\n                manualFormatStrings.push(modified.replace(rebuiltBase, '&').replace(candidate, '&'));\n              });\n              container.walkAtRules(function (atrule) {\n                manualFormatStrings.push(\"@\".concat(atrule.name, \" (\").concat(atrule.params, \") { & }\"));\n              });\n            }\n            var isArbitraryVariant = !(value2 in ((_options$values10 = options.values) !== null && _options$values10 !== void 0 ? _options$values10 : {}));\n            var internalFeatures = (_options$INTERNAL_FEA = options[INTERNAL_FEATURES]) !== null && _options$INTERNAL_FEA !== void 0 ? _options$INTERNAL_FEA : {};\n            var respectPrefix = function () {\n              if (isArbitraryVariant) return false;\n              if (internalFeatures.respectPrefix === false) return false;\n              return true;\n            }();\n            formatStrings = formatStrings.map(function (format) {\n              return format.map(function (str) {\n                return {\n                  format: str,\n                  respectPrefix: respectPrefix\n                };\n              });\n            });\n            manualFormatStrings = manualFormatStrings.map(function (format) {\n              return {\n                format: format,\n                respectPrefix: respectPrefix\n              };\n            });\n            var opts = {\n              candidate: candidate,\n              context: context\n            };\n            var result2 = formatStrings.map(function (formats) {\n              return finalizeSelector(\".\".concat(candidate), formatVariantSelector(formats, opts), opts).replace(\".\".concat(candidate), '&').replace('{ & }', '').trim();\n            });\n            if (manualFormatStrings.length > 0) {\n              result2.push(formatVariantSelector(manualFormatStrings, opts).toString().replace(\".\".concat(candidate), '&'));\n            }\n            return result2;\n          }\n        });\n      };\n      for (_iterator60.s(); !(_step60 = _iterator60.n()).done;) {\n        if (_loop13()) continue;\n      }\n    } catch (err) {\n      _iterator60.e(err);\n    } finally {\n      _iterator60.f();\n    }\n    return result;\n  };\n}\nfunction _markInvalidUtilityCandidate(context, candidate) {\n  if (!context.classCache.has(candidate)) {\n    return;\n  }\n  context.notClassCache.add(candidate);\n  context.classCache[\"delete\"](candidate);\n  context.applyClassCache[\"delete\"](candidate);\n  context.candidateRuleMap[\"delete\"](candidate);\n  context.candidateRuleCache[\"delete\"](candidate);\n  context.stylesheetCache = null;\n}\nfunction _markInvalidUtilityNode(context, node) {\n  var candidate = node.raws.tailwind.candidate;\n  if (!candidate) {\n    return;\n  }\n  var _iterator64 = _createForOfIteratorHelper(context.ruleCache),\n    _step64;\n  try {\n    for (_iterator64.s(); !(_step64 = _iterator64.n()).done;) {\n      var entry = _step64.value;\n      if (entry[1].raws.tailwind.candidate === candidate) {\n        context.ruleCache[\"delete\"](entry);\n      }\n    }\n  } catch (err) {\n    _iterator64.e(err);\n  } finally {\n    _iterator64.f();\n  }\n  _markInvalidUtilityCandidate(context, candidate);\n}\nfunction _createContext(tailwindConfig) {\n  var _tailwindConfig$block;\n  var changedContent = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  var root = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : lib_postcss.root();\n  var context = {\n    disposables: [],\n    ruleCache: /* @__PURE__ */new Set(),\n    candidateRuleCache: /* @__PURE__ */new Map(),\n    classCache: /* @__PURE__ */new Map(),\n    applyClassCache: /* @__PURE__ */new Map(),\n    notClassCache: new Set((_tailwindConfig$block = tailwindConfig.blocklist) !== null && _tailwindConfig$block !== void 0 ? _tailwindConfig$block : []),\n    postCssNodeCache: /* @__PURE__ */new Map(),\n    candidateRuleMap: /* @__PURE__ */new Map(),\n    tailwindConfig: tailwindConfig,\n    changedContent: changedContent,\n    variantMap: /* @__PURE__ */new Map(),\n    stylesheetCache: null,\n    variantOptions: /* @__PURE__ */new Map(),\n    markInvalidUtilityCandidate: function markInvalidUtilityCandidate(candidate) {\n      return _markInvalidUtilityCandidate(context, candidate);\n    },\n    markInvalidUtilityNode: function markInvalidUtilityNode(node) {\n      return _markInvalidUtilityNode(context, node);\n    }\n  };\n  var resolvedPlugins = resolvePlugins(context, root);\n  registerPlugins(resolvedPlugins, context);\n  return context;\n}\n\n// node_modules/tailwindcss/src/util/applyImportantSelector.js\n\nfunction applyImportantSelector(selector, important) {\n  var sel = dist_default()().astSync(selector);\n  sel.each(function (sel2) {\n    var isWrapped = sel2.nodes[0].type === 'pseudo' && sel2.nodes[0].value === ':is' && sel2.nodes.every(function (node) {\n      return node.type !== 'combinator';\n    });\n    if (!isWrapped) {\n      sel2.nodes = [dist_default().pseudo({\n        value: ':is',\n        nodes: [sel2.clone()]\n      })];\n    }\n    movePseudos(sel2);\n  });\n  return \"\".concat(important, \" \").concat(sel.toString());\n}\n\n// node_modules/tailwindcss/src/lib/generateRules.js\nvar classNameParser = dist_default()(function (selectors) {\n  return selectors.first.filter(function (_ref289) {\n    var type = _ref289.type;\n    return type === 'class';\n  }).pop().value;\n});\nfunction getClassNameFromSelector(selector) {\n  return classNameParser.transformSync(selector);\n}\nfunction candidatePermutations(candidate) {\n  var lastIndex, dashIdx, wasSlash, bracketIdx, prefix3, modifier;\n  return _regeneratorRuntime().wrap(function candidatePermutations$(_context9) {\n    while (1) switch (_context9.prev = _context9.next) {\n      case 0:\n        lastIndex = Infinity;\n      case 1:\n        if (!(lastIndex >= 0)) {\n          _context9.next = 16;\n          break;\n        }\n        dashIdx = void 0;\n        wasSlash = false;\n        if (lastIndex === Infinity && candidate.endsWith(']')) {\n          bracketIdx = candidate.indexOf('[');\n          if (candidate[bracketIdx - 1] === '-') {\n            dashIdx = bracketIdx - 1;\n          } else if (candidate[bracketIdx - 1] === '/') {\n            dashIdx = bracketIdx - 1;\n            wasSlash = true;\n          } else {\n            dashIdx = -1;\n          }\n        } else if (lastIndex === Infinity && candidate.includes('/')) {\n          dashIdx = candidate.lastIndexOf('/');\n          wasSlash = true;\n        } else {\n          dashIdx = candidate.lastIndexOf('-', lastIndex);\n        }\n        if (!(dashIdx < 0)) {\n          _context9.next = 7;\n          break;\n        }\n        return _context9.abrupt(\"break\", 16);\n      case 7:\n        prefix3 = candidate.slice(0, dashIdx);\n        modifier = candidate.slice(wasSlash ? dashIdx : dashIdx + 1);\n        lastIndex = dashIdx - 1;\n        if (!(prefix3 === '' || modifier === '/')) {\n          _context9.next = 12;\n          break;\n        }\n        return _context9.abrupt(\"continue\", 1);\n      case 12:\n        _context9.next = 14;\n        return [prefix3, modifier];\n      case 14:\n        _context9.next = 1;\n        break;\n      case 16:\n      case \"end\":\n        return _context9.stop();\n    }\n  }, _marked2);\n}\nfunction applyPrefix(matches, context) {\n  if (matches.length === 0 || context.tailwindConfig.prefix === '') {\n    return matches;\n  }\n  var _iterator65 = _createForOfIteratorHelper(matches),\n    _step65;\n  try {\n    var _loop16 = function _loop16() {\n      var match = _step65.value;\n      var _match = _slicedToArray(match, 1),\n        meta = _match[0];\n      if (meta.options.respectPrefix) {\n        var container = lib_postcss.root({\n          nodes: [match[1].clone()]\n        });\n        var classCandidate = match[1].raws.tailwind.classCandidate;\n        container.walkRules(function (r) {\n          var shouldPrependNegative = classCandidate.startsWith('-');\n          r.selector = prefixSelector_default(context.tailwindConfig.prefix, r.selector, shouldPrependNegative);\n        });\n        match[1] = container.nodes[0];\n      }\n    };\n    for (_iterator65.s(); !(_step65 = _iterator65.n()).done;) {\n      _loop16();\n    }\n  } catch (err) {\n    _iterator65.e(err);\n  } finally {\n    _iterator65.f();\n  }\n  return matches;\n}\nfunction applyImportant(matches, classCandidate) {\n  if (matches.length === 0) {\n    return matches;\n  }\n  var result = [];\n  function isInKeyframes(rule) {\n    return rule.parent && rule.parent.type === 'atrule' && rule.parent.name === 'keyframes';\n  }\n  var _iterator66 = _createForOfIteratorHelper(matches),\n    _step66;\n  try {\n    for (_iterator66.s(); !(_step66 = _iterator66.n()).done;) {\n      var _step66$value = _slicedToArray(_step66.value, 2),\n        meta = _step66$value[0],\n        rule = _step66$value[1];\n      var container = lib_postcss.root({\n        nodes: [rule.clone()]\n      });\n      container.walkRules(function (r) {\n        if (isInKeyframes(r)) {\n          return;\n        }\n        var ast = dist_default()().astSync(r.selector);\n        ast.each(function (sel) {\n          return eliminateIrrelevantSelectors(sel, classCandidate);\n        });\n        updateAllClasses(ast, function (className) {\n          return className === classCandidate ? \"!\".concat(className) : className;\n        });\n        r.selector = ast.toString();\n        r.walkDecls(function (d) {\n          return d.important = true;\n        });\n      });\n      result.push([_objectSpread(_objectSpread({}, meta), {}, {\n        important: true\n      }), container.nodes[0]]);\n    }\n  } catch (err) {\n    _iterator66.e(err);\n  } finally {\n    _iterator66.f();\n  }\n  return result;\n}\nfunction applyVariant(variant, matches, context) {\n  if (matches.length === 0) {\n    return matches;\n  }\n  var args = {\n    modifier: null,\n    value: NONE\n  };\n  {\n    var _splitAtTopLevelOnly = splitAtTopLevelOnly(variant, '/'),\n      _splitAtTopLevelOnly2 = _toArray(_splitAtTopLevelOnly),\n      baseVariant = _splitAtTopLevelOnly2[0],\n      modifiers = _splitAtTopLevelOnly2.slice(1);\n    if (modifiers.length > 1) {\n      baseVariant = baseVariant + '/' + modifiers.slice(0, -1).join('/');\n      modifiers = modifiers.slice(-1);\n    }\n    if (modifiers.length && !context.variantMap.has(variant)) {\n      variant = baseVariant;\n      args.modifier = modifiers[0];\n      if (!flagEnabled(context.tailwindConfig, 'generalizedModifiers')) {\n        return [];\n      }\n    }\n  }\n  if (variant.endsWith(']') && !variant.startsWith('[')) {\n    var match = /(.)(-?)\\[(.*)\\]/g.exec(variant);\n    if (match) {\n      var _match2 = _slicedToArray(match, 4),\n        _char6 = _match2[1],\n        separator = _match2[2],\n        value2 = _match2[3];\n      if (_char6 === '@' && separator === '-') return [];\n      if (_char6 !== '@' && separator === '') return [];\n      variant = variant.replace(\"\".concat(separator, \"[\").concat(value2, \"]\"), '');\n      args.value = value2;\n    }\n  }\n  if (isArbitraryValue2(variant) && !context.variantMap.has(variant)) {\n    var sort = context.offsets.recordVariant(variant);\n    var selector = normalize(variant.slice(1, -1));\n    var selectors = splitAtTopLevelOnly(selector, ',');\n    if (selectors.length > 1) {\n      return [];\n    }\n    if (!selectors.every(isValidVariantFormatString)) {\n      return [];\n    }\n    var records = selectors.map(function (sel, idx) {\n      return [context.offsets.applyParallelOffset(sort, idx), parseVariant(sel.trim())];\n    });\n    context.variantMap.set(variant, records);\n  }\n  if (context.variantMap.has(variant)) {\n    var _context$variantOptio, _context$variantOptio2;\n    var isArbitraryVariant = isArbitraryValue2(variant);\n    var internalFeatures = (_context$variantOptio = (_context$variantOptio2 = context.variantOptions.get(variant)) === null || _context$variantOptio2 === void 0 ? void 0 : _context$variantOptio2[INTERNAL_FEATURES]) !== null && _context$variantOptio !== void 0 ? _context$variantOptio : {};\n    var variantFunctionTuples = context.variantMap.get(variant).slice();\n    var result = [];\n    var respectPrefix = function () {\n      if (isArbitraryVariant) return false;\n      if (internalFeatures.respectPrefix === false) return false;\n      return true;\n    }();\n    var _iterator67 = _createForOfIteratorHelper(matches),\n      _step67;\n    try {\n      for (_iterator67.s(); !(_step67 = _iterator67.n()).done;) {\n        var _step67$value = _slicedToArray(_step67.value, 2),\n          meta = _step67$value[0],\n          rule = _step67$value[1];\n        if (meta.layer === 'user') {\n          continue;\n        }\n        var container = lib_postcss.root({\n          nodes: [rule.clone()]\n        });\n        var _iterator68 = _createForOfIteratorHelper(variantFunctionTuples),\n          _step68;\n        try {\n          var _loop17 = function _loop17() {\n              var _meta$collectedFormat;\n              var _step68$value = _slicedToArray(_step68.value, 3),\n                variantSort = _step68$value[0],\n                variantFunction = _step68$value[1],\n                containerFromArray = _step68$value[2];\n              var prepareBackup = function prepareBackup() {\n                  if (clone.raws.neededBackup) {\n                    return;\n                  }\n                  clone.raws.neededBackup = true;\n                  clone.walkRules(function (rule2) {\n                    return rule2.raws.originalSelector = rule2.selector;\n                  });\n                },\n                modifySelectors = function modifySelectors(modifierFunction) {\n                  prepareBackup();\n                  clone.each(function (rule2) {\n                    if (rule2.type !== 'rule') {\n                      return;\n                    }\n                    rule2.selectors = rule2.selectors.map(function (selector) {\n                      return modifierFunction({\n                        get className() {\n                          return getClassNameFromSelector(selector);\n                        },\n                        selector: selector\n                      });\n                    });\n                  });\n                  return clone;\n                };\n              var clone = (containerFromArray !== null && containerFromArray !== void 0 ? containerFromArray : container).clone();\n              var collectedFormats = [];\n              var ruleWithVariant = variantFunction({\n                get container() {\n                  prepareBackup();\n                  return clone;\n                },\n                separator: context.tailwindConfig.separator,\n                modifySelectors: modifySelectors,\n                wrap: function wrap(wrapper) {\n                  var nodes = clone.nodes;\n                  clone.removeAll();\n                  wrapper.append(nodes);\n                  clone.append(wrapper);\n                },\n                format: function format(selectorFormat) {\n                  collectedFormats.push({\n                    format: selectorFormat,\n                    respectPrefix: respectPrefix\n                  });\n                },\n                args: args\n              });\n              if (Array.isArray(ruleWithVariant)) {\n                var _iterator69 = _createForOfIteratorHelper(ruleWithVariant.entries()),\n                  _step69;\n                try {\n                  for (_iterator69.s(); !(_step69 = _iterator69.n()).done;) {\n                    var _step69$value = _slicedToArray(_step69.value, 2),\n                      idx = _step69$value[0],\n                      variantFunction2 = _step69$value[1];\n                    variantFunctionTuples.push([context.offsets.applyParallelOffset(variantSort, idx), variantFunction2, clone.clone()]);\n                  }\n                } catch (err) {\n                  _iterator69.e(err);\n                } finally {\n                  _iterator69.f();\n                }\n                return 0; // continue\n              }\n              if (typeof ruleWithVariant === 'string') {\n                collectedFormats.push({\n                  format: ruleWithVariant,\n                  respectPrefix: respectPrefix\n                });\n              }\n              if (ruleWithVariant === null) {\n                return 0; // continue\n              }\n              if (clone.raws.neededBackup) {\n                delete clone.raws.neededBackup;\n                clone.walkRules(function (rule2) {\n                  var before = rule2.raws.originalSelector;\n                  if (!before) return;\n                  delete rule2.raws.originalSelector;\n                  if (before === rule2.selector) return;\n                  var modified = rule2.selector;\n                  var rebuiltBase = dist_default()(function (selectors) {\n                    selectors.walkClasses(function (classNode) {\n                      classNode.value = \"\".concat(variant).concat(context.tailwindConfig.separator).concat(classNode.value);\n                    });\n                  }).processSync(before);\n                  collectedFormats.push({\n                    format: modified.replace(rebuiltBase, '&'),\n                    respectPrefix: respectPrefix\n                  });\n                  rule2.selector = before;\n                });\n              }\n              clone.nodes[0].raws.tailwind = _objectSpread(_objectSpread({}, clone.nodes[0].raws.tailwind), {}, {\n                parentLayer: meta.layer\n              });\n              var withOffset = [_objectSpread(_objectSpread({}, meta), {}, {\n                sort: context.offsets.applyVariantOffset(meta.sort, variantSort, Object.assign(args, context.variantOptions.get(variant))),\n                collectedFormats: ((_meta$collectedFormat = meta.collectedFormats) !== null && _meta$collectedFormat !== void 0 ? _meta$collectedFormat : []).concat(collectedFormats)\n              }), clone.nodes[0]];\n              result.push(withOffset);\n            },\n            _ret;\n          for (_iterator68.s(); !(_step68 = _iterator68.n()).done;) {\n            _ret = _loop17();\n            if (_ret === 0) continue;\n          }\n        } catch (err) {\n          _iterator68.e(err);\n        } finally {\n          _iterator68.f();\n        }\n      }\n    } catch (err) {\n      _iterator67.e(err);\n    } finally {\n      _iterator67.f();\n    }\n    return result;\n  }\n  return [];\n}\nfunction parseRules(rule, cache2) {\n  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  if (!isPlainObject(rule) && !Array.isArray(rule)) {\n    return [[rule], options];\n  }\n  if (Array.isArray(rule)) {\n    return parseRules(rule[0], cache2, rule[1]);\n  }\n  if (!cache2.has(rule)) {\n    cache2.set(rule, parseObjectStyles(rule));\n  }\n  return [cache2.get(rule), options];\n}\nvar IS_VALID_PROPERTY_NAME = /^[a-z_-]/;\nfunction isValidPropName(name) {\n  return IS_VALID_PROPERTY_NAME.test(name);\n}\nfunction looksLikeUri(declaration) {\n  if (!declaration.includes('://')) {\n    return false;\n  }\n  try {\n    var url2 = new URL(declaration);\n    return url2.scheme !== '' && url2.host !== '';\n  } catch (err) {\n    return false;\n  }\n}\nfunction isParsableNode(node) {\n  var isParsable = true;\n  node.walkDecls(function (decl) {\n    if (!isParsableCssValue(decl.prop, decl.value)) {\n      isParsable = false;\n      return false;\n    }\n  });\n  return isParsable;\n}\nfunction isParsableCssValue(property, value2) {\n  if (looksLikeUri(\"\".concat(property, \":\").concat(value2))) {\n    return false;\n  }\n  try {\n    lib_postcss.parse(\"a{\".concat(property, \":\").concat(value2, \"}\")).toResult();\n    return true;\n  } catch (err) {\n    return false;\n  }\n}\nfunction extractArbitraryProperty(classCandidate, context) {\n  var _classCandidate$match;\n  var _ref290 = (_classCandidate$match = classCandidate.match(/^\\[([a-zA-Z0-9-_]+):(\\S+)\\]$/)) !== null && _classCandidate$match !== void 0 ? _classCandidate$match : [],\n    _ref291 = _slicedToArray(_ref290, 3),\n    property = _ref291[1],\n    value2 = _ref291[2];\n  if (value2 === void 0) {\n    return null;\n  }\n  if (!isValidPropName(property)) {\n    return null;\n  }\n  if (!isSyntacticallyValidPropertyValue(value2)) {\n    return null;\n  }\n  var normalized = normalize(value2, {\n    property: property\n  });\n  if (!isParsableCssValue(property, normalized)) {\n    return null;\n  }\n  var sort = context.offsets.arbitraryProperty();\n  return [[{\n    sort: sort,\n    layer: 'utilities'\n  }, function () {\n    return _defineProperty({}, asClass(classCandidate), _defineProperty({}, property, normalized));\n  }]];\n}\nfunction resolveMatchedPlugins(classCandidate, context) {\n  var candidatePrefix, negative, twConfigPrefix, twConfigPrefixLen, hasMatchingPrefix, _iterator70, _step70, _step70$value, prefix3, modifier;\n  return _regeneratorRuntime().wrap(function resolveMatchedPlugins$(_context11) {\n    while (1) switch (_context11.prev = _context11.next) {\n      case 0:\n        if (!context.candidateRuleMap.has(classCandidate)) {\n          _context11.next = 3;\n          break;\n        }\n        _context11.next = 3;\n        return [context.candidateRuleMap.get(classCandidate), 'DEFAULT'];\n      case 3:\n        return _context11.delegateYield(/*#__PURE__*/_regeneratorRuntime().mark(function _callee(arbitraryPropertyRule) {\n          return _regeneratorRuntime().wrap(function _callee$(_context10) {\n            while (1) switch (_context10.prev = _context10.next) {\n              case 0:\n                if (!(arbitraryPropertyRule !== null)) {\n                  _context10.next = 3;\n                  break;\n                }\n                _context10.next = 3;\n                return [arbitraryPropertyRule, 'DEFAULT'];\n              case 3:\n              case \"end\":\n                return _context10.stop();\n            }\n          }, _callee);\n        })(extractArbitraryProperty(classCandidate, context)), \"t0\", 4);\n      case 4:\n        candidatePrefix = classCandidate;\n        negative = false;\n        twConfigPrefix = context.tailwindConfig.prefix;\n        twConfigPrefixLen = twConfigPrefix.length;\n        hasMatchingPrefix = candidatePrefix.startsWith(twConfigPrefix) || candidatePrefix.startsWith(\"-\".concat(twConfigPrefix));\n        if (candidatePrefix[twConfigPrefixLen] === '-' && hasMatchingPrefix) {\n          negative = true;\n          candidatePrefix = twConfigPrefix + candidatePrefix.slice(twConfigPrefixLen + 1);\n        }\n        if (!(negative && context.candidateRuleMap.has(candidatePrefix))) {\n          _context11.next = 13;\n          break;\n        }\n        _context11.next = 13;\n        return [context.candidateRuleMap.get(candidatePrefix), '-DEFAULT'];\n      case 13:\n        _iterator70 = _createForOfIteratorHelper(candidatePermutations(candidatePrefix));\n        _context11.prev = 14;\n        _iterator70.s();\n      case 16:\n        if ((_step70 = _iterator70.n()).done) {\n          _context11.next = 23;\n          break;\n        }\n        _step70$value = _slicedToArray(_step70.value, 2), prefix3 = _step70$value[0], modifier = _step70$value[1];\n        if (!context.candidateRuleMap.has(prefix3)) {\n          _context11.next = 21;\n          break;\n        }\n        _context11.next = 21;\n        return [context.candidateRuleMap.get(prefix3), negative ? \"-\".concat(modifier) : modifier];\n      case 21:\n        _context11.next = 16;\n        break;\n      case 23:\n        _context11.next = 28;\n        break;\n      case 25:\n        _context11.prev = 25;\n        _context11.t1 = _context11[\"catch\"](14);\n        _iterator70.e(_context11.t1);\n      case 28:\n        _context11.prev = 28;\n        _iterator70.f();\n        return _context11.finish(28);\n      case 31:\n      case \"end\":\n        return _context11.stop();\n    }\n  }, _marked3, null, [[14, 25, 28, 31]]);\n}\nfunction splitWithSeparator(input, separator) {\n  if (input === NOT_ON_DEMAND) {\n    return [NOT_ON_DEMAND];\n  }\n  return splitAtTopLevelOnly(input, separator);\n}\nfunction recordCandidates(matches, classCandidate) {\n  var _iterator71, _step71, _match$0$options$pres, _match$0$options, match;\n  return _regeneratorRuntime().wrap(function recordCandidates$(_context12) {\n    while (1) switch (_context12.prev = _context12.next) {\n      case 0:\n        _iterator71 = _createForOfIteratorHelper(matches);\n        _context12.prev = 1;\n        _iterator71.s();\n      case 3:\n        if ((_step71 = _iterator71.n()).done) {\n          _context12.next = 10;\n          break;\n        }\n        match = _step71.value;\n        match[1].raws.tailwind = _objectSpread(_objectSpread({}, match[1].raws.tailwind), {}, {\n          classCandidate: classCandidate,\n          preserveSource: (_match$0$options$pres = (_match$0$options = match[0].options) === null || _match$0$options === void 0 ? void 0 : _match$0$options.preserveSource) !== null && _match$0$options$pres !== void 0 ? _match$0$options$pres : false\n        });\n        _context12.next = 8;\n        return match;\n      case 8:\n        _context12.next = 3;\n        break;\n      case 10:\n        _context12.next = 15;\n        break;\n      case 12:\n        _context12.prev = 12;\n        _context12.t0 = _context12[\"catch\"](1);\n        _iterator71.e(_context12.t0);\n      case 15:\n        _context12.prev = 15;\n        _iterator71.f();\n        return _context12.finish(15);\n      case 18:\n      case \"end\":\n        return _context12.stop();\n    }\n  }, _marked4, null, [[1, 12, 15, 18]]);\n}\nfunction resolveMatches(candidate, context) {\n  var separator, _splitWithSeparator$r, _splitWithSeparator$r2, classCandidate, variants, important, _iterator72, _step72, _loop18;\n  return _regeneratorRuntime().wrap(function resolveMatches$(_context14) {\n    while (1) switch (_context14.prev = _context14.next) {\n      case 0:\n        separator = context.tailwindConfig.separator;\n        _splitWithSeparator$r = splitWithSeparator(candidate, separator).reverse(), _splitWithSeparator$r2 = _toArray(_splitWithSeparator$r), classCandidate = _splitWithSeparator$r2[0], variants = _splitWithSeparator$r2.slice(1);\n        important = false;\n        if (classCandidate.startsWith('!')) {\n          important = true;\n          classCandidate = classCandidate.slice(1);\n        }\n        _iterator72 = _createForOfIteratorHelper(resolveMatchedPlugins(classCandidate, context));\n        _context14.prev = 5;\n        _loop18 = /*#__PURE__*/_regeneratorRuntime().mark(function _loop18() {\n          var matchedPlugins, matches, typesByMatches, _matchedPlugins, plugins, modifier, isOnlyPlugin, _iterator73, _step73, _step73$value, sort, plugin, matchesPerPlugin, _iterator81, _step81, ruleSet, _parseRules, _parseRules2, _rules, options, _iterator82, _step82, rule, _ruleSet, _parseRules3, _parseRules4, _rules2, _options, _iterator83, _step83, _rule, _sort$options$types, _sort$options, _sort$options2, matchingTypes, _findFallback, findFallback, _matches$reduce, _matches$reduce2, withAny, withoutAny, fallback, typesPerPlugin, _iterator74, _step74, pluginTypes, _iterator76, _step76, type, removeFromOwnGroup, _iterator77, _step77, otherGroup, messages, _iterator75, _step75, _step75$value, idx, group, _iterator78, _step78, _type, rules, _iterator79, _step79, variant, _iterator80, _step80, match;\n          return _regeneratorRuntime().wrap(function _loop18$(_context13) {\n            while (1) switch (_context13.prev = _context13.next) {\n              case 0:\n                matchedPlugins = _step72.value;\n                matches = [];\n                typesByMatches = /* @__PURE__ */new Map();\n                _matchedPlugins = _slicedToArray(matchedPlugins, 2), plugins = _matchedPlugins[0], modifier = _matchedPlugins[1];\n                isOnlyPlugin = plugins.length === 1;\n                _iterator73 = _createForOfIteratorHelper(plugins);\n                try {\n                  for (_iterator73.s(); !(_step73 = _iterator73.n()).done;) {\n                    _step73$value = _slicedToArray(_step73.value, 2), sort = _step73$value[0], plugin = _step73$value[1];\n                    matchesPerPlugin = [];\n                    if (typeof plugin === 'function') {\n                      _iterator81 = _createForOfIteratorHelper([].concat(plugin(modifier, {\n                        isOnlyPlugin: isOnlyPlugin\n                      })));\n                      try {\n                        for (_iterator81.s(); !(_step81 = _iterator81.n()).done;) {\n                          ruleSet = _step81.value;\n                          _parseRules = parseRules(ruleSet, context.postCssNodeCache), _parseRules2 = _slicedToArray(_parseRules, 2), _rules = _parseRules2[0], options = _parseRules2[1];\n                          _iterator82 = _createForOfIteratorHelper(_rules);\n                          try {\n                            for (_iterator82.s(); !(_step82 = _iterator82.n()).done;) {\n                              rule = _step82.value;\n                              matchesPerPlugin.push([_objectSpread(_objectSpread({}, sort), {}, {\n                                options: _objectSpread(_objectSpread({}, sort.options), options)\n                              }), rule]);\n                            }\n                          } catch (err) {\n                            _iterator82.e(err);\n                          } finally {\n                            _iterator82.f();\n                          }\n                        }\n                      } catch (err) {\n                        _iterator81.e(err);\n                      } finally {\n                        _iterator81.f();\n                      }\n                    } else if (modifier === 'DEFAULT' || modifier === '-DEFAULT') {\n                      _ruleSet = plugin;\n                      _parseRules3 = parseRules(_ruleSet, context.postCssNodeCache), _parseRules4 = _slicedToArray(_parseRules3, 2), _rules2 = _parseRules4[0], _options = _parseRules4[1];\n                      _iterator83 = _createForOfIteratorHelper(_rules2);\n                      try {\n                        for (_iterator83.s(); !(_step83 = _iterator83.n()).done;) {\n                          _rule = _step83.value;\n                          matchesPerPlugin.push([_objectSpread(_objectSpread({}, sort), {}, {\n                            options: _objectSpread(_objectSpread({}, sort.options), _options)\n                          }), _rule]);\n                        }\n                      } catch (err) {\n                        _iterator83.e(err);\n                      } finally {\n                        _iterator83.f();\n                      }\n                    }\n                    if (matchesPerPlugin.length > 0) {\n                      matchingTypes = Array.from(getMatchingTypes((_sort$options$types = (_sort$options = sort.options) === null || _sort$options === void 0 ? void 0 : _sort$options.types) !== null && _sort$options$types !== void 0 ? _sort$options$types : [], modifier, (_sort$options2 = sort.options) !== null && _sort$options2 !== void 0 ? _sort$options2 : {}, context.tailwindConfig)).map(function (_ref301) {\n                        var _ref302 = _slicedToArray(_ref301, 2),\n                          _ = _ref302[0],\n                          type = _ref302[1];\n                        return type;\n                      });\n                      if (matchingTypes.length > 0) {\n                        typesByMatches.set(matchesPerPlugin, matchingTypes);\n                      }\n                      matches.push(matchesPerPlugin);\n                    }\n                  }\n                } catch (err) {\n                  _iterator73.e(err);\n                } finally {\n                  _iterator73.f();\n                }\n                if (!isArbitraryValue2(modifier)) {\n                  _context13.next = 104;\n                  break;\n                }\n                if (!(matches.length > 1)) {\n                  _context13.next = 103;\n                  break;\n                }\n                findFallback = function findFallback(matches2) {\n                  if (matches2.length === 1) {\n                    return matches2[0];\n                  }\n                  return matches2.find(function (rules) {\n                    var matchingTypes = typesByMatches.get(rules);\n                    return rules.some(function (_ref293) {\n                      var _ref294 = _slicedToArray(_ref293, 2),\n                        options = _ref294[0].options,\n                        rule = _ref294[1];\n                      if (!isParsableNode(rule)) {\n                        return false;\n                      }\n                      return options.types.some(function (_ref295) {\n                        var type = _ref295.type,\n                          preferOnConflict = _ref295.preferOnConflict;\n                        return matchingTypes.includes(type) && preferOnConflict;\n                      });\n                    });\n                  });\n                };\n                _matches$reduce = matches.reduce(function (group, plugin) {\n                  var hasAnyType = plugin.some(function (_ref296) {\n                    var _ref297 = _slicedToArray(_ref296, 1),\n                      options = _ref297[0].options;\n                    return options.types.some(function (_ref298) {\n                      var type = _ref298.type;\n                      return type === 'any';\n                    });\n                  });\n                  if (hasAnyType) {\n                    group[0].push(plugin);\n                  } else {\n                    group[1].push(plugin);\n                  }\n                  return group;\n                }, [[], []]), _matches$reduce2 = _slicedToArray(_matches$reduce, 2), withAny = _matches$reduce2[0], withoutAny = _matches$reduce2[1];\n                fallback = (_findFallback = findFallback(withoutAny)) !== null && _findFallback !== void 0 ? _findFallback : findFallback(withAny);\n                if (!fallback) {\n                  _context13.next = 16;\n                  break;\n                }\n                matches = [fallback];\n                _context13.next = 103;\n                break;\n              case 16:\n                typesPerPlugin = matches.map(function (match) {\n                  var _typesByMatches$get;\n                  return /* @__PURE__ */new Set(_toConsumableArray((_typesByMatches$get = typesByMatches.get(match)) !== null && _typesByMatches$get !== void 0 ? _typesByMatches$get : []));\n                });\n                _iterator74 = _createForOfIteratorHelper(typesPerPlugin);\n                _context13.prev = 18;\n                _iterator74.s();\n              case 20:\n                if ((_step74 = _iterator74.n()).done) {\n                  _context13.next = 59;\n                  break;\n                }\n                pluginTypes = _step74.value;\n                _iterator76 = _createForOfIteratorHelper(pluginTypes);\n                _context13.prev = 23;\n                _iterator76.s();\n              case 25:\n                if ((_step76 = _iterator76.n()).done) {\n                  _context13.next = 49;\n                  break;\n                }\n                type = _step76.value;\n                removeFromOwnGroup = false;\n                _iterator77 = _createForOfIteratorHelper(typesPerPlugin);\n                _context13.prev = 29;\n                _iterator77.s();\n              case 31:\n                if ((_step77 = _iterator77.n()).done) {\n                  _context13.next = 38;\n                  break;\n                }\n                otherGroup = _step77.value;\n                if (!(pluginTypes === otherGroup)) {\n                  _context13.next = 35;\n                  break;\n                }\n                return _context13.abrupt(\"continue\", 36);\n              case 35:\n                if (otherGroup.has(type)) {\n                  otherGroup[\"delete\"](type);\n                  removeFromOwnGroup = true;\n                }\n              case 36:\n                _context13.next = 31;\n                break;\n              case 38:\n                _context13.next = 43;\n                break;\n              case 40:\n                _context13.prev = 40;\n                _context13.t0 = _context13[\"catch\"](29);\n                _iterator77.e(_context13.t0);\n              case 43:\n                _context13.prev = 43;\n                _iterator77.f();\n                return _context13.finish(43);\n              case 46:\n                if (removeFromOwnGroup) pluginTypes[\"delete\"](type);\n              case 47:\n                _context13.next = 25;\n                break;\n              case 49:\n                _context13.next = 54;\n                break;\n              case 51:\n                _context13.prev = 51;\n                _context13.t1 = _context13[\"catch\"](23);\n                _iterator76.e(_context13.t1);\n              case 54:\n                _context13.prev = 54;\n                _iterator76.f();\n                return _context13.finish(54);\n              case 57:\n                _context13.next = 20;\n                break;\n              case 59:\n                _context13.next = 64;\n                break;\n              case 61:\n                _context13.prev = 61;\n                _context13.t2 = _context13[\"catch\"](18);\n                _iterator74.e(_context13.t2);\n              case 64:\n                _context13.prev = 64;\n                _iterator74.f();\n                return _context13.finish(64);\n              case 67:\n                messages = [];\n                _iterator75 = _createForOfIteratorHelper(typesPerPlugin.entries());\n                _context13.prev = 69;\n                _iterator75.s();\n              case 71:\n                if ((_step75 = _iterator75.n()).done) {\n                  _context13.next = 93;\n                  break;\n                }\n                _step75$value = _slicedToArray(_step75.value, 2), idx = _step75$value[0], group = _step75$value[1];\n                _iterator78 = _createForOfIteratorHelper(group);\n                _context13.prev = 74;\n                _iterator78.s();\n              case 76:\n                if ((_step78 = _iterator78.n()).done) {\n                  _context13.next = 83;\n                  break;\n                }\n                _type = _step78.value;\n                rules = matches[idx].map(function (_ref299) {\n                  var _ref300 = _slicedToArray(_ref299, 2),\n                    rule = _ref300[1];\n                  return rule;\n                }).flat().map(function (rule) {\n                  return rule.toString().split('\\n').slice(1, -1).map(function (line) {\n                    return line.trim();\n                  }).map(function (x) {\n                    return \"      \".concat(x);\n                  }).join('\\n');\n                }).join('\\n\\n');\n                messages.push(\"  Use `\".concat(candidate.replace('[', \"[\".concat(_type, \":\")), \"` for `\").concat(rules.trim(), \"`\"));\n                return _context13.abrupt(\"break\", 83);\n              case 81:\n                _context13.next = 76;\n                break;\n              case 83:\n                _context13.next = 88;\n                break;\n              case 85:\n                _context13.prev = 85;\n                _context13.t3 = _context13[\"catch\"](74);\n                _iterator78.e(_context13.t3);\n              case 88:\n                _context13.prev = 88;\n                _iterator78.f();\n                return _context13.finish(88);\n              case 91:\n                _context13.next = 71;\n                break;\n              case 93:\n                _context13.next = 98;\n                break;\n              case 95:\n                _context13.prev = 95;\n                _context13.t4 = _context13[\"catch\"](69);\n                _iterator75.e(_context13.t4);\n              case 98:\n                _context13.prev = 98;\n                _iterator75.f();\n                return _context13.finish(98);\n              case 101:\n                log_default.warn([\"The class `\".concat(candidate, \"` is ambiguous and matches multiple utilities.\")].concat(messages, [\"If this is content and not a class, replace it with `\".concat(candidate.replace('[', '&lsqb;').replace(']', '&rsqb;'), \"` to silence this warning.\")]));\n                return _context13.abrupt(\"return\", 1);\n              case 103:\n                matches = matches.map(function (list2) {\n                  return list2.filter(function (match) {\n                    return isParsableNode(match[1]);\n                  });\n                });\n              case 104:\n                matches = matches.flat();\n                matches = Array.from(recordCandidates(matches, classCandidate));\n                matches = applyPrefix(matches, context);\n                if (important) {\n                  matches = applyImportant(matches, classCandidate);\n                }\n                _iterator79 = _createForOfIteratorHelper(variants);\n                try {\n                  for (_iterator79.s(); !(_step79 = _iterator79.n()).done;) {\n                    variant = _step79.value;\n                    matches = applyVariant(variant, matches, context);\n                  }\n                } catch (err) {\n                  _iterator79.e(err);\n                } finally {\n                  _iterator79.f();\n                }\n                _iterator80 = _createForOfIteratorHelper(matches);\n                _context13.prev = 111;\n                _iterator80.s();\n              case 113:\n                if ((_step80 = _iterator80.n()).done) {\n                  _context13.next = 123;\n                  break;\n                }\n                match = _step80.value;\n                match[1].raws.tailwind = _objectSpread(_objectSpread({}, match[1].raws.tailwind), {}, {\n                  candidate: candidate\n                });\n                match = applyFinalFormat(match, {\n                  context: context,\n                  candidate: candidate\n                });\n                if (!(match === null)) {\n                  _context13.next = 119;\n                  break;\n                }\n                return _context13.abrupt(\"continue\", 121);\n              case 119:\n                _context13.next = 121;\n                return match;\n              case 121:\n                _context13.next = 113;\n                break;\n              case 123:\n                _context13.next = 128;\n                break;\n              case 125:\n                _context13.prev = 125;\n                _context13.t5 = _context13[\"catch\"](111);\n                _iterator80.e(_context13.t5);\n              case 128:\n                _context13.prev = 128;\n                _iterator80.f();\n                return _context13.finish(128);\n              case 131:\n              case \"end\":\n                return _context13.stop();\n            }\n          }, _loop18, null, [[18, 61, 64, 67], [23, 51, 54, 57], [29, 40, 43, 46], [69, 95, 98, 101], [74, 85, 88, 91], [111, 125, 128, 131]]);\n        });\n        _iterator72.s();\n      case 8:\n        if ((_step72 = _iterator72.n()).done) {\n          _context14.next = 14;\n          break;\n        }\n        return _context14.delegateYield(_loop18(), \"t0\", 10);\n      case 10:\n        if (!_context14.t0) {\n          _context14.next = 12;\n          break;\n        }\n        return _context14.abrupt(\"continue\", 12);\n      case 12:\n        _context14.next = 8;\n        break;\n      case 14:\n        _context14.next = 19;\n        break;\n      case 16:\n        _context14.prev = 16;\n        _context14.t1 = _context14[\"catch\"](5);\n        _iterator72.e(_context14.t1);\n      case 19:\n        _context14.prev = 19;\n        _iterator72.f();\n        return _context14.finish(19);\n      case 22:\n      case \"end\":\n        return _context14.stop();\n    }\n  }, _marked5, null, [[5, 16, 19, 22]]);\n}\nfunction applyFinalFormat(match, _ref303) {\n  var context = _ref303.context,\n    candidate = _ref303.candidate;\n  if (!match[0].collectedFormats) {\n    return match;\n  }\n  var isValid = true;\n  var finalFormat;\n  try {\n    finalFormat = formatVariantSelector(match[0].collectedFormats, {\n      context: context,\n      candidate: candidate\n    });\n  } catch (_unused) {\n    return null;\n  }\n  var container = lib_postcss.root({\n    nodes: [match[1].clone()]\n  });\n  container.walkRules(function (rule) {\n    if (inKeyframes(rule)) {\n      return;\n    }\n    try {\n      var selector = finalizeSelector(rule.selector, finalFormat, {\n        candidate: candidate,\n        context: context\n      });\n      if (selector === null) {\n        rule.remove();\n        return;\n      }\n      rule.selector = selector;\n    } catch (_unused2) {\n      isValid = false;\n      return false;\n    }\n  });\n  if (!isValid) {\n    return null;\n  }\n  if (container.nodes.length === 0) {\n    return null;\n  }\n  match[1] = container.nodes[0];\n  return match;\n}\nfunction inKeyframes(rule) {\n  return rule.parent && rule.parent.type === 'atrule' && rule.parent.name === 'keyframes';\n}\nfunction getImportantStrategy(important) {\n  if (important === true) {\n    return function (rule) {\n      if (inKeyframes(rule)) {\n        return;\n      }\n      rule.walkDecls(function (d) {\n        if (d.parent.type === 'rule' && !inKeyframes(d.parent)) {\n          d.important = true;\n        }\n      });\n    };\n  }\n  if (typeof important === 'string') {\n    return function (rule) {\n      if (inKeyframes(rule)) {\n        return;\n      }\n      rule.selectors = rule.selectors.map(function (selector) {\n        return applyImportantSelector(selector, important);\n      });\n    };\n  }\n}\nfunction generateRules(candidates, context) {\n  var isSorting = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  var allRules = [];\n  var strategy = getImportantStrategy(context.tailwindConfig.important);\n  var _iterator84 = _createForOfIteratorHelper(candidates),\n    _step84;\n  try {\n    for (_iterator84.s(); !(_step84 = _iterator84.n()).done;) {\n      var _context$candidateRul;\n      var candidate = _step84.value;\n      if (context.notClassCache.has(candidate)) {\n        continue;\n      }\n      if (context.candidateRuleCache.has(candidate)) {\n        allRules = allRules.concat(Array.from(context.candidateRuleCache.get(candidate)));\n        continue;\n      }\n      var matches = Array.from(resolveMatches(candidate, context));\n      if (matches.length === 0) {\n        context.notClassCache.add(candidate);\n        continue;\n      }\n      context.classCache.set(candidate, matches);\n      var rules = (_context$candidateRul = context.candidateRuleCache.get(candidate)) !== null && _context$candidateRul !== void 0 ? _context$candidateRul : /* @__PURE__ */new Set();\n      context.candidateRuleCache.set(candidate, rules);\n      for (var _i8 = 0, _matches = matches; _i8 < _matches.length; _i8++) {\n        var match = _matches[_i8];\n        var _match3 = _slicedToArray(match, 2),\n          _match3$ = _match3[0],\n          sort = _match3$.sort,\n          options = _match3$.options,\n          rule = _match3[1];\n        if (options.respectImportant && strategy) {\n          var container = lib_postcss.root({\n            nodes: [rule.clone()]\n          });\n          container.walkRules(strategy);\n          rule = container.nodes[0];\n        }\n        var newEntry = [sort, isSorting ? rule.clone() : rule];\n        rules.add(newEntry);\n        context.ruleCache.add(newEntry);\n        allRules.push(newEntry);\n      }\n    }\n  } catch (err) {\n    _iterator84.e(err);\n  } finally {\n    _iterator84.f();\n  }\n  return allRules;\n}\nfunction isArbitraryValue2(input) {\n  return input.startsWith('[') && input.endsWith(']');\n}\n\n// node_modules/tailwindcss/src/util/cloneNodes.js\nfunction cloneNodes(nodes) {\n  var source = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : void 0;\n  var raws = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : void 0;\n  return nodes.map(function (node) {\n    var cloned = node.clone();\n    if (raws !== void 0) {\n      cloned.raws.tailwind = _objectSpread(_objectSpread({}, cloned.raws.tailwind), raws);\n    }\n    if (source !== void 0) {\n      traverse(cloned, function (node2) {\n        var _node2$raws$tailwind;\n        var shouldPreserveSource = ((_node2$raws$tailwind = node2.raws.tailwind) === null || _node2$raws$tailwind === void 0 ? void 0 : _node2$raws$tailwind.preserveSource) === true && node2.source;\n        if (shouldPreserveSource) {\n          return false;\n        }\n        node2.source = source;\n      });\n    }\n    return cloned;\n  });\n}\nfunction traverse(node, onNode) {\n  if (onNode(node) !== false) {\n    var _node$each;\n    (_node$each = node.each) === null || _node$each === void 0 || _node$each.call(node, function (child) {\n      return traverse(child, onNode);\n    });\n  }\n}\n\n// node_modules/tailwindcss/src/lib/regex.js\nvar REGEX_SPECIAL = /[\\\\^$.*+?()[\\]{}|]/g;\nvar REGEX_HAS_SPECIAL = RegExp(REGEX_SPECIAL.source);\nfunction toSource(source) {\n  source = Array.isArray(source) ? source : [source];\n  source = source.map(function (item) {\n    return item instanceof RegExp ? item.source : item;\n  });\n  return source.join('');\n}\nfunction pattern(source) {\n  return new RegExp(toSource(source), 'g');\n}\nfunction any(sources) {\n  return \"(?:\".concat(sources.map(toSource).join('|'), \")\");\n}\nfunction optional(source) {\n  return \"(?:\".concat(toSource(source), \")?\");\n}\nfunction module_esm_escape(string) {\n  return string && REGEX_HAS_SPECIAL.test(string) ? string.replace(REGEX_SPECIAL, '\\\\$&') : string || '';\n}\n\n// node_modules/tailwindcss/src/lib/defaultExtractor.js\nfunction defaultExtractor(context) {\n  var patterns = Array.from(buildRegExps(context));\n  return function (content) {\n    var results = [];\n    for (var _i9 = 0, _patterns = patterns; _i9 < _patterns.length; _i9++) {\n      var _content$match;\n      var pattern2 = _patterns[_i9];\n      var _iterator85 = _createForOfIteratorHelper((_content$match = content.match(pattern2)) !== null && _content$match !== void 0 ? _content$match : []),\n        _step85;\n      try {\n        for (_iterator85.s(); !(_step85 = _iterator85.n()).done;) {\n          var result = _step85.value;\n          results.push(clipAtBalancedParens(result));\n        }\n      } catch (err) {\n        _iterator85.e(err);\n      } finally {\n        _iterator85.f();\n      }\n    }\n    return results;\n  };\n}\nfunction buildRegExps(context) {\n  var separator, prefix3, utility, variantPatterns, _i10, _variantPatterns, variantPattern;\n  return _regeneratorRuntime().wrap(function buildRegExps$(_context15) {\n    while (1) switch (_context15.prev = _context15.next) {\n      case 0:\n        separator = context.tailwindConfig.separator;\n        prefix3 = context.tailwindConfig.prefix !== '' ? optional(pattern([/-?/, module_esm_escape(context.tailwindConfig.prefix)])) : '';\n        utility = any([/\\[[^\\s:'\"`]+:[^\\s\\[\\]]+\\]/, /\\[[^\\s:'\"`\\]]+:[^\\s]+?\\[[^\\s]+\\][^\\s]+?\\]/, pattern([any([/-?(?:\\w+)/, /@(?:\\w+)/]), optional(any([pattern([any([/-(?:\\w+-)*\\['[^\\s]+'\\]/, /-(?:\\w+-)*\\[\"[^\\s]+\"\\]/, /-(?:\\w+-)*\\[`[^\\s]+`\\]/, /-(?:\\w+-)*\\[(?:[^\\s\\[\\]]+\\[[^\\s\\[\\]]+\\])*[^\\s:\\[\\]]+\\]/]), /(?![{([]])/, /(?:\\/[^\\s'\"`\\\\><$]*)?/]), pattern([any([/-(?:\\w+-)*\\['[^\\s]+'\\]/, /-(?:\\w+-)*\\[\"[^\\s]+\"\\]/, /-(?:\\w+-)*\\[`[^\\s]+`\\]/, /-(?:\\w+-)*\\[(?:[^\\s\\[\\]]+\\[[^\\s\\[\\]]+\\])*[^\\s\\[\\]]+\\]/]), /(?![{([]])/, /(?:\\/[^\\s'\"`\\\\$]*)?/]), /[-\\/][^\\s'\"`\\\\$={><]*/]))])]);\n        variantPatterns = [any([pattern([/@\\[[^\\s\"'`]+\\](\\/[^\\s\"'`]+)?/, separator]), pattern([/([^\\s\"'`\\[\\\\]+-)?\\[[^\\s\"'`]+\\]\\/\\w+/, separator]), pattern([/([^\\s\"'`\\[\\\\]+-)?\\[[^\\s\"'`]+\\]/, separator]), pattern([/[^\\s\"'`\\[\\\\]+/, separator])]), any([pattern([/([^\\s\"'`\\[\\\\]+-)?\\[[^\\s`]+\\]\\/\\w+/, separator]), pattern([/([^\\s\"'`\\[\\\\]+-)?\\[[^\\s`]+\\]/, separator]), pattern([/[^\\s`\\[\\\\]+/, separator])])];\n        _i10 = 0, _variantPatterns = variantPatterns;\n      case 5:\n        if (!(_i10 < _variantPatterns.length)) {\n          _context15.next = 12;\n          break;\n        }\n        variantPattern = _variantPatterns[_i10];\n        _context15.next = 9;\n        return pattern(['((?=((', variantPattern, ')+))\\\\2)?', /!?/, prefix3, utility]);\n      case 9:\n        _i10++;\n        _context15.next = 5;\n        break;\n      case 12:\n        _context15.next = 14;\n        return /[^<>\"'`\\s.(){}[\\]#=%$]*[^<>\"'`\\s.(){}[\\]#=%:$]/g;\n      case 14:\n      case \"end\":\n        return _context15.stop();\n    }\n  }, _marked6);\n}\nvar SPECIALS = /([\\[\\]'\"`])([^\\[\\]'\"`])?/g;\nvar ALLOWED_CLASS_CHARACTERS = /[^\"'`\\s<>\\]]+/;\nfunction clipAtBalancedParens(input) {\n  if (!input.includes('-[')) {\n    return input;\n  }\n  var depth = 0;\n  var openStringTypes = [];\n  var matches = input.matchAll(SPECIALS);\n  matches = Array.from(matches).flatMap(function (match) {\n    var _match4 = _toArray(match),\n      groups = _match4.slice(1);\n    return groups.map(function (group, idx) {\n      return Object.assign([], match, {\n        index: match.index + idx,\n        0: group\n      });\n    });\n  });\n  var _iterator86 = _createForOfIteratorHelper(matches),\n    _step86;\n  try {\n    for (_iterator86.s(); !(_step86 = _iterator86.n()).done;) {\n      var match = _step86.value;\n      var _char7 = match[0];\n      var inStringType = openStringTypes[openStringTypes.length - 1];\n      if (_char7 === inStringType) {\n        openStringTypes.pop();\n      } else if (_char7 === \"'\" || _char7 === '\"' || _char7 === '`') {\n        openStringTypes.push(_char7);\n      }\n      if (inStringType) {\n        continue;\n      } else if (_char7 === '[') {\n        depth++;\n        continue;\n      } else if (_char7 === ']') {\n        depth--;\n        continue;\n      }\n      if (depth < 0) {\n        return input.substring(0, match.index - 1);\n      }\n      if (depth === 0 && !ALLOWED_CLASS_CHARACTERS.test(_char7)) {\n        return input.substring(0, match.index);\n      }\n    }\n  } catch (err) {\n    _iterator86.e(err);\n  } finally {\n    _iterator86.f();\n  }\n  return input;\n}\n\n// node_modules/tailwindcss/src/lib/expandTailwindAtRules.js\nvar env2 = env;\nvar builtInExtractors = {\n  DEFAULT: defaultExtractor\n};\nvar builtInTransformers = {\n  DEFAULT: function DEFAULT(content) {\n    return content;\n  },\n  svelte: function svelte(content) {\n    return content.replace(/(?:^|\\s)class:/g, ' ');\n  }\n};\nfunction getExtractor(context, fileExtension) {\n  var extractors = context.tailwindConfig.content.extract;\n  return extractors[fileExtension] || extractors.DEFAULT || builtInExtractors[fileExtension] || builtInExtractors.DEFAULT(context);\n}\nfunction getTransformer(tailwindConfig, fileExtension) {\n  var transformers = tailwindConfig.content.transform;\n  return transformers[fileExtension] || transformers.DEFAULT || builtInTransformers[fileExtension] || builtInTransformers.DEFAULT;\n}\nvar extractorCache = /* @__PURE__ */new WeakMap();\nfunction getClassCandidates(content, extractor, candidates, seen) {\n  if (!extractorCache.has(extractor)) {\n    extractorCache.set(extractor, new import_quick_lru[\"default\"]({\n      maxSize: 25e3\n    }));\n  }\n  var _iterator87 = _createForOfIteratorHelper(content.split('\\n')),\n    _step87;\n  try {\n    for (_iterator87.s(); !(_step87 = _iterator87.n()).done;) {\n      var line = _step87.value;\n      line = line.trim();\n      if (seen.has(line)) {\n        continue;\n      }\n      seen.add(line);\n      if (extractorCache.get(extractor).has(line)) {\n        var _iterator88 = _createForOfIteratorHelper(extractorCache.get(extractor).get(line)),\n          _step88;\n        try {\n          for (_iterator88.s(); !(_step88 = _iterator88.n()).done;) {\n            var match = _step88.value;\n            candidates.add(match);\n          }\n        } catch (err) {\n          _iterator88.e(err);\n        } finally {\n          _iterator88.f();\n        }\n      } else {\n        var extractorMatches = extractor(line).filter(function (s) {\n          return s !== '!*';\n        });\n        var lineMatchesSet = new Set(extractorMatches);\n        var _iterator89 = _createForOfIteratorHelper(lineMatchesSet),\n          _step89;\n        try {\n          for (_iterator89.s(); !(_step89 = _iterator89.n()).done;) {\n            var _match5 = _step89.value;\n            candidates.add(_match5);\n          }\n        } catch (err) {\n          _iterator89.e(err);\n        } finally {\n          _iterator89.f();\n        }\n        extractorCache.get(extractor).set(line, lineMatchesSet);\n      }\n    }\n  } catch (err) {\n    _iterator87.e(err);\n  } finally {\n    _iterator87.f();\n  }\n}\nfunction buildStylesheet(rules, context) {\n  var sortedRules = context.offsets.sort(rules);\n  var returnValue = {\n    base: /* @__PURE__ */new Set(),\n    defaults: /* @__PURE__ */new Set(),\n    components: /* @__PURE__ */new Set(),\n    utilities: /* @__PURE__ */new Set(),\n    variants: /* @__PURE__ */new Set()\n  };\n  var _iterator90 = _createForOfIteratorHelper(sortedRules),\n    _step90;\n  try {\n    for (_iterator90.s(); !(_step90 = _iterator90.n()).done;) {\n      var _step90$value = _slicedToArray(_step90.value, 2),\n        sort = _step90$value[0],\n        rule = _step90$value[1];\n      returnValue[sort.layer].add(rule);\n    }\n  } catch (err) {\n    _iterator90.e(err);\n  } finally {\n    _iterator90.f();\n  }\n  return returnValue;\n}\nfunction expandTailwindAtRules(context) {\n  return /*#__PURE__*/function () {\n    var _ref304 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee3(root) {\n      var _context$candidates, _root$source$end;\n      var layerNodes, candidates, seen, _iterator91, _step91, candidate, regexParserContent, _iterator92, _step92, item, transformer, extractor, BATCH_SIZE, i, batch, classCacheCount, sortedCandidates, _context$stylesheetCa, defaultNodes, baseNodes, componentNodes, utilityNodes, screenNodes, variantNodes, hasUtilityVariants;\n      return _regeneratorRuntime().wrap(function _callee3$(_context17) {\n        while (1) switch (_context17.prev = _context17.next) {\n          case 0:\n            layerNodes = {\n              base: null,\n              components: null,\n              utilities: null,\n              variants: null\n            };\n            root.walkAtRules(function (rule) {\n              if (rule.name === 'tailwind') {\n                if (Object.keys(layerNodes).includes(rule.params)) {\n                  layerNodes[rule.params] = rule;\n                }\n              }\n            });\n            if (!Object.values(layerNodes).every(function (n) {\n              return n === null;\n            })) {\n              _context17.next = 4;\n              break;\n            }\n            return _context17.abrupt(\"return\", root);\n          case 4:\n            candidates = /* @__PURE__ */new Set([].concat(_toConsumableArray((_context$candidates = context.candidates) !== null && _context$candidates !== void 0 ? _context$candidates : []), [NOT_ON_DEMAND]));\n            seen = /* @__PURE__ */new Set();\n            env2.DEBUG && console.time('Reading changed files');\n            if (true) {\n              _context17.next = 12;\n              break;\n            }\n            _iterator91 = _createForOfIteratorHelper(null.parseCandidateStringsFromFiles(context.changedContent));\n            try {\n              for (_iterator91.s(); !(_step91 = _iterator91.n()).done;) {\n                candidate = _step91.value;\n                candidates.add(candidate);\n              }\n            } catch (err) {\n              _iterator91.e(err);\n            } finally {\n              _iterator91.f();\n            }\n            _context17.next = 24;\n            break;\n          case 12:\n            regexParserContent = [];\n            _iterator92 = _createForOfIteratorHelper(context.changedContent);\n            try {\n              for (_iterator92.s(); !(_step92 = _iterator92.n()).done;) {\n                item = _step92.value;\n                transformer = getTransformer(context.tailwindConfig, item.extension);\n                extractor = getExtractor(context, item.extension);\n                regexParserContent.push([item, {\n                  transformer: transformer,\n                  extractor: extractor\n                }]);\n              }\n            } catch (err) {\n              _iterator92.e(err);\n            } finally {\n              _iterator92.f();\n            }\n            BATCH_SIZE = 500;\n            i = 0;\n          case 17:\n            if (!(i < regexParserContent.length)) {\n              _context17.next = 24;\n              break;\n            }\n            batch = regexParserContent.slice(i, i + BATCH_SIZE);\n            _context17.next = 21;\n            return Promise.all(batch.map(/*#__PURE__*/function () {\n              var _ref306 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee2(_ref305) {\n                var _ref307, _ref307$, file, content, _ref307$2, transformer, extractor;\n                return _regeneratorRuntime().wrap(function _callee2$(_context16) {\n                  while (1) switch (_context16.prev = _context16.next) {\n                    case 0:\n                      _ref307 = _slicedToArray(_ref305, 2), _ref307$ = _ref307[0], file = _ref307$.file, content = _ref307$.content, _ref307$2 = _ref307[1], transformer = _ref307$2.transformer, extractor = _ref307$2.extractor;\n                      if (!file) {\n                        _context16.next = 7;\n                        break;\n                      }\n                      _context16.next = 4;\n                      return fs_default.promises.readFile(file, 'utf8');\n                    case 4:\n                      _context16.t0 = _context16.sent;\n                      _context16.next = 8;\n                      break;\n                    case 7:\n                      _context16.t0 = content;\n                    case 8:\n                      content = _context16.t0;\n                      getClassCandidates(transformer(content), extractor, candidates, seen);\n                    case 10:\n                    case \"end\":\n                      return _context16.stop();\n                  }\n                }, _callee2);\n              }));\n              return function (_x2) {\n                return _ref306.apply(this, arguments);\n              };\n            }()));\n          case 21:\n            i += BATCH_SIZE;\n            _context17.next = 17;\n            break;\n          case 24:\n            env2.DEBUG && console.timeEnd('Reading changed files');\n            classCacheCount = context.classCache.size;\n            env2.DEBUG && console.time('Generate rules');\n            env2.DEBUG && console.time('Sorting candidates');\n            sortedCandidates =  false ? 0 : new Set(_toConsumableArray(candidates).sort(function (a, z) {\n              if (a === z) return 0;\n              if (a < z) return -1;\n              return 1;\n            }));\n            env2.DEBUG && console.timeEnd('Sorting candidates');\n            generateRules(sortedCandidates, context);\n            env2.DEBUG && console.timeEnd('Generate rules');\n            env2.DEBUG && console.time('Build stylesheet');\n            if (context.stylesheetCache === null || context.classCache.size !== classCacheCount) {\n              context.stylesheetCache = buildStylesheet(_toConsumableArray(context.ruleCache), context);\n            }\n            env2.DEBUG && console.timeEnd('Build stylesheet');\n            _context$stylesheetCa = context.stylesheetCache, defaultNodes = _context$stylesheetCa.defaults, baseNodes = _context$stylesheetCa.base, componentNodes = _context$stylesheetCa.components, utilityNodes = _context$stylesheetCa.utilities, screenNodes = _context$stylesheetCa.variants;\n            if (layerNodes.base) {\n              layerNodes.base.before(cloneNodes([].concat(_toConsumableArray(baseNodes), _toConsumableArray(defaultNodes)), layerNodes.base.source, {\n                layer: 'base'\n              }));\n              layerNodes.base.remove();\n            }\n            if (layerNodes.components) {\n              layerNodes.components.before(cloneNodes(_toConsumableArray(componentNodes), layerNodes.components.source, {\n                layer: 'components'\n              }));\n              layerNodes.components.remove();\n            }\n            if (layerNodes.utilities) {\n              layerNodes.utilities.before(cloneNodes(_toConsumableArray(utilityNodes), layerNodes.utilities.source, {\n                layer: 'utilities'\n              }));\n              layerNodes.utilities.remove();\n            }\n            variantNodes = Array.from(screenNodes).filter(function (node) {\n              var _node$raws$tailwind;\n              var parentLayer = (_node$raws$tailwind = node.raws.tailwind) === null || _node$raws$tailwind === void 0 ? void 0 : _node$raws$tailwind.parentLayer;\n              if (parentLayer === 'components') {\n                return layerNodes.components !== null;\n              }\n              if (parentLayer === 'utilities') {\n                return layerNodes.utilities !== null;\n              }\n              return true;\n            });\n            if (layerNodes.variants) {\n              layerNodes.variants.before(cloneNodes(variantNodes, layerNodes.variants.source, {\n                layer: 'variants'\n              }));\n              layerNodes.variants.remove();\n            } else if (variantNodes.length > 0) {\n              root.append(cloneNodes(variantNodes, root.source, {\n                layer: 'variants'\n              }));\n            }\n            root.source.end = (_root$source$end = root.source.end) !== null && _root$source$end !== void 0 ? _root$source$end : root.source.start;\n            hasUtilityVariants = variantNodes.some(function (node) {\n              var _node$raws$tailwind2;\n              return ((_node$raws$tailwind2 = node.raws.tailwind) === null || _node$raws$tailwind2 === void 0 ? void 0 : _node$raws$tailwind2.parentLayer) === 'utilities';\n            });\n            if (layerNodes.utilities && utilityNodes.size === 0 && !hasUtilityVariants) {\n              log_default.warn('content-problems', ['No utility classes were detected in your source files. If this is unexpected, double-check the `content` option in your Tailwind CSS configuration.', 'https://tailwindcss.com/docs/content-configuration']);\n            }\n            if (env2.DEBUG) {\n              console.log('Potential classes: ', candidates.size);\n              console.log('Active contexts: ', contextSourcesMap.size);\n            }\n            context.changedContent = [];\n            root.walkAtRules('layer', function (rule) {\n              if (Object.keys(layerNodes).includes(rule.params)) {\n                rule.remove();\n              }\n            });\n          case 47:\n          case \"end\":\n            return _context17.stop();\n        }\n      }, _callee3);\n    }));\n    return function (_x) {\n      return _ref304.apply(this, arguments);\n    };\n  }();\n}\n\n// node_modules/tailwindcss/src/lib/expandApplyAtRules.js\n\n\nfunction extractClasses(node) {\n  var groups = /* @__PURE__ */new Map();\n  var container = lib_postcss.root({\n    nodes: [node.clone()]\n  });\n  container.walkRules(function (rule) {\n    dist_default()(function (selectors) {\n      selectors.walkClasses(function (classSelector) {\n        var parentSelector = classSelector.parent.toString();\n        var classes2 = groups.get(parentSelector);\n        if (!classes2) {\n          groups.set(parentSelector, classes2 = /* @__PURE__ */new Set());\n        }\n        classes2.add(classSelector.value);\n      });\n    }).processSync(rule.selector);\n  });\n  var normalizedGroups = Array.from(groups.values(), function (classes2) {\n    return Array.from(classes2);\n  });\n  var classes = normalizedGroups.flat();\n  return Object.assign(classes, {\n    groups: normalizedGroups\n  });\n}\nvar selectorExtractor = dist_default()();\nfunction extractSelectors(ruleSelectors) {\n  return selectorExtractor.astSync(ruleSelectors);\n}\nfunction extractBaseCandidates(candidates, separator) {\n  var baseClasses = /* @__PURE__ */new Set();\n  var _iterator93 = _createForOfIteratorHelper(candidates),\n    _step93;\n  try {\n    for (_iterator93.s(); !(_step93 = _iterator93.n()).done;) {\n      var candidate = _step93.value;\n      baseClasses.add(candidate.split(separator).pop());\n    }\n  } catch (err) {\n    _iterator93.e(err);\n  } finally {\n    _iterator93.f();\n  }\n  return Array.from(baseClasses);\n}\nfunction prefix2(context, selector) {\n  var prefix3 = context.tailwindConfig.prefix;\n  return typeof prefix3 === 'function' ? prefix3(selector) : prefix3 + selector;\n}\nfunction pathToRoot(node) {\n  return _regeneratorRuntime().wrap(function pathToRoot$(_context18) {\n    while (1) switch (_context18.prev = _context18.next) {\n      case 0:\n        _context18.next = 2;\n        return node;\n      case 2:\n        if (!node.parent) {\n          _context18.next = 8;\n          break;\n        }\n        _context18.next = 5;\n        return node.parent;\n      case 5:\n        node = node.parent;\n        _context18.next = 2;\n        break;\n      case 8:\n      case \"end\":\n        return _context18.stop();\n    }\n  }, _marked7);\n}\nfunction shallowClone(node) {\n  var overrides = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var children = node.nodes;\n  node.nodes = [];\n  var tmp = node.clone(overrides);\n  node.nodes = children;\n  return tmp;\n}\nfunction nestedClone(node) {\n  var _iterator94 = _createForOfIteratorHelper(pathToRoot(node)),\n    _step94;\n  try {\n    for (_iterator94.s(); !(_step94 = _iterator94.n()).done;) {\n      var parent = _step94.value;\n      if (node === parent) {\n        continue;\n      }\n      if (parent.type === 'root') {\n        break;\n      }\n      node = shallowClone(parent, {\n        nodes: [node]\n      });\n    }\n  } catch (err) {\n    _iterator94.e(err);\n  } finally {\n    _iterator94.f();\n  }\n  return node;\n}\nfunction buildLocalApplyCache(root, context) {\n  var cache2 = /* @__PURE__ */new Map();\n  root.walkRules(function (rule) {\n    var _iterator95 = _createForOfIteratorHelper(pathToRoot(rule)),\n      _step95;\n    try {\n      for (_iterator95.s(); !(_step95 = _iterator95.n()).done;) {\n        var _node$raws$tailwind3;\n        var node = _step95.value;\n        if (((_node$raws$tailwind3 = node.raws.tailwind) === null || _node$raws$tailwind3 === void 0 ? void 0 : _node$raws$tailwind3.layer) !== void 0) {\n          return;\n        }\n      }\n    } catch (err) {\n      _iterator95.e(err);\n    } finally {\n      _iterator95.f();\n    }\n    var container = nestedClone(rule);\n    var sort = context.offsets.create('user');\n    var _iterator96 = _createForOfIteratorHelper(extractClasses(rule)),\n      _step96;\n    try {\n      for (_iterator96.s(); !(_step96 = _iterator96.n()).done;) {\n        var className = _step96.value;\n        var list2 = cache2.get(className) || [];\n        cache2.set(className, list2);\n        list2.push([{\n          layer: 'user',\n          sort: sort,\n          important: false\n        }, container]);\n      }\n    } catch (err) {\n      _iterator96.e(err);\n    } finally {\n      _iterator96.f();\n    }\n  });\n  return cache2;\n}\nfunction buildApplyCache(applyCandidates, context) {\n  var _iterator97 = _createForOfIteratorHelper(applyCandidates),\n    _step97;\n  try {\n    for (_iterator97.s(); !(_step97 = _iterator97.n()).done;) {\n      var candidate = _step97.value;\n      if (context.notClassCache.has(candidate) || context.applyClassCache.has(candidate)) {\n        continue;\n      }\n      if (context.classCache.has(candidate)) {\n        context.applyClassCache.set(candidate, context.classCache.get(candidate).map(function (_ref308) {\n          var _ref309 = _slicedToArray(_ref308, 2),\n            meta = _ref309[0],\n            rule = _ref309[1];\n          return [meta, rule.clone()];\n        }));\n        continue;\n      }\n      var matches = Array.from(resolveMatches(candidate, context));\n      if (matches.length === 0) {\n        context.notClassCache.add(candidate);\n        continue;\n      }\n      context.applyClassCache.set(candidate, matches);\n    }\n  } catch (err) {\n    _iterator97.e(err);\n  } finally {\n    _iterator97.f();\n  }\n  return context.applyClassCache;\n}\nfunction lazyCache(buildCacheFn) {\n  var cache2 = null;\n  return {\n    get: function get(name) {\n      cache2 = cache2 || buildCacheFn();\n      return cache2.get(name);\n    },\n    has: function has(name) {\n      cache2 = cache2 || buildCacheFn();\n      return cache2.has(name);\n    }\n  };\n}\nfunction combineCaches(caches) {\n  return {\n    get: function get(name) {\n      return caches.flatMap(function (cache2) {\n        return cache2.get(name) || [];\n      });\n    },\n    has: function has(name) {\n      return caches.some(function (cache2) {\n        return cache2.has(name);\n      });\n    }\n  };\n}\nfunction extractApplyCandidates(params) {\n  var candidates = params.split(/[\\s\\t\\n]+/g);\n  if (candidates[candidates.length - 1] === '!important') {\n    return [candidates.slice(0, -1), true];\n  }\n  return [candidates, false];\n}\nfunction processApply(root, context, localCache) {\n  var applyCandidates = /* @__PURE__ */new Set();\n  var applies = [];\n  root.walkAtRules('apply', function (rule) {\n    var _extractApplyCandidat = extractApplyCandidates(rule.params),\n      _extractApplyCandidat2 = _slicedToArray(_extractApplyCandidat, 1),\n      candidates = _extractApplyCandidat2[0];\n    var _iterator98 = _createForOfIteratorHelper(candidates),\n      _step98;\n    try {\n      for (_iterator98.s(); !(_step98 = _iterator98.n()).done;) {\n        var util = _step98.value;\n        applyCandidates.add(util);\n      }\n    } catch (err) {\n      _iterator98.e(err);\n    } finally {\n      _iterator98.f();\n    }\n    applies.push(rule);\n  });\n  if (applies.length === 0) {\n    return;\n  }\n  var applyClassCache = combineCaches([localCache, buildApplyCache(applyCandidates, context)]);\n  function replaceSelector(selector, utilitySelectors, candidate) {\n    var selectorList = extractSelectors(selector);\n    var utilitySelectorsList = extractSelectors(utilitySelectors);\n    var candidateList = extractSelectors(\".\".concat(escapeClassName(candidate)));\n    var candidateClass = candidateList.nodes[0].nodes[0];\n    selectorList.each(function (sel) {\n      var replaced = /* @__PURE__ */new Set();\n      utilitySelectorsList.each(function (utilitySelector) {\n        var hasReplaced = false;\n        utilitySelector = utilitySelector.clone();\n        utilitySelector.walkClasses(function (node) {\n          if (node.value !== candidateClass.value) {\n            return;\n          }\n          if (hasReplaced) {\n            return;\n          }\n          node.replaceWith.apply(node, _toConsumableArray(sel.nodes.map(function (node2) {\n            return node2.clone();\n          })));\n          replaced.add(utilitySelector);\n          hasReplaced = true;\n        });\n      });\n      var _iterator99 = _createForOfIteratorHelper(replaced),\n        _step99;\n      try {\n        for (_iterator99.s(); !(_step99 = _iterator99.n()).done;) {\n          var sel2 = _step99.value;\n          var groups = [[]];\n          var _iterator100 = _createForOfIteratorHelper(sel2.nodes),\n            _step100;\n          try {\n            for (_iterator100.s(); !(_step100 = _iterator100.n()).done;) {\n              var node = _step100.value;\n              if (node.type === 'combinator') {\n                groups.push(node);\n                groups.push([]);\n              } else {\n                var last = groups[groups.length - 1];\n                last.push(node);\n              }\n            }\n          } catch (err) {\n            _iterator100.e(err);\n          } finally {\n            _iterator100.f();\n          }\n          sel2.nodes = [];\n          for (var _i11 = 0, _groups2 = groups; _i11 < _groups2.length; _i11++) {\n            var group = _groups2[_i11];\n            if (Array.isArray(group)) {\n              group.sort(function (a, b) {\n                if (a.type === 'tag' && b.type === 'class') {\n                  return -1;\n                } else if (a.type === 'class' && b.type === 'tag') {\n                  return 1;\n                } else if (a.type === 'class' && b.type === 'pseudo' && b.value.startsWith('::')) {\n                  return -1;\n                } else if (a.type === 'pseudo' && a.value.startsWith('::') && b.type === 'class') {\n                  return 1;\n                }\n                return 0;\n              });\n            }\n            sel2.nodes = sel2.nodes.concat(group);\n          }\n        }\n      } catch (err) {\n        _iterator99.e(err);\n      } finally {\n        _iterator99.f();\n      }\n      sel.replaceWith.apply(sel, _toConsumableArray(replaced));\n    });\n    return selectorList.toString();\n  }\n  var perParentApplies = /* @__PURE__ */new Map();\n  var _loop19 = function _loop19() {\n    var apply = _applies[_i12];\n    var _ref310 = perParentApplies.get(apply.parent) || [[], apply.source],\n      _ref311 = _slicedToArray(_ref310, 1),\n      candidates = _ref311[0];\n    perParentApplies.set(apply.parent, [candidates, apply.source]);\n    var _extractApplyCandidat3 = extractApplyCandidates(apply.params),\n      _extractApplyCandidat4 = _slicedToArray(_extractApplyCandidat3, 2),\n      applyCandidates2 = _extractApplyCandidat4[0],\n      important = _extractApplyCandidat4[1];\n    if (apply.parent.type === 'atrule') {\n      if (apply.parent.name === 'screen') {\n        var screenType = apply.parent.params;\n        throw apply.error(\"@apply is not supported within nested at-rules like @screen. We suggest you write this as @apply \".concat(applyCandidates2.map(function (c) {\n          return \"\".concat(screenType, \":\").concat(c);\n        }).join(' '), \" instead.\"));\n      }\n      throw apply.error(\"@apply is not supported within nested at-rules like @\".concat(apply.parent.name, \". You can fix this by un-nesting @\").concat(apply.parent.name, \".\"));\n    }\n    var _iterator101 = _createForOfIteratorHelper(applyCandidates2),\n      _step101;\n    try {\n      for (_iterator101.s(); !(_step101 = _iterator101.n()).done;) {\n        var applyCandidate = _step101.value;\n        if ([prefix2(context, 'group'), prefix2(context, 'peer')].includes(applyCandidate)) {\n          throw apply.error(\"@apply should not be used with the '\".concat(applyCandidate, \"' utility\"));\n        }\n        if (!applyClassCache.has(applyCandidate)) {\n          throw apply.error(\"The `\".concat(applyCandidate, \"` class does not exist. If `\").concat(applyCandidate, \"` is a custom class, make sure it is defined within a `@layer` directive.\"));\n        }\n        var rules = applyClassCache.get(applyCandidate);\n        candidates.push([applyCandidate, important, rules]);\n      }\n    } catch (err) {\n      _iterator101.e(err);\n    } finally {\n      _iterator101.f();\n    }\n  };\n  for (var _i12 = 0, _applies = applies; _i12 < _applies.length; _i12++) {\n    _loop19();\n  }\n  var _iterator102 = _createForOfIteratorHelper(perParentApplies),\n    _step102;\n  try {\n    var _loop20 = function _loop20() {\n      var _step102$value = _slicedToArray(_step102.value, 2),\n        parent = _step102$value[0],\n        _step102$value$ = _slicedToArray(_step102$value[1], 2),\n        candidates = _step102$value$[0],\n        atApplySource = _step102$value$[1];\n      var siblings = [];\n      var _iterator103 = _createForOfIteratorHelper(candidates),\n        _step103;\n      try {\n        var _loop21 = function _loop21() {\n          var _step103$value = _slicedToArray(_step103.value, 3),\n            applyCandidate = _step103$value[0],\n            important = _step103$value[1],\n            rules = _step103$value[2];\n          var potentialApplyCandidates = [applyCandidate].concat(_toConsumableArray(extractBaseCandidates([applyCandidate], context.tailwindConfig.separator)));\n          var _iterator104 = _createForOfIteratorHelper(rules),\n            _step104;\n          try {\n            var _loop22 = function _loop22() {\n              var _step104$value = _slicedToArray(_step104.value, 2),\n                meta = _step104$value[0],\n                node = _step104$value[1];\n              var parentClasses = extractClasses(parent);\n              var nodeClasses = extractClasses(node);\n              nodeClasses = nodeClasses.groups.filter(function (classList) {\n                return classList.some(function (className) {\n                  return potentialApplyCandidates.includes(className);\n                });\n              }).flat();\n              nodeClasses = nodeClasses.concat(extractBaseCandidates(nodeClasses, context.tailwindConfig.separator));\n              var intersects = parentClasses.some(function (selector) {\n                return nodeClasses.includes(selector);\n              });\n              if (intersects) {\n                throw node.error(\"You cannot `@apply` the `\".concat(applyCandidate, \"` utility here because it creates a circular dependency.\"));\n              }\n              var root2 = lib_postcss.root({\n                nodes: [node.clone()]\n              });\n              root2.walk(function (node2) {\n                node2.source = atApplySource;\n              });\n              var canRewriteSelector = node.type !== 'atrule' || node.type === 'atrule' && node.name !== 'keyframes';\n              if (canRewriteSelector) {\n                root2.walkRules(function (rule) {\n                  if (!extractClasses(rule).some(function (candidate) {\n                    return candidate === applyCandidate;\n                  })) {\n                    rule.remove();\n                    return;\n                  }\n                  var importantSelector = typeof context.tailwindConfig.important === 'string' ? context.tailwindConfig.important : null;\n                  var isGenerated = parent.raws.tailwind !== void 0;\n                  var parentSelector = isGenerated && importantSelector && parent.selector.indexOf(importantSelector) === 0 ? parent.selector.slice(importantSelector.length) : parent.selector;\n                  if (parentSelector === '') {\n                    parentSelector = parent.selector;\n                  }\n                  rule.selector = replaceSelector(parentSelector, rule.selector, applyCandidate);\n                  if (importantSelector && parentSelector !== parent.selector) {\n                    rule.selector = applyImportantSelector(rule.selector, importantSelector);\n                  }\n                  rule.walkDecls(function (d) {\n                    d.important = meta.important || important;\n                  });\n                  var selector = dist_default()().astSync(rule.selector);\n                  selector.each(function (sel) {\n                    return movePseudos(sel);\n                  });\n                  rule.selector = selector.toString();\n                });\n              }\n              if (!root2.nodes[0]) {\n                return 1; // continue\n              }\n              siblings.push([meta.sort, root2.nodes[0]]);\n            };\n            for (_iterator104.s(); !(_step104 = _iterator104.n()).done;) {\n              if (_loop22()) continue;\n            }\n          } catch (err) {\n            _iterator104.e(err);\n          } finally {\n            _iterator104.f();\n          }\n        };\n        for (_iterator103.s(); !(_step103 = _iterator103.n()).done;) {\n          _loop21();\n        }\n      } catch (err) {\n        _iterator103.e(err);\n      } finally {\n        _iterator103.f();\n      }\n      var nodes = context.offsets.sort(siblings).map(function (s) {\n        return s[1];\n      });\n      parent.after(nodes);\n    };\n    for (_iterator102.s(); !(_step102 = _iterator102.n()).done;) {\n      _loop20();\n    }\n  } catch (err) {\n    _iterator102.e(err);\n  } finally {\n    _iterator102.f();\n  }\n  for (var _i13 = 0, _applies2 = applies; _i13 < _applies2.length; _i13++) {\n    var apply = _applies2[_i13];\n    if (apply.parent.nodes.length > 1) {\n      apply.remove();\n    } else {\n      apply.parent.remove();\n    }\n  }\n  processApply(root, context, localCache);\n}\nfunction expandApplyAtRules(context) {\n  return function (root) {\n    var localCache = lazyCache(function () {\n      return buildLocalApplyCache(root, context);\n    });\n    processApply(root, context, localCache);\n  };\n}\n\n// node_modules/tailwindcss/src/lib/evaluateTailwindFunctions.js\n\n\nvar import_value_parser = __toESM(require_value_parser());\nfunction isObject(input) {\n  return _typeof(input) === 'object' && input !== null;\n}\nfunction findClosestExistingPath(theme, path) {\n  var parts = toPath(path);\n  do {\n    parts.pop();\n    if (dlv_umd_default()(theme, parts) !== void 0) break;\n  } while (parts.length);\n  return parts.length ? parts : void 0;\n}\nfunction pathToString(path) {\n  if (typeof path === 'string') return path;\n  return path.reduce(function (acc, cur, i) {\n    if (cur.includes('.')) return \"\".concat(acc, \"[\").concat(cur, \"]\");\n    return i === 0 ? cur : \"\".concat(acc, \".\").concat(cur);\n  }, '');\n}\nfunction module_esm_list(items) {\n  return items.map(function (key) {\n    return \"'\".concat(key, \"'\");\n  }).join(', ');\n}\nfunction listKeys(obj) {\n  return module_esm_list(Object.keys(obj));\n}\nfunction validatePath(config, path, defaultValue) {\n  var themeOpts = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  var pathString = Array.isArray(path) ? pathToString(path) : path.replace(/^['\"]+|['\"]+$/g, '');\n  var pathSegments = Array.isArray(path) ? path : toPath(pathString);\n  var value2 = dlv_umd_default()(config.theme, pathSegments, defaultValue);\n  if (value2 === void 0) {\n    var error = \"'\".concat(pathString, \"' does not exist in your theme config.\");\n    var parentSegments = pathSegments.slice(0, -1);\n    var parentValue = dlv_umd_default()(config.theme, parentSegments);\n    if (isObject(parentValue)) {\n      var validKeys = Object.keys(parentValue).filter(function (key) {\n        return validatePath(config, [].concat(_toConsumableArray(parentSegments), [key])).isValid;\n      });\n      var suggestion = didYouMean_1_2_1_default()(pathSegments[pathSegments.length - 1], validKeys);\n      if (suggestion) {\n        error += \" Did you mean '\".concat(pathToString([].concat(_toConsumableArray(parentSegments), [suggestion])), \"'?\");\n      } else if (validKeys.length > 0) {\n        error += \" '\".concat(pathToString(parentSegments), \"' has the following valid keys: \").concat(module_esm_list(validKeys));\n      }\n    } else {\n      var closestPath = findClosestExistingPath(config.theme, pathString);\n      if (closestPath) {\n        var closestValue = dlv_umd_default()(config.theme, closestPath);\n        if (isObject(closestValue)) {\n          error += \" '\".concat(pathToString(closestPath), \"' has the following keys: \").concat(listKeys(closestValue));\n        } else {\n          error += \" '\".concat(pathToString(closestPath), \"' is not an object.\");\n        }\n      } else {\n        error += \" Your theme has the following top-level keys: \".concat(listKeys(config.theme));\n      }\n    }\n    return {\n      isValid: false,\n      error: error\n    };\n  }\n  if (!(typeof value2 === 'string' || typeof value2 === 'number' || typeof value2 === 'function' || value2 instanceof String || value2 instanceof Number || Array.isArray(value2))) {\n    var _error = \"'\".concat(pathString, \"' was found but does not resolve to a string.\");\n    if (isObject(value2)) {\n      var _validKeys = Object.keys(value2).filter(function (key) {\n        return validatePath(config, [].concat(_toConsumableArray(pathSegments), [key])).isValid;\n      });\n      if (_validKeys.length) {\n        _error += \" Did you mean something like '\".concat(pathToString([].concat(_toConsumableArray(pathSegments), [_validKeys[0]])), \"'?\");\n      }\n    }\n    return {\n      isValid: false,\n      error: _error\n    };\n  }\n  var _pathSegments = _slicedToArray(pathSegments, 1),\n    themeSection = _pathSegments[0];\n  return {\n    isValid: true,\n    value: transformThemeValue(themeSection)(value2, themeOpts)\n  };\n}\nfunction extractArgs(node, vNodes, functions) {\n  vNodes = vNodes.map(function (vNode) {\n    return resolveVNode(node, vNode, functions);\n  });\n  var args = [''];\n  var _iterator105 = _createForOfIteratorHelper(vNodes),\n    _step105;\n  try {\n    for (_iterator105.s(); !(_step105 = _iterator105.n()).done;) {\n      var vNode = _step105.value;\n      if (vNode.type === 'div' && vNode.value === ',') {\n        args.push('');\n      } else {\n        args[args.length - 1] += import_value_parser[\"default\"].stringify(vNode);\n      }\n    }\n  } catch (err) {\n    _iterator105.e(err);\n  } finally {\n    _iterator105.f();\n  }\n  return args;\n}\nfunction resolveVNode(node, vNode, functions) {\n  if (vNode.type === 'function' && functions[vNode.value] !== void 0) {\n    var args = extractArgs(node, vNode.nodes, functions);\n    vNode.type = 'word';\n    vNode.value = functions[vNode.value].apply(functions, [node].concat(_toConsumableArray(args)));\n  }\n  return vNode;\n}\nfunction resolveFunctions(node, input, functions) {\n  var hasAnyFn = Object.keys(functions).some(function (fn) {\n    return input.includes(\"\".concat(fn, \"(\"));\n  });\n  if (!hasAnyFn) return input;\n  return (0, import_value_parser[\"default\"])(input).walk(function (vNode) {\n    resolveVNode(node, vNode, functions);\n  }).toString();\n}\nvar nodeTypePropertyMap = {\n  atrule: 'params',\n  decl: 'value'\n};\nfunction toPaths(path) {\n  var matches, alpha;\n  return _regeneratorRuntime().wrap(function toPaths$(_context19) {\n    while (1) switch (_context19.prev = _context19.next) {\n      case 0:\n        path = path.replace(/^['\"]+|['\"]+$/g, '');\n        matches = path.match(/^([^\\s]+)(?![^\\[]*\\])(?:\\s*\\/\\s*([^\\/\\s]+))$/);\n        alpha = void 0;\n        _context19.next = 5;\n        return [path, void 0];\n      case 5:\n        if (!matches) {\n          _context19.next = 10;\n          break;\n        }\n        path = matches[1];\n        alpha = matches[2];\n        _context19.next = 10;\n        return [path, alpha];\n      case 10:\n      case \"end\":\n        return _context19.stop();\n    }\n  }, _marked8);\n}\nfunction resolvePath(config, path, defaultValue) {\n  var _results$find;\n  var results = Array.from(toPaths(path)).map(function (_ref312) {\n    var _ref313 = _slicedToArray(_ref312, 2),\n      path2 = _ref313[0],\n      alpha = _ref313[1];\n    return Object.assign(validatePath(config, path2, defaultValue, {\n      opacityValue: alpha\n    }), {\n      resolvedPath: path2,\n      alpha: alpha\n    });\n  });\n  return (_results$find = results.find(function (result) {\n    return result.isValid;\n  })) !== null && _results$find !== void 0 ? _results$find : results[0];\n}\nfunction evaluateTailwindFunctions_default(context) {\n  var config = context.tailwindConfig;\n  var functions = {\n    theme: function theme(node, path) {\n      for (var _len = arguments.length, defaultValue = new Array(_len > 2 ? _len - 2 : 0), _key4 = 2; _key4 < _len; _key4++) {\n        defaultValue[_key4 - 2] = arguments[_key4];\n      }\n      var _resolvePath = resolvePath(config, path, defaultValue.length ? defaultValue : void 0),\n        isValid = _resolvePath.isValid,\n        value2 = _resolvePath.value,\n        error = _resolvePath.error,\n        alpha = _resolvePath.alpha;\n      if (!isValid) {\n        var _parentNode$raws$tail;\n        var parentNode = node.parent;\n        var candidate = parentNode === null || parentNode === void 0 || (_parentNode$raws$tail = parentNode.raws.tailwind) === null || _parentNode$raws$tail === void 0 ? void 0 : _parentNode$raws$tail.candidate;\n        if (parentNode && candidate !== void 0) {\n          context.markInvalidUtilityNode(parentNode);\n          parentNode.remove();\n          log_default.warn('invalid-theme-key-in-class', [\"The utility `\".concat(candidate, \"` contains an invalid theme value and was not generated.\")]);\n          return;\n        }\n        throw node.error(error);\n      }\n      var maybeColor = parseColorFormat(value2);\n      var isColorFunction = maybeColor !== void 0 && typeof maybeColor === 'function';\n      if (alpha !== void 0 || isColorFunction) {\n        if (alpha === void 0) {\n          alpha = 1;\n        }\n        value2 = withAlphaValue(maybeColor, alpha, maybeColor);\n      }\n      return value2;\n    },\n    screen: function screen(node, _screen3) {\n      _screen3 = _screen3.replace(/^['\"]+/g, '').replace(/['\"]+$/g, '');\n      var screens = normalizeScreens(config.theme.screens);\n      var screenDefinition = screens.find(function (_ref314) {\n        var name = _ref314.name;\n        return name === _screen3;\n      });\n      if (!screenDefinition) {\n        throw node.error(\"The '\".concat(_screen3, \"' screen does not exist in your theme.\"));\n      }\n      return buildMediaQuery(screenDefinition);\n    }\n  };\n  return function (root) {\n    root.walk(function (node) {\n      var property = nodeTypePropertyMap[node.type];\n      if (property === void 0) {\n        return;\n      }\n      node[property] = resolveFunctions(node, node[property], functions);\n    });\n  };\n}\n\n// node_modules/tailwindcss/src/lib/substituteScreenAtRules.js\nfunction substituteScreenAtRules_default(_ref315) {\n  var theme = _ref315.tailwindConfig.theme;\n  return function (css) {\n    css.walkAtRules('screen', function (atRule) {\n      var screen = atRule.params;\n      var screens = normalizeScreens(theme.screens);\n      var screenDefinition = screens.find(function (_ref316) {\n        var name = _ref316.name;\n        return name === screen;\n      });\n      if (!screenDefinition) {\n        throw atRule.error(\"No `\".concat(screen, \"` screen found.\"));\n      }\n      atRule.name = 'media';\n      atRule.params = buildMediaQuery(screenDefinition);\n    });\n  };\n}\n\n// node_modules/tailwindcss/src/lib/resolveDefaultsAtRules.js\n\n\nvar getNode = {\n  id: function id(node) {\n    return dist_default().attribute({\n      attribute: 'id',\n      operator: '=',\n      value: node.value,\n      quoteMark: '\"'\n    });\n  }\n};\nfunction minimumImpactSelector(nodes) {\n  var rest = nodes.filter(function (node2) {\n    if (node2.type !== 'pseudo') return true;\n    if (node2.nodes.length > 0) return true;\n    return node2.value.startsWith('::') || [':before', ':after', ':first-line', ':first-letter'].includes(node2.value);\n  }).reverse();\n  var searchFor = /* @__PURE__ */new Set(['tag', 'class', 'id', 'attribute']);\n  var splitPointIdx = rest.findIndex(function (n) {\n    return searchFor.has(n.type);\n  });\n  if (splitPointIdx === -1) return rest.reverse().join('').trim();\n  var node = rest[splitPointIdx];\n  var bestNode = getNode[node.type] ? getNode[node.type](node) : node;\n  rest = rest.slice(0, splitPointIdx);\n  var combinatorIdx = rest.findIndex(function (n) {\n    return n.type === 'combinator' && n.value === '>';\n  });\n  if (combinatorIdx !== -1) {\n    rest.splice(0, combinatorIdx);\n    rest.unshift(dist_default().universal());\n  }\n  return [bestNode].concat(_toConsumableArray(rest.reverse())).join('').trim();\n}\nvar elementSelectorParser = dist_default()(function (selectors) {\n  return selectors.map(function (s) {\n    var nodes = s.split(function (n) {\n      return n.type === 'combinator' && n.value === ' ';\n    }).pop();\n    return minimumImpactSelector(nodes);\n  });\n});\nvar cache = /* @__PURE__ */new Map();\nfunction extractElementSelector(selector) {\n  if (!cache.has(selector)) {\n    cache.set(selector, elementSelectorParser.transformSync(selector));\n  }\n  return cache.get(selector);\n}\nfunction resolveDefaultsAtRules(_ref317) {\n  var tailwindConfig = _ref317.tailwindConfig;\n  return function (root) {\n    var variableNodeMap = /* @__PURE__ */new Map();\n    var universals = /* @__PURE__ */new Set();\n    root.walkAtRules('defaults', function (rule) {\n      if (rule.nodes && rule.nodes.length > 0) {\n        universals.add(rule);\n        return;\n      }\n      var variable = rule.params;\n      if (!variableNodeMap.has(variable)) {\n        variableNodeMap.set(variable, /* @__PURE__ */new Set());\n      }\n      variableNodeMap.get(variable).add(rule.parent);\n      rule.remove();\n    });\n    if (flagEnabled(tailwindConfig, 'optimizeUniversalDefaults')) {\n      var _iterator106 = _createForOfIteratorHelper(universals),\n        _step106;\n      try {\n        for (_iterator106.s(); !(_step106 = _iterator106.n()).done;) {\n          var _variableNodeMap$get;\n          var universal = _step106.value;\n          var selectorGroups = /* @__PURE__ */new Map();\n          var rules = (_variableNodeMap$get = variableNodeMap.get(universal.params)) !== null && _variableNodeMap$get !== void 0 ? _variableNodeMap$get : [];\n          var _iterator107 = _createForOfIteratorHelper(rules),\n            _step107;\n          try {\n            for (_iterator107.s(); !(_step107 = _iterator107.n()).done;) {\n              var rule = _step107.value;\n              var _iterator109 = _createForOfIteratorHelper(extractElementSelector(rule.selector)),\n                _step109;\n              try {\n                for (_iterator109.s(); !(_step109 = _iterator109.n()).done;) {\n                  var _selectorGroups$get;\n                  var selector = _step109.value;\n                  var selectorGroupName = selector.includes(':-') || selector.includes('::-') ? selector : '__DEFAULT__';\n                  var _selectors2 = (_selectorGroups$get = selectorGroups.get(selectorGroupName)) !== null && _selectorGroups$get !== void 0 ? _selectorGroups$get : /* @__PURE__ */new Set();\n                  selectorGroups.set(selectorGroupName, _selectors2);\n                  _selectors2.add(selector);\n                }\n              } catch (err) {\n                _iterator109.e(err);\n              } finally {\n                _iterator109.f();\n              }\n            }\n          } catch (err) {\n            _iterator107.e(err);\n          } finally {\n            _iterator107.f();\n          }\n          if (flagEnabled(tailwindConfig, 'optimizeUniversalDefaults')) {\n            if (selectorGroups.size === 0) {\n              universal.remove();\n              continue;\n            }\n            var _iterator108 = _createForOfIteratorHelper(selectorGroups),\n              _step108;\n            try {\n              for (_iterator108.s(); !(_step108 = _iterator108.n()).done;) {\n                var _step108$value = _slicedToArray(_step108.value, 2),\n                  selectors = _step108$value[1];\n                var universalRule = lib_postcss.rule({\n                  source: universal.source\n                });\n                universalRule.selectors = _toConsumableArray(selectors);\n                universalRule.append(universal.nodes.map(function (node) {\n                  return node.clone();\n                }));\n                universal.before(universalRule);\n              }\n            } catch (err) {\n              _iterator108.e(err);\n            } finally {\n              _iterator108.f();\n            }\n          }\n          universal.remove();\n        }\n      } catch (err) {\n        _iterator106.e(err);\n      } finally {\n        _iterator106.f();\n      }\n    } else if (universals.size) {\n      var _universalRule = lib_postcss.rule({\n        selectors: ['*', '::before', '::after']\n      });\n      var _iterator110 = _createForOfIteratorHelper(universals),\n        _step110;\n      try {\n        for (_iterator110.s(); !(_step110 = _iterator110.n()).done;) {\n          var _universal = _step110.value;\n          _universalRule.append(_universal.nodes);\n          if (!_universalRule.parent) {\n            _universal.before(_universalRule);\n          }\n          if (!_universalRule.source) {\n            _universalRule.source = _universal.source;\n          }\n          _universal.remove();\n        }\n      } catch (err) {\n        _iterator110.e(err);\n      } finally {\n        _iterator110.f();\n      }\n      var backdropRule = _universalRule.clone({\n        selectors: ['::backdrop']\n      });\n      _universalRule.after(backdropRule);\n    }\n  };\n}\n\n// node_modules/tailwindcss/src/lib/collapseAdjacentRules.js\nvar comparisonMap = {\n  atrule: ['name', 'params'],\n  rule: ['selector']\n};\nvar types = new Set(Object.keys(comparisonMap));\nfunction collapseAdjacentRules() {\n  function collapseRulesIn(root) {\n    var currentRule = null;\n    root.each(function (node) {\n      if (!types.has(node.type)) {\n        currentRule = null;\n        return;\n      }\n      if (currentRule === null) {\n        currentRule = node;\n        return;\n      }\n      var properties = comparisonMap[node.type];\n      if (node.type === 'atrule' && node.name === 'font-face') {\n        currentRule = node;\n      } else if (properties.every(function (property) {\n        var _node$property, _currentRule$property;\n        return ((_node$property = node[property]) !== null && _node$property !== void 0 ? _node$property : '').replace(/\\s+/g, ' ') === ((_currentRule$property = currentRule[property]) !== null && _currentRule$property !== void 0 ? _currentRule$property : '').replace(/\\s+/g, ' ');\n      })) {\n        if (node.nodes) {\n          currentRule.append(node.nodes);\n        }\n        node.remove();\n      } else {\n        currentRule = node;\n      }\n    });\n    root.each(function (node) {\n      if (node.type === 'atrule') {\n        collapseRulesIn(node);\n      }\n    });\n  }\n  return function (root) {\n    collapseRulesIn(root);\n  };\n}\n\n// node_modules/tailwindcss/src/lib/collapseDuplicateDeclarations.js\nfunction collapseDuplicateDeclarations() {\n  return function (root) {\n    root.walkRules(function (node) {\n      var seen = /* @__PURE__ */new Map();\n      var droppable = /* @__PURE__ */new Set([]);\n      var byProperty = /* @__PURE__ */new Map();\n      node.walkDecls(function (decl) {\n        if (decl.parent !== node) {\n          return;\n        }\n        if (seen.has(decl.prop)) {\n          if (seen.get(decl.prop).value === decl.value) {\n            droppable.add(seen.get(decl.prop));\n            seen.set(decl.prop, decl);\n            return;\n          }\n          if (!byProperty.has(decl.prop)) {\n            byProperty.set(decl.prop, /* @__PURE__ */new Set());\n          }\n          byProperty.get(decl.prop).add(seen.get(decl.prop));\n          byProperty.get(decl.prop).add(decl);\n        }\n        seen.set(decl.prop, decl);\n      });\n      var _iterator111 = _createForOfIteratorHelper(droppable),\n        _step111;\n      try {\n        for (_iterator111.s(); !(_step111 = _iterator111.n()).done;) {\n          var decl = _step111.value;\n          decl.remove();\n        }\n      } catch (err) {\n        _iterator111.e(err);\n      } finally {\n        _iterator111.f();\n      }\n      var _iterator112 = _createForOfIteratorHelper(byProperty.values()),\n        _step112;\n      try {\n        for (_iterator112.s(); !(_step112 = _iterator112.n()).done;) {\n          var declarations = _step112.value;\n          var byUnit = /* @__PURE__ */new Map();\n          var _iterator113 = _createForOfIteratorHelper(declarations),\n            _step113;\n          try {\n            for (_iterator113.s(); !(_step113 = _iterator113.n()).done;) {\n              var _decl = _step113.value;\n              var unit = resolveUnit(_decl.value);\n              if (unit === null) {\n                continue;\n              }\n              if (!byUnit.has(unit)) {\n                byUnit.set(unit, /* @__PURE__ */new Set());\n              }\n              byUnit.get(unit).add(_decl);\n            }\n          } catch (err) {\n            _iterator113.e(err);\n          } finally {\n            _iterator113.f();\n          }\n          var _iterator114 = _createForOfIteratorHelper(byUnit.values()),\n            _step114;\n          try {\n            for (_iterator114.s(); !(_step114 = _iterator114.n()).done;) {\n              var declarations2 = _step114.value;\n              var removableDeclarations = Array.from(declarations2).slice(0, -1);\n              var _iterator115 = _createForOfIteratorHelper(removableDeclarations),\n                _step115;\n              try {\n                for (_iterator115.s(); !(_step115 = _iterator115.n()).done;) {\n                  var _decl2 = _step115.value;\n                  _decl2.remove();\n                }\n              } catch (err) {\n                _iterator115.e(err);\n              } finally {\n                _iterator115.f();\n              }\n            }\n          } catch (err) {\n            _iterator114.e(err);\n          } finally {\n            _iterator114.f();\n          }\n        }\n      } catch (err) {\n        _iterator112.e(err);\n      } finally {\n        _iterator112.f();\n      }\n    });\n  };\n}\nvar UNITLESS_NUMBER = Symbol('unitless-number');\nfunction resolveUnit(input) {\n  var result = /^-?\\d*.?\\d+([\\w%]+)?$/g.exec(input);\n  if (result) {\n    var _result$;\n    return (_result$ = result[1]) !== null && _result$ !== void 0 ? _result$ : UNITLESS_NUMBER;\n  }\n  return null;\n}\n\n// node_modules/tailwindcss/src/lib/partitionApplyAtRules.js\nfunction partitionRules(root) {\n  if (!root.walkAtRules) return;\n  var applyParents = /* @__PURE__ */new Set();\n  root.walkAtRules('apply', function (rule) {\n    applyParents.add(rule.parent);\n  });\n  if (applyParents.size === 0) {\n    return;\n  }\n  var _iterator116 = _createForOfIteratorHelper(applyParents),\n    _step116;\n  try {\n    for (_iterator116.s(); !(_step116 = _iterator116.n()).done;) {\n      var rule = _step116.value;\n      var nodeGroups = [];\n      var lastGroup = [];\n      var _iterator117 = _createForOfIteratorHelper(rule.nodes),\n        _step117;\n      try {\n        for (_iterator117.s(); !(_step117 = _iterator117.n()).done;) {\n          var node = _step117.value;\n          if (node.type === 'atrule' && node.name === 'apply') {\n            if (lastGroup.length > 0) {\n              nodeGroups.push(lastGroup);\n              lastGroup = [];\n            }\n            nodeGroups.push([node]);\n          } else {\n            lastGroup.push(node);\n          }\n        }\n      } catch (err) {\n        _iterator117.e(err);\n      } finally {\n        _iterator117.f();\n      }\n      if (lastGroup.length > 0) {\n        nodeGroups.push(lastGroup);\n      }\n      if (nodeGroups.length === 1) {\n        continue;\n      }\n      var _iterator118 = _createForOfIteratorHelper([].concat(nodeGroups).reverse()),\n        _step118;\n      try {\n        for (_iterator118.s(); !(_step118 = _iterator118.n()).done;) {\n          var group = _step118.value;\n          var clone = rule.clone({\n            nodes: []\n          });\n          clone.append(group);\n          rule.after(clone);\n        }\n      } catch (err) {\n        _iterator118.e(err);\n      } finally {\n        _iterator118.f();\n      }\n      rule.remove();\n    }\n  } catch (err) {\n    _iterator116.e(err);\n  } finally {\n    _iterator116.f();\n  }\n}\nfunction expandApplyAtRules2() {\n  return function (root) {\n    partitionRules(root);\n  };\n}\n\n// node_modules/tailwindcss/src/lib/detectNesting.js\nfunction isRoot(node) {\n  return node.type === 'root';\n}\nfunction isAtLayer(node) {\n  return node.type === 'atrule' && node.name === 'layer';\n}\nfunction detectNesting_default(_context) {\n  return function (root, result) {\n    var found = false;\n    root.walkAtRules('tailwind', function (node) {\n      if (found) return false;\n      if (node.parent && !(isRoot(node.parent) || isAtLayer(node.parent))) {\n        found = true;\n        node.warn(result, ['Nested @tailwind rules were detected, but are not supported.', \"Consider using a prefix to scope Tailwind's classes: https://tailwindcss.com/docs/configuration#prefix\", 'Alternatively, use the important selector strategy: https://tailwindcss.com/docs/configuration#selector-strategy'].join('\\n'));\n        return false;\n      }\n    });\n    root.walkRules(function (rule) {\n      if (found) return false;\n      rule.walkRules(function (nestedRule) {\n        found = true;\n        nestedRule.warn(result, ['Nested CSS was detected, but CSS nesting has not been configured correctly.', 'Please enable a CSS nesting plugin *before* Tailwind in your configuration.', 'See how here: https://tailwindcss.com/docs/using-with-preprocessors#nesting'].join('\\n'));\n        return false;\n      });\n    });\n  };\n}\n\n// node_modules/tailwindcss/src/processTailwindFeatures.js\nfunction processTailwindFeatures(setupContext) {\n  return /*#__PURE__*/function () {\n    var _ref318 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee4(root, result) {\n      var _normalizeTailwindDir, tailwindDirectives, applyDirectives, context;\n      return _regeneratorRuntime().wrap(function _callee4$(_context20) {\n        while (1) switch (_context20.prev = _context20.next) {\n          case 0:\n            _normalizeTailwindDir = normalizeTailwindDirectives(root), tailwindDirectives = _normalizeTailwindDir.tailwindDirectives, applyDirectives = _normalizeTailwindDir.applyDirectives;\n            detectNesting_default()(root, result);\n            expandApplyAtRules2()(root, result);\n            context = setupContext({\n              tailwindDirectives: tailwindDirectives,\n              applyDirectives: applyDirectives,\n              registerDependency: function registerDependency(dependency) {\n                result.messages.push(_objectSpread({\n                  plugin: 'tailwindcss',\n                  parent: result.opts.from\n                }, dependency));\n              },\n              createContext: function createContext(tailwindConfig, changedContent) {\n                return _createContext(tailwindConfig, changedContent, root);\n              }\n            })(root, result);\n            if (!(context.tailwindConfig.separator === '-')) {\n              _context20.next = 6;\n              break;\n            }\n            throw new Error(\"The '-' character cannot be used as a custom separator in JIT mode due to parsing ambiguity. Please use another character like '_' instead.\");\n          case 6:\n            issueFlagNotices(context.tailwindConfig);\n            _context20.next = 9;\n            return expandTailwindAtRules(context)(root, result);\n          case 9:\n            expandApplyAtRules2()(root, result);\n            expandApplyAtRules(context)(root, result);\n            evaluateTailwindFunctions_default(context)(root, result);\n            substituteScreenAtRules_default(context)(root, result);\n            resolveDefaultsAtRules(context)(root, result);\n            collapseAdjacentRules(context)(root, result);\n            collapseDuplicateDeclarations(context)(root, result);\n          case 16:\n          case \"end\":\n            return _context20.stop();\n        }\n      }, _callee4);\n    }));\n    return function (_x3, _x4) {\n      return _ref318.apply(this, arguments);\n    };\n  }();\n}\n\n// node_modules/tailwindcss/src/corePluginList.js\nvar corePluginList_default = ['preflight', 'container', 'accessibility', 'pointerEvents', 'visibility', 'position', 'inset', 'isolation', 'zIndex', 'order', 'gridColumn', 'gridColumnStart', 'gridColumnEnd', 'gridRow', 'gridRowStart', 'gridRowEnd', 'float', 'clear', 'margin', 'boxSizing', 'lineClamp', 'display', 'aspectRatio', 'size', 'height', 'maxHeight', 'minHeight', 'width', 'minWidth', 'maxWidth', 'flex', 'flexShrink', 'flexGrow', 'flexBasis', 'tableLayout', 'captionSide', 'borderCollapse', 'borderSpacing', 'transformOrigin', 'translate', 'rotate', 'skew', 'scale', 'transform', 'animation', 'cursor', 'touchAction', 'userSelect', 'resize', 'scrollSnapType', 'scrollSnapAlign', 'scrollSnapStop', 'scrollMargin', 'scrollPadding', 'listStylePosition', 'listStyleType', 'listStyleImage', 'appearance', 'columns', 'breakBefore', 'breakInside', 'breakAfter', 'gridAutoColumns', 'gridAutoFlow', 'gridAutoRows', 'gridTemplateColumns', 'gridTemplateRows', 'flexDirection', 'flexWrap', 'placeContent', 'placeItems', 'alignContent', 'alignItems', 'justifyContent', 'justifyItems', 'gap', 'space', 'divideWidth', 'divideStyle', 'divideColor', 'divideOpacity', 'placeSelf', 'alignSelf', 'justifySelf', 'overflow', 'overscrollBehavior', 'scrollBehavior', 'textOverflow', 'hyphens', 'whitespace', 'textWrap', 'wordBreak', 'borderRadius', 'borderWidth', 'borderStyle', 'borderColor', 'borderOpacity', 'backgroundColor', 'backgroundOpacity', 'backgroundImage', 'gradientColorStops', 'boxDecorationBreak', 'backgroundSize', 'backgroundAttachment', 'backgroundClip', 'backgroundPosition', 'backgroundRepeat', 'backgroundOrigin', 'fill', 'stroke', 'strokeWidth', 'objectFit', 'objectPosition', 'padding', 'textAlign', 'textIndent', 'verticalAlign', 'fontFamily', 'fontSize', 'fontWeight', 'textTransform', 'fontStyle', 'fontVariantNumeric', 'lineHeight', 'letterSpacing', 'textColor', 'textOpacity', 'textDecoration', 'textDecorationColor', 'textDecorationStyle', 'textDecorationThickness', 'textUnderlineOffset', 'fontSmoothing', 'placeholderColor', 'placeholderOpacity', 'caretColor', 'accentColor', 'opacity', 'backgroundBlendMode', 'mixBlendMode', 'boxShadow', 'boxShadowColor', 'outlineStyle', 'outlineWidth', 'outlineOffset', 'outlineColor', 'ringWidth', 'ringColor', 'ringOpacity', 'ringOffsetWidth', 'ringOffsetColor', 'blur', 'brightness', 'contrast', 'dropShadow', 'grayscale', 'hueRotate', 'invert', 'saturate', 'sepia', 'filter', 'backdropBlur', 'backdropBrightness', 'backdropContrast', 'backdropGrayscale', 'backdropHueRotate', 'backdropInvert', 'backdropOpacity', 'backdropSaturate', 'backdropSepia', 'backdropFilter', 'transitionProperty', 'transitionDelay', 'transitionDuration', 'transitionTimingFunction', 'willChange', 'content', 'forcedColorAdjust'];\n\n// node_modules/tailwindcss/src/util/configurePlugins.js\nfunction configurePlugins_default(pluginConfig, plugins) {\n  if (pluginConfig === void 0) {\n    return plugins;\n  }\n  var pluginNames = Array.isArray(pluginConfig) ? pluginConfig : _toConsumableArray(new Set(plugins.filter(function (pluginName) {\n    return pluginConfig !== false && pluginConfig[pluginName] !== false;\n  }).concat(Object.keys(pluginConfig).filter(function (pluginName) {\n    return pluginConfig[pluginName] !== false;\n  }))));\n  return pluginNames;\n}\n\n// node_modules/tailwindcss/src/public/colors.js\nfunction warn(_ref319) {\n  var version2 = _ref319.version,\n    from = _ref319.from,\n    to = _ref319.to;\n  log_default.warn(\"\".concat(from, \"-color-renamed\"), [\"As of Tailwind CSS \".concat(version2, \", `\").concat(from, \"` has been renamed to `\").concat(to, \"`.\"), 'Update your configuration file to silence this warning.']);\n}\nvar colors_default = {\n  inherit: 'inherit',\n  current: 'currentColor',\n  transparent: 'transparent',\n  black: '#000',\n  white: '#fff',\n  slate: {\n    50: '#f8fafc',\n    100: '#f1f5f9',\n    200: '#e2e8f0',\n    300: '#cbd5e1',\n    400: '#94a3b8',\n    500: '#64748b',\n    600: '#475569',\n    700: '#334155',\n    800: '#1e293b',\n    900: '#0f172a',\n    950: '#020617'\n  },\n  gray: {\n    50: '#f9fafb',\n    100: '#f3f4f6',\n    200: '#e5e7eb',\n    300: '#d1d5db',\n    400: '#9ca3af',\n    500: '#6b7280',\n    600: '#4b5563',\n    700: '#374151',\n    800: '#1f2937',\n    900: '#111827',\n    950: '#030712'\n  },\n  zinc: {\n    50: '#fafafa',\n    100: '#f4f4f5',\n    200: '#e4e4e7',\n    300: '#d4d4d8',\n    400: '#a1a1aa',\n    500: '#71717a',\n    600: '#52525b',\n    700: '#3f3f46',\n    800: '#27272a',\n    900: '#18181b',\n    950: '#09090b'\n  },\n  neutral: {\n    50: '#fafafa',\n    100: '#f5f5f5',\n    200: '#e5e5e5',\n    300: '#d4d4d4',\n    400: '#a3a3a3',\n    500: '#737373',\n    600: '#525252',\n    700: '#404040',\n    800: '#262626',\n    900: '#171717',\n    950: '#0a0a0a'\n  },\n  stone: {\n    50: '#fafaf9',\n    100: '#f5f5f4',\n    200: '#e7e5e4',\n    300: '#d6d3d1',\n    400: '#a8a29e',\n    500: '#78716c',\n    600: '#57534e',\n    700: '#44403c',\n    800: '#292524',\n    900: '#1c1917',\n    950: '#0c0a09'\n  },\n  red: {\n    50: '#fef2f2',\n    100: '#fee2e2',\n    200: '#fecaca',\n    300: '#fca5a5',\n    400: '#f87171',\n    500: '#ef4444',\n    600: '#dc2626',\n    700: '#b91c1c',\n    800: '#991b1b',\n    900: '#7f1d1d',\n    950: '#450a0a'\n  },\n  orange: {\n    50: '#fff7ed',\n    100: '#ffedd5',\n    200: '#fed7aa',\n    300: '#fdba74',\n    400: '#fb923c',\n    500: '#f97316',\n    600: '#ea580c',\n    700: '#c2410c',\n    800: '#9a3412',\n    900: '#7c2d12',\n    950: '#431407'\n  },\n  amber: {\n    50: '#fffbeb',\n    100: '#fef3c7',\n    200: '#fde68a',\n    300: '#fcd34d',\n    400: '#fbbf24',\n    500: '#f59e0b',\n    600: '#d97706',\n    700: '#b45309',\n    800: '#92400e',\n    900: '#78350f',\n    950: '#451a03'\n  },\n  yellow: {\n    50: '#fefce8',\n    100: '#fef9c3',\n    200: '#fef08a',\n    300: '#fde047',\n    400: '#facc15',\n    500: '#eab308',\n    600: '#ca8a04',\n    700: '#a16207',\n    800: '#854d0e',\n    900: '#713f12',\n    950: '#422006'\n  },\n  lime: {\n    50: '#f7fee7',\n    100: '#ecfccb',\n    200: '#d9f99d',\n    300: '#bef264',\n    400: '#a3e635',\n    500: '#84cc16',\n    600: '#65a30d',\n    700: '#4d7c0f',\n    800: '#3f6212',\n    900: '#365314',\n    950: '#1a2e05'\n  },\n  green: {\n    50: '#f0fdf4',\n    100: '#dcfce7',\n    200: '#bbf7d0',\n    300: '#86efac',\n    400: '#4ade80',\n    500: '#22c55e',\n    600: '#16a34a',\n    700: '#15803d',\n    800: '#166534',\n    900: '#14532d',\n    950: '#052e16'\n  },\n  emerald: {\n    50: '#ecfdf5',\n    100: '#d1fae5',\n    200: '#a7f3d0',\n    300: '#6ee7b7',\n    400: '#34d399',\n    500: '#10b981',\n    600: '#059669',\n    700: '#047857',\n    800: '#065f46',\n    900: '#064e3b',\n    950: '#022c22'\n  },\n  teal: {\n    50: '#f0fdfa',\n    100: '#ccfbf1',\n    200: '#99f6e4',\n    300: '#5eead4',\n    400: '#2dd4bf',\n    500: '#14b8a6',\n    600: '#0d9488',\n    700: '#0f766e',\n    800: '#115e59',\n    900: '#134e4a',\n    950: '#042f2e'\n  },\n  cyan: {\n    50: '#ecfeff',\n    100: '#cffafe',\n    200: '#a5f3fc',\n    300: '#67e8f9',\n    400: '#22d3ee',\n    500: '#06b6d4',\n    600: '#0891b2',\n    700: '#0e7490',\n    800: '#155e75',\n    900: '#164e63',\n    950: '#083344'\n  },\n  sky: {\n    50: '#f0f9ff',\n    100: '#e0f2fe',\n    200: '#bae6fd',\n    300: '#7dd3fc',\n    400: '#38bdf8',\n    500: '#0ea5e9',\n    600: '#0284c7',\n    700: '#0369a1',\n    800: '#075985',\n    900: '#0c4a6e',\n    950: '#082f49'\n  },\n  blue: {\n    50: '#eff6ff',\n    100: '#dbeafe',\n    200: '#bfdbfe',\n    300: '#93c5fd',\n    400: '#60a5fa',\n    500: '#3b82f6',\n    600: '#2563eb',\n    700: '#1d4ed8',\n    800: '#1e40af',\n    900: '#1e3a8a',\n    950: '#172554'\n  },\n  indigo: {\n    50: '#eef2ff',\n    100: '#e0e7ff',\n    200: '#c7d2fe',\n    300: '#a5b4fc',\n    400: '#818cf8',\n    500: '#6366f1',\n    600: '#4f46e5',\n    700: '#4338ca',\n    800: '#3730a3',\n    900: '#312e81',\n    950: '#1e1b4b'\n  },\n  violet: {\n    50: '#f5f3ff',\n    100: '#ede9fe',\n    200: '#ddd6fe',\n    300: '#c4b5fd',\n    400: '#a78bfa',\n    500: '#8b5cf6',\n    600: '#7c3aed',\n    700: '#6d28d9',\n    800: '#5b21b6',\n    900: '#4c1d95',\n    950: '#2e1065'\n  },\n  purple: {\n    50: '#faf5ff',\n    100: '#f3e8ff',\n    200: '#e9d5ff',\n    300: '#d8b4fe',\n    400: '#c084fc',\n    500: '#a855f7',\n    600: '#9333ea',\n    700: '#7e22ce',\n    800: '#6b21a8',\n    900: '#581c87',\n    950: '#3b0764'\n  },\n  fuchsia: {\n    50: '#fdf4ff',\n    100: '#fae8ff',\n    200: '#f5d0fe',\n    300: '#f0abfc',\n    400: '#e879f9',\n    500: '#d946ef',\n    600: '#c026d3',\n    700: '#a21caf',\n    800: '#86198f',\n    900: '#701a75',\n    950: '#4a044e'\n  },\n  pink: {\n    50: '#fdf2f8',\n    100: '#fce7f3',\n    200: '#fbcfe8',\n    300: '#f9a8d4',\n    400: '#f472b6',\n    500: '#ec4899',\n    600: '#db2777',\n    700: '#be185d',\n    800: '#9d174d',\n    900: '#831843',\n    950: '#500724'\n  },\n  rose: {\n    50: '#fff1f2',\n    100: '#ffe4e6',\n    200: '#fecdd3',\n    300: '#fda4af',\n    400: '#fb7185',\n    500: '#f43f5e',\n    600: '#e11d48',\n    700: '#be123c',\n    800: '#9f1239',\n    900: '#881337',\n    950: '#4c0519'\n  },\n  get lightBlue() {\n    warn({\n      version: 'v2.2',\n      from: 'lightBlue',\n      to: 'sky'\n    });\n    return this.sky;\n  },\n  get warmGray() {\n    warn({\n      version: 'v3.0',\n      from: 'warmGray',\n      to: 'stone'\n    });\n    return this.stone;\n  },\n  get trueGray() {\n    warn({\n      version: 'v3.0',\n      from: 'trueGray',\n      to: 'neutral'\n    });\n    return this.neutral;\n  },\n  get coolGray() {\n    warn({\n      version: 'v3.0',\n      from: 'coolGray',\n      to: 'gray'\n    });\n    return this.gray;\n  },\n  get blueGray() {\n    warn({\n      version: 'v3.0',\n      from: 'blueGray',\n      to: 'slate'\n    });\n    return this.slate;\n  }\n};\n\n// node_modules/tailwindcss/src/util/defaults.js\nfunction defaults2(target) {\n  for (var _len2 = arguments.length, sources = new Array(_len2 > 1 ? _len2 - 1 : 0), _key5 = 1; _key5 < _len2; _key5++) {\n    sources[_key5 - 1] = arguments[_key5];\n  }\n  for (var _i14 = 0, _sources = sources; _i14 < _sources.length; _i14++) {\n    var source = _sources[_i14];\n    for (var k in source) {\n      var _target$hasOwnPropert;\n      if (!(target !== null && target !== void 0 && (_target$hasOwnPropert = target.hasOwnProperty) !== null && _target$hasOwnPropert !== void 0 && _target$hasOwnPropert.call(target, k))) {\n        target[k] = source[k];\n      }\n    }\n    var _iterator119 = _createForOfIteratorHelper(Object.getOwnPropertySymbols(source)),\n      _step119;\n    try {\n      for (_iterator119.s(); !(_step119 = _iterator119.n()).done;) {\n        var _target$hasOwnPropert2;\n        var _k = _step119.value;\n        if (!(target !== null && target !== void 0 && (_target$hasOwnPropert2 = target.hasOwnProperty) !== null && _target$hasOwnPropert2 !== void 0 && _target$hasOwnPropert2.call(target, _k))) {\n          target[_k] = source[_k];\n        }\n      }\n    } catch (err) {\n      _iterator119.e(err);\n    } finally {\n      _iterator119.f();\n    }\n  }\n  return target;\n}\n\n// node_modules/tailwindcss/src/util/normalizeConfig.js\nfunction normalizeConfig(config) {\n  var valid = function () {\n    if (config.purge) {\n      return false;\n    }\n    if (!config.content) {\n      return false;\n    }\n    if (!Array.isArray(config.content) && !(_typeof(config.content) === 'object' && config.content !== null)) {\n      return false;\n    }\n    if (Array.isArray(config.content)) {\n      return config.content.every(function (path) {\n        if (typeof path === 'string') return true;\n        if (typeof (path === null || path === void 0 ? void 0 : path.raw) !== 'string') return false;\n        if (path !== null && path !== void 0 && path.extension && typeof (path === null || path === void 0 ? void 0 : path.extension) !== 'string') {\n          return false;\n        }\n        return true;\n      });\n    }\n    if (_typeof(config.content) === 'object' && config.content !== null) {\n      if (Object.keys(config.content).some(function (key) {\n        return !['files', 'relative', 'extract', 'transform'].includes(key);\n      })) {\n        return false;\n      }\n      if (Array.isArray(config.content.files)) {\n        if (!config.content.files.every(function (path) {\n          if (typeof path === 'string') return true;\n          if (typeof (path === null || path === void 0 ? void 0 : path.raw) !== 'string') return false;\n          if (path !== null && path !== void 0 && path.extension && typeof (path === null || path === void 0 ? void 0 : path.extension) !== 'string') {\n            return false;\n          }\n          return true;\n        })) {\n          return false;\n        }\n        if (_typeof(config.content.extract) === 'object') {\n          for (var _i15 = 0, _Object$values = Object.values(config.content.extract); _i15 < _Object$values.length; _i15++) {\n            var value2 = _Object$values[_i15];\n            if (typeof value2 !== 'function') {\n              return false;\n            }\n          }\n        } else if (!(config.content.extract === void 0 || typeof config.content.extract === 'function')) {\n          return false;\n        }\n        if (_typeof(config.content.transform) === 'object') {\n          for (var _i16 = 0, _Object$values2 = Object.values(config.content.transform); _i16 < _Object$values2.length; _i16++) {\n            var _value5 = _Object$values2[_i16];\n            if (typeof _value5 !== 'function') {\n              return false;\n            }\n          }\n        } else if (!(config.content.transform === void 0 || typeof config.content.transform === 'function')) {\n          return false;\n        }\n        if (typeof config.content.relative !== 'boolean' && typeof config.content.relative !== 'undefined') {\n          return false;\n        }\n      }\n      return true;\n    }\n    return false;\n  }();\n  if (!valid) {\n    log_default.warn('purge-deprecation', ['The `purge`/`content` options have changed in Tailwind CSS v3.0.', 'Update your configuration file to eliminate this warning.', 'https://tailwindcss.com/docs/upgrade-guide#configure-content-sources']);\n  }\n  config.safelist = function (_purge$options) {\n    var content = config.content,\n      purge = config.purge,\n      safelist = config.safelist;\n    if (Array.isArray(safelist)) return safelist;\n    if (Array.isArray(content === null || content === void 0 ? void 0 : content.safelist)) return content.safelist;\n    if (Array.isArray(purge === null || purge === void 0 ? void 0 : purge.safelist)) return purge.safelist;\n    if (Array.isArray(purge === null || purge === void 0 || (_purge$options = purge.options) === null || _purge$options === void 0 ? void 0 : _purge$options.safelist)) return purge.options.safelist;\n    return [];\n  }();\n  config.blocklist = function () {\n    var blocklist = config.blocklist;\n    if (Array.isArray(blocklist)) {\n      if (blocklist.every(function (item) {\n        return typeof item === 'string';\n      })) {\n        return blocklist;\n      }\n      log_default.warn('blocklist-invalid', ['The `blocklist` option must be an array of strings.', 'https://tailwindcss.com/docs/content-configuration#discarding-classes']);\n    }\n    return [];\n  }();\n  if (typeof config.prefix === 'function') {\n    log_default.warn('prefix-function', ['As of Tailwind CSS v3.0, `prefix` cannot be a function.', 'Update `prefix` in your configuration to be a string to eliminate this warning.', 'https://tailwindcss.com/docs/upgrade-guide#prefix-cannot-be-a-function']);\n    config.prefix = '';\n  } else {\n    var _config$prefix;\n    config.prefix = (_config$prefix = config.prefix) !== null && _config$prefix !== void 0 ? _config$prefix : '';\n  }\n  config.content = {\n    relative: function () {\n      var content = config.content;\n      if (content !== null && content !== void 0 && content.relative) {\n        return content.relative;\n      }\n      return flagEnabled(config, 'relativeContentPathsByDefault');\n    }(),\n    files: function () {\n      var content = config.content,\n        purge = config.purge;\n      if (Array.isArray(purge)) return purge;\n      if (Array.isArray(purge === null || purge === void 0 ? void 0 : purge.content)) return purge.content;\n      if (Array.isArray(content)) return content;\n      if (Array.isArray(content === null || content === void 0 ? void 0 : content.content)) return content.content;\n      if (Array.isArray(content === null || content === void 0 ? void 0 : content.files)) return content.files;\n      return [];\n    }(),\n    extract: function () {\n      var extract = function (_config$purge, _config$content, _config$purge2, _config$content2, _config$purge3, _config$content3) {\n        if ((_config$purge = config.purge) !== null && _config$purge !== void 0 && _config$purge.extract) return config.purge.extract;\n        if ((_config$content = config.content) !== null && _config$content !== void 0 && _config$content.extract) return config.content.extract;\n        if ((_config$purge2 = config.purge) !== null && _config$purge2 !== void 0 && (_config$purge2 = _config$purge2.extract) !== null && _config$purge2 !== void 0 && _config$purge2.DEFAULT) return config.purge.extract.DEFAULT;\n        if ((_config$content2 = config.content) !== null && _config$content2 !== void 0 && (_config$content2 = _config$content2.extract) !== null && _config$content2 !== void 0 && _config$content2.DEFAULT) return config.content.extract.DEFAULT;\n        if ((_config$purge3 = config.purge) !== null && _config$purge3 !== void 0 && (_config$purge3 = _config$purge3.options) !== null && _config$purge3 !== void 0 && _config$purge3.extractors) return config.purge.options.extractors;\n        if ((_config$content3 = config.content) !== null && _config$content3 !== void 0 && (_config$content3 = _config$content3.options) !== null && _config$content3 !== void 0 && _config$content3.extractors) return config.content.options.extractors;\n        return {};\n      }();\n      var extractors = {};\n      var defaultExtractor2 = function (_config$purge4, _config$content4) {\n        if ((_config$purge4 = config.purge) !== null && _config$purge4 !== void 0 && (_config$purge4 = _config$purge4.options) !== null && _config$purge4 !== void 0 && _config$purge4.defaultExtractor) {\n          return config.purge.options.defaultExtractor;\n        }\n        if ((_config$content4 = config.content) !== null && _config$content4 !== void 0 && (_config$content4 = _config$content4.options) !== null && _config$content4 !== void 0 && _config$content4.defaultExtractor) {\n          return config.content.options.defaultExtractor;\n        }\n        return void 0;\n      }();\n      if (defaultExtractor2 !== void 0) {\n        extractors.DEFAULT = defaultExtractor2;\n      }\n      if (typeof extract === 'function') {\n        extractors.DEFAULT = extract;\n      } else if (Array.isArray(extract)) {\n        var _iterator120 = _createForOfIteratorHelper(extract !== null && extract !== void 0 ? extract : []),\n          _step120;\n        try {\n          for (_iterator120.s(); !(_step120 = _iterator120.n()).done;) {\n            var _step120$value = _step120.value,\n              extensions = _step120$value.extensions,\n              extractor = _step120$value.extractor;\n            var _iterator121 = _createForOfIteratorHelper(extensions),\n              _step121;\n            try {\n              for (_iterator121.s(); !(_step121 = _iterator121.n()).done;) {\n                var extension = _step121.value;\n                extractors[extension] = extractor;\n              }\n            } catch (err) {\n              _iterator121.e(err);\n            } finally {\n              _iterator121.f();\n            }\n          }\n        } catch (err) {\n          _iterator120.e(err);\n        } finally {\n          _iterator120.f();\n        }\n      } else if (_typeof(extract) === 'object' && extract !== null) {\n        Object.assign(extractors, extract);\n      }\n      return extractors;\n    }(),\n    transform: function () {\n      var transform = function (_config$purge5, _config$content5, _config$purge6, _config$content6) {\n        if ((_config$purge5 = config.purge) !== null && _config$purge5 !== void 0 && _config$purge5.transform) return config.purge.transform;\n        if ((_config$content5 = config.content) !== null && _config$content5 !== void 0 && _config$content5.transform) return config.content.transform;\n        if ((_config$purge6 = config.purge) !== null && _config$purge6 !== void 0 && (_config$purge6 = _config$purge6.transform) !== null && _config$purge6 !== void 0 && _config$purge6.DEFAULT) return config.purge.transform.DEFAULT;\n        if ((_config$content6 = config.content) !== null && _config$content6 !== void 0 && (_config$content6 = _config$content6.transform) !== null && _config$content6 !== void 0 && _config$content6.DEFAULT) return config.content.transform.DEFAULT;\n        return {};\n      }();\n      var transformers = {};\n      if (typeof transform === 'function') {\n        transformers.DEFAULT = transform;\n      }\n      if (_typeof(transform) === 'object' && transform !== null) {\n        Object.assign(transformers, transform);\n      }\n      return transformers;\n    }()\n  };\n  var _iterator122 = _createForOfIteratorHelper(config.content.files),\n    _step122;\n  try {\n    for (_iterator122.s(); !(_step122 = _iterator122.n()).done;) {\n      var file = _step122.value;\n      if (typeof file === 'string' && /{([^,]*?)}/g.test(file)) {\n        log_default.warn('invalid-glob-braces', [\"The glob pattern \".concat(dim(file), \" in your Tailwind CSS configuration is invalid.\"), \"Update it to \".concat(dim(file.replace(/{([^,]*?)}/g, '$1')), \" to silence this warning.\")]);\n        break;\n      }\n    }\n  } catch (err) {\n    _iterator122.e(err);\n  } finally {\n    _iterator122.f();\n  }\n  return config;\n}\n\n// node_modules/tailwindcss/src/util/cloneDeep.js\nfunction cloneDeep(value2) {\n  if (Array.isArray(value2)) {\n    return value2.map(function (child) {\n      return cloneDeep(child);\n    });\n  }\n  if (_typeof(value2) === 'object' && value2 !== null) {\n    return Object.fromEntries(Object.entries(value2).map(function (_ref320) {\n      var _ref321 = _slicedToArray(_ref320, 2),\n        k = _ref321[0],\n        v = _ref321[1];\n      return [k, cloneDeep(v)];\n    }));\n  }\n  return value2;\n}\n\n// node_modules/tailwindcss/src/util/resolveConfig.js\nfunction isFunction(input) {\n  return typeof input === 'function';\n}\nfunction mergeWith(target) {\n  for (var _len3 = arguments.length, sources = new Array(_len3 > 1 ? _len3 - 1 : 0), _key6 = 1; _key6 < _len3; _key6++) {\n    sources[_key6 - 1] = arguments[_key6];\n  }\n  var customizer = sources.pop();\n  for (var _i17 = 0, _sources2 = sources; _i17 < _sources2.length; _i17++) {\n    var source = _sources2[_i17];\n    for (var k in source) {\n      var merged = customizer(target[k], source[k]);\n      if (merged === void 0) {\n        if (isPlainObject(target[k]) && isPlainObject(source[k])) {\n          target[k] = mergeWith({}, target[k], source[k], customizer);\n        } else {\n          target[k] = source[k];\n        }\n      } else {\n        target[k] = merged;\n      }\n    }\n  }\n  return target;\n}\nvar configUtils = {\n  colors: colors_default,\n  negative: function negative(scale) {\n    return Object.keys(scale).filter(function (key) {\n      return scale[key] !== '0';\n    }).reduce(function (negativeScale, key) {\n      var negativeValue = negateValue(scale[key]);\n      if (negativeValue !== void 0) {\n        negativeScale[\"-\".concat(key)] = negativeValue;\n      }\n      return negativeScale;\n    }, {});\n  },\n  breakpoints: function breakpoints(screens) {\n    return Object.keys(screens).filter(function (key) {\n      return typeof screens[key] === 'string';\n    }).reduce(function (breakpoints, key) {\n      return _objectSpread(_objectSpread({}, breakpoints), {}, _defineProperty({}, \"screen-\".concat(key), screens[key]));\n    }, {});\n  }\n};\nfunction value(valueToResolve) {\n  for (var _len4 = arguments.length, args = new Array(_len4 > 1 ? _len4 - 1 : 0), _key7 = 1; _key7 < _len4; _key7++) {\n    args[_key7 - 1] = arguments[_key7];\n  }\n  return isFunction(valueToResolve) ? valueToResolve.apply(void 0, args) : valueToResolve;\n}\nfunction collectExtends(items) {\n  return items.reduce(function (merged, _ref322) {\n    var extend = _ref322.extend;\n    return mergeWith(merged, extend, function (mergedValue, extendValue) {\n      if (mergedValue === void 0) {\n        return [extendValue];\n      }\n      if (Array.isArray(mergedValue)) {\n        return [extendValue].concat(_toConsumableArray(mergedValue));\n      }\n      return [extendValue, mergedValue];\n    });\n  }, {});\n}\nfunction mergeThemes(themes) {\n  return _objectSpread(_objectSpread({}, themes.reduce(function (merged, theme) {\n    return defaults2(merged, theme);\n  }, {})), {}, {\n    extend: collectExtends(themes)\n  });\n}\nfunction mergeExtensionCustomizer(merged, value2) {\n  if (Array.isArray(merged) && isPlainObject(merged[0])) {\n    return merged.concat(value2);\n  }\n  if (Array.isArray(value2) && isPlainObject(value2[0]) && isPlainObject(merged)) {\n    return [merged].concat(_toConsumableArray(value2));\n  }\n  if (Array.isArray(value2)) {\n    return value2;\n  }\n  return void 0;\n}\nfunction mergeExtensions(_ref323) {\n  var extend = _ref323.extend,\n    theme = _objectWithoutProperties(_ref323, _excluded7);\n  return mergeWith(theme, extend, function (themeValue, extensions) {\n    if (!isFunction(themeValue) && !extensions.some(isFunction)) {\n      return mergeWith.apply(void 0, [{}, themeValue].concat(_toConsumableArray(extensions), [mergeExtensionCustomizer]));\n    }\n    return function (resolveThemePath, utils) {\n      return mergeWith.apply(void 0, [{}].concat(_toConsumableArray([themeValue].concat(_toConsumableArray(extensions)).map(function (e) {\n        return value(e, resolveThemePath, utils);\n      })), [mergeExtensionCustomizer]));\n    };\n  });\n}\nfunction toPaths2(key) {\n  var path, pattern2, matches, _matches2, prefix3, alpha, newPath;\n  return _regeneratorRuntime().wrap(function toPaths2$(_context21) {\n    while (1) switch (_context21.prev = _context21.next) {\n      case 0:\n        path = toPath(key);\n        if (!(path.length === 0)) {\n          _context21.next = 3;\n          break;\n        }\n        return _context21.abrupt(\"return\");\n      case 3:\n        _context21.next = 5;\n        return path;\n      case 5:\n        if (!Array.isArray(key)) {\n          _context21.next = 7;\n          break;\n        }\n        return _context21.abrupt(\"return\");\n      case 7:\n        pattern2 = /^(.*?)\\s*\\/\\s*([^/]+)$/;\n        matches = key.match(pattern2);\n        if (!(matches !== null)) {\n          _context21.next = 15;\n          break;\n        }\n        _matches2 = _slicedToArray(matches, 3), prefix3 = _matches2[1], alpha = _matches2[2];\n        newPath = toPath(prefix3);\n        newPath.alpha = alpha;\n        _context21.next = 15;\n        return newPath;\n      case 15:\n      case \"end\":\n        return _context21.stop();\n    }\n  }, _marked9);\n}\nfunction resolveFunctionKeys(object) {\n  var _resolvePath2 = function resolvePath2(key, defaultValue) {\n    var _iterator123 = _createForOfIteratorHelper(toPaths2(key)),\n      _step123;\n    try {\n      for (_iterator123.s(); !(_step123 = _iterator123.n()).done;) {\n        var path = _step123.value;\n        var index = 0;\n        var val = object;\n        while (val !== void 0 && val !== null && index < path.length) {\n          val = val[path[index++]];\n          var shouldResolveAsFn = isFunction(val) && (path.alpha === void 0 || index <= path.length - 1);\n          val = shouldResolveAsFn ? val(_resolvePath2, configUtils) : val;\n        }\n        if (val !== void 0) {\n          if (path.alpha !== void 0) {\n            var normalized = parseColorFormat(val);\n            return withAlphaValue(normalized, path.alpha, toColorValue(normalized));\n          }\n          if (isPlainObject(val)) {\n            return cloneDeep(val);\n          }\n          return val;\n        }\n      }\n    } catch (err) {\n      _iterator123.e(err);\n    } finally {\n      _iterator123.f();\n    }\n    return defaultValue;\n  };\n  Object.assign(_resolvePath2, _objectSpread({\n    theme: _resolvePath2\n  }, configUtils));\n  return Object.keys(object).reduce(function (resolved, key) {\n    resolved[key] = isFunction(object[key]) ? object[key](_resolvePath2, configUtils) : object[key];\n    return resolved;\n  }, {});\n}\nfunction extractPluginConfigs(configs) {\n  var allConfigs = [];\n  configs.forEach(function (config) {\n    var _config$plugins;\n    allConfigs = [].concat(_toConsumableArray(allConfigs), [config]);\n    var plugins = (_config$plugins = config === null || config === void 0 ? void 0 : config.plugins) !== null && _config$plugins !== void 0 ? _config$plugins : [];\n    if (plugins.length === 0) {\n      return;\n    }\n    plugins.forEach(function (plugin) {\n      var _plugin$config, _plugin;\n      if (plugin.__isOptionsFunction) {\n        plugin = plugin();\n      }\n      allConfigs = [].concat(_toConsumableArray(allConfigs), _toConsumableArray(extractPluginConfigs([(_plugin$config = (_plugin = plugin) === null || _plugin === void 0 ? void 0 : _plugin.config) !== null && _plugin$config !== void 0 ? _plugin$config : {}])));\n    });\n  });\n  return allConfigs;\n}\nfunction resolveCorePlugins(corePluginConfigs) {\n  var result = _toConsumableArray(corePluginConfigs).reduceRight(function (resolved, corePluginConfig) {\n    if (isFunction(corePluginConfig)) {\n      return corePluginConfig({\n        corePlugins: resolved\n      });\n    }\n    return configurePlugins_default(corePluginConfig, resolved);\n  }, corePluginList_default);\n  return result;\n}\nfunction resolvePluginLists(pluginLists) {\n  var result = _toConsumableArray(pluginLists).reduceRight(function (resolved, pluginList) {\n    return [].concat(_toConsumableArray(resolved), _toConsumableArray(pluginList));\n  }, []);\n  return result;\n}\nfunction resolveConfig(configs) {\n  var allConfigs = [].concat(_toConsumableArray(extractPluginConfigs(configs)), [{\n    prefix: '',\n    important: false,\n    separator: ':'\n  }]);\n  return normalizeConfig(defaults2.apply(void 0, [{\n    theme: resolveFunctionKeys(mergeExtensions(mergeThemes(allConfigs.map(function (t) {\n      var _t$theme;\n      return (_t$theme = t === null || t === void 0 ? void 0 : t.theme) !== null && _t$theme !== void 0 ? _t$theme : {};\n    })))),\n    corePlugins: resolveCorePlugins(allConfigs.map(function (c) {\n      return c.corePlugins;\n    })),\n    plugins: resolvePluginLists(configs.map(function (c) {\n      var _c$plugins;\n      return (_c$plugins = c === null || c === void 0 ? void 0 : c.plugins) !== null && _c$plugins !== void 0 ? _c$plugins : [];\n    }))\n  }].concat(_toConsumableArray(allConfigs))));\n}\n\n// node_modules/tailwindcss/src/util/getAllConfigs.js\nvar import_config_full = __toESM(require_config_full());\nfunction getAllConfigs(config) {\n  var _config$presets;\n  var configs = ((_config$presets = config === null || config === void 0 ? void 0 : config.presets) !== null && _config$presets !== void 0 ? _config$presets : [import_config_full[\"default\"]]).slice().reverse().flatMap(function (preset) {\n    return getAllConfigs(preset instanceof Function ? preset() : preset);\n  });\n  var features = {\n    respectDefaultRingColorOpacity: {\n      theme: {\n        ringColor: function ringColor(_ref324) {\n          var theme = _ref324.theme;\n          return _objectSpread({\n            DEFAULT: '#3b82f67f'\n          }, theme('colors'));\n        }\n      }\n    },\n    disableColorOpacityUtilitiesByDefault: {\n      corePlugins: {\n        backgroundOpacity: false,\n        borderOpacity: false,\n        divideOpacity: false,\n        placeholderOpacity: false,\n        ringOpacity: false,\n        textOpacity: false\n      }\n    }\n  };\n  var experimentals = Object.keys(features).filter(function (feature) {\n    return flagEnabled(config, feature);\n  }).map(function (feature) {\n    return features[feature];\n  });\n  return [config].concat(_toConsumableArray(experimentals), _toConsumableArray(configs));\n}\n\n// node_modules/tailwindcss/src/public/resolve-config.js\nfunction resolveConfig2() {\n  for (var _len5 = arguments.length, configs = new Array(_len5), _key8 = 0; _key8 < _len5; _key8++) {\n    configs[_key8] = arguments[_key8];\n  }\n  var _getAllConfigs = getAllConfigs(configs[0]),\n    _getAllConfigs2 = _toArray(_getAllConfigs),\n    defaultConfigs = _getAllConfigs2.slice(1);\n  return resolveConfig([].concat(configs, _toConsumableArray(defaultConfigs)));\n}\n\n// src/index.ts\nvar csso = __webpack_require__(55360);\nvar createTailwindcss = function createTailwindcss() {\n  var _ref325 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n    tailwindConfig = _ref325.tailwindConfig;\n  var currentTailwindConfig = tailwindConfig;\n  return {\n    setTailwindConfig: function setTailwindConfig(newTailwindConfig) {\n      currentTailwindConfig = newTailwindConfig;\n    },\n    generateStylesFromContent: function generateStylesFromContent(css, content) {\n      return _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee5() {\n        var tailwindcssPlugin, processor, result, minifiedCSS;\n        return _regeneratorRuntime().wrap(function _callee5$(_context22) {\n          while (1) switch (_context22.prev = _context22.next) {\n            case 0:\n              tailwindcssPlugin = createTailwindcssPlugin({\n                tailwindConfig: currentTailwindConfig,\n                content: content\n              });\n              processor = lib_postcss([tailwindcssPlugin, (postcss_nested_default())]);\n              _context22.next = 4;\n              return processor.process(css, {\n                from: void 0\n              });\n            case 4:\n              result = _context22.sent;\n              // Minify CSS using CSSO\n              minifiedCSS = csso.minify(result.css).css;\n              return _context22.abrupt(\"return\", minifiedCSS);\n            case 7:\n            case \"end\":\n              return _context22.stop();\n          }\n        }, _callee5);\n      }))();\n    }\n  };\n};\nvar createTailwindcssPlugin = function createTailwindcssPlugin(_ref326) {\n  var tailwindConfig = _ref326.tailwindConfig,\n    contentCollection = _ref326.content;\n  var config = resolveConfig2(tailwindConfig !== null && tailwindConfig !== void 0 ? tailwindConfig : {});\n  var tailwindcssPlugin = processTailwindFeatures(function (processOptions) {\n    return function () {\n      return processOptions.createContext(config, contentCollection.map(function (content) {\n        return typeof content === 'string' ? {\n          content: content\n        } : content;\n      }));\n    };\n  });\n  return tailwindcssPlugin;\n};\nvar jitBrowserTailwindcss = function jitBrowserTailwindcss(tailwindMainCss, jitContent) {\n  var userTailwindConfig = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  var tailwindcss = createTailwindcss({\n    tailwindConfig: userTailwindConfig\n  });\n  return tailwindcss.generateStylesFromContent(tailwindMainCss, [jitContent]);\n};\nvar src_default = jitBrowserTailwindcss;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///1650\n")},69596:(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";eval("var __webpack_unused_export__;\n\n\n__webpack_unused_export__ = ({\n  value: true\n});\n// needed for purging\nconst module_esm_js_1 = __webpack_require__(1650);\nconst tw_base_vars_1 = __webpack_require__(90430);\nif (window.self === window.top) {\n  blockbite.createTailwindcss = module_esm_js_1.createTailwindcss;\n  // attach tw css variables to blockbite\n  blockbite.tailwindCssVars = tw_base_vars_1.tw_base_vars;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNjk1OTYuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUE7QUFDQSxNQUFBQSxlQUFBLEdBQUFDLG1CQUFBO0FBQ0EsTUFBQUMsY0FBQSxHQUFBRCxtQkFBQTtBQUVBLElBQUlFLE1BQU0sQ0FBQ0MsSUFBSSxLQUFLRCxNQUFNLENBQUNFLEdBQUcsRUFBRTtFQUM5QkMsU0FBUyxDQUFDQyxpQkFBaUIsR0FBR1AsZUFBQSxDQUFBTyxpQkFBaUI7RUFDL0M7RUFDQUQsU0FBUyxDQUFDRSxlQUFlLEdBQUdOLGNBQUEsQ0FBQU8sWUFBWTtBQUMxQyIsInNvdXJjZXMiOlsid2VicGFjazovL2Jsb2NrYml0ZS8uL3NyYy9jc3MtcGFyc2VyL2luZGV4LnRzPzQ3MjkiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gbmVlZGVkIGZvciBwdXJnaW5nXG5pbXBvcnQgeyBjcmVhdGVUYWlsd2luZGNzcyB9IGZyb20gJy4vbW9kdWxlLmVzbS5qcyc7XG5pbXBvcnQgeyB0d19iYXNlX3ZhcnMgfSBmcm9tICcuL3R3X2Jhc2UtdmFycyc7XG5cbmlmICh3aW5kb3cuc2VsZiA9PT0gd2luZG93LnRvcCkge1xuICBibG9ja2JpdGUuY3JlYXRlVGFpbHdpbmRjc3MgPSBjcmVhdGVUYWlsd2luZGNzcztcbiAgLy8gYXR0YWNoIHR3IGNzcyB2YXJpYWJsZXMgdG8gYmxvY2tiaXRlXG4gIGJsb2NrYml0ZS50YWlsd2luZENzc1ZhcnMgPSB0d19iYXNlX3ZhcnM7XG59XG4iXSwibmFtZXMiOlsibW9kdWxlX2VzbV9qc18xIiwicmVxdWlyZSIsInR3X2Jhc2VfdmFyc18xIiwid2luZG93Iiwic2VsZiIsInRvcCIsImJsb2NrYml0ZSIsImNyZWF0ZVRhaWx3aW5kY3NzIiwidGFpbHdpbmRDc3NWYXJzIiwidHdfYmFzZV92YXJzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///69596\n")},90430:(__unused_webpack_module,exports)=>{"use strict";eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.tw_base_vars = void 0;\nexports.tw_base_vars = `\n::after,\n::before {\n  box-sizing: border-box;\n  border-width: 0;\n  border-style: solid;\n  border-color: #e5e7eb;\n}\n::after,\n::before {\n  --tw-content: '';\n}\n*,\n::before,\n::after {\n  --tw-border-spacing-x: 0;\n  --tw-border-spacing-y: 0;\n  --tw-translate-x: 0;\n  --tw-translate-y: 0;\n  --tw-rotate: 0;\n  --tw-skew-x: 0;\n  --tw-skew-y: 0;\n  --tw-scale-x: 1;\n  --tw-scale-y: 1;\n  --tw-pan-x: ;\n  --tw-pan-y: ;\n  --tw-pinch-zoom: ;\n  --tw-scroll-snap-strictness: proximity;\n  --tw-gradient-from-position: ;\n  --tw-gradient-via-position: ;\n  --tw-gradient-to-position: ;\n  --tw-ordinal: ;\n  --tw-slashed-zero: ;\n  --tw-numeric-figure: ;\n  --tw-numeric-spacing: ;\n  --tw-numeric-fraction: ;\n  --tw-ring-inset: ;\n  --tw-ring-offset-width: 0px;\n  --tw-ring-offset-color: #fff;\n  --tw-ring-color: rgb(59 130 246 / 0.5);\n  --tw-ring-offset-shadow: 0 0 #0000;\n  --tw-ring-shadow: 0 0 #0000;\n  --tw-shadow: 0 0 #0000;\n  --tw-shadow-colored: 0 0 #0000;\n  --tw-blur: ;\n  --tw-brightness: ;\n  --tw-contrast: ;\n  --tw-grayscale: ;\n  --tw-hue-rotate: ;\n  --tw-invert: ;\n  --tw-saturate: ;\n  --tw-sepia: ;\n  --tw-drop-shadow: ;\n  --tw-backdrop-blur: ;\n  --tw-backdrop-brightness: ;\n  --tw-backdrop-contrast: ;\n  --tw-backdrop-grayscale: ;\n  --tw-backdrop-hue-rotate: ;\n  --tw-backdrop-invert: ;\n  --tw-backdrop-opacity: ;\n  --tw-backdrop-saturate: ;\n  --tw-backdrop-sepia: ;\n  --tw-contain-size: ;\n  --tw-contain-layout: ;\n  --tw-contain-paint: ;\n  --tw-contain-style: ;\n}\n::backdrop {\n  --tw-border-spacing-x: 0;\n  --tw-border-spacing-y: 0;\n  --tw-translate-x: 0;\n  --tw-translate-y: 0;\n  --tw-rotate: 0;\n  --tw-skew-x: 0;\n  --tw-skew-y: 0;\n  --tw-scale-x: 1;\n  --tw-scale-y: 1;\n  --tw-pan-x: ;\n  --tw-pan-y: ;\n  --tw-pinch-zoom: ;\n  --tw-scroll-snap-strictness: proximity;\n  --tw-gradient-from-position: ;\n  --tw-gradient-via-position: ;\n  --tw-gradient-to-position: ;\n  --tw-ordinal: ;\n  --tw-slashed-zero: ;\n  --tw-numeric-figure: ;\n  --tw-numeric-spacing: ;\n  --tw-numeric-fraction: ;\n  --tw-ring-inset: ;\n  --tw-ring-offset-width: 0px;\n  --tw-ring-offset-color: #fff;\n  --tw-ring-color: rgb(59 130 246 / 0.5);\n  --tw-ring-offset-shadow: 0 0 #0000;\n  --tw-ring-shadow: 0 0 #0000;\n  --tw-shadow: 0 0 #0000;\n  --tw-shadow-colored: 0 0 #0000;\n  --tw-blur: ;\n  --tw-brightness: ;\n  --tw-contrast: ;\n  --tw-grayscale: ;\n  --tw-hue-rotate: ;\n  --tw-invert: ;\n  --tw-saturate: ;\n  --tw-sepia: ;\n  --tw-drop-shadow: ;\n  --tw-backdrop-blur: ;\n  --tw-backdrop-brightness: ;\n  --tw-backdrop-contrast: ;\n  --tw-backdrop-grayscale: ;\n  --tw-backdrop-hue-rotate: ;\n  --tw-backdrop-invert: ;\n  --tw-backdrop-opacity: ;\n  --tw-backdrop-saturate: ;\n  --tw-backdrop-sepia: ;\n  --tw-contain-size: ;\n  --tw-contain-layout: ;\n  --tw-contain-paint: ;\n  --tw-contain-style: ;\n}\n`;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOTA0MzAuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQWFBLG9CQUFZLEdBQUc7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztDQXdIM0IiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ibG9ja2JpdGUvLi9zcmMvY3NzLXBhcnNlci90d19iYXNlLXZhcnMudHM/YWNkMCJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgY29uc3QgdHdfYmFzZV92YXJzID0gYFxuOjphZnRlcixcbjo6YmVmb3JlIHtcbiAgYm94LXNpemluZzogYm9yZGVyLWJveDtcbiAgYm9yZGVyLXdpZHRoOiAwO1xuICBib3JkZXItc3R5bGU6IHNvbGlkO1xuICBib3JkZXItY29sb3I6ICNlNWU3ZWI7XG59XG46OmFmdGVyLFxuOjpiZWZvcmUge1xuICAtLXR3LWNvbnRlbnQ6ICcnO1xufVxuKixcbjo6YmVmb3JlLFxuOjphZnRlciB7XG4gIC0tdHctYm9yZGVyLXNwYWNpbmcteDogMDtcbiAgLS10dy1ib3JkZXItc3BhY2luZy15OiAwO1xuICAtLXR3LXRyYW5zbGF0ZS14OiAwO1xuICAtLXR3LXRyYW5zbGF0ZS15OiAwO1xuICAtLXR3LXJvdGF0ZTogMDtcbiAgLS10dy1za2V3LXg6IDA7XG4gIC0tdHctc2tldy15OiAwO1xuICAtLXR3LXNjYWxlLXg6IDE7XG4gIC0tdHctc2NhbGUteTogMTtcbiAgLS10dy1wYW4teDogO1xuICAtLXR3LXBhbi15OiA7XG4gIC0tdHctcGluY2gtem9vbTogO1xuICAtLXR3LXNjcm9sbC1zbmFwLXN0cmljdG5lc3M6IHByb3hpbWl0eTtcbiAgLS10dy1ncmFkaWVudC1mcm9tLXBvc2l0aW9uOiA7XG4gIC0tdHctZ3JhZGllbnQtdmlhLXBvc2l0aW9uOiA7XG4gIC0tdHctZ3JhZGllbnQtdG8tcG9zaXRpb246IDtcbiAgLS10dy1vcmRpbmFsOiA7XG4gIC0tdHctc2xhc2hlZC16ZXJvOiA7XG4gIC0tdHctbnVtZXJpYy1maWd1cmU6IDtcbiAgLS10dy1udW1lcmljLXNwYWNpbmc6IDtcbiAgLS10dy1udW1lcmljLWZyYWN0aW9uOiA7XG4gIC0tdHctcmluZy1pbnNldDogO1xuICAtLXR3LXJpbmctb2Zmc2V0LXdpZHRoOiAwcHg7XG4gIC0tdHctcmluZy1vZmZzZXQtY29sb3I6ICNmZmY7XG4gIC0tdHctcmluZy1jb2xvcjogcmdiKDU5IDEzMCAyNDYgLyAwLjUpO1xuICAtLXR3LXJpbmctb2Zmc2V0LXNoYWRvdzogMCAwICMwMDAwO1xuICAtLXR3LXJpbmctc2hhZG93OiAwIDAgIzAwMDA7XG4gIC0tdHctc2hhZG93OiAwIDAgIzAwMDA7XG4gIC0tdHctc2hhZG93LWNvbG9yZWQ6IDAgMCAjMDAwMDtcbiAgLS10dy1ibHVyOiA7XG4gIC0tdHctYnJpZ2h0bmVzczogO1xuICAtLXR3LWNvbnRyYXN0OiA7XG4gIC0tdHctZ3JheXNjYWxlOiA7XG4gIC0tdHctaHVlLXJvdGF0ZTogO1xuICAtLXR3LWludmVydDogO1xuICAtLXR3LXNhdHVyYXRlOiA7XG4gIC0tdHctc2VwaWE6IDtcbiAgLS10dy1kcm9wLXNoYWRvdzogO1xuICAtLXR3LWJhY2tkcm9wLWJsdXI6IDtcbiAgLS10dy1iYWNrZHJvcC1icmlnaHRuZXNzOiA7XG4gIC0tdHctYmFja2Ryb3AtY29udHJhc3Q6IDtcbiAgLS10dy1iYWNrZHJvcC1ncmF5c2NhbGU6IDtcbiAgLS10dy1iYWNrZHJvcC1odWUtcm90YXRlOiA7XG4gIC0tdHctYmFja2Ryb3AtaW52ZXJ0OiA7XG4gIC0tdHctYmFja2Ryb3Atb3BhY2l0eTogO1xuICAtLXR3LWJhY2tkcm9wLXNhdHVyYXRlOiA7XG4gIC0tdHctYmFja2Ryb3Atc2VwaWE6IDtcbiAgLS10dy1jb250YWluLXNpemU6IDtcbiAgLS10dy1jb250YWluLWxheW91dDogO1xuICAtLXR3LWNvbnRhaW4tcGFpbnQ6IDtcbiAgLS10dy1jb250YWluLXN0eWxlOiA7XG59XG46OmJhY2tkcm9wIHtcbiAgLS10dy1ib3JkZXItc3BhY2luZy14OiAwO1xuICAtLXR3LWJvcmRlci1zcGFjaW5nLXk6IDA7XG4gIC0tdHctdHJhbnNsYXRlLXg6IDA7XG4gIC0tdHctdHJhbnNsYXRlLXk6IDA7XG4gIC0tdHctcm90YXRlOiAwO1xuICAtLXR3LXNrZXcteDogMDtcbiAgLS10dy1za2V3LXk6IDA7XG4gIC0tdHctc2NhbGUteDogMTtcbiAgLS10dy1zY2FsZS15OiAxO1xuICAtLXR3LXBhbi14OiA7XG4gIC0tdHctcGFuLXk6IDtcbiAgLS10dy1waW5jaC16b29tOiA7XG4gIC0tdHctc2Nyb2xsLXNuYXAtc3RyaWN0bmVzczogcHJveGltaXR5O1xuICAtLXR3LWdyYWRpZW50LWZyb20tcG9zaXRpb246IDtcbiAgLS10dy1ncmFkaWVudC12aWEtcG9zaXRpb246IDtcbiAgLS10dy1ncmFkaWVudC10by1wb3NpdGlvbjogO1xuICAtLXR3LW9yZGluYWw6IDtcbiAgLS10dy1zbGFzaGVkLXplcm86IDtcbiAgLS10dy1udW1lcmljLWZpZ3VyZTogO1xuICAtLXR3LW51bWVyaWMtc3BhY2luZzogO1xuICAtLXR3LW51bWVyaWMtZnJhY3Rpb246IDtcbiAgLS10dy1yaW5nLWluc2V0OiA7XG4gIC0tdHctcmluZy1vZmZzZXQtd2lkdGg6IDBweDtcbiAgLS10dy1yaW5nLW9mZnNldC1jb2xvcjogI2ZmZjtcbiAgLS10dy1yaW5nLWNvbG9yOiByZ2IoNTkgMTMwIDI0NiAvIDAuNSk7XG4gIC0tdHctcmluZy1vZmZzZXQtc2hhZG93OiAwIDAgIzAwMDA7XG4gIC0tdHctcmluZy1zaGFkb3c6IDAgMCAjMDAwMDtcbiAgLS10dy1zaGFkb3c6IDAgMCAjMDAwMDtcbiAgLS10dy1zaGFkb3ctY29sb3JlZDogMCAwICMwMDAwO1xuICAtLXR3LWJsdXI6IDtcbiAgLS10dy1icmlnaHRuZXNzOiA7XG4gIC0tdHctY29udHJhc3Q6IDtcbiAgLS10dy1ncmF5c2NhbGU6IDtcbiAgLS10dy1odWUtcm90YXRlOiA7XG4gIC0tdHctaW52ZXJ0OiA7XG4gIC0tdHctc2F0dXJhdGU6IDtcbiAgLS10dy1zZXBpYTogO1xuICAtLXR3LWRyb3Atc2hhZG93OiA7XG4gIC0tdHctYmFja2Ryb3AtYmx1cjogO1xuICAtLXR3LWJhY2tkcm9wLWJyaWdodG5lc3M6IDtcbiAgLS10dy1iYWNrZHJvcC1jb250cmFzdDogO1xuICAtLXR3LWJhY2tkcm9wLWdyYXlzY2FsZTogO1xuICAtLXR3LWJhY2tkcm9wLWh1ZS1yb3RhdGU6IDtcbiAgLS10dy1iYWNrZHJvcC1pbnZlcnQ6IDtcbiAgLS10dy1iYWNrZHJvcC1vcGFjaXR5OiA7XG4gIC0tdHctYmFja2Ryb3Atc2F0dXJhdGU6IDtcbiAgLS10dy1iYWNrZHJvcC1zZXBpYTogO1xuICAtLXR3LWNvbnRhaW4tc2l6ZTogO1xuICAtLXR3LWNvbnRhaW4tbGF5b3V0OiA7XG4gIC0tdHctY29udGFpbi1wYWludDogO1xuICAtLXR3LWNvbnRhaW4tc3R5bGU6IDtcbn1cbmA7XG4iXSwibmFtZXMiOlsiZXhwb3J0cyIsInR3X2Jhc2VfdmFycyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///90430\n")},29049:module=>{"use strict";eval('\n\nvar pattern = /-(\\w|$)/g;\n\nvar callback = function callback(dashChar, char) {\n\treturn char.toUpperCase();\n};\n\nvar camelCaseCSS = function camelCaseCSS(property) {\n\tproperty = property.toLowerCase();\n\n\t// NOTE :: IE8\'s "styleFloat" is intentionally not supported\n\tif (property === "float") {\n\t\treturn "cssFloat";\n\t}\n\t// Microsoft vendor-prefixes are uniquely cased\n\telse if (property.charCodeAt(0) === 45&& property.charCodeAt(1) === 109&& property.charCodeAt(2) === 115&& property.charCodeAt(3) === 45) {\n\t\t\treturn property.substr(1).replace(pattern, callback);\n\t\t} else {\n\t\t\treturn property.replace(pattern, callback);\n\t\t}\n};\n\nmodule.exports = camelCaseCSS;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjkwNDkuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWI7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBOztBQUVBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYmxvY2tiaXRlLy4vbm9kZV9tb2R1bGVzL2NhbWVsY2FzZS1jc3MvaW5kZXgtZXM1LmpzP2Y2ZDIiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBwYXR0ZXJuID0gLy0oXFx3fCQpL2c7XG5cbnZhciBjYWxsYmFjayA9IGZ1bmN0aW9uIGNhbGxiYWNrKGRhc2hDaGFyLCBjaGFyKSB7XG5cdHJldHVybiBjaGFyLnRvVXBwZXJDYXNlKCk7XG59O1xuXG52YXIgY2FtZWxDYXNlQ1NTID0gZnVuY3Rpb24gY2FtZWxDYXNlQ1NTKHByb3BlcnR5KSB7XG5cdHByb3BlcnR5ID0gcHJvcGVydHkudG9Mb3dlckNhc2UoKTtcblxuXHQvLyBOT1RFIDo6IElFOCdzIFwic3R5bGVGbG9hdFwiIGlzIGludGVudGlvbmFsbHkgbm90IHN1cHBvcnRlZFxuXHRpZiAocHJvcGVydHkgPT09IFwiZmxvYXRcIikge1xuXHRcdHJldHVybiBcImNzc0Zsb2F0XCI7XG5cdH1cblx0Ly8gTWljcm9zb2Z0IHZlbmRvci1wcmVmaXhlcyBhcmUgdW5pcXVlbHkgY2FzZWRcblx0ZWxzZSBpZiAocHJvcGVydHkuY2hhckNvZGVBdCgwKSA9PT0gNDUmJiBwcm9wZXJ0eS5jaGFyQ29kZUF0KDEpID09PSAxMDkmJiBwcm9wZXJ0eS5jaGFyQ29kZUF0KDIpID09PSAxMTUmJiBwcm9wZXJ0eS5jaGFyQ29kZUF0KDMpID09PSA0NSkge1xuXHRcdFx0cmV0dXJuIHByb3BlcnR5LnN1YnN0cigxKS5yZXBsYWNlKHBhdHRlcm4sIGNhbGxiYWNrKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0cmV0dXJuIHByb3BlcnR5LnJlcGxhY2UocGF0dGVybiwgY2FsbGJhY2spO1xuXHRcdH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gY2FtZWxDYXNlQ1NTO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///29049\n')},68937:module=>{"use strict";eval("/*! https://mths.be/cssesc v3.0.0 by @mathias */\n\n\nvar object = {};\nvar hasOwnProperty = object.hasOwnProperty;\nvar merge = function merge(options, defaults) {\n\tif (!options) {\n\t\treturn defaults;\n\t}\n\tvar result = {};\n\tfor (var key in defaults) {\n\t\t// `if (defaults.hasOwnProperty(key) { … }` is not needed here, since\n\t\t// only recognized option names are used.\n\t\tresult[key] = hasOwnProperty.call(options, key) ? options[key] : defaults[key];\n\t}\n\treturn result;\n};\n\nvar regexAnySingleEscape = /[ -,\\.\\/:-@\\[-\\^`\\{-~]/;\nvar regexSingleEscape = /[ -,\\.\\/:-@\\[\\]\\^`\\{-~]/;\nvar regexAlwaysEscape = /['\"\\\\]/;\nvar regexExcessiveSpaces = /(^|\\\\+)?(\\\\[A-F0-9]{1,6})\\x20(?![a-fA-F0-9\\x20])/g;\n\n// https://mathiasbynens.be/notes/css-escapes#css\nvar cssesc = function cssesc(string, options) {\n\toptions = merge(options, cssesc.options);\n\tif (options.quotes != 'single' && options.quotes != 'double') {\n\t\toptions.quotes = 'single';\n\t}\n\tvar quote = options.quotes == 'double' ? '\"' : '\\'';\n\tvar isIdentifier = options.isIdentifier;\n\n\tvar firstChar = string.charAt(0);\n\tvar output = '';\n\tvar counter = 0;\n\tvar length = string.length;\n\twhile (counter < length) {\n\t\tvar character = string.charAt(counter++);\n\t\tvar codePoint = character.charCodeAt();\n\t\tvar value = void 0;\n\t\t// If it’s not a printable ASCII character…\n\t\tif (codePoint < 0x20 || codePoint > 0x7E) {\n\t\t\tif (codePoint >= 0xD800 && codePoint <= 0xDBFF && counter < length) {\n\t\t\t\t// It’s a high surrogate, and there is a next character.\n\t\t\t\tvar extra = string.charCodeAt(counter++);\n\t\t\t\tif ((extra & 0xFC00) == 0xDC00) {\n\t\t\t\t\t// next character is low surrogate\n\t\t\t\t\tcodePoint = ((codePoint & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000;\n\t\t\t\t} else {\n\t\t\t\t\t// It’s an unmatched surrogate; only append this code unit, in case\n\t\t\t\t\t// the next code unit is the high surrogate of a surrogate pair.\n\t\t\t\t\tcounter--;\n\t\t\t\t}\n\t\t\t}\n\t\t\tvalue = '\\\\' + codePoint.toString(16).toUpperCase() + ' ';\n\t\t} else {\n\t\t\tif (options.escapeEverything) {\n\t\t\t\tif (regexAnySingleEscape.test(character)) {\n\t\t\t\t\tvalue = '\\\\' + character;\n\t\t\t\t} else {\n\t\t\t\t\tvalue = '\\\\' + codePoint.toString(16).toUpperCase() + ' ';\n\t\t\t\t}\n\t\t\t} else if (/[\\t\\n\\f\\r\\x0B]/.test(character)) {\n\t\t\t\tvalue = '\\\\' + codePoint.toString(16).toUpperCase() + ' ';\n\t\t\t} else if (character == '\\\\' || !isIdentifier && (character == '\"' && quote == character || character == '\\'' && quote == character) || isIdentifier && regexSingleEscape.test(character)) {\n\t\t\t\tvalue = '\\\\' + character;\n\t\t\t} else {\n\t\t\t\tvalue = character;\n\t\t\t}\n\t\t}\n\t\toutput += value;\n\t}\n\n\tif (isIdentifier) {\n\t\tif (/^-[-\\d]/.test(output)) {\n\t\t\toutput = '\\\\-' + output.slice(1);\n\t\t} else if (/\\d/.test(firstChar)) {\n\t\t\toutput = '\\\\3' + firstChar + ' ' + output.slice(1);\n\t\t}\n\t}\n\n\t// Remove spaces after `\\HEX` escapes that are not followed by a hex digit,\n\t// since they’re redundant. Note that this is only possible if the escape\n\t// sequence isn’t preceded by an odd number of backslashes.\n\toutput = output.replace(regexExcessiveSpaces, function ($0, $1, $2) {\n\t\tif ($1 && $1.length % 2) {\n\t\t\t// It’s not safe to remove the space, so don’t.\n\t\t\treturn $0;\n\t\t}\n\t\t// Strip the space.\n\t\treturn ($1 || '') + $2;\n\t});\n\n\tif (!isIdentifier && options.wrap) {\n\t\treturn quote + output + quote;\n\t}\n\treturn output;\n};\n\n// Expose default options (so they can be overridden globally).\ncssesc.options = {\n\t'escapeEverything': false,\n\t'isIdentifier': false,\n\t'quotes': 'single',\n\t'wrap': false\n};\n\ncssesc.version = '3.0.0';\n\nmodule.exports = cssesc;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNjg5MzcuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDYTs7QUFFYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUNBQXlDLEdBQUc7QUFDNUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSwrQ0FBK0M7QUFDL0MsNkNBQTZDO0FBQzdDO0FBQ0EsZ0RBQWdELElBQUk7O0FBRXBEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ04scUNBQXFDO0FBQ3JDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQSxLQUFLO0FBQ0w7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsRUFBRTs7QUFFRjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYmxvY2tiaXRlLy4vbm9kZV9tb2R1bGVzL2Nzc2VzYy9jc3Nlc2MuanM/MGI4YSJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiEgaHR0cHM6Ly9tdGhzLmJlL2Nzc2VzYyB2My4wLjAgYnkgQG1hdGhpYXMgKi9cbid1c2Ugc3RyaWN0JztcblxudmFyIG9iamVjdCA9IHt9O1xudmFyIGhhc093blByb3BlcnR5ID0gb2JqZWN0Lmhhc093blByb3BlcnR5O1xudmFyIG1lcmdlID0gZnVuY3Rpb24gbWVyZ2Uob3B0aW9ucywgZGVmYXVsdHMpIHtcblx0aWYgKCFvcHRpb25zKSB7XG5cdFx0cmV0dXJuIGRlZmF1bHRzO1xuXHR9XG5cdHZhciByZXN1bHQgPSB7fTtcblx0Zm9yICh2YXIga2V5IGluIGRlZmF1bHRzKSB7XG5cdFx0Ly8gYGlmIChkZWZhdWx0cy5oYXNPd25Qcm9wZXJ0eShrZXkpIHsg4oCmIH1gIGlzIG5vdCBuZWVkZWQgaGVyZSwgc2luY2Vcblx0XHQvLyBvbmx5IHJlY29nbml6ZWQgb3B0aW9uIG5hbWVzIGFyZSB1c2VkLlxuXHRcdHJlc3VsdFtrZXldID0gaGFzT3duUHJvcGVydHkuY2FsbChvcHRpb25zLCBrZXkpID8gb3B0aW9uc1trZXldIDogZGVmYXVsdHNba2V5XTtcblx0fVxuXHRyZXR1cm4gcmVzdWx0O1xufTtcblxudmFyIHJlZ2V4QW55U2luZ2xlRXNjYXBlID0gL1sgLSxcXC5cXC86LUBcXFstXFxeYFxcey1+XS87XG52YXIgcmVnZXhTaW5nbGVFc2NhcGUgPSAvWyAtLFxcLlxcLzotQFxcW1xcXVxcXmBcXHstfl0vO1xudmFyIHJlZ2V4QWx3YXlzRXNjYXBlID0gL1snXCJcXFxcXS87XG52YXIgcmVnZXhFeGNlc3NpdmVTcGFjZXMgPSAvKF58XFxcXCspPyhcXFxcW0EtRjAtOV17MSw2fSlcXHgyMCg/IVthLWZBLUYwLTlcXHgyMF0pL2c7XG5cbi8vIGh0dHBzOi8vbWF0aGlhc2J5bmVucy5iZS9ub3Rlcy9jc3MtZXNjYXBlcyNjc3NcbnZhciBjc3Nlc2MgPSBmdW5jdGlvbiBjc3Nlc2Moc3RyaW5nLCBvcHRpb25zKSB7XG5cdG9wdGlvbnMgPSBtZXJnZShvcHRpb25zLCBjc3Nlc2Mub3B0aW9ucyk7XG5cdGlmIChvcHRpb25zLnF1b3RlcyAhPSAnc2luZ2xlJyAmJiBvcHRpb25zLnF1b3RlcyAhPSAnZG91YmxlJykge1xuXHRcdG9wdGlvbnMucXVvdGVzID0gJ3NpbmdsZSc7XG5cdH1cblx0dmFyIHF1b3RlID0gb3B0aW9ucy5xdW90ZXMgPT0gJ2RvdWJsZScgPyAnXCInIDogJ1xcJyc7XG5cdHZhciBpc0lkZW50aWZpZXIgPSBvcHRpb25zLmlzSWRlbnRpZmllcjtcblxuXHR2YXIgZmlyc3RDaGFyID0gc3RyaW5nLmNoYXJBdCgwKTtcblx0dmFyIG91dHB1dCA9ICcnO1xuXHR2YXIgY291bnRlciA9IDA7XG5cdHZhciBsZW5ndGggPSBzdHJpbmcubGVuZ3RoO1xuXHR3aGlsZSAoY291bnRlciA8IGxlbmd0aCkge1xuXHRcdHZhciBjaGFyYWN0ZXIgPSBzdHJpbmcuY2hhckF0KGNvdW50ZXIrKyk7XG5cdFx0dmFyIGNvZGVQb2ludCA9IGNoYXJhY3Rlci5jaGFyQ29kZUF0KCk7XG5cdFx0dmFyIHZhbHVlID0gdm9pZCAwO1xuXHRcdC8vIElmIGl04oCZcyBub3QgYSBwcmludGFibGUgQVNDSUkgY2hhcmFjdGVy4oCmXG5cdFx0aWYgKGNvZGVQb2ludCA8IDB4MjAgfHwgY29kZVBvaW50ID4gMHg3RSkge1xuXHRcdFx0aWYgKGNvZGVQb2ludCA+PSAweEQ4MDAgJiYgY29kZVBvaW50IDw9IDB4REJGRiAmJiBjb3VudGVyIDwgbGVuZ3RoKSB7XG5cdFx0XHRcdC8vIEl04oCZcyBhIGhpZ2ggc3Vycm9nYXRlLCBhbmQgdGhlcmUgaXMgYSBuZXh0IGNoYXJhY3Rlci5cblx0XHRcdFx0dmFyIGV4dHJhID0gc3RyaW5nLmNoYXJDb2RlQXQoY291bnRlcisrKTtcblx0XHRcdFx0aWYgKChleHRyYSAmIDB4RkMwMCkgPT0gMHhEQzAwKSB7XG5cdFx0XHRcdFx0Ly8gbmV4dCBjaGFyYWN0ZXIgaXMgbG93IHN1cnJvZ2F0ZVxuXHRcdFx0XHRcdGNvZGVQb2ludCA9ICgoY29kZVBvaW50ICYgMHgzRkYpIDw8IDEwKSArIChleHRyYSAmIDB4M0ZGKSArIDB4MTAwMDA7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0Ly8gSXTigJlzIGFuIHVubWF0Y2hlZCBzdXJyb2dhdGU7IG9ubHkgYXBwZW5kIHRoaXMgY29kZSB1bml0LCBpbiBjYXNlXG5cdFx0XHRcdFx0Ly8gdGhlIG5leHQgY29kZSB1bml0IGlzIHRoZSBoaWdoIHN1cnJvZ2F0ZSBvZiBhIHN1cnJvZ2F0ZSBwYWlyLlxuXHRcdFx0XHRcdGNvdW50ZXItLTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0dmFsdWUgPSAnXFxcXCcgKyBjb2RlUG9pbnQudG9TdHJpbmcoMTYpLnRvVXBwZXJDYXNlKCkgKyAnICc7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGlmIChvcHRpb25zLmVzY2FwZUV2ZXJ5dGhpbmcpIHtcblx0XHRcdFx0aWYgKHJlZ2V4QW55U2luZ2xlRXNjYXBlLnRlc3QoY2hhcmFjdGVyKSkge1xuXHRcdFx0XHRcdHZhbHVlID0gJ1xcXFwnICsgY2hhcmFjdGVyO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHZhbHVlID0gJ1xcXFwnICsgY29kZVBvaW50LnRvU3RyaW5nKDE2KS50b1VwcGVyQ2FzZSgpICsgJyAnO1xuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2UgaWYgKC9bXFx0XFxuXFxmXFxyXFx4MEJdLy50ZXN0KGNoYXJhY3RlcikpIHtcblx0XHRcdFx0dmFsdWUgPSAnXFxcXCcgKyBjb2RlUG9pbnQudG9TdHJpbmcoMTYpLnRvVXBwZXJDYXNlKCkgKyAnICc7XG5cdFx0XHR9IGVsc2UgaWYgKGNoYXJhY3RlciA9PSAnXFxcXCcgfHwgIWlzSWRlbnRpZmllciAmJiAoY2hhcmFjdGVyID09ICdcIicgJiYgcXVvdGUgPT0gY2hhcmFjdGVyIHx8IGNoYXJhY3RlciA9PSAnXFwnJyAmJiBxdW90ZSA9PSBjaGFyYWN0ZXIpIHx8IGlzSWRlbnRpZmllciAmJiByZWdleFNpbmdsZUVzY2FwZS50ZXN0KGNoYXJhY3RlcikpIHtcblx0XHRcdFx0dmFsdWUgPSAnXFxcXCcgKyBjaGFyYWN0ZXI7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR2YWx1ZSA9IGNoYXJhY3Rlcjtcblx0XHRcdH1cblx0XHR9XG5cdFx0b3V0cHV0ICs9IHZhbHVlO1xuXHR9XG5cblx0aWYgKGlzSWRlbnRpZmllcikge1xuXHRcdGlmICgvXi1bLVxcZF0vLnRlc3Qob3V0cHV0KSkge1xuXHRcdFx0b3V0cHV0ID0gJ1xcXFwtJyArIG91dHB1dC5zbGljZSgxKTtcblx0XHR9IGVsc2UgaWYgKC9cXGQvLnRlc3QoZmlyc3RDaGFyKSkge1xuXHRcdFx0b3V0cHV0ID0gJ1xcXFwzJyArIGZpcnN0Q2hhciArICcgJyArIG91dHB1dC5zbGljZSgxKTtcblx0XHR9XG5cdH1cblxuXHQvLyBSZW1vdmUgc3BhY2VzIGFmdGVyIGBcXEhFWGAgZXNjYXBlcyB0aGF0IGFyZSBub3QgZm9sbG93ZWQgYnkgYSBoZXggZGlnaXQsXG5cdC8vIHNpbmNlIHRoZXnigJlyZSByZWR1bmRhbnQuIE5vdGUgdGhhdCB0aGlzIGlzIG9ubHkgcG9zc2libGUgaWYgdGhlIGVzY2FwZVxuXHQvLyBzZXF1ZW5jZSBpc27igJl0IHByZWNlZGVkIGJ5IGFuIG9kZCBudW1iZXIgb2YgYmFja3NsYXNoZXMuXG5cdG91dHB1dCA9IG91dHB1dC5yZXBsYWNlKHJlZ2V4RXhjZXNzaXZlU3BhY2VzLCBmdW5jdGlvbiAoJDAsICQxLCAkMikge1xuXHRcdGlmICgkMSAmJiAkMS5sZW5ndGggJSAyKSB7XG5cdFx0XHQvLyBJdOKAmXMgbm90IHNhZmUgdG8gcmVtb3ZlIHRoZSBzcGFjZSwgc28gZG9u4oCZdC5cblx0XHRcdHJldHVybiAkMDtcblx0XHR9XG5cdFx0Ly8gU3RyaXAgdGhlIHNwYWNlLlxuXHRcdHJldHVybiAoJDEgfHwgJycpICsgJDI7XG5cdH0pO1xuXG5cdGlmICghaXNJZGVudGlmaWVyICYmIG9wdGlvbnMud3JhcCkge1xuXHRcdHJldHVybiBxdW90ZSArIG91dHB1dCArIHF1b3RlO1xuXHR9XG5cdHJldHVybiBvdXRwdXQ7XG59O1xuXG4vLyBFeHBvc2UgZGVmYXVsdCBvcHRpb25zIChzbyB0aGV5IGNhbiBiZSBvdmVycmlkZGVuIGdsb2JhbGx5KS5cbmNzc2VzYy5vcHRpb25zID0ge1xuXHQnZXNjYXBlRXZlcnl0aGluZyc6IGZhbHNlLFxuXHQnaXNJZGVudGlmaWVyJzogZmFsc2UsXG5cdCdxdW90ZXMnOiAnc2luZ2xlJyxcblx0J3dyYXAnOiBmYWxzZVxufTtcblxuY3NzZXNjLnZlcnNpb24gPSAnMy4wLjAnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGNzc2VzYztcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///68937\n")},71492:module=>{eval("/*\n\ndidYouMean.js - A simple JavaScript matching engine\n===================================================\n\n[Available on GitHub](https://github.com/dcporter/didyoumean.js).\n\nA super-simple, highly optimized JS library for matching human-quality input to a list of potential\nmatches. You can use it to suggest a misspelled command-line utility option to a user, or to offer\nlinks to nearby valid URLs on your 404 page. (The examples below are taken from a personal project,\nmy [HTML5 business card](http://dcporter.aws.af.cm/me), which uses didYouMean.js to suggest correct\nURLs from misspelled ones, such as [dcporter.aws.af.cm/me/instagarm](http://dcporter.aws.af.cm/me/instagarm).)\nUses the [Levenshtein distance algorithm](https://en.wikipedia.org/wiki/Levenshtein_distance).\n\ndidYouMean.js works in the browser as well as in node.js. To install it for use in node:\n\n```\nnpm install didyoumean\n```\n\n\nExamples\n--------\n\nMatching against a list of strings:\n```\nvar input = 'insargrm'\nvar list = ['facebook', 'twitter', 'instagram', 'linkedin'];\nconsole.log(didYouMean(input, list));\n> 'instagram'\n// The method matches 'insargrm' to 'instagram'.\n\ninput = 'google plus';\nconsole.log(didYouMean(input, list));\n> null\n// The method was unable to find 'google plus' in the list of options.\n```\n\nMatching against a list of objects:\n```\nvar input = 'insargrm';\nvar list = [ { id: 'facebook' }, { id: 'twitter' }, { id: 'instagram' }, { id: 'linkedin' } ];\nvar key = 'id';\nconsole.log(didYouMean(input, list, key));\n> 'instagram'\n// The method returns the matching value.\n\ndidYouMean.returnWinningObject = true;\nconsole.log(didYouMean(input, list, key));\n> { id: 'instagram' }\n// The method returns the matching object.\n```\n\n\ndidYouMean(str, list, [key])\n----------------------------\n\n- str: The string input to match.\n- list: An array of strings or objects to match against.\n- key (OPTIONAL): If your list array contains objects, you must specify the key which contains the string\n  to match against.\n\nReturns: the closest matching string, or null if no strings exceed the threshold.\n\n\nOptions\n-------\n\nOptions are set on the didYouMean function object. You may change them at any time.\n\n### threshold\n\n  By default, the method will only return strings whose edit distance is less than 40% (0.4x) of their length.\n  For example, if a ten-letter string is five edits away from its nearest match, the method will return null.\n\n  You can control this by setting the \"threshold\" value on the didYouMean function. For example, to set the\n  edit distance threshold to 50% of the input string's length:\n\n  ```\n  didYouMean.threshold = 0.5;\n  ```\n\n  To return the nearest match no matter the threshold, set this value to null.\n\n### thresholdAbsolute\n\n  This option behaves the same as threshold, but instead takes an integer number of edit steps. For example,\n  if thresholdAbsolute is set to 20 (the default), then the method will only return strings whose edit distance\n  is less than 20. Both options apply.\n\n### caseSensitive\n\n  By default, the method will perform case-insensitive comparisons. If you wish to force case sensitivity, set\n  the \"caseSensitive\" value to true:\n\n  ```\n  didYouMean.caseSensitive = true;\n  ```\n\n### nullResultValue\n\n  By default, the method will return null if there is no sufficiently close match. You can change this value here.\n\n### returnWinningObject\n\n  By default, the method will return the winning string value (if any). If your list contains objects rather\n  than strings, you may set returnWinningObject to true.\n  \n  ```\n  didYouMean.returnWinningObject = true;\n  ```\n  \n  This option has no effect on lists of strings.\n\n### returnFirstMatch\n  \n  By default, the method will search all values and return the closest match. If you're simply looking for a \"good-\n  enough\" match, you can set your thresholds appropriately and set returnFirstMatch to true to substantially speed\n  things up.\n\n\nLicense\n-------\n\ndidYouMean copyright (c) 2013-2014 Dave Porter.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License\n[here](http://www.apache.org/licenses/LICENSE-2.0).\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n\n*/\n(function() {\n  \"use strict\";\n\n  // The didYouMean method.\n  function didYouMean(str, list, key) {\n    if (!str) return null;\n\n    // If we're running a case-insensitive search, smallify str.\n    if (!didYouMean.caseSensitive) { str = str.toLowerCase(); }\n\n    // Calculate the initial value (the threshold) if present.\n    var thresholdRelative = didYouMean.threshold === null ? null : didYouMean.threshold * str.length,\n        thresholdAbsolute = didYouMean.thresholdAbsolute,\n        winningVal;\n    if (thresholdRelative !== null && thresholdAbsolute !== null) winningVal = Math.min(thresholdRelative, thresholdAbsolute);\n    else if (thresholdRelative !== null) winningVal = thresholdRelative;\n    else if (thresholdAbsolute !== null) winningVal = thresholdAbsolute;\n    else winningVal = null;\n\n    // Get the edit distance to each option. If the closest one is less than 40% (by default) of str's length,\n    // then return it.\n    var winner, candidate, testCandidate, val,\n        i, len = list.length;\n    for (i = 0; i < len; i++) {\n      // Get item.\n      candidate = list[i];\n      // If there's a key, get the candidate value out of the object.\n      if (key) { candidate = candidate[key]; }\n      // Gatekeep.\n      if (!candidate) { continue; }\n      // If we're running a case-insensitive search, smallify the candidate.\n      if (!didYouMean.caseSensitive) { testCandidate = candidate.toLowerCase(); }\n      else { testCandidate = candidate; }\n      // Get and compare edit distance.\n      val = getEditDistance(str, testCandidate, winningVal);\n      // If this value is smaller than our current winning value, OR if we have no winning val yet (i.e. the\n      // threshold option is set to null, meaning the caller wants a match back no matter how bad it is), then\n      // this is our new winner.\n      if (winningVal === null || val < winningVal) {\n        winningVal = val;\n        // Set the winner to either the value or its object, depending on the returnWinningObject option.\n        if (key && didYouMean.returnWinningObject) winner = list[i];\n        else winner = candidate;\n        // If we're returning the first match, return it now.\n        if (didYouMean.returnFirstMatch) return winner;\n      }\n    }\n\n    // If we have a winner, return it.\n    return winner || didYouMean.nullResultValue;\n  }\n\n  // Set default options.\n  didYouMean.threshold = 0.4;\n  didYouMean.thresholdAbsolute = 20;\n  didYouMean.caseSensitive = false;\n  didYouMean.nullResultValue = null;\n  didYouMean.returnWinningObject = null;\n  didYouMean.returnFirstMatch = false;\n\n  // Expose.\n  // In node...\n  if ( true && module.exports) {\n    module.exports = didYouMean;\n  }\n  // Otherwise...\n  else {\n    window.didYouMean = didYouMean;\n  }\n\n  var MAX_INT = Math.pow(2,32) - 1; // We could probably go higher than this, but for practical reasons let's not.\n  function getEditDistance(a, b, max) {\n    // Handle null or undefined max.\n    max = max || max === 0 ? max : MAX_INT;\n\n    var lena = a.length;\n    var lenb = b.length;\n\n    // Fast path - no A or B.\n    if (lena === 0) return Math.min(max + 1, lenb);\n    if (lenb === 0) return Math.min(max + 1, lena);\n\n    // Fast path - length diff larger than max.\n    if (Math.abs(lena - lenb) > max) return max + 1;\n\n    // Slow path.\n    var matrix = [],\n        i, j, colMin, minJ, maxJ;\n\n    // Set up the first row ([0, 1, 2, 3, etc]).\n    for (i = 0; i <= lenb; i++) { matrix[i] = [i]; }\n\n    // Set up the first column (same).\n    for (j = 0; j <= lena; j++) { matrix[0][j] = j; }\n\n    // Loop over the rest of the columns.\n    for (i = 1; i <= lenb; i++) {\n      colMin = MAX_INT;\n      minJ = 1;\n      if (i > max) minJ = i - max;\n      maxJ = lenb + 1;\n      if (maxJ > max + i) maxJ = max + i;\n      // Loop over the rest of the rows.\n      for (j = 1; j <= lena; j++) {\n        // If j is out of bounds, just put a large value in the slot.\n        if (j < minJ || j > maxJ) {\n          matrix[i][j] = max + 1;\n        }\n\n        // Otherwise do the normal Levenshtein thing.\n        else {\n          // If the characters are the same, there's no change in edit distance.\n          if (b.charAt(i - 1) === a.charAt(j - 1)) {\n            matrix[i][j] = matrix[i - 1][j - 1];\n          }\n          // Otherwise, see if we're substituting, inserting or deleting.\n          else {\n            matrix[i][j] = Math.min(matrix[i - 1][j - 1] + 1, // Substitute\n                                    Math.min(matrix[i][j - 1] + 1, // Insert\n                                    matrix[i - 1][j] + 1)); // Delete\n          }\n        }\n\n        // Either way, update colMin.\n        if (matrix[i][j] < colMin) colMin = matrix[i][j];\n      }\n\n      // If this column's minimum is greater than the allowed maximum, there's no point\n      // in going on with life.\n      if (colMin > max) return max + 1;\n    }\n    // If we made it this far without running into the max, then return the final matrix value.\n    return matrix[lenb][lena];\n  }\n\n})();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///71492\n")},32144:function(module){eval('!function(t,n){ true?module.exports=function(t,n,e,i,o){for(n=n.split?n.split("."):n,i=0;i<n.length;i++)t=t?t[n[i]]:o;return t===o?e:t}:0}(this);\n//# sourceMappingURL=dlv.umd.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzIxNDQuanMiLCJtYXBwaW5ncyI6IkFBQUEsZUFBZSxLQUFvRCxvQ0FBb0MsaUNBQWlDLFdBQVcsa0JBQWtCLGlCQUFpQixDQUFDLENBQThRLENBQUM7QUFDdGMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ibG9ja2JpdGUvLi9ub2RlX21vZHVsZXMvZGx2L2Rpc3QvZGx2LnVtZC5qcz8zNmJlIl0sInNvdXJjZXNDb250ZW50IjpbIiFmdW5jdGlvbih0LG4pe1wib2JqZWN0XCI9PXR5cGVvZiBleHBvcnRzJiZcInVuZGVmaW5lZFwiIT10eXBlb2YgbW9kdWxlP21vZHVsZS5leHBvcnRzPWZ1bmN0aW9uKHQsbixlLGksbyl7Zm9yKG49bi5zcGxpdD9uLnNwbGl0KFwiLlwiKTpuLGk9MDtpPG4ubGVuZ3RoO2krKyl0PXQ/dFtuW2ldXTpvO3JldHVybiB0PT09bz9lOnR9OlwiZnVuY3Rpb25cIj09dHlwZW9mIGRlZmluZSYmZGVmaW5lLmFtZD9kZWZpbmUoZnVuY3Rpb24oKXtyZXR1cm4gZnVuY3Rpb24odCxuLGUsaSxvKXtmb3Iobj1uLnNwbGl0P24uc3BsaXQoXCIuXCIpOm4saT0wO2k8bi5sZW5ndGg7aSsrKXQ9dD90W25baV1dOm87cmV0dXJuIHQ9PT1vP2U6dH19KTp0LmRsdj1mdW5jdGlvbih0LG4sZSxpLG8pe2ZvcihuPW4uc3BsaXQ/bi5zcGxpdChcIi5cIik6bixpPTA7aTxuLmxlbmd0aDtpKyspdD10P3RbbltpXV06bztyZXR1cm4gdD09PW8/ZTp0fX0odGhpcyk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kbHYudW1kLmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///32144\n')},48633:module=>{eval("var x=String;\nvar create=function() {return {isColorSupported:false,reset:x,bold:x,dim:x,italic:x,underline:x,inverse:x,hidden:x,strikethrough:x,black:x,red:x,green:x,yellow:x,blue:x,magenta:x,cyan:x,white:x,gray:x,bgBlack:x,bgRed:x,bgGreen:x,bgYellow:x,bgBlue:x,bgMagenta:x,bgCyan:x,bgWhite:x,blackBright:x,redBright:x,greenBright:x,yellowBright:x,blueBright:x,magentaBright:x,cyanBright:x,whiteBright:x,bgBlackBright:x,bgRedBright:x,bgGreenBright:x,bgYellowBright:x,bgBlueBright:x,bgMagentaBright:x,bgCyanBright:x,bgWhiteBright:x}};\nmodule.exports=create();\nmodule.exports.createColors = create;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDg2MzMuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDQSx1QkFBdUIsUUFBUTtBQUMvQjtBQUNBLDJCQUEyQiIsInNvdXJjZXMiOlsid2VicGFjazovL2Jsb2NrYml0ZS8uL25vZGVfbW9kdWxlcy9waWNvY29sb3JzL3BpY29jb2xvcnMuYnJvd3Nlci5qcz81NDdhIl0sInNvdXJjZXNDb250ZW50IjpbInZhciB4PVN0cmluZztcbnZhciBjcmVhdGU9ZnVuY3Rpb24oKSB7cmV0dXJuIHtpc0NvbG9yU3VwcG9ydGVkOmZhbHNlLHJlc2V0OngsYm9sZDp4LGRpbTp4LGl0YWxpYzp4LHVuZGVybGluZTp4LGludmVyc2U6eCxoaWRkZW46eCxzdHJpa2V0aHJvdWdoOngsYmxhY2s6eCxyZWQ6eCxncmVlbjp4LHllbGxvdzp4LGJsdWU6eCxtYWdlbnRhOngsY3lhbjp4LHdoaXRlOngsZ3JheTp4LGJnQmxhY2s6eCxiZ1JlZDp4LGJnR3JlZW46eCxiZ1llbGxvdzp4LGJnQmx1ZTp4LGJnTWFnZW50YTp4LGJnQ3lhbjp4LGJnV2hpdGU6eCxibGFja0JyaWdodDp4LHJlZEJyaWdodDp4LGdyZWVuQnJpZ2h0OngseWVsbG93QnJpZ2h0OngsYmx1ZUJyaWdodDp4LG1hZ2VudGFCcmlnaHQ6eCxjeWFuQnJpZ2h0Ongsd2hpdGVCcmlnaHQ6eCxiZ0JsYWNrQnJpZ2h0OngsYmdSZWRCcmlnaHQ6eCxiZ0dyZWVuQnJpZ2h0OngsYmdZZWxsb3dCcmlnaHQ6eCxiZ0JsdWVCcmlnaHQ6eCxiZ01hZ2VudGFCcmlnaHQ6eCxiZ0N5YW5CcmlnaHQ6eCxiZ1doaXRlQnJpZ2h0Onh9fTtcbm1vZHVsZS5leHBvcnRzPWNyZWF0ZSgpO1xubW9kdWxlLmV4cG9ydHMuY3JlYXRlQ29sb3JzID0gY3JlYXRlO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///48633\n")},75930:(module,__unused_webpack_exports,__webpack_require__)=>{eval("let postcss = __webpack_require__(12895)\n\nlet processResult = __webpack_require__(76533)\nlet parse = __webpack_require__(91671)\n\nmodule.exports = function async(plugins) {\n  let processor = postcss(plugins)\n  return async input => {\n    let result = await processor.process(input, {\n      parser: parse,\n      from: undefined\n    })\n    return processResult(result)\n  }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNzU5MzAuanMiLCJtYXBwaW5ncyI6IkFBQUEsY0FBYyxtQkFBTyxDQUFDLEtBQVM7O0FBRS9CLG9CQUFvQixtQkFBTyxDQUFDLEtBQWtCO0FBQzlDLFlBQVksbUJBQU8sQ0FBQyxLQUFVOztBQUU5QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYmxvY2tiaXRlLy4vbm9kZV9tb2R1bGVzL3Bvc3Rjc3MtanMvYXN5bmMuanM/NmQ3MyJdLCJzb3VyY2VzQ29udGVudCI6WyJsZXQgcG9zdGNzcyA9IHJlcXVpcmUoJ3Bvc3Rjc3MnKVxuXG5sZXQgcHJvY2Vzc1Jlc3VsdCA9IHJlcXVpcmUoJy4vcHJvY2Vzcy1yZXN1bHQnKVxubGV0IHBhcnNlID0gcmVxdWlyZSgnLi9wYXJzZXInKVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGFzeW5jKHBsdWdpbnMpIHtcbiAgbGV0IHByb2Nlc3NvciA9IHBvc3Rjc3MocGx1Z2lucylcbiAgcmV0dXJuIGFzeW5jIGlucHV0ID0+IHtcbiAgICBsZXQgcmVzdWx0ID0gYXdhaXQgcHJvY2Vzc29yLnByb2Nlc3MoaW5wdXQsIHtcbiAgICAgIHBhcnNlcjogcGFyc2UsXG4gICAgICBmcm9tOiB1bmRlZmluZWRcbiAgICB9KVxuICAgIHJldHVybiBwcm9jZXNzUmVzdWx0KHJlc3VsdClcbiAgfVxufVxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///75930\n")},58166:(module,__unused_webpack_exports,__webpack_require__)=>{eval("let objectify = __webpack_require__(56426)\nlet parse = __webpack_require__(91671)\nlet async = __webpack_require__(75930)\nlet sync = __webpack_require__(61151)\n\nmodule.exports = {\n  objectify,\n  parse,\n  async,\n  sync\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNTgxNjYuanMiLCJtYXBwaW5ncyI6IkFBQUEsZ0JBQWdCLG1CQUFPLENBQUMsS0FBZTtBQUN2QyxZQUFZLG1CQUFPLENBQUMsS0FBVTtBQUM5QixZQUFZLG1CQUFPLENBQUMsS0FBUztBQUM3QixXQUFXLG1CQUFPLENBQUMsS0FBUTs7QUFFM0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYmxvY2tiaXRlLy4vbm9kZV9tb2R1bGVzL3Bvc3Rjc3MtanMvaW5kZXguanM/Nzc0YSJdLCJzb3VyY2VzQ29udGVudCI6WyJsZXQgb2JqZWN0aWZ5ID0gcmVxdWlyZSgnLi9vYmplY3RpZmllcicpXG5sZXQgcGFyc2UgPSByZXF1aXJlKCcuL3BhcnNlcicpXG5sZXQgYXN5bmMgPSByZXF1aXJlKCcuL2FzeW5jJylcbmxldCBzeW5jID0gcmVxdWlyZSgnLi9zeW5jJylcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIG9iamVjdGlmeSxcbiAgcGFyc2UsXG4gIGFzeW5jLFxuICBzeW5jXG59XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///58166\n")},56426:(module,__unused_webpack_exports,__webpack_require__)=>{eval("let camelcase = __webpack_require__(29049)\n\nlet UNITLESS = {\n  boxFlex: true,\n  boxFlexGroup: true,\n  columnCount: true,\n  flex: true,\n  flexGrow: true,\n  flexPositive: true,\n  flexShrink: true,\n  flexNegative: true,\n  fontWeight: true,\n  lineClamp: true,\n  lineHeight: true,\n  opacity: true,\n  order: true,\n  orphans: true,\n  tabSize: true,\n  widows: true,\n  zIndex: true,\n  zoom: true,\n  fillOpacity: true,\n  strokeDashoffset: true,\n  strokeOpacity: true,\n  strokeWidth: true\n}\n\nfunction atRule(node) {\n  if (typeof node.nodes === 'undefined') {\n    return true\n  } else {\n    return process(node)\n  }\n}\n\nfunction process(node) {\n  let name\n  let result = {}\n\n  node.each(child => {\n    if (child.type === 'atrule') {\n      name = '@' + child.name\n      if (child.params) name += ' ' + child.params\n      if (typeof result[name] === 'undefined') {\n        result[name] = atRule(child)\n      } else if (Array.isArray(result[name])) {\n        result[name].push(atRule(child))\n      } else {\n        result[name] = [result[name], atRule(child)]\n      }\n    } else if (child.type === 'rule') {\n      let body = process(child)\n      if (result[child.selector]) {\n        for (let i in body) {\n          result[child.selector][i] = body[i]\n        }\n      } else {\n        result[child.selector] = body\n      }\n    } else if (child.type === 'decl') {\n      if (child.prop[0] === '-' && child.prop[1] === '-') {\n        name = child.prop\n      } else if (child.parent && child.parent.selector === ':export') {\n        name = child.prop\n      } else {\n        name = camelcase(child.prop)\n      }\n      let value = child.value\n      if (!isNaN(child.value) && UNITLESS[name]) {\n        value = parseFloat(child.value)\n      }\n      if (child.important) value += ' !important'\n      if (typeof result[name] === 'undefined') {\n        result[name] = value\n      } else if (Array.isArray(result[name])) {\n        result[name].push(value)\n      } else {\n        result[name] = [result[name], value]\n      }\n    }\n  })\n  return result\n}\n\nmodule.exports = process\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNTY0MjYuanMiLCJtYXBwaW5ncyI6IkFBQUEsZ0JBQWdCLG1CQUFPLENBQUMsS0FBZTs7QUFFdkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTs7QUFFQSIsInNvdXJjZXMiOlsid2VicGFjazovL2Jsb2NrYml0ZS8uL25vZGVfbW9kdWxlcy9wb3N0Y3NzLWpzL29iamVjdGlmaWVyLmpzPzllZWUiXSwic291cmNlc0NvbnRlbnQiOlsibGV0IGNhbWVsY2FzZSA9IHJlcXVpcmUoJ2NhbWVsY2FzZS1jc3MnKVxuXG5sZXQgVU5JVExFU1MgPSB7XG4gIGJveEZsZXg6IHRydWUsXG4gIGJveEZsZXhHcm91cDogdHJ1ZSxcbiAgY29sdW1uQ291bnQ6IHRydWUsXG4gIGZsZXg6IHRydWUsXG4gIGZsZXhHcm93OiB0cnVlLFxuICBmbGV4UG9zaXRpdmU6IHRydWUsXG4gIGZsZXhTaHJpbms6IHRydWUsXG4gIGZsZXhOZWdhdGl2ZTogdHJ1ZSxcbiAgZm9udFdlaWdodDogdHJ1ZSxcbiAgbGluZUNsYW1wOiB0cnVlLFxuICBsaW5lSGVpZ2h0OiB0cnVlLFxuICBvcGFjaXR5OiB0cnVlLFxuICBvcmRlcjogdHJ1ZSxcbiAgb3JwaGFuczogdHJ1ZSxcbiAgdGFiU2l6ZTogdHJ1ZSxcbiAgd2lkb3dzOiB0cnVlLFxuICB6SW5kZXg6IHRydWUsXG4gIHpvb206IHRydWUsXG4gIGZpbGxPcGFjaXR5OiB0cnVlLFxuICBzdHJva2VEYXNob2Zmc2V0OiB0cnVlLFxuICBzdHJva2VPcGFjaXR5OiB0cnVlLFxuICBzdHJva2VXaWR0aDogdHJ1ZVxufVxuXG5mdW5jdGlvbiBhdFJ1bGUobm9kZSkge1xuICBpZiAodHlwZW9mIG5vZGUubm9kZXMgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgcmV0dXJuIHRydWVcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gcHJvY2Vzcyhub2RlKVxuICB9XG59XG5cbmZ1bmN0aW9uIHByb2Nlc3Mobm9kZSkge1xuICBsZXQgbmFtZVxuICBsZXQgcmVzdWx0ID0ge31cblxuICBub2RlLmVhY2goY2hpbGQgPT4ge1xuICAgIGlmIChjaGlsZC50eXBlID09PSAnYXRydWxlJykge1xuICAgICAgbmFtZSA9ICdAJyArIGNoaWxkLm5hbWVcbiAgICAgIGlmIChjaGlsZC5wYXJhbXMpIG5hbWUgKz0gJyAnICsgY2hpbGQucGFyYW1zXG4gICAgICBpZiAodHlwZW9mIHJlc3VsdFtuYW1lXSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgcmVzdWx0W25hbWVdID0gYXRSdWxlKGNoaWxkKVxuICAgICAgfSBlbHNlIGlmIChBcnJheS5pc0FycmF5KHJlc3VsdFtuYW1lXSkpIHtcbiAgICAgICAgcmVzdWx0W25hbWVdLnB1c2goYXRSdWxlKGNoaWxkKSlcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJlc3VsdFtuYW1lXSA9IFtyZXN1bHRbbmFtZV0sIGF0UnVsZShjaGlsZCldXG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChjaGlsZC50eXBlID09PSAncnVsZScpIHtcbiAgICAgIGxldCBib2R5ID0gcHJvY2VzcyhjaGlsZClcbiAgICAgIGlmIChyZXN1bHRbY2hpbGQuc2VsZWN0b3JdKSB7XG4gICAgICAgIGZvciAobGV0IGkgaW4gYm9keSkge1xuICAgICAgICAgIHJlc3VsdFtjaGlsZC5zZWxlY3Rvcl1baV0gPSBib2R5W2ldXG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJlc3VsdFtjaGlsZC5zZWxlY3Rvcl0gPSBib2R5XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChjaGlsZC50eXBlID09PSAnZGVjbCcpIHtcbiAgICAgIGlmIChjaGlsZC5wcm9wWzBdID09PSAnLScgJiYgY2hpbGQucHJvcFsxXSA9PT0gJy0nKSB7XG4gICAgICAgIG5hbWUgPSBjaGlsZC5wcm9wXG4gICAgICB9IGVsc2UgaWYgKGNoaWxkLnBhcmVudCAmJiBjaGlsZC5wYXJlbnQuc2VsZWN0b3IgPT09ICc6ZXhwb3J0Jykge1xuICAgICAgICBuYW1lID0gY2hpbGQucHJvcFxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbmFtZSA9IGNhbWVsY2FzZShjaGlsZC5wcm9wKVxuICAgICAgfVxuICAgICAgbGV0IHZhbHVlID0gY2hpbGQudmFsdWVcbiAgICAgIGlmICghaXNOYU4oY2hpbGQudmFsdWUpICYmIFVOSVRMRVNTW25hbWVdKSB7XG4gICAgICAgIHZhbHVlID0gcGFyc2VGbG9hdChjaGlsZC52YWx1ZSlcbiAgICAgIH1cbiAgICAgIGlmIChjaGlsZC5pbXBvcnRhbnQpIHZhbHVlICs9ICcgIWltcG9ydGFudCdcbiAgICAgIGlmICh0eXBlb2YgcmVzdWx0W25hbWVdID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICByZXN1bHRbbmFtZV0gPSB2YWx1ZVxuICAgICAgfSBlbHNlIGlmIChBcnJheS5pc0FycmF5KHJlc3VsdFtuYW1lXSkpIHtcbiAgICAgICAgcmVzdWx0W25hbWVdLnB1c2godmFsdWUpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXN1bHRbbmFtZV0gPSBbcmVzdWx0W25hbWVdLCB2YWx1ZV1cbiAgICAgIH1cbiAgICB9XG4gIH0pXG4gIHJldHVybiByZXN1bHRcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBwcm9jZXNzXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///56426\n")},91671:(module,__unused_webpack_exports,__webpack_require__)=>{eval("let postcss = __webpack_require__(12895)\n\nlet IMPORTANT = /\\s*!important\\s*$/i\n\nlet UNITLESS = {\n  'box-flex': true,\n  'box-flex-group': true,\n  'column-count': true,\n  'flex': true,\n  'flex-grow': true,\n  'flex-positive': true,\n  'flex-shrink': true,\n  'flex-negative': true,\n  'font-weight': true,\n  'line-clamp': true,\n  'line-height': true,\n  'opacity': true,\n  'order': true,\n  'orphans': true,\n  'tab-size': true,\n  'widows': true,\n  'z-index': true,\n  'zoom': true,\n  'fill-opacity': true,\n  'stroke-dashoffset': true,\n  'stroke-opacity': true,\n  'stroke-width': true\n}\n\nfunction dashify(str) {\n  return str\n    .replace(/([A-Z])/g, '-$1')\n    .replace(/^ms-/, '-ms-')\n    .toLowerCase()\n}\n\nfunction decl(parent, name, value) {\n  if (value === false || value === null) return\n\n  if (!name.startsWith('--')) {\n    name = dashify(name)\n  }\n\n  if (typeof value === 'number') {\n    if (value === 0 || UNITLESS[name]) {\n      value = value.toString()\n    } else {\n      value += 'px'\n    }\n  }\n\n  if (name === 'css-float') name = 'float'\n\n  if (IMPORTANT.test(value)) {\n    value = value.replace(IMPORTANT, '')\n    parent.push(postcss.decl({ prop: name, value, important: true }))\n  } else {\n    parent.push(postcss.decl({ prop: name, value }))\n  }\n}\n\nfunction atRule(parent, parts, value) {\n  let node = postcss.atRule({ name: parts[1], params: parts[3] || '' })\n  if (typeof value === 'object') {\n    node.nodes = []\n    parse(value, node)\n  }\n  parent.push(node)\n}\n\nfunction parse(obj, parent) {\n  let name, value, node\n  for (name in obj) {\n    value = obj[name]\n    if (value === null || typeof value === 'undefined') {\n      continue\n    } else if (name[0] === '@') {\n      let parts = name.match(/@(\\S+)(\\s+([\\W\\w]*)\\s*)?/)\n      if (Array.isArray(value)) {\n        for (let i of value) {\n          atRule(parent, parts, i)\n        }\n      } else {\n        atRule(parent, parts, value)\n      }\n    } else if (Array.isArray(value)) {\n      for (let i of value) {\n        decl(parent, name, i)\n      }\n    } else if (typeof value === 'object') {\n      node = postcss.rule({ selector: name })\n      parse(value, node)\n      parent.push(node)\n    } else {\n      decl(parent, name, value)\n    }\n  }\n}\n\nmodule.exports = function (obj) {\n  let root = postcss.root()\n  parse(obj, root)\n  return root\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOTE2NzEuanMiLCJtYXBwaW5ncyI6IkFBQUEsY0FBYyxtQkFBTyxDQUFDLEtBQVM7O0FBRS9COztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0EsK0JBQStCLG9DQUFvQztBQUNuRSxJQUFJO0FBQ0osK0JBQStCLG1CQUFtQjtBQUNsRDtBQUNBOztBQUVBO0FBQ0EsOEJBQThCLHdDQUF3QztBQUN0RTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ04sNEJBQTRCLGdCQUFnQjtBQUM1QztBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ibG9ja2JpdGUvLi9ub2RlX21vZHVsZXMvcG9zdGNzcy1qcy9wYXJzZXIuanM/Mzc3OSJdLCJzb3VyY2VzQ29udGVudCI6WyJsZXQgcG9zdGNzcyA9IHJlcXVpcmUoJ3Bvc3Rjc3MnKVxuXG5sZXQgSU1QT1JUQU5UID0gL1xccyohaW1wb3J0YW50XFxzKiQvaVxuXG5sZXQgVU5JVExFU1MgPSB7XG4gICdib3gtZmxleCc6IHRydWUsXG4gICdib3gtZmxleC1ncm91cCc6IHRydWUsXG4gICdjb2x1bW4tY291bnQnOiB0cnVlLFxuICAnZmxleCc6IHRydWUsXG4gICdmbGV4LWdyb3cnOiB0cnVlLFxuICAnZmxleC1wb3NpdGl2ZSc6IHRydWUsXG4gICdmbGV4LXNocmluayc6IHRydWUsXG4gICdmbGV4LW5lZ2F0aXZlJzogdHJ1ZSxcbiAgJ2ZvbnQtd2VpZ2h0JzogdHJ1ZSxcbiAgJ2xpbmUtY2xhbXAnOiB0cnVlLFxuICAnbGluZS1oZWlnaHQnOiB0cnVlLFxuICAnb3BhY2l0eSc6IHRydWUsXG4gICdvcmRlcic6IHRydWUsXG4gICdvcnBoYW5zJzogdHJ1ZSxcbiAgJ3RhYi1zaXplJzogdHJ1ZSxcbiAgJ3dpZG93cyc6IHRydWUsXG4gICd6LWluZGV4JzogdHJ1ZSxcbiAgJ3pvb20nOiB0cnVlLFxuICAnZmlsbC1vcGFjaXR5JzogdHJ1ZSxcbiAgJ3N0cm9rZS1kYXNob2Zmc2V0JzogdHJ1ZSxcbiAgJ3N0cm9rZS1vcGFjaXR5JzogdHJ1ZSxcbiAgJ3N0cm9rZS13aWR0aCc6IHRydWVcbn1cblxuZnVuY3Rpb24gZGFzaGlmeShzdHIpIHtcbiAgcmV0dXJuIHN0clxuICAgIC5yZXBsYWNlKC8oW0EtWl0pL2csICctJDEnKVxuICAgIC5yZXBsYWNlKC9ebXMtLywgJy1tcy0nKVxuICAgIC50b0xvd2VyQ2FzZSgpXG59XG5cbmZ1bmN0aW9uIGRlY2wocGFyZW50LCBuYW1lLCB2YWx1ZSkge1xuICBpZiAodmFsdWUgPT09IGZhbHNlIHx8IHZhbHVlID09PSBudWxsKSByZXR1cm5cblxuICBpZiAoIW5hbWUuc3RhcnRzV2l0aCgnLS0nKSkge1xuICAgIG5hbWUgPSBkYXNoaWZ5KG5hbWUpXG4gIH1cblxuICBpZiAodHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJykge1xuICAgIGlmICh2YWx1ZSA9PT0gMCB8fCBVTklUTEVTU1tuYW1lXSkge1xuICAgICAgdmFsdWUgPSB2YWx1ZS50b1N0cmluZygpXG4gICAgfSBlbHNlIHtcbiAgICAgIHZhbHVlICs9ICdweCdcbiAgICB9XG4gIH1cblxuICBpZiAobmFtZSA9PT0gJ2Nzcy1mbG9hdCcpIG5hbWUgPSAnZmxvYXQnXG5cbiAgaWYgKElNUE9SVEFOVC50ZXN0KHZhbHVlKSkge1xuICAgIHZhbHVlID0gdmFsdWUucmVwbGFjZShJTVBPUlRBTlQsICcnKVxuICAgIHBhcmVudC5wdXNoKHBvc3Rjc3MuZGVjbCh7IHByb3A6IG5hbWUsIHZhbHVlLCBpbXBvcnRhbnQ6IHRydWUgfSkpXG4gIH0gZWxzZSB7XG4gICAgcGFyZW50LnB1c2gocG9zdGNzcy5kZWNsKHsgcHJvcDogbmFtZSwgdmFsdWUgfSkpXG4gIH1cbn1cblxuZnVuY3Rpb24gYXRSdWxlKHBhcmVudCwgcGFydHMsIHZhbHVlKSB7XG4gIGxldCBub2RlID0gcG9zdGNzcy5hdFJ1bGUoeyBuYW1lOiBwYXJ0c1sxXSwgcGFyYW1zOiBwYXJ0c1szXSB8fCAnJyB9KVxuICBpZiAodHlwZW9mIHZhbHVlID09PSAnb2JqZWN0Jykge1xuICAgIG5vZGUubm9kZXMgPSBbXVxuICAgIHBhcnNlKHZhbHVlLCBub2RlKVxuICB9XG4gIHBhcmVudC5wdXNoKG5vZGUpXG59XG5cbmZ1bmN0aW9uIHBhcnNlKG9iaiwgcGFyZW50KSB7XG4gIGxldCBuYW1lLCB2YWx1ZSwgbm9kZVxuICBmb3IgKG5hbWUgaW4gb2JqKSB7XG4gICAgdmFsdWUgPSBvYmpbbmFtZV1cbiAgICBpZiAodmFsdWUgPT09IG51bGwgfHwgdHlwZW9mIHZhbHVlID09PSAndW5kZWZpbmVkJykge1xuICAgICAgY29udGludWVcbiAgICB9IGVsc2UgaWYgKG5hbWVbMF0gPT09ICdAJykge1xuICAgICAgbGV0IHBhcnRzID0gbmFtZS5tYXRjaCgvQChcXFMrKShcXHMrKFtcXFdcXHddKilcXHMqKT8vKVxuICAgICAgaWYgKEFycmF5LmlzQXJyYXkodmFsdWUpKSB7XG4gICAgICAgIGZvciAobGV0IGkgb2YgdmFsdWUpIHtcbiAgICAgICAgICBhdFJ1bGUocGFyZW50LCBwYXJ0cywgaSlcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYXRSdWxlKHBhcmVudCwgcGFydHMsIHZhbHVlKVxuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAgIGZvciAobGV0IGkgb2YgdmFsdWUpIHtcbiAgICAgICAgZGVjbChwYXJlbnQsIG5hbWUsIGkpXG4gICAgICB9XG4gICAgfSBlbHNlIGlmICh0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnKSB7XG4gICAgICBub2RlID0gcG9zdGNzcy5ydWxlKHsgc2VsZWN0b3I6IG5hbWUgfSlcbiAgICAgIHBhcnNlKHZhbHVlLCBub2RlKVxuICAgICAgcGFyZW50LnB1c2gobm9kZSlcbiAgICB9IGVsc2Uge1xuICAgICAgZGVjbChwYXJlbnQsIG5hbWUsIHZhbHVlKVxuICAgIH1cbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChvYmopIHtcbiAgbGV0IHJvb3QgPSBwb3N0Y3NzLnJvb3QoKVxuICBwYXJzZShvYmosIHJvb3QpXG4gIHJldHVybiByb290XG59XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///91671\n")},76533:(module,__unused_webpack_exports,__webpack_require__)=>{eval("let objectify = __webpack_require__(56426)\n\nmodule.exports = function processResult(result) {\n  if (console && console.warn) {\n    result.warnings().forEach(warn => {\n      let source = warn.plugin || 'PostCSS'\n      console.warn(source + ': ' + warn.text)\n    })\n  }\n  return objectify(result.root)\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNzY1MzMuanMiLCJtYXBwaW5ncyI6IkFBQUEsZ0JBQWdCLG1CQUFPLENBQUMsS0FBZTs7QUFFdkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ibG9ja2JpdGUvLi9ub2RlX21vZHVsZXMvcG9zdGNzcy1qcy9wcm9jZXNzLXJlc3VsdC5qcz9jMTBmIl0sInNvdXJjZXNDb250ZW50IjpbImxldCBvYmplY3RpZnkgPSByZXF1aXJlKCcuL29iamVjdGlmaWVyJylcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBwcm9jZXNzUmVzdWx0KHJlc3VsdCkge1xuICBpZiAoY29uc29sZSAmJiBjb25zb2xlLndhcm4pIHtcbiAgICByZXN1bHQud2FybmluZ3MoKS5mb3JFYWNoKHdhcm4gPT4ge1xuICAgICAgbGV0IHNvdXJjZSA9IHdhcm4ucGx1Z2luIHx8ICdQb3N0Q1NTJ1xuICAgICAgY29uc29sZS53YXJuKHNvdXJjZSArICc6ICcgKyB3YXJuLnRleHQpXG4gICAgfSlcbiAgfVxuICByZXR1cm4gb2JqZWN0aWZ5KHJlc3VsdC5yb290KVxufVxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///76533\n")},61151:(module,__unused_webpack_exports,__webpack_require__)=>{eval("let postcss = __webpack_require__(12895)\n\nlet processResult = __webpack_require__(76533)\nlet parse = __webpack_require__(91671)\n\nmodule.exports = function (plugins) {\n  let processor = postcss(plugins)\n  return input => {\n    let result = processor.process(input, { parser: parse, from: undefined })\n    return processResult(result)\n  }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNjExNTEuanMiLCJtYXBwaW5ncyI6IkFBQUEsY0FBYyxtQkFBTyxDQUFDLEtBQVM7O0FBRS9CLG9CQUFvQixtQkFBTyxDQUFDLEtBQWtCO0FBQzlDLFlBQVksbUJBQU8sQ0FBQyxLQUFVOztBQUU5QjtBQUNBO0FBQ0E7QUFDQSw0Q0FBNEMsZ0NBQWdDO0FBQzVFO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2Jsb2NrYml0ZS8uL25vZGVfbW9kdWxlcy9wb3N0Y3NzLWpzL3N5bmMuanM/MTEzZSJdLCJzb3VyY2VzQ29udGVudCI6WyJsZXQgcG9zdGNzcyA9IHJlcXVpcmUoJ3Bvc3Rjc3MnKVxuXG5sZXQgcHJvY2Vzc1Jlc3VsdCA9IHJlcXVpcmUoJy4vcHJvY2Vzcy1yZXN1bHQnKVxubGV0IHBhcnNlID0gcmVxdWlyZSgnLi9wYXJzZXInKVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChwbHVnaW5zKSB7XG4gIGxldCBwcm9jZXNzb3IgPSBwb3N0Y3NzKHBsdWdpbnMpXG4gIHJldHVybiBpbnB1dCA9PiB7XG4gICAgbGV0IHJlc3VsdCA9IHByb2Nlc3Nvci5wcm9jZXNzKGlucHV0LCB7IHBhcnNlcjogcGFyc2UsIGZyb206IHVuZGVmaW5lZCB9KVxuICAgIHJldHVybiBwcm9jZXNzUmVzdWx0KHJlc3VsdClcbiAgfVxufVxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///61151\n")},22110:(module,__unused_webpack_exports,__webpack_require__)=>{eval("let parser = __webpack_require__(97149)\n\nfunction parse (str, rule) {\n  let nodes\n  let saver = parser(parsed => {\n    nodes = parsed\n  })\n  try {\n    saver.processSync(str)\n  } catch (e) {\n    if (str.includes(':')) {\n      throw rule ? rule.error('Missed semicolon') : e\n    } else {\n      throw rule ? rule.error(e.message) : e\n    }\n  }\n  return nodes.at(0)\n}\n\nfunction replace (nodes, parent) {\n  let replaced = false\n  nodes.each(i => {\n    if (i.type === 'nesting') {\n      let clonedParent = parent.clone()\n      if (i.value !== '&') {\n        i.replaceWith(parse(i.value.replace('&', clonedParent.toString())))\n      } else {\n        i.replaceWith(clonedParent)\n      }\n      replaced = true\n    } else if (i.nodes) {\n      if (replace(i, parent)) {\n        replaced = true\n      }\n    }\n  })\n  return replaced\n}\n\nfunction selectors (parent, child) {\n  let result = []\n  parent.selectors.forEach(i => {\n    let parentNode = parse(i, parent)\n\n    child.selectors.forEach(j => {\n      if (j.length) {\n        let node = parse(j, child)\n        let replaced = replace(node, parentNode)\n        if (!replaced) {\n          node.prepend(parser.combinator({ value: ' ' }))\n          node.prepend(parentNode.clone())\n        }\n        result.push(node.toString())\n      }\n    })\n  })\n  return result\n}\n\nfunction pickComment (comment, after) {\n  if (comment && comment.type === 'comment') {\n    after.after(comment)\n    return comment\n  } else {\n    return after\n  }\n}\n\nfunction createFnAtruleChilds (bubble) {\n  return function atruleChilds (rule, atrule, bubbling) {\n    let children = []\n    atrule.each(child => {\n      if (child.type === 'comment') {\n        children.push(child)\n      } else if (child.type === 'decl') {\n        children.push(child)\n      } else if (child.type === 'rule' && bubbling) {\n        child.selectors = selectors(rule, child)\n      } else if (child.type === 'atrule') {\n        if (child.nodes && bubble[child.name]) {\n          atruleChilds(rule, child, true)\n        } else {\n          children.push(child)\n        }\n      }\n    })\n    if (bubbling) {\n      if (children.length) {\n        let clone = rule.clone({ nodes: [] })\n        for (let child of children) {\n          clone.append(child)\n        }\n        atrule.prepend(clone)\n      }\n    }\n  }\n}\n\nfunction pickDeclarations (selector, declarations, after, Rule) {\n  let parent = new Rule({\n    selector,\n    nodes: []\n  })\n\n  for (let declaration of declarations) {\n    parent.append(declaration)\n  }\n\n  after.after(parent)\n  return parent\n}\n\nfunction atruleNames (defaults, custom) {\n  let list = {}\n  for (let i of defaults) {\n    list[i] = true\n  }\n  if (custom) {\n    for (let i of custom) {\n      let name = i.replace(/^@/, '')\n      list[name] = true\n    }\n  }\n  return list\n}\n\nmodule.exports = (opts = {}) => {\n  let bubble = atruleNames(['media', 'supports'], opts.bubble)\n  let atruleChilds = createFnAtruleChilds(bubble)\n  let unwrap = atruleNames(\n    [\n      'document',\n      'font-face',\n      'keyframes',\n      '-webkit-keyframes',\n      '-moz-keyframes'\n    ],\n    opts.unwrap\n  )\n  let preserveEmpty = opts.preserveEmpty\n\n  return {\n    postcssPlugin: 'postcss-nested',\n    Rule (rule, { Rule }) {\n      let unwrapped = false\n      let after = rule\n      let copyDeclarations = false\n      let declarations = []\n\n      rule.each(child => {\n        if (child.type === 'rule') {\n          if (declarations.length) {\n            after = pickDeclarations(rule.selector, declarations, after, Rule)\n            declarations = []\n          }\n\n          copyDeclarations = true\n          unwrapped = true\n          child.selectors = selectors(rule, child)\n          after = pickComment(child.prev(), after)\n          after.after(child)\n          after = child\n        } else if (child.type === 'atrule') {\n          if (declarations.length) {\n            after = pickDeclarations(rule.selector, declarations, after, Rule)\n            declarations = []\n          }\n\n          if (child.name === 'at-root') {\n            unwrapped = true\n            atruleChilds(rule, child, false)\n\n            let nodes = child.nodes\n            if (child.params) {\n              nodes = new Rule({ selector: child.params, nodes })\n            }\n\n            after.after(nodes)\n            after = nodes\n            child.remove()\n          } else if (bubble[child.name]) {\n            copyDeclarations = true\n            unwrapped = true\n            atruleChilds(rule, child, true)\n            after = pickComment(child.prev(), after)\n            after.after(child)\n            after = child\n          } else if (unwrap[child.name]) {\n            copyDeclarations = true\n            unwrapped = true\n            atruleChilds(rule, child, false)\n            after = pickComment(child.prev(), after)\n            after.after(child)\n            after = child\n          } else if (copyDeclarations) {\n            declarations.push(child)\n          }\n        } else if (child.type === 'decl' && copyDeclarations) {\n          declarations.push(child)\n        }\n      })\n\n      if (declarations.length) {\n        after = pickDeclarations(rule.selector, declarations, after, Rule)\n      }\n\n      if (unwrapped && preserveEmpty !== true) {\n        rule.raws.semicolon = true\n        if (rule.nodes.length === 0) rule.remove()\n      }\n    }\n  }\n}\nmodule.exports.postcss = true\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///22110\n")},97149:(module,exports,__webpack_require__)=>{"use strict";eval('\n\nexports.__esModule = true;\nexports["default"] = void 0;\nvar _processor = _interopRequireDefault(__webpack_require__(48349));\nvar selectors = _interopRequireWildcard(__webpack_require__(50680));\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }\nvar parser = function parser(processor) {\n  return new _processor["default"](processor);\n};\nObject.assign(parser, selectors);\ndelete parser.__esModule;\nvar _default = parser;\nexports["default"] = _default;\nmodule.exports = exports.default;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOTcxNDkuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsa0JBQWtCO0FBQ2xCLGtCQUFrQjtBQUNsQix3Q0FBd0MsbUJBQU8sQ0FBQyxLQUFhO0FBQzdELHdDQUF3QyxtQkFBTyxDQUFDLEtBQWE7QUFDN0QsaURBQWlELGdEQUFnRCx1Q0FBdUMsc0NBQXNDLG9GQUFvRiw0REFBNEQ7QUFDOVQscURBQXFELDZDQUE2QyxjQUFjLDRFQUE0RSxTQUFTLG9CQUFvQixtREFBbUQsK0JBQStCLHlCQUF5QixpQkFBaUIsc0ZBQXNGLHVCQUF1QiwyRUFBMkUscUZBQXFGLHNDQUFzQyw0Q0FBNEMsT0FBTyw4QkFBOEIseUJBQXlCLGFBQWEsMEJBQTBCO0FBQ3p4Qix1Q0FBdUMsdUNBQXVDO0FBQzlFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQjtBQUNsQiIsInNvdXJjZXMiOlsid2VicGFjazovL2Jsb2NrYml0ZS8uL25vZGVfbW9kdWxlcy9wb3N0Y3NzLXNlbGVjdG9yLXBhcnNlci9kaXN0L2luZGV4LmpzP2JhYWIiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IHZvaWQgMDtcbnZhciBfcHJvY2Vzc29yID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9wcm9jZXNzb3JcIikpO1xudmFyIHNlbGVjdG9ycyA9IF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKHJlcXVpcmUoXCIuL3NlbGVjdG9yc1wiKSk7XG5mdW5jdGlvbiBfZ2V0UmVxdWlyZVdpbGRjYXJkQ2FjaGUobm9kZUludGVyb3ApIHsgaWYgKHR5cGVvZiBXZWFrTWFwICE9PSBcImZ1bmN0aW9uXCIpIHJldHVybiBudWxsOyB2YXIgY2FjaGVCYWJlbEludGVyb3AgPSBuZXcgV2Vha01hcCgpOyB2YXIgY2FjaGVOb2RlSW50ZXJvcCA9IG5ldyBXZWFrTWFwKCk7IHJldHVybiAoX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlID0gZnVuY3Rpb24gX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlKG5vZGVJbnRlcm9wKSB7IHJldHVybiBub2RlSW50ZXJvcCA/IGNhY2hlTm9kZUludGVyb3AgOiBjYWNoZUJhYmVsSW50ZXJvcDsgfSkobm9kZUludGVyb3ApOyB9XG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChvYmosIG5vZGVJbnRlcm9wKSB7IGlmICghbm9kZUludGVyb3AgJiYgb2JqICYmIG9iai5fX2VzTW9kdWxlKSB7IHJldHVybiBvYmo7IH0gaWYgKG9iaiA9PT0gbnVsbCB8fCB0eXBlb2Ygb2JqICE9PSBcIm9iamVjdFwiICYmIHR5cGVvZiBvYmogIT09IFwiZnVuY3Rpb25cIikgeyByZXR1cm4geyBcImRlZmF1bHRcIjogb2JqIH07IH0gdmFyIGNhY2hlID0gX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlKG5vZGVJbnRlcm9wKTsgaWYgKGNhY2hlICYmIGNhY2hlLmhhcyhvYmopKSB7IHJldHVybiBjYWNoZS5nZXQob2JqKTsgfSB2YXIgbmV3T2JqID0ge307IHZhciBoYXNQcm9wZXJ0eURlc2NyaXB0b3IgPSBPYmplY3QuZGVmaW5lUHJvcGVydHkgJiYgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjsgZm9yICh2YXIga2V5IGluIG9iaikgeyBpZiAoa2V5ICE9PSBcImRlZmF1bHRcIiAmJiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBrZXkpKSB7IHZhciBkZXNjID0gaGFzUHJvcGVydHlEZXNjcmlwdG9yID8gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmosIGtleSkgOiBudWxsOyBpZiAoZGVzYyAmJiAoZGVzYy5nZXQgfHwgZGVzYy5zZXQpKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShuZXdPYmosIGtleSwgZGVzYyk7IH0gZWxzZSB7IG5ld09ialtrZXldID0gb2JqW2tleV07IH0gfSB9IG5ld09ialtcImRlZmF1bHRcIl0gPSBvYmo7IGlmIChjYWNoZSkgeyBjYWNoZS5zZXQob2JqLCBuZXdPYmopOyB9IHJldHVybiBuZXdPYmo7IH1cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IFwiZGVmYXVsdFwiOiBvYmogfTsgfVxudmFyIHBhcnNlciA9IGZ1bmN0aW9uIHBhcnNlcihwcm9jZXNzb3IpIHtcbiAgcmV0dXJuIG5ldyBfcHJvY2Vzc29yW1wiZGVmYXVsdFwiXShwcm9jZXNzb3IpO1xufTtcbk9iamVjdC5hc3NpZ24ocGFyc2VyLCBzZWxlY3RvcnMpO1xuZGVsZXRlIHBhcnNlci5fX2VzTW9kdWxlO1xudmFyIF9kZWZhdWx0ID0gcGFyc2VyO1xuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSBfZGVmYXVsdDtcbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0cy5kZWZhdWx0OyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///97149\n')},65170:(module,exports,__webpack_require__)=>{"use strict";eval("\n\nexports.__esModule = true;\nexports[\"default\"] = void 0;\nvar _root = _interopRequireDefault(__webpack_require__(80518));\nvar _selector = _interopRequireDefault(__webpack_require__(30339));\nvar _className = _interopRequireDefault(__webpack_require__(64195));\nvar _comment = _interopRequireDefault(__webpack_require__(70425));\nvar _id = _interopRequireDefault(__webpack_require__(77071));\nvar _tag = _interopRequireDefault(__webpack_require__(79720));\nvar _string = _interopRequireDefault(__webpack_require__(85799));\nvar _pseudo = _interopRequireDefault(__webpack_require__(17324));\nvar _attribute = _interopRequireWildcard(__webpack_require__(85588));\nvar _universal = _interopRequireDefault(__webpack_require__(81669));\nvar _combinator = _interopRequireDefault(__webpack_require__(91704));\nvar _nesting = _interopRequireDefault(__webpack_require__(62918));\nvar _sortAscending = _interopRequireDefault(__webpack_require__(20263));\nvar _tokenize = _interopRequireWildcard(__webpack_require__(82648));\nvar tokens = _interopRequireWildcard(__webpack_require__(70071));\nvar types = _interopRequireWildcard(__webpack_require__(11581));\nvar _util = __webpack_require__(39606);\nvar _WHITESPACE_TOKENS, _Object$assign;\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { \"default\": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj[\"default\"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\nvar WHITESPACE_TOKENS = (_WHITESPACE_TOKENS = {}, _WHITESPACE_TOKENS[tokens.space] = true, _WHITESPACE_TOKENS[tokens.cr] = true, _WHITESPACE_TOKENS[tokens.feed] = true, _WHITESPACE_TOKENS[tokens.newline] = true, _WHITESPACE_TOKENS[tokens.tab] = true, _WHITESPACE_TOKENS);\nvar WHITESPACE_EQUIV_TOKENS = Object.assign({}, WHITESPACE_TOKENS, (_Object$assign = {}, _Object$assign[tokens.comment] = true, _Object$assign));\nfunction tokenStart(token) {\n  return {\n    line: token[_tokenize.FIELDS.START_LINE],\n    column: token[_tokenize.FIELDS.START_COL]\n  };\n}\nfunction tokenEnd(token) {\n  return {\n    line: token[_tokenize.FIELDS.END_LINE],\n    column: token[_tokenize.FIELDS.END_COL]\n  };\n}\nfunction getSource(startLine, startColumn, endLine, endColumn) {\n  return {\n    start: {\n      line: startLine,\n      column: startColumn\n    },\n    end: {\n      line: endLine,\n      column: endColumn\n    }\n  };\n}\nfunction getTokenSource(token) {\n  return getSource(token[_tokenize.FIELDS.START_LINE], token[_tokenize.FIELDS.START_COL], token[_tokenize.FIELDS.END_LINE], token[_tokenize.FIELDS.END_COL]);\n}\nfunction getTokenSourceSpan(startToken, endToken) {\n  if (!startToken) {\n    return undefined;\n  }\n  return getSource(startToken[_tokenize.FIELDS.START_LINE], startToken[_tokenize.FIELDS.START_COL], endToken[_tokenize.FIELDS.END_LINE], endToken[_tokenize.FIELDS.END_COL]);\n}\nfunction unescapeProp(node, prop) {\n  var value = node[prop];\n  if (typeof value !== \"string\") {\n    return;\n  }\n  if (value.indexOf(\"\\\\\") !== -1) {\n    (0, _util.ensureObject)(node, 'raws');\n    node[prop] = (0, _util.unesc)(value);\n    if (node.raws[prop] === undefined) {\n      node.raws[prop] = value;\n    }\n  }\n  return node;\n}\nfunction indexesOf(array, item) {\n  var i = -1;\n  var indexes = [];\n  while ((i = array.indexOf(item, i + 1)) !== -1) {\n    indexes.push(i);\n  }\n  return indexes;\n}\nfunction uniqs() {\n  var list = Array.prototype.concat.apply([], arguments);\n  return list.filter(function (item, i) {\n    return i === list.indexOf(item);\n  });\n}\nvar Parser = /*#__PURE__*/function () {\n  function Parser(rule, options) {\n    if (options === void 0) {\n      options = {};\n    }\n    this.rule = rule;\n    this.options = Object.assign({\n      lossy: false,\n      safe: false\n    }, options);\n    this.position = 0;\n    this.css = typeof this.rule === 'string' ? this.rule : this.rule.selector;\n    this.tokens = (0, _tokenize[\"default\"])({\n      css: this.css,\n      error: this._errorGenerator(),\n      safe: this.options.safe\n    });\n    var rootSource = getTokenSourceSpan(this.tokens[0], this.tokens[this.tokens.length - 1]);\n    this.root = new _root[\"default\"]({\n      source: rootSource\n    });\n    this.root.errorGenerator = this._errorGenerator();\n    var selector = new _selector[\"default\"]({\n      source: {\n        start: {\n          line: 1,\n          column: 1\n        }\n      },\n      sourceIndex: 0\n    });\n    this.root.append(selector);\n    this.current = selector;\n    this.loop();\n  }\n  var _proto = Parser.prototype;\n  _proto._errorGenerator = function _errorGenerator() {\n    var _this = this;\n    return function (message, errorOptions) {\n      if (typeof _this.rule === 'string') {\n        return new Error(message);\n      }\n      return _this.rule.error(message, errorOptions);\n    };\n  };\n  _proto.attribute = function attribute() {\n    var attr = [];\n    var startingToken = this.currToken;\n    this.position++;\n    while (this.position < this.tokens.length && this.currToken[_tokenize.FIELDS.TYPE] !== tokens.closeSquare) {\n      attr.push(this.currToken);\n      this.position++;\n    }\n    if (this.currToken[_tokenize.FIELDS.TYPE] !== tokens.closeSquare) {\n      return this.expected('closing square bracket', this.currToken[_tokenize.FIELDS.START_POS]);\n    }\n    var len = attr.length;\n    var node = {\n      source: getSource(startingToken[1], startingToken[2], this.currToken[3], this.currToken[4]),\n      sourceIndex: startingToken[_tokenize.FIELDS.START_POS]\n    };\n    if (len === 1 && !~[tokens.word].indexOf(attr[0][_tokenize.FIELDS.TYPE])) {\n      return this.expected('attribute', attr[0][_tokenize.FIELDS.START_POS]);\n    }\n    var pos = 0;\n    var spaceBefore = '';\n    var commentBefore = '';\n    var lastAdded = null;\n    var spaceAfterMeaningfulToken = false;\n    while (pos < len) {\n      var token = attr[pos];\n      var content = this.content(token);\n      var next = attr[pos + 1];\n      switch (token[_tokenize.FIELDS.TYPE]) {\n        case tokens.space:\n          // if (\n          //     len === 1 ||\n          //     pos === 0 && this.content(next) === '|'\n          // ) {\n          //     return this.expected('attribute', token[TOKEN.START_POS], content);\n          // }\n          spaceAfterMeaningfulToken = true;\n          if (this.options.lossy) {\n            break;\n          }\n          if (lastAdded) {\n            (0, _util.ensureObject)(node, 'spaces', lastAdded);\n            var prevContent = node.spaces[lastAdded].after || '';\n            node.spaces[lastAdded].after = prevContent + content;\n            var existingComment = (0, _util.getProp)(node, 'raws', 'spaces', lastAdded, 'after') || null;\n            if (existingComment) {\n              node.raws.spaces[lastAdded].after = existingComment + content;\n            }\n          } else {\n            spaceBefore = spaceBefore + content;\n            commentBefore = commentBefore + content;\n          }\n          break;\n        case tokens.asterisk:\n          if (next[_tokenize.FIELDS.TYPE] === tokens.equals) {\n            node.operator = content;\n            lastAdded = 'operator';\n          } else if ((!node.namespace || lastAdded === \"namespace\" && !spaceAfterMeaningfulToken) && next) {\n            if (spaceBefore) {\n              (0, _util.ensureObject)(node, 'spaces', 'attribute');\n              node.spaces.attribute.before = spaceBefore;\n              spaceBefore = '';\n            }\n            if (commentBefore) {\n              (0, _util.ensureObject)(node, 'raws', 'spaces', 'attribute');\n              node.raws.spaces.attribute.before = spaceBefore;\n              commentBefore = '';\n            }\n            node.namespace = (node.namespace || \"\") + content;\n            var rawValue = (0, _util.getProp)(node, 'raws', 'namespace') || null;\n            if (rawValue) {\n              node.raws.namespace += content;\n            }\n            lastAdded = 'namespace';\n          }\n          spaceAfterMeaningfulToken = false;\n          break;\n        case tokens.dollar:\n          if (lastAdded === \"value\") {\n            var oldRawValue = (0, _util.getProp)(node, 'raws', 'value');\n            node.value += \"$\";\n            if (oldRawValue) {\n              node.raws.value = oldRawValue + \"$\";\n            }\n            break;\n          }\n        // Falls through\n        case tokens.caret:\n          if (next[_tokenize.FIELDS.TYPE] === tokens.equals) {\n            node.operator = content;\n            lastAdded = 'operator';\n          }\n          spaceAfterMeaningfulToken = false;\n          break;\n        case tokens.combinator:\n          if (content === '~' && next[_tokenize.FIELDS.TYPE] === tokens.equals) {\n            node.operator = content;\n            lastAdded = 'operator';\n          }\n          if (content !== '|') {\n            spaceAfterMeaningfulToken = false;\n            break;\n          }\n          if (next[_tokenize.FIELDS.TYPE] === tokens.equals) {\n            node.operator = content;\n            lastAdded = 'operator';\n          } else if (!node.namespace && !node.attribute) {\n            node.namespace = true;\n          }\n          spaceAfterMeaningfulToken = false;\n          break;\n        case tokens.word:\n          if (next && this.content(next) === '|' && attr[pos + 2] && attr[pos + 2][_tokenize.FIELDS.TYPE] !== tokens.equals &&\n          // this look-ahead probably fails with comment nodes involved.\n          !node.operator && !node.namespace) {\n            node.namespace = content;\n            lastAdded = 'namespace';\n          } else if (!node.attribute || lastAdded === \"attribute\" && !spaceAfterMeaningfulToken) {\n            if (spaceBefore) {\n              (0, _util.ensureObject)(node, 'spaces', 'attribute');\n              node.spaces.attribute.before = spaceBefore;\n              spaceBefore = '';\n            }\n            if (commentBefore) {\n              (0, _util.ensureObject)(node, 'raws', 'spaces', 'attribute');\n              node.raws.spaces.attribute.before = commentBefore;\n              commentBefore = '';\n            }\n            node.attribute = (node.attribute || \"\") + content;\n            var _rawValue = (0, _util.getProp)(node, 'raws', 'attribute') || null;\n            if (_rawValue) {\n              node.raws.attribute += content;\n            }\n            lastAdded = 'attribute';\n          } else if (!node.value && node.value !== \"\" || lastAdded === \"value\" && !(spaceAfterMeaningfulToken || node.quoteMark)) {\n            var _unescaped = (0, _util.unesc)(content);\n            var _oldRawValue = (0, _util.getProp)(node, 'raws', 'value') || '';\n            var oldValue = node.value || '';\n            node.value = oldValue + _unescaped;\n            node.quoteMark = null;\n            if (_unescaped !== content || _oldRawValue) {\n              (0, _util.ensureObject)(node, 'raws');\n              node.raws.value = (_oldRawValue || oldValue) + content;\n            }\n            lastAdded = 'value';\n          } else {\n            var insensitive = content === 'i' || content === \"I\";\n            if ((node.value || node.value === '') && (node.quoteMark || spaceAfterMeaningfulToken)) {\n              node.insensitive = insensitive;\n              if (!insensitive || content === \"I\") {\n                (0, _util.ensureObject)(node, 'raws');\n                node.raws.insensitiveFlag = content;\n              }\n              lastAdded = 'insensitive';\n              if (spaceBefore) {\n                (0, _util.ensureObject)(node, 'spaces', 'insensitive');\n                node.spaces.insensitive.before = spaceBefore;\n                spaceBefore = '';\n              }\n              if (commentBefore) {\n                (0, _util.ensureObject)(node, 'raws', 'spaces', 'insensitive');\n                node.raws.spaces.insensitive.before = commentBefore;\n                commentBefore = '';\n              }\n            } else if (node.value || node.value === '') {\n              lastAdded = 'value';\n              node.value += content;\n              if (node.raws.value) {\n                node.raws.value += content;\n              }\n            }\n          }\n          spaceAfterMeaningfulToken = false;\n          break;\n        case tokens.str:\n          if (!node.attribute || !node.operator) {\n            return this.error(\"Expected an attribute followed by an operator preceding the string.\", {\n              index: token[_tokenize.FIELDS.START_POS]\n            });\n          }\n          var _unescapeValue = (0, _attribute.unescapeValue)(content),\n            unescaped = _unescapeValue.unescaped,\n            quoteMark = _unescapeValue.quoteMark;\n          node.value = unescaped;\n          node.quoteMark = quoteMark;\n          lastAdded = 'value';\n          (0, _util.ensureObject)(node, 'raws');\n          node.raws.value = content;\n          spaceAfterMeaningfulToken = false;\n          break;\n        case tokens.equals:\n          if (!node.attribute) {\n            return this.expected('attribute', token[_tokenize.FIELDS.START_POS], content);\n          }\n          if (node.value) {\n            return this.error('Unexpected \"=\" found; an operator was already defined.', {\n              index: token[_tokenize.FIELDS.START_POS]\n            });\n          }\n          node.operator = node.operator ? node.operator + content : content;\n          lastAdded = 'operator';\n          spaceAfterMeaningfulToken = false;\n          break;\n        case tokens.comment:\n          if (lastAdded) {\n            if (spaceAfterMeaningfulToken || next && next[_tokenize.FIELDS.TYPE] === tokens.space || lastAdded === 'insensitive') {\n              var lastComment = (0, _util.getProp)(node, 'spaces', lastAdded, 'after') || '';\n              var rawLastComment = (0, _util.getProp)(node, 'raws', 'spaces', lastAdded, 'after') || lastComment;\n              (0, _util.ensureObject)(node, 'raws', 'spaces', lastAdded);\n              node.raws.spaces[lastAdded].after = rawLastComment + content;\n            } else {\n              var lastValue = node[lastAdded] || '';\n              var rawLastValue = (0, _util.getProp)(node, 'raws', lastAdded) || lastValue;\n              (0, _util.ensureObject)(node, 'raws');\n              node.raws[lastAdded] = rawLastValue + content;\n            }\n          } else {\n            commentBefore = commentBefore + content;\n          }\n          break;\n        default:\n          return this.error(\"Unexpected \\\"\" + content + \"\\\" found.\", {\n            index: token[_tokenize.FIELDS.START_POS]\n          });\n      }\n      pos++;\n    }\n    unescapeProp(node, \"attribute\");\n    unescapeProp(node, \"namespace\");\n    this.newNode(new _attribute[\"default\"](node));\n    this.position++;\n  }\n\n  /**\n   * return a node containing meaningless garbage up to (but not including) the specified token position.\n   * if the token position is negative, all remaining tokens are consumed.\n   *\n   * This returns an array containing a single string node if all whitespace,\n   * otherwise an array of comment nodes with space before and after.\n   *\n   * These tokens are not added to the current selector, the caller can add them or use them to amend\n   * a previous node's space metadata.\n   *\n   * In lossy mode, this returns only comments.\n   */;\n  _proto.parseWhitespaceEquivalentTokens = function parseWhitespaceEquivalentTokens(stopPosition) {\n    if (stopPosition < 0) {\n      stopPosition = this.tokens.length;\n    }\n    var startPosition = this.position;\n    var nodes = [];\n    var space = \"\";\n    var lastComment = undefined;\n    do {\n      if (WHITESPACE_TOKENS[this.currToken[_tokenize.FIELDS.TYPE]]) {\n        if (!this.options.lossy) {\n          space += this.content();\n        }\n      } else if (this.currToken[_tokenize.FIELDS.TYPE] === tokens.comment) {\n        var spaces = {};\n        if (space) {\n          spaces.before = space;\n          space = \"\";\n        }\n        lastComment = new _comment[\"default\"]({\n          value: this.content(),\n          source: getTokenSource(this.currToken),\n          sourceIndex: this.currToken[_tokenize.FIELDS.START_POS],\n          spaces: spaces\n        });\n        nodes.push(lastComment);\n      }\n    } while (++this.position < stopPosition);\n    if (space) {\n      if (lastComment) {\n        lastComment.spaces.after = space;\n      } else if (!this.options.lossy) {\n        var firstToken = this.tokens[startPosition];\n        var lastToken = this.tokens[this.position - 1];\n        nodes.push(new _string[\"default\"]({\n          value: '',\n          source: getSource(firstToken[_tokenize.FIELDS.START_LINE], firstToken[_tokenize.FIELDS.START_COL], lastToken[_tokenize.FIELDS.END_LINE], lastToken[_tokenize.FIELDS.END_COL]),\n          sourceIndex: firstToken[_tokenize.FIELDS.START_POS],\n          spaces: {\n            before: space,\n            after: ''\n          }\n        }));\n      }\n    }\n    return nodes;\n  }\n\n  /**\n   *\n   * @param {*} nodes\n   */;\n  _proto.convertWhitespaceNodesToSpace = function convertWhitespaceNodesToSpace(nodes, requiredSpace) {\n    var _this2 = this;\n    if (requiredSpace === void 0) {\n      requiredSpace = false;\n    }\n    var space = \"\";\n    var rawSpace = \"\";\n    nodes.forEach(function (n) {\n      var spaceBefore = _this2.lossySpace(n.spaces.before, requiredSpace);\n      var rawSpaceBefore = _this2.lossySpace(n.rawSpaceBefore, requiredSpace);\n      space += spaceBefore + _this2.lossySpace(n.spaces.after, requiredSpace && spaceBefore.length === 0);\n      rawSpace += spaceBefore + n.value + _this2.lossySpace(n.rawSpaceAfter, requiredSpace && rawSpaceBefore.length === 0);\n    });\n    if (rawSpace === space) {\n      rawSpace = undefined;\n    }\n    var result = {\n      space: space,\n      rawSpace: rawSpace\n    };\n    return result;\n  };\n  _proto.isNamedCombinator = function isNamedCombinator(position) {\n    if (position === void 0) {\n      position = this.position;\n    }\n    return this.tokens[position + 0] && this.tokens[position + 0][_tokenize.FIELDS.TYPE] === tokens.slash && this.tokens[position + 1] && this.tokens[position + 1][_tokenize.FIELDS.TYPE] === tokens.word && this.tokens[position + 2] && this.tokens[position + 2][_tokenize.FIELDS.TYPE] === tokens.slash;\n  };\n  _proto.namedCombinator = function namedCombinator() {\n    if (this.isNamedCombinator()) {\n      var nameRaw = this.content(this.tokens[this.position + 1]);\n      var name = (0, _util.unesc)(nameRaw).toLowerCase();\n      var raws = {};\n      if (name !== nameRaw) {\n        raws.value = \"/\" + nameRaw + \"/\";\n      }\n      var node = new _combinator[\"default\"]({\n        value: \"/\" + name + \"/\",\n        source: getSource(this.currToken[_tokenize.FIELDS.START_LINE], this.currToken[_tokenize.FIELDS.START_COL], this.tokens[this.position + 2][_tokenize.FIELDS.END_LINE], this.tokens[this.position + 2][_tokenize.FIELDS.END_COL]),\n        sourceIndex: this.currToken[_tokenize.FIELDS.START_POS],\n        raws: raws\n      });\n      this.position = this.position + 3;\n      return node;\n    } else {\n      this.unexpected();\n    }\n  };\n  _proto.combinator = function combinator() {\n    var _this3 = this;\n    if (this.content() === '|') {\n      return this.namespace();\n    }\n    // We need to decide between a space that's a descendant combinator and meaningless whitespace at the end of a selector.\n    var nextSigTokenPos = this.locateNextMeaningfulToken(this.position);\n    if (nextSigTokenPos < 0 || this.tokens[nextSigTokenPos][_tokenize.FIELDS.TYPE] === tokens.comma || this.tokens[nextSigTokenPos][_tokenize.FIELDS.TYPE] === tokens.closeParenthesis) {\n      var nodes = this.parseWhitespaceEquivalentTokens(nextSigTokenPos);\n      if (nodes.length > 0) {\n        var last = this.current.last;\n        if (last) {\n          var _this$convertWhitespa = this.convertWhitespaceNodesToSpace(nodes),\n            space = _this$convertWhitespa.space,\n            rawSpace = _this$convertWhitespa.rawSpace;\n          if (rawSpace !== undefined) {\n            last.rawSpaceAfter += rawSpace;\n          }\n          last.spaces.after += space;\n        } else {\n          nodes.forEach(function (n) {\n            return _this3.newNode(n);\n          });\n        }\n      }\n      return;\n    }\n    var firstToken = this.currToken;\n    var spaceOrDescendantSelectorNodes = undefined;\n    if (nextSigTokenPos > this.position) {\n      spaceOrDescendantSelectorNodes = this.parseWhitespaceEquivalentTokens(nextSigTokenPos);\n    }\n    var node;\n    if (this.isNamedCombinator()) {\n      node = this.namedCombinator();\n    } else if (this.currToken[_tokenize.FIELDS.TYPE] === tokens.combinator) {\n      node = new _combinator[\"default\"]({\n        value: this.content(),\n        source: getTokenSource(this.currToken),\n        sourceIndex: this.currToken[_tokenize.FIELDS.START_POS]\n      });\n      this.position++;\n    } else if (WHITESPACE_TOKENS[this.currToken[_tokenize.FIELDS.TYPE]]) {\n      // pass\n    } else if (!spaceOrDescendantSelectorNodes) {\n      this.unexpected();\n    }\n    if (node) {\n      if (spaceOrDescendantSelectorNodes) {\n        var _this$convertWhitespa2 = this.convertWhitespaceNodesToSpace(spaceOrDescendantSelectorNodes),\n          _space = _this$convertWhitespa2.space,\n          _rawSpace = _this$convertWhitespa2.rawSpace;\n        node.spaces.before = _space;\n        node.rawSpaceBefore = _rawSpace;\n      }\n    } else {\n      // descendant combinator\n      var _this$convertWhitespa3 = this.convertWhitespaceNodesToSpace(spaceOrDescendantSelectorNodes, true),\n        _space2 = _this$convertWhitespa3.space,\n        _rawSpace2 = _this$convertWhitespa3.rawSpace;\n      if (!_rawSpace2) {\n        _rawSpace2 = _space2;\n      }\n      var spaces = {};\n      var raws = {\n        spaces: {}\n      };\n      if (_space2.endsWith(' ') && _rawSpace2.endsWith(' ')) {\n        spaces.before = _space2.slice(0, _space2.length - 1);\n        raws.spaces.before = _rawSpace2.slice(0, _rawSpace2.length - 1);\n      } else if (_space2.startsWith(' ') && _rawSpace2.startsWith(' ')) {\n        spaces.after = _space2.slice(1);\n        raws.spaces.after = _rawSpace2.slice(1);\n      } else {\n        raws.value = _rawSpace2;\n      }\n      node = new _combinator[\"default\"]({\n        value: ' ',\n        source: getTokenSourceSpan(firstToken, this.tokens[this.position - 1]),\n        sourceIndex: firstToken[_tokenize.FIELDS.START_POS],\n        spaces: spaces,\n        raws: raws\n      });\n    }\n    if (this.currToken && this.currToken[_tokenize.FIELDS.TYPE] === tokens.space) {\n      node.spaces.after = this.optionalSpace(this.content());\n      this.position++;\n    }\n    return this.newNode(node);\n  };\n  _proto.comma = function comma() {\n    if (this.position === this.tokens.length - 1) {\n      this.root.trailingComma = true;\n      this.position++;\n      return;\n    }\n    this.current._inferEndPosition();\n    var selector = new _selector[\"default\"]({\n      source: {\n        start: tokenStart(this.tokens[this.position + 1])\n      },\n      sourceIndex: this.tokens[this.position + 1][_tokenize.FIELDS.START_POS]\n    });\n    this.current.parent.append(selector);\n    this.current = selector;\n    this.position++;\n  };\n  _proto.comment = function comment() {\n    var current = this.currToken;\n    this.newNode(new _comment[\"default\"]({\n      value: this.content(),\n      source: getTokenSource(current),\n      sourceIndex: current[_tokenize.FIELDS.START_POS]\n    }));\n    this.position++;\n  };\n  _proto.error = function error(message, opts) {\n    throw this.root.error(message, opts);\n  };\n  _proto.missingBackslash = function missingBackslash() {\n    return this.error('Expected a backslash preceding the semicolon.', {\n      index: this.currToken[_tokenize.FIELDS.START_POS]\n    });\n  };\n  _proto.missingParenthesis = function missingParenthesis() {\n    return this.expected('opening parenthesis', this.currToken[_tokenize.FIELDS.START_POS]);\n  };\n  _proto.missingSquareBracket = function missingSquareBracket() {\n    return this.expected('opening square bracket', this.currToken[_tokenize.FIELDS.START_POS]);\n  };\n  _proto.unexpected = function unexpected() {\n    return this.error(\"Unexpected '\" + this.content() + \"'. Escaping special characters with \\\\ may help.\", this.currToken[_tokenize.FIELDS.START_POS]);\n  };\n  _proto.unexpectedPipe = function unexpectedPipe() {\n    return this.error(\"Unexpected '|'.\", this.currToken[_tokenize.FIELDS.START_POS]);\n  };\n  _proto.namespace = function namespace() {\n    var before = this.prevToken && this.content(this.prevToken) || true;\n    if (this.nextToken[_tokenize.FIELDS.TYPE] === tokens.word) {\n      this.position++;\n      return this.word(before);\n    } else if (this.nextToken[_tokenize.FIELDS.TYPE] === tokens.asterisk) {\n      this.position++;\n      return this.universal(before);\n    }\n    this.unexpectedPipe();\n  };\n  _proto.nesting = function nesting() {\n    if (this.nextToken) {\n      var nextContent = this.content(this.nextToken);\n      if (nextContent === \"|\") {\n        this.position++;\n        return;\n      }\n    }\n    var current = this.currToken;\n    this.newNode(new _nesting[\"default\"]({\n      value: this.content(),\n      source: getTokenSource(current),\n      sourceIndex: current[_tokenize.FIELDS.START_POS]\n    }));\n    this.position++;\n  };\n  _proto.parentheses = function parentheses() {\n    var last = this.current.last;\n    var unbalanced = 1;\n    this.position++;\n    if (last && last.type === types.PSEUDO) {\n      var selector = new _selector[\"default\"]({\n        source: {\n          start: tokenStart(this.tokens[this.position])\n        },\n        sourceIndex: this.tokens[this.position][_tokenize.FIELDS.START_POS]\n      });\n      var cache = this.current;\n      last.append(selector);\n      this.current = selector;\n      while (this.position < this.tokens.length && unbalanced) {\n        if (this.currToken[_tokenize.FIELDS.TYPE] === tokens.openParenthesis) {\n          unbalanced++;\n        }\n        if (this.currToken[_tokenize.FIELDS.TYPE] === tokens.closeParenthesis) {\n          unbalanced--;\n        }\n        if (unbalanced) {\n          this.parse();\n        } else {\n          this.current.source.end = tokenEnd(this.currToken);\n          this.current.parent.source.end = tokenEnd(this.currToken);\n          this.position++;\n        }\n      }\n      this.current = cache;\n    } else {\n      // I think this case should be an error. It's used to implement a basic parse of media queries\n      // but I don't think it's a good idea.\n      var parenStart = this.currToken;\n      var parenValue = \"(\";\n      var parenEnd;\n      while (this.position < this.tokens.length && unbalanced) {\n        if (this.currToken[_tokenize.FIELDS.TYPE] === tokens.openParenthesis) {\n          unbalanced++;\n        }\n        if (this.currToken[_tokenize.FIELDS.TYPE] === tokens.closeParenthesis) {\n          unbalanced--;\n        }\n        parenEnd = this.currToken;\n        parenValue += this.parseParenthesisToken(this.currToken);\n        this.position++;\n      }\n      if (last) {\n        last.appendToPropertyAndEscape(\"value\", parenValue, parenValue);\n      } else {\n        this.newNode(new _string[\"default\"]({\n          value: parenValue,\n          source: getSource(parenStart[_tokenize.FIELDS.START_LINE], parenStart[_tokenize.FIELDS.START_COL], parenEnd[_tokenize.FIELDS.END_LINE], parenEnd[_tokenize.FIELDS.END_COL]),\n          sourceIndex: parenStart[_tokenize.FIELDS.START_POS]\n        }));\n      }\n    }\n    if (unbalanced) {\n      return this.expected('closing parenthesis', this.currToken[_tokenize.FIELDS.START_POS]);\n    }\n  };\n  _proto.pseudo = function pseudo() {\n    var _this4 = this;\n    var pseudoStr = '';\n    var startingToken = this.currToken;\n    while (this.currToken && this.currToken[_tokenize.FIELDS.TYPE] === tokens.colon) {\n      pseudoStr += this.content();\n      this.position++;\n    }\n    if (!this.currToken) {\n      return this.expected(['pseudo-class', 'pseudo-element'], this.position - 1);\n    }\n    if (this.currToken[_tokenize.FIELDS.TYPE] === tokens.word) {\n      this.splitWord(false, function (first, length) {\n        pseudoStr += first;\n        _this4.newNode(new _pseudo[\"default\"]({\n          value: pseudoStr,\n          source: getTokenSourceSpan(startingToken, _this4.currToken),\n          sourceIndex: startingToken[_tokenize.FIELDS.START_POS]\n        }));\n        if (length > 1 && _this4.nextToken && _this4.nextToken[_tokenize.FIELDS.TYPE] === tokens.openParenthesis) {\n          _this4.error('Misplaced parenthesis.', {\n            index: _this4.nextToken[_tokenize.FIELDS.START_POS]\n          });\n        }\n      });\n    } else {\n      return this.expected(['pseudo-class', 'pseudo-element'], this.currToken[_tokenize.FIELDS.START_POS]);\n    }\n  };\n  _proto.space = function space() {\n    var content = this.content();\n    // Handle space before and after the selector\n    if (this.position === 0 || this.prevToken[_tokenize.FIELDS.TYPE] === tokens.comma || this.prevToken[_tokenize.FIELDS.TYPE] === tokens.openParenthesis || this.current.nodes.every(function (node) {\n      return node.type === 'comment';\n    })) {\n      this.spaces = this.optionalSpace(content);\n      this.position++;\n    } else if (this.position === this.tokens.length - 1 || this.nextToken[_tokenize.FIELDS.TYPE] === tokens.comma || this.nextToken[_tokenize.FIELDS.TYPE] === tokens.closeParenthesis) {\n      this.current.last.spaces.after = this.optionalSpace(content);\n      this.position++;\n    } else {\n      this.combinator();\n    }\n  };\n  _proto.string = function string() {\n    var current = this.currToken;\n    this.newNode(new _string[\"default\"]({\n      value: this.content(),\n      source: getTokenSource(current),\n      sourceIndex: current[_tokenize.FIELDS.START_POS]\n    }));\n    this.position++;\n  };\n  _proto.universal = function universal(namespace) {\n    var nextToken = this.nextToken;\n    if (nextToken && this.content(nextToken) === '|') {\n      this.position++;\n      return this.namespace();\n    }\n    var current = this.currToken;\n    this.newNode(new _universal[\"default\"]({\n      value: this.content(),\n      source: getTokenSource(current),\n      sourceIndex: current[_tokenize.FIELDS.START_POS]\n    }), namespace);\n    this.position++;\n  };\n  _proto.splitWord = function splitWord(namespace, firstCallback) {\n    var _this5 = this;\n    var nextToken = this.nextToken;\n    var word = this.content();\n    while (nextToken && ~[tokens.dollar, tokens.caret, tokens.equals, tokens.word].indexOf(nextToken[_tokenize.FIELDS.TYPE])) {\n      this.position++;\n      var current = this.content();\n      word += current;\n      if (current.lastIndexOf('\\\\') === current.length - 1) {\n        var next = this.nextToken;\n        if (next && next[_tokenize.FIELDS.TYPE] === tokens.space) {\n          word += this.requiredSpace(this.content(next));\n          this.position++;\n        }\n      }\n      nextToken = this.nextToken;\n    }\n    var hasClass = indexesOf(word, '.').filter(function (i) {\n      // Allow escaped dot within class name\n      var escapedDot = word[i - 1] === '\\\\';\n      // Allow decimal numbers percent in @keyframes\n      var isKeyframesPercent = /^\\d+\\.\\d+%$/.test(word);\n      return !escapedDot && !isKeyframesPercent;\n    });\n    var hasId = indexesOf(word, '#').filter(function (i) {\n      return word[i - 1] !== '\\\\';\n    });\n    // Eliminate Sass interpolations from the list of id indexes\n    var interpolations = indexesOf(word, '#{');\n    if (interpolations.length) {\n      hasId = hasId.filter(function (hashIndex) {\n        return !~interpolations.indexOf(hashIndex);\n      });\n    }\n    var indices = (0, _sortAscending[\"default\"])(uniqs([0].concat(hasClass, hasId)));\n    indices.forEach(function (ind, i) {\n      var index = indices[i + 1] || word.length;\n      var value = word.slice(ind, index);\n      if (i === 0 && firstCallback) {\n        return firstCallback.call(_this5, value, indices.length);\n      }\n      var node;\n      var current = _this5.currToken;\n      var sourceIndex = current[_tokenize.FIELDS.START_POS] + indices[i];\n      var source = getSource(current[1], current[2] + ind, current[3], current[2] + (index - 1));\n      if (~hasClass.indexOf(ind)) {\n        var classNameOpts = {\n          value: value.slice(1),\n          source: source,\n          sourceIndex: sourceIndex\n        };\n        node = new _className[\"default\"](unescapeProp(classNameOpts, \"value\"));\n      } else if (~hasId.indexOf(ind)) {\n        var idOpts = {\n          value: value.slice(1),\n          source: source,\n          sourceIndex: sourceIndex\n        };\n        node = new _id[\"default\"](unescapeProp(idOpts, \"value\"));\n      } else {\n        var tagOpts = {\n          value: value,\n          source: source,\n          sourceIndex: sourceIndex\n        };\n        unescapeProp(tagOpts, \"value\");\n        node = new _tag[\"default\"](tagOpts);\n      }\n      _this5.newNode(node, namespace);\n      // Ensure that the namespace is used only once\n      namespace = null;\n    });\n    this.position++;\n  };\n  _proto.word = function word(namespace) {\n    var nextToken = this.nextToken;\n    if (nextToken && this.content(nextToken) === '|') {\n      this.position++;\n      return this.namespace();\n    }\n    return this.splitWord(namespace);\n  };\n  _proto.loop = function loop() {\n    while (this.position < this.tokens.length) {\n      this.parse(true);\n    }\n    this.current._inferEndPosition();\n    return this.root;\n  };\n  _proto.parse = function parse(throwOnParenthesis) {\n    switch (this.currToken[_tokenize.FIELDS.TYPE]) {\n      case tokens.space:\n        this.space();\n        break;\n      case tokens.comment:\n        this.comment();\n        break;\n      case tokens.openParenthesis:\n        this.parentheses();\n        break;\n      case tokens.closeParenthesis:\n        if (throwOnParenthesis) {\n          this.missingParenthesis();\n        }\n        break;\n      case tokens.openSquare:\n        this.attribute();\n        break;\n      case tokens.dollar:\n      case tokens.caret:\n      case tokens.equals:\n      case tokens.word:\n        this.word();\n        break;\n      case tokens.colon:\n        this.pseudo();\n        break;\n      case tokens.comma:\n        this.comma();\n        break;\n      case tokens.asterisk:\n        this.universal();\n        break;\n      case tokens.ampersand:\n        this.nesting();\n        break;\n      case tokens.slash:\n      case tokens.combinator:\n        this.combinator();\n        break;\n      case tokens.str:\n        this.string();\n        break;\n      // These cases throw; no break needed.\n      case tokens.closeSquare:\n        this.missingSquareBracket();\n      case tokens.semicolon:\n        this.missingBackslash();\n      default:\n        this.unexpected();\n    }\n  }\n\n  /**\n   * Helpers\n   */;\n  _proto.expected = function expected(description, index, found) {\n    if (Array.isArray(description)) {\n      var last = description.pop();\n      description = description.join(', ') + \" or \" + last;\n    }\n    var an = /^[aeiou]/.test(description[0]) ? 'an' : 'a';\n    if (!found) {\n      return this.error(\"Expected \" + an + \" \" + description + \".\", {\n        index: index\n      });\n    }\n    return this.error(\"Expected \" + an + \" \" + description + \", found \\\"\" + found + \"\\\" instead.\", {\n      index: index\n    });\n  };\n  _proto.requiredSpace = function requiredSpace(space) {\n    return this.options.lossy ? ' ' : space;\n  };\n  _proto.optionalSpace = function optionalSpace(space) {\n    return this.options.lossy ? '' : space;\n  };\n  _proto.lossySpace = function lossySpace(space, required) {\n    if (this.options.lossy) {\n      return required ? ' ' : '';\n    } else {\n      return space;\n    }\n  };\n  _proto.parseParenthesisToken = function parseParenthesisToken(token) {\n    var content = this.content(token);\n    if (token[_tokenize.FIELDS.TYPE] === tokens.space) {\n      return this.requiredSpace(content);\n    } else {\n      return content;\n    }\n  };\n  _proto.newNode = function newNode(node, namespace) {\n    if (namespace) {\n      if (/^ +$/.test(namespace)) {\n        if (!this.options.lossy) {\n          this.spaces = (this.spaces || '') + namespace;\n        }\n        namespace = true;\n      }\n      node.namespace = namespace;\n      unescapeProp(node, \"namespace\");\n    }\n    if (this.spaces) {\n      node.spaces.before = this.spaces;\n      this.spaces = '';\n    }\n    return this.current.append(node);\n  };\n  _proto.content = function content(token) {\n    if (token === void 0) {\n      token = this.currToken;\n    }\n    return this.css.slice(token[_tokenize.FIELDS.START_POS], token[_tokenize.FIELDS.END_POS]);\n  };\n  /**\n   * returns the index of the next non-whitespace, non-comment token.\n   * returns -1 if no meaningful token is found.\n   */\n  _proto.locateNextMeaningfulToken = function locateNextMeaningfulToken(startPosition) {\n    if (startPosition === void 0) {\n      startPosition = this.position + 1;\n    }\n    var searchPosition = startPosition;\n    while (searchPosition < this.tokens.length) {\n      if (WHITESPACE_EQUIV_TOKENS[this.tokens[searchPosition][_tokenize.FIELDS.TYPE]]) {\n        searchPosition++;\n        continue;\n      } else {\n        return searchPosition;\n      }\n    }\n    return -1;\n  };\n  _createClass(Parser, [{\n    key: \"currToken\",\n    get: function get() {\n      return this.tokens[this.position];\n    }\n  }, {\n    key: \"nextToken\",\n    get: function get() {\n      return this.tokens[this.position + 1];\n    }\n  }, {\n    key: \"prevToken\",\n    get: function get() {\n      return this.tokens[this.position - 1];\n    }\n  }]);\n  return Parser;\n}();\nexports[\"default\"] = Parser;\nmodule.exports = exports.default;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///65170\n")},48349:(module,exports,__webpack_require__)=>{"use strict";eval('\n\nexports.__esModule = true;\nexports["default"] = void 0;\nvar _parser = _interopRequireDefault(__webpack_require__(65170));\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }\nvar Processor = /*#__PURE__*/function () {\n  function Processor(func, options) {\n    this.func = func || function noop() {};\n    this.funcRes = null;\n    this.options = options;\n  }\n  var _proto = Processor.prototype;\n  _proto._shouldUpdateSelector = function _shouldUpdateSelector(rule, options) {\n    if (options === void 0) {\n      options = {};\n    }\n    var merged = Object.assign({}, this.options, options);\n    if (merged.updateSelector === false) {\n      return false;\n    } else {\n      return typeof rule !== "string";\n    }\n  };\n  _proto._isLossy = function _isLossy(options) {\n    if (options === void 0) {\n      options = {};\n    }\n    var merged = Object.assign({}, this.options, options);\n    if (merged.lossless === false) {\n      return true;\n    } else {\n      return false;\n    }\n  };\n  _proto._root = function _root(rule, options) {\n    if (options === void 0) {\n      options = {};\n    }\n    var parser = new _parser["default"](rule, this._parseOptions(options));\n    return parser.root;\n  };\n  _proto._parseOptions = function _parseOptions(options) {\n    return {\n      lossy: this._isLossy(options)\n    };\n  };\n  _proto._run = function _run(rule, options) {\n    var _this = this;\n    if (options === void 0) {\n      options = {};\n    }\n    return new Promise(function (resolve, reject) {\n      try {\n        var root = _this._root(rule, options);\n        Promise.resolve(_this.func(root)).then(function (transform) {\n          var string = undefined;\n          if (_this._shouldUpdateSelector(rule, options)) {\n            string = root.toString();\n            rule.selector = string;\n          }\n          return {\n            transform: transform,\n            root: root,\n            string: string\n          };\n        }).then(resolve, reject);\n      } catch (e) {\n        reject(e);\n        return;\n      }\n    });\n  };\n  _proto._runSync = function _runSync(rule, options) {\n    if (options === void 0) {\n      options = {};\n    }\n    var root = this._root(rule, options);\n    var transform = this.func(root);\n    if (transform && typeof transform.then === "function") {\n      throw new Error("Selector processor returned a promise to a synchronous call.");\n    }\n    var string = undefined;\n    if (options.updateSelector && typeof rule !== "string") {\n      string = root.toString();\n      rule.selector = string;\n    }\n    return {\n      transform: transform,\n      root: root,\n      string: string\n    };\n  }\n\n  /**\n   * Process rule into a selector AST.\n   *\n   * @param rule {postcss.Rule | string} The css selector to be processed\n   * @param options The options for processing\n   * @returns {Promise<parser.Root>} The AST of the selector after processing it.\n   */;\n  _proto.ast = function ast(rule, options) {\n    return this._run(rule, options).then(function (result) {\n      return result.root;\n    });\n  }\n\n  /**\n   * Process rule into a selector AST synchronously.\n   *\n   * @param rule {postcss.Rule | string} The css selector to be processed\n   * @param options The options for processing\n   * @returns {parser.Root} The AST of the selector after processing it.\n   */;\n  _proto.astSync = function astSync(rule, options) {\n    return this._runSync(rule, options).root;\n  }\n\n  /**\n   * Process a selector into a transformed value asynchronously\n   *\n   * @param rule {postcss.Rule | string} The css selector to be processed\n   * @param options The options for processing\n   * @returns {Promise<any>} The value returned by the processor.\n   */;\n  _proto.transform = function transform(rule, options) {\n    return this._run(rule, options).then(function (result) {\n      return result.transform;\n    });\n  }\n\n  /**\n   * Process a selector into a transformed value synchronously.\n   *\n   * @param rule {postcss.Rule | string} The css selector to be processed\n   * @param options The options for processing\n   * @returns {any} The value returned by the processor.\n   */;\n  _proto.transformSync = function transformSync(rule, options) {\n    return this._runSync(rule, options).transform;\n  }\n\n  /**\n   * Process a selector into a new selector string asynchronously.\n   *\n   * @param rule {postcss.Rule | string} The css selector to be processed\n   * @param options The options for processing\n   * @returns {string} the selector after processing.\n   */;\n  _proto.process = function process(rule, options) {\n    return this._run(rule, options).then(function (result) {\n      return result.string || result.root.toString();\n    });\n  }\n\n  /**\n   * Process a selector into a new selector string synchronously.\n   *\n   * @param rule {postcss.Rule | string} The css selector to be processed\n   * @param options The options for processing\n   * @returns {string} the selector after processing.\n   */;\n  _proto.processSync = function processSync(rule, options) {\n    var result = this._runSync(rule, options);\n    return result.string || result.root.toString();\n  };\n  return Processor;\n}();\nexports["default"] = Processor;\nmodule.exports = exports.default;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///48349\n')},85588:(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";eval('\n\nexports.__esModule = true;\nexports["default"] = void 0;\nexports.unescapeValue = unescapeValue;\nvar _cssesc = _interopRequireDefault(__webpack_require__(68937));\nvar _unesc = _interopRequireDefault(__webpack_require__(35286));\nvar _namespace = _interopRequireDefault(__webpack_require__(13295));\nvar _types = __webpack_require__(11581);\nvar _CSSESC_QUOTE_OPTIONS;\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }\nfunction _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\nvar deprecate = __webpack_require__(94643);\nvar WRAPPED_IN_QUOTES = /^(\'|")([^]*)\\1$/;\nvar warnOfDeprecatedValueAssignment = deprecate(function () {}, "Assigning an attribute a value containing characters that might need to be escaped is deprecated. " + "Call attribute.setValue() instead.");\nvar warnOfDeprecatedQuotedAssignment = deprecate(function () {}, "Assigning attr.quoted is deprecated and has no effect. Assign to attr.quoteMark instead.");\nvar warnOfDeprecatedConstructor = deprecate(function () {}, "Constructing an Attribute selector with a value without specifying quoteMark is deprecated. Note: The value should be unescaped now.");\nfunction unescapeValue(value) {\n  var deprecatedUsage = false;\n  var quoteMark = null;\n  var unescaped = value;\n  var m = unescaped.match(WRAPPED_IN_QUOTES);\n  if (m) {\n    quoteMark = m[1];\n    unescaped = m[2];\n  }\n  unescaped = (0, _unesc["default"])(unescaped);\n  if (unescaped !== value) {\n    deprecatedUsage = true;\n  }\n  return {\n    deprecatedUsage: deprecatedUsage,\n    unescaped: unescaped,\n    quoteMark: quoteMark\n  };\n}\nfunction handleDeprecatedContructorOpts(opts) {\n  if (opts.quoteMark !== undefined) {\n    return opts;\n  }\n  if (opts.value === undefined) {\n    return opts;\n  }\n  warnOfDeprecatedConstructor();\n  var _unescapeValue = unescapeValue(opts.value),\n    quoteMark = _unescapeValue.quoteMark,\n    unescaped = _unescapeValue.unescaped;\n  if (!opts.raws) {\n    opts.raws = {};\n  }\n  if (opts.raws.value === undefined) {\n    opts.raws.value = opts.value;\n  }\n  opts.value = unescaped;\n  opts.quoteMark = quoteMark;\n  return opts;\n}\nvar Attribute = /*#__PURE__*/function (_Namespace) {\n  _inheritsLoose(Attribute, _Namespace);\n  function Attribute(opts) {\n    var _this;\n    if (opts === void 0) {\n      opts = {};\n    }\n    _this = _Namespace.call(this, handleDeprecatedContructorOpts(opts)) || this;\n    _this.type = _types.ATTRIBUTE;\n    _this.raws = _this.raws || {};\n    Object.defineProperty(_this.raws, \'unquoted\', {\n      get: deprecate(function () {\n        return _this.value;\n      }, "attr.raws.unquoted is deprecated. Call attr.value instead."),\n      set: deprecate(function () {\n        return _this.value;\n      }, "Setting attr.raws.unquoted is deprecated and has no effect. attr.value is unescaped by default now.")\n    });\n    _this._constructed = true;\n    return _this;\n  }\n\n  /**\n   * Returns the Attribute\'s value quoted such that it would be legal to use\n   * in the value of a css file. The original value\'s quotation setting\n   * used for stringification is left unchanged. See `setValue(value, options)`\n   * if you want to control the quote settings of a new value for the attribute.\n   *\n   * You can also change the quotation used for the current value by setting quoteMark.\n   *\n   * Options:\n   *   * quoteMark {\'"\' | "\'" | null} - Use this value to quote the value. If this\n   *     option is not set, the original value for quoteMark will be used. If\n   *     indeterminate, a double quote is used. The legal values are:\n   *     * `null` - the value will be unquoted and characters will be escaped as necessary.\n   *     * `\'` - the value will be quoted with a single quote and single quotes are escaped.\n   *     * `"` - the value will be quoted with a double quote and double quotes are escaped.\n   *   * preferCurrentQuoteMark {boolean} - if true, prefer the source quote mark\n   *     over the quoteMark option value.\n   *   * smart {boolean} - if true, will select a quote mark based on the value\n   *     and the other options specified here. See the `smartQuoteMark()`\n   *     method.\n   **/\n  var _proto = Attribute.prototype;\n  _proto.getQuotedValue = function getQuotedValue(options) {\n    if (options === void 0) {\n      options = {};\n    }\n    var quoteMark = this._determineQuoteMark(options);\n    var cssescopts = CSSESC_QUOTE_OPTIONS[quoteMark];\n    var escaped = (0, _cssesc["default"])(this._value, cssescopts);\n    return escaped;\n  };\n  _proto._determineQuoteMark = function _determineQuoteMark(options) {\n    return options.smart ? this.smartQuoteMark(options) : this.preferredQuoteMark(options);\n  }\n\n  /**\n   * Set the unescaped value with the specified quotation options. The value\n   * provided must not include any wrapping quote marks -- those quotes will\n   * be interpreted as part of the value and escaped accordingly.\n   */;\n  _proto.setValue = function setValue(value, options) {\n    if (options === void 0) {\n      options = {};\n    }\n    this._value = value;\n    this._quoteMark = this._determineQuoteMark(options);\n    this._syncRawValue();\n  }\n\n  /**\n   * Intelligently select a quoteMark value based on the value\'s contents. If\n   * the value is a legal CSS ident, it will not be quoted. Otherwise a quote\n   * mark will be picked that minimizes the number of escapes.\n   *\n   * If there\'s no clear winner, the quote mark from these options is used,\n   * then the source quote mark (this is inverted if `preferCurrentQuoteMark` is\n   * true). If the quoteMark is unspecified, a double quote is used.\n   *\n   * @param options This takes the quoteMark and preferCurrentQuoteMark options\n   * from the quoteValue method.\n   */;\n  _proto.smartQuoteMark = function smartQuoteMark(options) {\n    var v = this.value;\n    var numSingleQuotes = v.replace(/[^\']/g, \'\').length;\n    var numDoubleQuotes = v.replace(/[^"]/g, \'\').length;\n    if (numSingleQuotes + numDoubleQuotes === 0) {\n      var escaped = (0, _cssesc["default"])(v, {\n        isIdentifier: true\n      });\n      if (escaped === v) {\n        return Attribute.NO_QUOTE;\n      } else {\n        var pref = this.preferredQuoteMark(options);\n        if (pref === Attribute.NO_QUOTE) {\n          // pick a quote mark that isn\'t none and see if it\'s smaller\n          var quote = this.quoteMark || options.quoteMark || Attribute.DOUBLE_QUOTE;\n          var opts = CSSESC_QUOTE_OPTIONS[quote];\n          var quoteValue = (0, _cssesc["default"])(v, opts);\n          if (quoteValue.length < escaped.length) {\n            return quote;\n          }\n        }\n        return pref;\n      }\n    } else if (numDoubleQuotes === numSingleQuotes) {\n      return this.preferredQuoteMark(options);\n    } else if (numDoubleQuotes < numSingleQuotes) {\n      return Attribute.DOUBLE_QUOTE;\n    } else {\n      return Attribute.SINGLE_QUOTE;\n    }\n  }\n\n  /**\n   * Selects the preferred quote mark based on the options and the current quote mark value.\n   * If you want the quote mark to depend on the attribute value, call `smartQuoteMark(opts)`\n   * instead.\n   */;\n  _proto.preferredQuoteMark = function preferredQuoteMark(options) {\n    var quoteMark = options.preferCurrentQuoteMark ? this.quoteMark : options.quoteMark;\n    if (quoteMark === undefined) {\n      quoteMark = options.preferCurrentQuoteMark ? options.quoteMark : this.quoteMark;\n    }\n    if (quoteMark === undefined) {\n      quoteMark = Attribute.DOUBLE_QUOTE;\n    }\n    return quoteMark;\n  };\n  _proto._syncRawValue = function _syncRawValue() {\n    var rawValue = (0, _cssesc["default"])(this._value, CSSESC_QUOTE_OPTIONS[this.quoteMark]);\n    if (rawValue === this._value) {\n      if (this.raws) {\n        delete this.raws.value;\n      }\n    } else {\n      this.raws.value = rawValue;\n    }\n  };\n  _proto._handleEscapes = function _handleEscapes(prop, value) {\n    if (this._constructed) {\n      var escaped = (0, _cssesc["default"])(value, {\n        isIdentifier: true\n      });\n      if (escaped !== value) {\n        this.raws[prop] = escaped;\n      } else {\n        delete this.raws[prop];\n      }\n    }\n  };\n  _proto._spacesFor = function _spacesFor(name) {\n    var attrSpaces = {\n      before: \'\',\n      after: \'\'\n    };\n    var spaces = this.spaces[name] || {};\n    var rawSpaces = this.raws.spaces && this.raws.spaces[name] || {};\n    return Object.assign(attrSpaces, spaces, rawSpaces);\n  };\n  _proto._stringFor = function _stringFor(name, spaceName, concat) {\n    if (spaceName === void 0) {\n      spaceName = name;\n    }\n    if (concat === void 0) {\n      concat = defaultAttrConcat;\n    }\n    var attrSpaces = this._spacesFor(spaceName);\n    return concat(this.stringifyProperty(name), attrSpaces);\n  }\n\n  /**\n   * returns the offset of the attribute part specified relative to the\n   * start of the node of the output string.\n   *\n   * * "ns" - alias for "namespace"\n   * * "namespace" - the namespace if it exists.\n   * * "attribute" - the attribute name\n   * * "attributeNS" - the start of the attribute or its namespace\n   * * "operator" - the match operator of the attribute\n   * * "value" - The value (string or identifier)\n   * * "insensitive" - the case insensitivity flag;\n   * @param part One of the possible values inside an attribute.\n   * @returns -1 if the name is invalid or the value doesn\'t exist in this attribute.\n   */;\n  _proto.offsetOf = function offsetOf(name) {\n    var count = 1;\n    var attributeSpaces = this._spacesFor("attribute");\n    count += attributeSpaces.before.length;\n    if (name === "namespace" || name === "ns") {\n      return this.namespace ? count : -1;\n    }\n    if (name === "attributeNS") {\n      return count;\n    }\n    count += this.namespaceString.length;\n    if (this.namespace) {\n      count += 1;\n    }\n    if (name === "attribute") {\n      return count;\n    }\n    count += this.stringifyProperty("attribute").length;\n    count += attributeSpaces.after.length;\n    var operatorSpaces = this._spacesFor("operator");\n    count += operatorSpaces.before.length;\n    var operator = this.stringifyProperty("operator");\n    if (name === "operator") {\n      return operator ? count : -1;\n    }\n    count += operator.length;\n    count += operatorSpaces.after.length;\n    var valueSpaces = this._spacesFor("value");\n    count += valueSpaces.before.length;\n    var value = this.stringifyProperty("value");\n    if (name === "value") {\n      return value ? count : -1;\n    }\n    count += value.length;\n    count += valueSpaces.after.length;\n    var insensitiveSpaces = this._spacesFor("insensitive");\n    count += insensitiveSpaces.before.length;\n    if (name === "insensitive") {\n      return this.insensitive ? count : -1;\n    }\n    return -1;\n  };\n  _proto.toString = function toString() {\n    var _this2 = this;\n    var selector = [this.rawSpaceBefore, \'[\'];\n    selector.push(this._stringFor(\'qualifiedAttribute\', \'attribute\'));\n    if (this.operator && (this.value || this.value === \'\')) {\n      selector.push(this._stringFor(\'operator\'));\n      selector.push(this._stringFor(\'value\'));\n      selector.push(this._stringFor(\'insensitiveFlag\', \'insensitive\', function (attrValue, attrSpaces) {\n        if (attrValue.length > 0 && !_this2.quoted && attrSpaces.before.length === 0 && !(_this2.spaces.value && _this2.spaces.value.after)) {\n          attrSpaces.before = " ";\n        }\n        return defaultAttrConcat(attrValue, attrSpaces);\n      }));\n    }\n    selector.push(\']\');\n    selector.push(this.rawSpaceAfter);\n    return selector.join(\'\');\n  };\n  _createClass(Attribute, [{\n    key: "quoted",\n    get: function get() {\n      var qm = this.quoteMark;\n      return qm === "\'" || qm === \'"\';\n    },\n    set: function set(value) {\n      warnOfDeprecatedQuotedAssignment();\n    }\n\n    /**\n     * returns a single (`\'`) or double (`"`) quote character if the value is quoted.\n     * returns `null` if the value is not quoted.\n     * returns `undefined` if the quotation state is unknown (this can happen when\n     * the attribute is constructed without specifying a quote mark.)\n     */\n  }, {\n    key: "quoteMark",\n    get: function get() {\n      return this._quoteMark;\n    }\n\n    /**\n     * Set the quote mark to be used by this attribute\'s value.\n     * If the quote mark changes, the raw (escaped) value at `attr.raws.value` of the attribute\n     * value is updated accordingly.\n     *\n     * @param {"\'" | \'"\' | null} quoteMark The quote mark or `null` if the value should be unquoted.\n     */,\n    set: function set(quoteMark) {\n      if (!this._constructed) {\n        this._quoteMark = quoteMark;\n        return;\n      }\n      if (this._quoteMark !== quoteMark) {\n        this._quoteMark = quoteMark;\n        this._syncRawValue();\n      }\n    }\n  }, {\n    key: "qualifiedAttribute",\n    get: function get() {\n      return this.qualifiedName(this.raws.attribute || this.attribute);\n    }\n  }, {\n    key: "insensitiveFlag",\n    get: function get() {\n      return this.insensitive ? \'i\' : \'\';\n    }\n  }, {\n    key: "value",\n    get: function get() {\n      return this._value;\n    },\n    set:\n    /**\n     * Before 3.0, the value had to be set to an escaped value including any wrapped\n     * quote marks. In 3.0, the semantics of `Attribute.value` changed so that the value\n     * is unescaped during parsing and any quote marks are removed.\n     *\n     * Because the ambiguity of this semantic change, if you set `attr.value = newValue`,\n     * a deprecation warning is raised when the new value contains any characters that would\n     * require escaping (including if it contains wrapped quotes).\n     *\n     * Instead, you should call `attr.setValue(newValue, opts)` and pass options that describe\n     * how the new value is quoted.\n     */\n    function set(v) {\n      if (this._constructed) {\n        var _unescapeValue2 = unescapeValue(v),\n          deprecatedUsage = _unescapeValue2.deprecatedUsage,\n          unescaped = _unescapeValue2.unescaped,\n          quoteMark = _unescapeValue2.quoteMark;\n        if (deprecatedUsage) {\n          warnOfDeprecatedValueAssignment();\n        }\n        if (unescaped === this._value && quoteMark === this._quoteMark) {\n          return;\n        }\n        this._value = unescaped;\n        this._quoteMark = quoteMark;\n        this._syncRawValue();\n      } else {\n        this._value = v;\n      }\n    }\n  }, {\n    key: "insensitive",\n    get: function get() {\n      return this._insensitive;\n    }\n\n    /**\n     * Set the case insensitive flag.\n     * If the case insensitive flag changes, the raw (escaped) value at `attr.raws.insensitiveFlag`\n     * of the attribute is updated accordingly.\n     *\n     * @param {true | false} insensitive true if the attribute should match case-insensitively.\n     */,\n    set: function set(insensitive) {\n      if (!insensitive) {\n        this._insensitive = false;\n\n        // "i" and "I" can be used in "this.raws.insensitiveFlag" to store the original notation.\n        // When setting `attr.insensitive = false` both should be erased to ensure correct serialization.\n        if (this.raws && (this.raws.insensitiveFlag === \'I\' || this.raws.insensitiveFlag === \'i\')) {\n          this.raws.insensitiveFlag = undefined;\n        }\n      }\n      this._insensitive = insensitive;\n    }\n  }, {\n    key: "attribute",\n    get: function get() {\n      return this._attribute;\n    },\n    set: function set(name) {\n      this._handleEscapes("attribute", name);\n      this._attribute = name;\n    }\n  }]);\n  return Attribute;\n}(_namespace["default"]);\nexports["default"] = Attribute;\nAttribute.NO_QUOTE = null;\nAttribute.SINGLE_QUOTE = "\'";\nAttribute.DOUBLE_QUOTE = \'"\';\nvar CSSESC_QUOTE_OPTIONS = (_CSSESC_QUOTE_OPTIONS = {\n  "\'": {\n    quotes: \'single\',\n    wrap: true\n  },\n  \'"\': {\n    quotes: \'double\',\n    wrap: true\n  }\n}, _CSSESC_QUOTE_OPTIONS[null] = {\n  isIdentifier: true\n}, _CSSESC_QUOTE_OPTIONS);\nfunction defaultAttrConcat(attrValue, attrSpaces) {\n  return "" + attrSpaces.before + attrValue + attrSpaces.after;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///85588\n')},64195:(module,exports,__webpack_require__)=>{"use strict";eval('\n\nexports.__esModule = true;\nexports["default"] = void 0;\nvar _cssesc = _interopRequireDefault(__webpack_require__(68937));\nvar _util = __webpack_require__(39606);\nvar _node = _interopRequireDefault(__webpack_require__(44646));\nvar _types = __webpack_require__(11581);\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }\nfunction _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\nvar ClassName = /*#__PURE__*/function (_Node) {\n  _inheritsLoose(ClassName, _Node);\n  function ClassName(opts) {\n    var _this;\n    _this = _Node.call(this, opts) || this;\n    _this.type = _types.CLASS;\n    _this._constructed = true;\n    return _this;\n  }\n  var _proto = ClassName.prototype;\n  _proto.valueToString = function valueToString() {\n    return \'.\' + _Node.prototype.valueToString.call(this);\n  };\n  _createClass(ClassName, [{\n    key: "value",\n    get: function get() {\n      return this._value;\n    },\n    set: function set(v) {\n      if (this._constructed) {\n        var escaped = (0, _cssesc["default"])(v, {\n          isIdentifier: true\n        });\n        if (escaped !== v) {\n          (0, _util.ensureObject)(this, "raws");\n          this.raws.value = escaped;\n        } else if (this.raws) {\n          delete this.raws.value;\n        }\n      }\n      this._value = v;\n    }\n  }]);\n  return ClassName;\n}(_node["default"]);\nexports["default"] = ClassName;\nmodule.exports = exports.default;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNjQxOTUuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsa0JBQWtCO0FBQ2xCLGtCQUFrQjtBQUNsQixxQ0FBcUMsbUJBQU8sQ0FBQyxLQUFRO0FBQ3JELFlBQVksbUJBQU8sQ0FBQyxLQUFTO0FBQzdCLG1DQUFtQyxtQkFBTyxDQUFDLEtBQVE7QUFDbkQsYUFBYSxtQkFBTyxDQUFDLEtBQVM7QUFDOUIsdUNBQXVDLHVDQUF1QztBQUM5RSw0Q0FBNEMsZ0JBQWdCLGtCQUFrQixPQUFPLDJCQUEyQix3REFBd0QsZ0NBQWdDLHVEQUF1RDtBQUMvUCw4REFBOEQsc0VBQXNFLDhEQUE4RCxrREFBa0QsaUJBQWlCLEdBQUc7QUFDeFEsZ0RBQWdELDBEQUEwRCwyQ0FBMkM7QUFDckosaUNBQWlDLDBHQUEwRyxpQkFBaUIsYUFBYTtBQUN6SztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsQ0FBQztBQUNELGtCQUFrQjtBQUNsQiIsInNvdXJjZXMiOlsid2VicGFjazovL2Jsb2NrYml0ZS8uL25vZGVfbW9kdWxlcy9wb3N0Y3NzLXNlbGVjdG9yLXBhcnNlci9kaXN0L3NlbGVjdG9ycy9jbGFzc05hbWUuanM/NTM4OSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gdm9pZCAwO1xudmFyIF9jc3Nlc2MgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJjc3Nlc2NcIikpO1xudmFyIF91dGlsID0gcmVxdWlyZShcIi4uL3V0aWxcIik7XG52YXIgX25vZGUgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL25vZGVcIikpO1xudmFyIF90eXBlcyA9IHJlcXVpcmUoXCIuL3R5cGVzXCIpO1xuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgXCJkZWZhdWx0XCI6IG9iaiB9OyB9XG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9XG5mdW5jdGlvbiBfY3JlYXRlQ2xhc3MoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShDb25zdHJ1Y3RvciwgXCJwcm90b3R5cGVcIiwgeyB3cml0YWJsZTogZmFsc2UgfSk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfVxuZnVuY3Rpb24gX2luaGVyaXRzTG9vc2Uoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzLnByb3RvdHlwZSk7IHN1YkNsYXNzLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IHN1YkNsYXNzOyBfc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpOyB9XG5mdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkgeyBfc2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2YuYmluZCgpIDogZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHsgby5fX3Byb3RvX18gPSBwOyByZXR1cm4gbzsgfTsgcmV0dXJuIF9zZXRQcm90b3R5cGVPZihvLCBwKTsgfVxudmFyIENsYXNzTmFtZSA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX05vZGUpIHtcbiAgX2luaGVyaXRzTG9vc2UoQ2xhc3NOYW1lLCBfTm9kZSk7XG4gIGZ1bmN0aW9uIENsYXNzTmFtZShvcHRzKSB7XG4gICAgdmFyIF90aGlzO1xuICAgIF90aGlzID0gX05vZGUuY2FsbCh0aGlzLCBvcHRzKSB8fCB0aGlzO1xuICAgIF90aGlzLnR5cGUgPSBfdHlwZXMuQ0xBU1M7XG4gICAgX3RoaXMuX2NvbnN0cnVjdGVkID0gdHJ1ZTtcbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cbiAgdmFyIF9wcm90byA9IENsYXNzTmFtZS5wcm90b3R5cGU7XG4gIF9wcm90by52YWx1ZVRvU3RyaW5nID0gZnVuY3Rpb24gdmFsdWVUb1N0cmluZygpIHtcbiAgICByZXR1cm4gJy4nICsgX05vZGUucHJvdG90eXBlLnZhbHVlVG9TdHJpbmcuY2FsbCh0aGlzKTtcbiAgfTtcbiAgX2NyZWF0ZUNsYXNzKENsYXNzTmFtZSwgW3tcbiAgICBrZXk6IFwidmFsdWVcIixcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHJldHVybiB0aGlzLl92YWx1ZTtcbiAgICB9LFxuICAgIHNldDogZnVuY3Rpb24gc2V0KHYpIHtcbiAgICAgIGlmICh0aGlzLl9jb25zdHJ1Y3RlZCkge1xuICAgICAgICB2YXIgZXNjYXBlZCA9ICgwLCBfY3NzZXNjW1wiZGVmYXVsdFwiXSkodiwge1xuICAgICAgICAgIGlzSWRlbnRpZmllcjogdHJ1ZVxuICAgICAgICB9KTtcbiAgICAgICAgaWYgKGVzY2FwZWQgIT09IHYpIHtcbiAgICAgICAgICAoMCwgX3V0aWwuZW5zdXJlT2JqZWN0KSh0aGlzLCBcInJhd3NcIik7XG4gICAgICAgICAgdGhpcy5yYXdzLnZhbHVlID0gZXNjYXBlZDtcbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLnJhd3MpIHtcbiAgICAgICAgICBkZWxldGUgdGhpcy5yYXdzLnZhbHVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICB0aGlzLl92YWx1ZSA9IHY7XG4gICAgfVxuICB9XSk7XG4gIHJldHVybiBDbGFzc05hbWU7XG59KF9ub2RlW1wiZGVmYXVsdFwiXSk7XG5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IENsYXNzTmFtZTtcbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0cy5kZWZhdWx0OyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///64195\n')},91704:(module,exports,__webpack_require__)=>{"use strict";eval('\n\nexports.__esModule = true;\nexports["default"] = void 0;\nvar _node = _interopRequireDefault(__webpack_require__(44646));\nvar _types = __webpack_require__(11581);\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }\nfunction _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\nvar Combinator = /*#__PURE__*/function (_Node) {\n  _inheritsLoose(Combinator, _Node);\n  function Combinator(opts) {\n    var _this;\n    _this = _Node.call(this, opts) || this;\n    _this.type = _types.COMBINATOR;\n    return _this;\n  }\n  return Combinator;\n}(_node["default"]);\nexports["default"] = Combinator;\nmodule.exports = exports.default;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOTE3MDQuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsa0JBQWtCO0FBQ2xCLGtCQUFrQjtBQUNsQixtQ0FBbUMsbUJBQU8sQ0FBQyxLQUFRO0FBQ25ELGFBQWEsbUJBQU8sQ0FBQyxLQUFTO0FBQzlCLHVDQUF1Qyx1Q0FBdUM7QUFDOUUsZ0RBQWdELDBEQUEwRCwyQ0FBMkM7QUFDckosaUNBQWlDLDBHQUEwRyxpQkFBaUIsYUFBYTtBQUN6SztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Qsa0JBQWtCO0FBQ2xCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYmxvY2tiaXRlLy4vbm9kZV9tb2R1bGVzL3Bvc3Rjc3Mtc2VsZWN0b3ItcGFyc2VyL2Rpc3Qvc2VsZWN0b3JzL2NvbWJpbmF0b3IuanM/ZmY5OCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gdm9pZCAwO1xudmFyIF9ub2RlID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9ub2RlXCIpKTtcbnZhciBfdHlwZXMgPSByZXF1aXJlKFwiLi90eXBlc1wiKTtcbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IFwiZGVmYXVsdFwiOiBvYmogfTsgfVxuZnVuY3Rpb24gX2luaGVyaXRzTG9vc2Uoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzLnByb3RvdHlwZSk7IHN1YkNsYXNzLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IHN1YkNsYXNzOyBfc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpOyB9XG5mdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkgeyBfc2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2YuYmluZCgpIDogZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHsgby5fX3Byb3RvX18gPSBwOyByZXR1cm4gbzsgfTsgcmV0dXJuIF9zZXRQcm90b3R5cGVPZihvLCBwKTsgfVxudmFyIENvbWJpbmF0b3IgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9Ob2RlKSB7XG4gIF9pbmhlcml0c0xvb3NlKENvbWJpbmF0b3IsIF9Ob2RlKTtcbiAgZnVuY3Rpb24gQ29tYmluYXRvcihvcHRzKSB7XG4gICAgdmFyIF90aGlzO1xuICAgIF90aGlzID0gX05vZGUuY2FsbCh0aGlzLCBvcHRzKSB8fCB0aGlzO1xuICAgIF90aGlzLnR5cGUgPSBfdHlwZXMuQ09NQklOQVRPUjtcbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cbiAgcmV0dXJuIENvbWJpbmF0b3I7XG59KF9ub2RlW1wiZGVmYXVsdFwiXSk7XG5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IENvbWJpbmF0b3I7XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHMuZGVmYXVsdDsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///91704\n')},70425:(module,exports,__webpack_require__)=>{"use strict";eval('\n\nexports.__esModule = true;\nexports["default"] = void 0;\nvar _node = _interopRequireDefault(__webpack_require__(44646));\nvar _types = __webpack_require__(11581);\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }\nfunction _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\nvar Comment = /*#__PURE__*/function (_Node) {\n  _inheritsLoose(Comment, _Node);\n  function Comment(opts) {\n    var _this;\n    _this = _Node.call(this, opts) || this;\n    _this.type = _types.COMMENT;\n    return _this;\n  }\n  return Comment;\n}(_node["default"]);\nexports["default"] = Comment;\nmodule.exports = exports.default;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNzA0MjUuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsa0JBQWtCO0FBQ2xCLGtCQUFrQjtBQUNsQixtQ0FBbUMsbUJBQU8sQ0FBQyxLQUFRO0FBQ25ELGFBQWEsbUJBQU8sQ0FBQyxLQUFTO0FBQzlCLHVDQUF1Qyx1Q0FBdUM7QUFDOUUsZ0RBQWdELDBEQUEwRCwyQ0FBMkM7QUFDckosaUNBQWlDLDBHQUEwRyxpQkFBaUIsYUFBYTtBQUN6SztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Qsa0JBQWtCO0FBQ2xCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYmxvY2tiaXRlLy4vbm9kZV9tb2R1bGVzL3Bvc3Rjc3Mtc2VsZWN0b3ItcGFyc2VyL2Rpc3Qvc2VsZWN0b3JzL2NvbW1lbnQuanM/ZmRjMyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gdm9pZCAwO1xudmFyIF9ub2RlID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9ub2RlXCIpKTtcbnZhciBfdHlwZXMgPSByZXF1aXJlKFwiLi90eXBlc1wiKTtcbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IFwiZGVmYXVsdFwiOiBvYmogfTsgfVxuZnVuY3Rpb24gX2luaGVyaXRzTG9vc2Uoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzLnByb3RvdHlwZSk7IHN1YkNsYXNzLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IHN1YkNsYXNzOyBfc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpOyB9XG5mdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkgeyBfc2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2YuYmluZCgpIDogZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHsgby5fX3Byb3RvX18gPSBwOyByZXR1cm4gbzsgfTsgcmV0dXJuIF9zZXRQcm90b3R5cGVPZihvLCBwKTsgfVxudmFyIENvbW1lbnQgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9Ob2RlKSB7XG4gIF9pbmhlcml0c0xvb3NlKENvbW1lbnQsIF9Ob2RlKTtcbiAgZnVuY3Rpb24gQ29tbWVudChvcHRzKSB7XG4gICAgdmFyIF90aGlzO1xuICAgIF90aGlzID0gX05vZGUuY2FsbCh0aGlzLCBvcHRzKSB8fCB0aGlzO1xuICAgIF90aGlzLnR5cGUgPSBfdHlwZXMuQ09NTUVOVDtcbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cbiAgcmV0dXJuIENvbW1lbnQ7XG59KF9ub2RlW1wiZGVmYXVsdFwiXSk7XG5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IENvbW1lbnQ7XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHMuZGVmYXVsdDsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///70425\n')},74451:(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";eval('\n\nexports.__esModule = true;\nexports.universal = exports.tag = exports.string = exports.selector = exports.root = exports.pseudo = exports.nesting = exports.id = exports.comment = exports.combinator = exports.className = exports.attribute = void 0;\nvar _attribute = _interopRequireDefault(__webpack_require__(85588));\nvar _className = _interopRequireDefault(__webpack_require__(64195));\nvar _combinator = _interopRequireDefault(__webpack_require__(91704));\nvar _comment = _interopRequireDefault(__webpack_require__(70425));\nvar _id = _interopRequireDefault(__webpack_require__(77071));\nvar _nesting = _interopRequireDefault(__webpack_require__(62918));\nvar _pseudo = _interopRequireDefault(__webpack_require__(17324));\nvar _root = _interopRequireDefault(__webpack_require__(80518));\nvar _selector = _interopRequireDefault(__webpack_require__(30339));\nvar _string = _interopRequireDefault(__webpack_require__(85799));\nvar _tag = _interopRequireDefault(__webpack_require__(79720));\nvar _universal = _interopRequireDefault(__webpack_require__(81669));\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }\nvar attribute = function attribute(opts) {\n  return new _attribute["default"](opts);\n};\nexports.attribute = attribute;\nvar className = function className(opts) {\n  return new _className["default"](opts);\n};\nexports.className = className;\nvar combinator = function combinator(opts) {\n  return new _combinator["default"](opts);\n};\nexports.combinator = combinator;\nvar comment = function comment(opts) {\n  return new _comment["default"](opts);\n};\nexports.comment = comment;\nvar id = function id(opts) {\n  return new _id["default"](opts);\n};\nexports.id = id;\nvar nesting = function nesting(opts) {\n  return new _nesting["default"](opts);\n};\nexports.nesting = nesting;\nvar pseudo = function pseudo(opts) {\n  return new _pseudo["default"](opts);\n};\nexports.pseudo = pseudo;\nvar root = function root(opts) {\n  return new _root["default"](opts);\n};\nexports.root = root;\nvar selector = function selector(opts) {\n  return new _selector["default"](opts);\n};\nexports.selector = selector;\nvar string = function string(opts) {\n  return new _string["default"](opts);\n};\nexports.string = string;\nvar tag = function tag(opts) {\n  return new _tag["default"](opts);\n};\nexports.tag = tag;\nvar universal = function universal(opts) {\n  return new _universal["default"](opts);\n};\nexports.universal = universal;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNzQ0NTEuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsa0JBQWtCO0FBQ2xCLGlCQUFpQixHQUFHLFdBQVcsR0FBRyxjQUFjLEdBQUcsZ0JBQWdCLEdBQUcsWUFBWSxHQUFHLGNBQWMsR0FBRyxlQUFlLEdBQUcsVUFBVSxHQUFHLGVBQWUsR0FBRyxrQkFBa0IsR0FBRyxpQkFBaUIsR0FBRyxpQkFBaUI7QUFDak4sd0NBQXdDLG1CQUFPLENBQUMsS0FBYTtBQUM3RCx3Q0FBd0MsbUJBQU8sQ0FBQyxLQUFhO0FBQzdELHlDQUF5QyxtQkFBTyxDQUFDLEtBQWM7QUFDL0Qsc0NBQXNDLG1CQUFPLENBQUMsS0FBVztBQUN6RCxpQ0FBaUMsbUJBQU8sQ0FBQyxLQUFNO0FBQy9DLHNDQUFzQyxtQkFBTyxDQUFDLEtBQVc7QUFDekQscUNBQXFDLG1CQUFPLENBQUMsS0FBVTtBQUN2RCxtQ0FBbUMsbUJBQU8sQ0FBQyxLQUFRO0FBQ25ELHVDQUF1QyxtQkFBTyxDQUFDLEtBQVk7QUFDM0QscUNBQXFDLG1CQUFPLENBQUMsS0FBVTtBQUN2RCxrQ0FBa0MsbUJBQU8sQ0FBQyxLQUFPO0FBQ2pELHdDQUF3QyxtQkFBTyxDQUFDLEtBQWE7QUFDN0QsdUNBQXVDLHVDQUF1QztBQUM5RTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQjtBQUNsQjtBQUNBO0FBQ0E7QUFDQSxlQUFlO0FBQ2Y7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBLGVBQWU7QUFDZjtBQUNBO0FBQ0E7QUFDQSxjQUFjO0FBQ2Q7QUFDQTtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0E7QUFDQSxjQUFjO0FBQ2Q7QUFDQTtBQUNBO0FBQ0EsV0FBVztBQUNYO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQiIsInNvdXJjZXMiOlsid2VicGFjazovL2Jsb2NrYml0ZS8uL25vZGVfbW9kdWxlcy9wb3N0Y3NzLXNlbGVjdG9yLXBhcnNlci9kaXN0L3NlbGVjdG9ycy9jb25zdHJ1Y3RvcnMuanM/ODZiMiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbmV4cG9ydHMudW5pdmVyc2FsID0gZXhwb3J0cy50YWcgPSBleHBvcnRzLnN0cmluZyA9IGV4cG9ydHMuc2VsZWN0b3IgPSBleHBvcnRzLnJvb3QgPSBleHBvcnRzLnBzZXVkbyA9IGV4cG9ydHMubmVzdGluZyA9IGV4cG9ydHMuaWQgPSBleHBvcnRzLmNvbW1lbnQgPSBleHBvcnRzLmNvbWJpbmF0b3IgPSBleHBvcnRzLmNsYXNzTmFtZSA9IGV4cG9ydHMuYXR0cmlidXRlID0gdm9pZCAwO1xudmFyIF9hdHRyaWJ1dGUgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL2F0dHJpYnV0ZVwiKSk7XG52YXIgX2NsYXNzTmFtZSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vY2xhc3NOYW1lXCIpKTtcbnZhciBfY29tYmluYXRvciA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vY29tYmluYXRvclwiKSk7XG52YXIgX2NvbW1lbnQgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL2NvbW1lbnRcIikpO1xudmFyIF9pZCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vaWRcIikpO1xudmFyIF9uZXN0aW5nID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9uZXN0aW5nXCIpKTtcbnZhciBfcHNldWRvID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9wc2V1ZG9cIikpO1xudmFyIF9yb290ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9yb290XCIpKTtcbnZhciBfc2VsZWN0b3IgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL3NlbGVjdG9yXCIpKTtcbnZhciBfc3RyaW5nID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9zdHJpbmdcIikpO1xudmFyIF90YWcgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL3RhZ1wiKSk7XG52YXIgX3VuaXZlcnNhbCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vdW5pdmVyc2FsXCIpKTtcbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IFwiZGVmYXVsdFwiOiBvYmogfTsgfVxudmFyIGF0dHJpYnV0ZSA9IGZ1bmN0aW9uIGF0dHJpYnV0ZShvcHRzKSB7XG4gIHJldHVybiBuZXcgX2F0dHJpYnV0ZVtcImRlZmF1bHRcIl0ob3B0cyk7XG59O1xuZXhwb3J0cy5hdHRyaWJ1dGUgPSBhdHRyaWJ1dGU7XG52YXIgY2xhc3NOYW1lID0gZnVuY3Rpb24gY2xhc3NOYW1lKG9wdHMpIHtcbiAgcmV0dXJuIG5ldyBfY2xhc3NOYW1lW1wiZGVmYXVsdFwiXShvcHRzKTtcbn07XG5leHBvcnRzLmNsYXNzTmFtZSA9IGNsYXNzTmFtZTtcbnZhciBjb21iaW5hdG9yID0gZnVuY3Rpb24gY29tYmluYXRvcihvcHRzKSB7XG4gIHJldHVybiBuZXcgX2NvbWJpbmF0b3JbXCJkZWZhdWx0XCJdKG9wdHMpO1xufTtcbmV4cG9ydHMuY29tYmluYXRvciA9IGNvbWJpbmF0b3I7XG52YXIgY29tbWVudCA9IGZ1bmN0aW9uIGNvbW1lbnQob3B0cykge1xuICByZXR1cm4gbmV3IF9jb21tZW50W1wiZGVmYXVsdFwiXShvcHRzKTtcbn07XG5leHBvcnRzLmNvbW1lbnQgPSBjb21tZW50O1xudmFyIGlkID0gZnVuY3Rpb24gaWQob3B0cykge1xuICByZXR1cm4gbmV3IF9pZFtcImRlZmF1bHRcIl0ob3B0cyk7XG59O1xuZXhwb3J0cy5pZCA9IGlkO1xudmFyIG5lc3RpbmcgPSBmdW5jdGlvbiBuZXN0aW5nKG9wdHMpIHtcbiAgcmV0dXJuIG5ldyBfbmVzdGluZ1tcImRlZmF1bHRcIl0ob3B0cyk7XG59O1xuZXhwb3J0cy5uZXN0aW5nID0gbmVzdGluZztcbnZhciBwc2V1ZG8gPSBmdW5jdGlvbiBwc2V1ZG8ob3B0cykge1xuICByZXR1cm4gbmV3IF9wc2V1ZG9bXCJkZWZhdWx0XCJdKG9wdHMpO1xufTtcbmV4cG9ydHMucHNldWRvID0gcHNldWRvO1xudmFyIHJvb3QgPSBmdW5jdGlvbiByb290KG9wdHMpIHtcbiAgcmV0dXJuIG5ldyBfcm9vdFtcImRlZmF1bHRcIl0ob3B0cyk7XG59O1xuZXhwb3J0cy5yb290ID0gcm9vdDtcbnZhciBzZWxlY3RvciA9IGZ1bmN0aW9uIHNlbGVjdG9yKG9wdHMpIHtcbiAgcmV0dXJuIG5ldyBfc2VsZWN0b3JbXCJkZWZhdWx0XCJdKG9wdHMpO1xufTtcbmV4cG9ydHMuc2VsZWN0b3IgPSBzZWxlY3RvcjtcbnZhciBzdHJpbmcgPSBmdW5jdGlvbiBzdHJpbmcob3B0cykge1xuICByZXR1cm4gbmV3IF9zdHJpbmdbXCJkZWZhdWx0XCJdKG9wdHMpO1xufTtcbmV4cG9ydHMuc3RyaW5nID0gc3RyaW5nO1xudmFyIHRhZyA9IGZ1bmN0aW9uIHRhZyhvcHRzKSB7XG4gIHJldHVybiBuZXcgX3RhZ1tcImRlZmF1bHRcIl0ob3B0cyk7XG59O1xuZXhwb3J0cy50YWcgPSB0YWc7XG52YXIgdW5pdmVyc2FsID0gZnVuY3Rpb24gdW5pdmVyc2FsKG9wdHMpIHtcbiAgcmV0dXJuIG5ldyBfdW5pdmVyc2FsW1wiZGVmYXVsdFwiXShvcHRzKTtcbn07XG5leHBvcnRzLnVuaXZlcnNhbCA9IHVuaXZlcnNhbDsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///74451\n')},33631:(module,exports,__webpack_require__)=>{"use strict";eval('\n\nexports.__esModule = true;\nexports["default"] = void 0;\nvar _node = _interopRequireDefault(__webpack_require__(44646));\nvar types = _interopRequireWildcard(__webpack_require__(11581));\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }\nfunction _createForOfIteratorHelperLoose(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (it) return (it = it.call(o)).next.bind(it); if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }\nfunction _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\nvar Container = /*#__PURE__*/function (_Node) {\n  _inheritsLoose(Container, _Node);\n  function Container(opts) {\n    var _this;\n    _this = _Node.call(this, opts) || this;\n    if (!_this.nodes) {\n      _this.nodes = [];\n    }\n    return _this;\n  }\n  var _proto = Container.prototype;\n  _proto.append = function append(selector) {\n    selector.parent = this;\n    this.nodes.push(selector);\n    return this;\n  };\n  _proto.prepend = function prepend(selector) {\n    selector.parent = this;\n    this.nodes.unshift(selector);\n    return this;\n  };\n  _proto.at = function at(index) {\n    return this.nodes[index];\n  };\n  _proto.index = function index(child) {\n    if (typeof child === \'number\') {\n      return child;\n    }\n    return this.nodes.indexOf(child);\n  };\n  _proto.removeChild = function removeChild(child) {\n    child = this.index(child);\n    this.at(child).parent = undefined;\n    this.nodes.splice(child, 1);\n    var index;\n    for (var id in this.indexes) {\n      index = this.indexes[id];\n      if (index >= child) {\n        this.indexes[id] = index - 1;\n      }\n    }\n    return this;\n  };\n  _proto.removeAll = function removeAll() {\n    for (var _iterator = _createForOfIteratorHelperLoose(this.nodes), _step; !(_step = _iterator()).done;) {\n      var node = _step.value;\n      node.parent = undefined;\n    }\n    this.nodes = [];\n    return this;\n  };\n  _proto.empty = function empty() {\n    return this.removeAll();\n  };\n  _proto.insertAfter = function insertAfter(oldNode, newNode) {\n    newNode.parent = this;\n    var oldIndex = this.index(oldNode);\n    this.nodes.splice(oldIndex + 1, 0, newNode);\n    newNode.parent = this;\n    var index;\n    for (var id in this.indexes) {\n      index = this.indexes[id];\n      if (oldIndex <= index) {\n        this.indexes[id] = index + 1;\n      }\n    }\n    return this;\n  };\n  _proto.insertBefore = function insertBefore(oldNode, newNode) {\n    newNode.parent = this;\n    var oldIndex = this.index(oldNode);\n    this.nodes.splice(oldIndex, 0, newNode);\n    newNode.parent = this;\n    var index;\n    for (var id in this.indexes) {\n      index = this.indexes[id];\n      if (index <= oldIndex) {\n        this.indexes[id] = index + 1;\n      }\n    }\n    return this;\n  };\n  _proto._findChildAtPosition = function _findChildAtPosition(line, col) {\n    var found = undefined;\n    this.each(function (node) {\n      if (node.atPosition) {\n        var foundChild = node.atPosition(line, col);\n        if (foundChild) {\n          found = foundChild;\n          return false;\n        }\n      } else if (node.isAtPosition(line, col)) {\n        found = node;\n        return false;\n      }\n    });\n    return found;\n  }\n\n  /**\n   * Return the most specific node at the line and column number given.\n   * The source location is based on the original parsed location, locations aren\'t\n   * updated as selector nodes are mutated.\n   * \n   * Note that this location is relative to the location of the first character\n   * of the selector, and not the location of the selector in the overall document\n   * when used in conjunction with postcss.\n   *\n   * If not found, returns undefined.\n   * @param {number} line The line number of the node to find. (1-based index)\n   * @param {number} col  The column number of the node to find. (1-based index)\n   */;\n  _proto.atPosition = function atPosition(line, col) {\n    if (this.isAtPosition(line, col)) {\n      return this._findChildAtPosition(line, col) || this;\n    } else {\n      return undefined;\n    }\n  };\n  _proto._inferEndPosition = function _inferEndPosition() {\n    if (this.last && this.last.source && this.last.source.end) {\n      this.source = this.source || {};\n      this.source.end = this.source.end || {};\n      Object.assign(this.source.end, this.last.source.end);\n    }\n  };\n  _proto.each = function each(callback) {\n    if (!this.lastEach) {\n      this.lastEach = 0;\n    }\n    if (!this.indexes) {\n      this.indexes = {};\n    }\n    this.lastEach++;\n    var id = this.lastEach;\n    this.indexes[id] = 0;\n    if (!this.length) {\n      return undefined;\n    }\n    var index, result;\n    while (this.indexes[id] < this.length) {\n      index = this.indexes[id];\n      result = callback(this.at(index), index);\n      if (result === false) {\n        break;\n      }\n      this.indexes[id] += 1;\n    }\n    delete this.indexes[id];\n    if (result === false) {\n      return false;\n    }\n  };\n  _proto.walk = function walk(callback) {\n    return this.each(function (node, i) {\n      var result = callback(node, i);\n      if (result !== false && node.length) {\n        result = node.walk(callback);\n      }\n      if (result === false) {\n        return false;\n      }\n    });\n  };\n  _proto.walkAttributes = function walkAttributes(callback) {\n    var _this2 = this;\n    return this.walk(function (selector) {\n      if (selector.type === types.ATTRIBUTE) {\n        return callback.call(_this2, selector);\n      }\n    });\n  };\n  _proto.walkClasses = function walkClasses(callback) {\n    var _this3 = this;\n    return this.walk(function (selector) {\n      if (selector.type === types.CLASS) {\n        return callback.call(_this3, selector);\n      }\n    });\n  };\n  _proto.walkCombinators = function walkCombinators(callback) {\n    var _this4 = this;\n    return this.walk(function (selector) {\n      if (selector.type === types.COMBINATOR) {\n        return callback.call(_this4, selector);\n      }\n    });\n  };\n  _proto.walkComments = function walkComments(callback) {\n    var _this5 = this;\n    return this.walk(function (selector) {\n      if (selector.type === types.COMMENT) {\n        return callback.call(_this5, selector);\n      }\n    });\n  };\n  _proto.walkIds = function walkIds(callback) {\n    var _this6 = this;\n    return this.walk(function (selector) {\n      if (selector.type === types.ID) {\n        return callback.call(_this6, selector);\n      }\n    });\n  };\n  _proto.walkNesting = function walkNesting(callback) {\n    var _this7 = this;\n    return this.walk(function (selector) {\n      if (selector.type === types.NESTING) {\n        return callback.call(_this7, selector);\n      }\n    });\n  };\n  _proto.walkPseudos = function walkPseudos(callback) {\n    var _this8 = this;\n    return this.walk(function (selector) {\n      if (selector.type === types.PSEUDO) {\n        return callback.call(_this8, selector);\n      }\n    });\n  };\n  _proto.walkTags = function walkTags(callback) {\n    var _this9 = this;\n    return this.walk(function (selector) {\n      if (selector.type === types.TAG) {\n        return callback.call(_this9, selector);\n      }\n    });\n  };\n  _proto.walkUniversals = function walkUniversals(callback) {\n    var _this10 = this;\n    return this.walk(function (selector) {\n      if (selector.type === types.UNIVERSAL) {\n        return callback.call(_this10, selector);\n      }\n    });\n  };\n  _proto.split = function split(callback) {\n    var _this11 = this;\n    var current = [];\n    return this.reduce(function (memo, node, index) {\n      var split = callback.call(_this11, node);\n      current.push(node);\n      if (split) {\n        memo.push(current);\n        current = [];\n      } else if (index === _this11.length - 1) {\n        memo.push(current);\n      }\n      return memo;\n    }, []);\n  };\n  _proto.map = function map(callback) {\n    return this.nodes.map(callback);\n  };\n  _proto.reduce = function reduce(callback, memo) {\n    return this.nodes.reduce(callback, memo);\n  };\n  _proto.every = function every(callback) {\n    return this.nodes.every(callback);\n  };\n  _proto.some = function some(callback) {\n    return this.nodes.some(callback);\n  };\n  _proto.filter = function filter(callback) {\n    return this.nodes.filter(callback);\n  };\n  _proto.sort = function sort(callback) {\n    return this.nodes.sort(callback);\n  };\n  _proto.toString = function toString() {\n    return this.map(String).join(\'\');\n  };\n  _createClass(Container, [{\n    key: "first",\n    get: function get() {\n      return this.at(0);\n    }\n  }, {\n    key: "last",\n    get: function get() {\n      return this.at(this.length - 1);\n    }\n  }, {\n    key: "length",\n    get: function get() {\n      return this.nodes.length;\n    }\n  }]);\n  return Container;\n}(_node["default"]);\nexports["default"] = Container;\nmodule.exports = exports.default;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzM2MzEuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsa0JBQWtCO0FBQ2xCLGtCQUFrQjtBQUNsQixtQ0FBbUMsbUJBQU8sQ0FBQyxLQUFRO0FBQ25ELG9DQUFvQyxtQkFBTyxDQUFDLEtBQVM7QUFDckQsaURBQWlELGdEQUFnRCx1Q0FBdUMsc0NBQXNDLG9GQUFvRiw0REFBNEQ7QUFDOVQscURBQXFELDZDQUE2QyxjQUFjLDRFQUE0RSxTQUFTLG9CQUFvQixtREFBbUQsK0JBQStCLHlCQUF5QixpQkFBaUIsc0ZBQXNGLHVCQUF1QiwyRUFBMkUscUZBQXFGLHNDQUFzQyw0Q0FBNEMsT0FBTyw4QkFBOEIseUJBQXlCLGFBQWEsMEJBQTBCO0FBQ3p4Qix1Q0FBdUMsdUNBQXVDO0FBQzlFLDhEQUE4RCxpRkFBaUYsZ0RBQWdELHdIQUF3SCxnQkFBZ0IsV0FBVyxxQkFBcUIsNEJBQTRCLGNBQWMsU0FBUyxtQ0FBbUM7QUFDN2Isa0RBQWtELGdCQUFnQixnRUFBZ0Usd0RBQXdELDZEQUE2RCxzREFBc0Q7QUFDN1MsdUNBQXVDLHVEQUF1RCx1Q0FBdUMsU0FBUyxPQUFPLG9CQUFvQjtBQUN6Syw0Q0FBNEMsZ0JBQWdCLGtCQUFrQixPQUFPLDJCQUEyQix3REFBd0QsZ0NBQWdDLHVEQUF1RDtBQUMvUCw4REFBOEQsc0VBQXNFLDhEQUE4RCxrREFBa0QsaUJBQWlCLEdBQUc7QUFDeFEsZ0RBQWdELDBEQUEwRCwyQ0FBMkM7QUFDckosaUNBQWlDLDBHQUEwRyxpQkFBaUIsYUFBYTtBQUN6SztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkVBQTZFLDRCQUE0QjtBQUN6RztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWEsUUFBUTtBQUNyQixhQUFhLFFBQVE7QUFDckI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLENBQUM7QUFDRCxrQkFBa0I7QUFDbEIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ibG9ja2JpdGUvLi9ub2RlX21vZHVsZXMvcG9zdGNzcy1zZWxlY3Rvci1wYXJzZXIvZGlzdC9zZWxlY3RvcnMvY29udGFpbmVyLmpzP2Q5MzYiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IHZvaWQgMDtcbnZhciBfbm9kZSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vbm9kZVwiKSk7XG52YXIgdHlwZXMgPSBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChyZXF1aXJlKFwiLi90eXBlc1wiKSk7XG5mdW5jdGlvbiBfZ2V0UmVxdWlyZVdpbGRjYXJkQ2FjaGUobm9kZUludGVyb3ApIHsgaWYgKHR5cGVvZiBXZWFrTWFwICE9PSBcImZ1bmN0aW9uXCIpIHJldHVybiBudWxsOyB2YXIgY2FjaGVCYWJlbEludGVyb3AgPSBuZXcgV2Vha01hcCgpOyB2YXIgY2FjaGVOb2RlSW50ZXJvcCA9IG5ldyBXZWFrTWFwKCk7IHJldHVybiAoX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlID0gZnVuY3Rpb24gX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlKG5vZGVJbnRlcm9wKSB7IHJldHVybiBub2RlSW50ZXJvcCA/IGNhY2hlTm9kZUludGVyb3AgOiBjYWNoZUJhYmVsSW50ZXJvcDsgfSkobm9kZUludGVyb3ApOyB9XG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChvYmosIG5vZGVJbnRlcm9wKSB7IGlmICghbm9kZUludGVyb3AgJiYgb2JqICYmIG9iai5fX2VzTW9kdWxlKSB7IHJldHVybiBvYmo7IH0gaWYgKG9iaiA9PT0gbnVsbCB8fCB0eXBlb2Ygb2JqICE9PSBcIm9iamVjdFwiICYmIHR5cGVvZiBvYmogIT09IFwiZnVuY3Rpb25cIikgeyByZXR1cm4geyBcImRlZmF1bHRcIjogb2JqIH07IH0gdmFyIGNhY2hlID0gX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlKG5vZGVJbnRlcm9wKTsgaWYgKGNhY2hlICYmIGNhY2hlLmhhcyhvYmopKSB7IHJldHVybiBjYWNoZS5nZXQob2JqKTsgfSB2YXIgbmV3T2JqID0ge307IHZhciBoYXNQcm9wZXJ0eURlc2NyaXB0b3IgPSBPYmplY3QuZGVmaW5lUHJvcGVydHkgJiYgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjsgZm9yICh2YXIga2V5IGluIG9iaikgeyBpZiAoa2V5ICE9PSBcImRlZmF1bHRcIiAmJiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBrZXkpKSB7IHZhciBkZXNjID0gaGFzUHJvcGVydHlEZXNjcmlwdG9yID8gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmosIGtleSkgOiBudWxsOyBpZiAoZGVzYyAmJiAoZGVzYy5nZXQgfHwgZGVzYy5zZXQpKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShuZXdPYmosIGtleSwgZGVzYyk7IH0gZWxzZSB7IG5ld09ialtrZXldID0gb2JqW2tleV07IH0gfSB9IG5ld09ialtcImRlZmF1bHRcIl0gPSBvYmo7IGlmIChjYWNoZSkgeyBjYWNoZS5zZXQob2JqLCBuZXdPYmopOyB9IHJldHVybiBuZXdPYmo7IH1cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IFwiZGVmYXVsdFwiOiBvYmogfTsgfVxuZnVuY3Rpb24gX2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXJMb29zZShvLCBhbGxvd0FycmF5TGlrZSkgeyB2YXIgaXQgPSB0eXBlb2YgU3ltYm9sICE9PSBcInVuZGVmaW5lZFwiICYmIG9bU3ltYm9sLml0ZXJhdG9yXSB8fCBvW1wiQEBpdGVyYXRvclwiXTsgaWYgKGl0KSByZXR1cm4gKGl0ID0gaXQuY2FsbChvKSkubmV4dC5iaW5kKGl0KTsgaWYgKEFycmF5LmlzQXJyYXkobykgfHwgKGl0ID0gX3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5KG8pKSB8fCBhbGxvd0FycmF5TGlrZSAmJiBvICYmIHR5cGVvZiBvLmxlbmd0aCA9PT0gXCJudW1iZXJcIikgeyBpZiAoaXQpIG8gPSBpdDsgdmFyIGkgPSAwOyByZXR1cm4gZnVuY3Rpb24gKCkgeyBpZiAoaSA+PSBvLmxlbmd0aCkgcmV0dXJuIHsgZG9uZTogdHJ1ZSB9OyByZXR1cm4geyBkb25lOiBmYWxzZSwgdmFsdWU6IG9baSsrXSB9OyB9OyB9IHRocm93IG5ldyBUeXBlRXJyb3IoXCJJbnZhbGlkIGF0dGVtcHQgdG8gaXRlcmF0ZSBub24taXRlcmFibGUgaW5zdGFuY2UuXFxuSW4gb3JkZXIgdG8gYmUgaXRlcmFibGUsIG5vbi1hcnJheSBvYmplY3RzIG11c3QgaGF2ZSBhIFtTeW1ib2wuaXRlcmF0b3JdKCkgbWV0aG9kLlwiKTsgfVxuZnVuY3Rpb24gX3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5KG8sIG1pbkxlbikgeyBpZiAoIW8pIHJldHVybjsgaWYgKHR5cGVvZiBvID09PSBcInN0cmluZ1wiKSByZXR1cm4gX2FycmF5TGlrZVRvQXJyYXkobywgbWluTGVuKTsgdmFyIG4gPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwobykuc2xpY2UoOCwgLTEpOyBpZiAobiA9PT0gXCJPYmplY3RcIiAmJiBvLmNvbnN0cnVjdG9yKSBuID0gby5jb25zdHJ1Y3Rvci5uYW1lOyBpZiAobiA9PT0gXCJNYXBcIiB8fCBuID09PSBcIlNldFwiKSByZXR1cm4gQXJyYXkuZnJvbShvKTsgaWYgKG4gPT09IFwiQXJndW1lbnRzXCIgfHwgL14oPzpVaXxJKW50KD86OHwxNnwzMikoPzpDbGFtcGVkKT9BcnJheSQvLnRlc3QobikpIHJldHVybiBfYXJyYXlMaWtlVG9BcnJheShvLCBtaW5MZW4pOyB9XG5mdW5jdGlvbiBfYXJyYXlMaWtlVG9BcnJheShhcnIsIGxlbikgeyBpZiAobGVuID09IG51bGwgfHwgbGVuID4gYXJyLmxlbmd0aCkgbGVuID0gYXJyLmxlbmd0aDsgZm9yICh2YXIgaSA9IDAsIGFycjIgPSBuZXcgQXJyYXkobGVuKTsgaSA8IGxlbjsgaSsrKSB7IGFycjJbaV0gPSBhcnJbaV07IH0gcmV0dXJuIGFycjI7IH1cbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH1cbmZ1bmN0aW9uIF9jcmVhdGVDbGFzcyhDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KENvbnN0cnVjdG9yLCBcInByb3RvdHlwZVwiLCB7IHdyaXRhYmxlOiBmYWxzZSB9KTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9XG5mdW5jdGlvbiBfaW5oZXJpdHNMb29zZShzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MucHJvdG90eXBlKTsgc3ViQ2xhc3MucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gc3ViQ2xhc3M7IF9zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcyk7IH1cbmZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7IF9zZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZi5iaW5kKCkgOiBmdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkgeyBvLl9fcHJvdG9fXyA9IHA7IHJldHVybiBvOyB9OyByZXR1cm4gX3NldFByb3RvdHlwZU9mKG8sIHApOyB9XG52YXIgQ29udGFpbmVyID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfTm9kZSkge1xuICBfaW5oZXJpdHNMb29zZShDb250YWluZXIsIF9Ob2RlKTtcbiAgZnVuY3Rpb24gQ29udGFpbmVyKG9wdHMpIHtcbiAgICB2YXIgX3RoaXM7XG4gICAgX3RoaXMgPSBfTm9kZS5jYWxsKHRoaXMsIG9wdHMpIHx8IHRoaXM7XG4gICAgaWYgKCFfdGhpcy5ub2Rlcykge1xuICAgICAgX3RoaXMubm9kZXMgPSBbXTtcbiAgICB9XG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG4gIHZhciBfcHJvdG8gPSBDb250YWluZXIucHJvdG90eXBlO1xuICBfcHJvdG8uYXBwZW5kID0gZnVuY3Rpb24gYXBwZW5kKHNlbGVjdG9yKSB7XG4gICAgc2VsZWN0b3IucGFyZW50ID0gdGhpcztcbiAgICB0aGlzLm5vZGVzLnB1c2goc2VsZWN0b3IpO1xuICAgIHJldHVybiB0aGlzO1xuICB9O1xuICBfcHJvdG8ucHJlcGVuZCA9IGZ1bmN0aW9uIHByZXBlbmQoc2VsZWN0b3IpIHtcbiAgICBzZWxlY3Rvci5wYXJlbnQgPSB0aGlzO1xuICAgIHRoaXMubm9kZXMudW5zaGlmdChzZWxlY3Rvcik7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG4gIF9wcm90by5hdCA9IGZ1bmN0aW9uIGF0KGluZGV4KSB7XG4gICAgcmV0dXJuIHRoaXMubm9kZXNbaW5kZXhdO1xuICB9O1xuICBfcHJvdG8uaW5kZXggPSBmdW5jdGlvbiBpbmRleChjaGlsZCkge1xuICAgIGlmICh0eXBlb2YgY2hpbGQgPT09ICdudW1iZXInKSB7XG4gICAgICByZXR1cm4gY2hpbGQ7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLm5vZGVzLmluZGV4T2YoY2hpbGQpO1xuICB9O1xuICBfcHJvdG8ucmVtb3ZlQ2hpbGQgPSBmdW5jdGlvbiByZW1vdmVDaGlsZChjaGlsZCkge1xuICAgIGNoaWxkID0gdGhpcy5pbmRleChjaGlsZCk7XG4gICAgdGhpcy5hdChjaGlsZCkucGFyZW50ID0gdW5kZWZpbmVkO1xuICAgIHRoaXMubm9kZXMuc3BsaWNlKGNoaWxkLCAxKTtcbiAgICB2YXIgaW5kZXg7XG4gICAgZm9yICh2YXIgaWQgaW4gdGhpcy5pbmRleGVzKSB7XG4gICAgICBpbmRleCA9IHRoaXMuaW5kZXhlc1tpZF07XG4gICAgICBpZiAoaW5kZXggPj0gY2hpbGQpIHtcbiAgICAgICAgdGhpcy5pbmRleGVzW2lkXSA9IGluZGV4IC0gMTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG4gIF9wcm90by5yZW1vdmVBbGwgPSBmdW5jdGlvbiByZW1vdmVBbGwoKSB7XG4gICAgZm9yICh2YXIgX2l0ZXJhdG9yID0gX2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXJMb29zZSh0aGlzLm5vZGVzKSwgX3N0ZXA7ICEoX3N0ZXAgPSBfaXRlcmF0b3IoKSkuZG9uZTspIHtcbiAgICAgIHZhciBub2RlID0gX3N0ZXAudmFsdWU7XG4gICAgICBub2RlLnBhcmVudCA9IHVuZGVmaW5lZDtcbiAgICB9XG4gICAgdGhpcy5ub2RlcyA9IFtdO1xuICAgIHJldHVybiB0aGlzO1xuICB9O1xuICBfcHJvdG8uZW1wdHkgPSBmdW5jdGlvbiBlbXB0eSgpIHtcbiAgICByZXR1cm4gdGhpcy5yZW1vdmVBbGwoKTtcbiAgfTtcbiAgX3Byb3RvLmluc2VydEFmdGVyID0gZnVuY3Rpb24gaW5zZXJ0QWZ0ZXIob2xkTm9kZSwgbmV3Tm9kZSkge1xuICAgIG5ld05vZGUucGFyZW50ID0gdGhpcztcbiAgICB2YXIgb2xkSW5kZXggPSB0aGlzLmluZGV4KG9sZE5vZGUpO1xuICAgIHRoaXMubm9kZXMuc3BsaWNlKG9sZEluZGV4ICsgMSwgMCwgbmV3Tm9kZSk7XG4gICAgbmV3Tm9kZS5wYXJlbnQgPSB0aGlzO1xuICAgIHZhciBpbmRleDtcbiAgICBmb3IgKHZhciBpZCBpbiB0aGlzLmluZGV4ZXMpIHtcbiAgICAgIGluZGV4ID0gdGhpcy5pbmRleGVzW2lkXTtcbiAgICAgIGlmIChvbGRJbmRleCA8PSBpbmRleCkge1xuICAgICAgICB0aGlzLmluZGV4ZXNbaWRdID0gaW5kZXggKyAxO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdGhpcztcbiAgfTtcbiAgX3Byb3RvLmluc2VydEJlZm9yZSA9IGZ1bmN0aW9uIGluc2VydEJlZm9yZShvbGROb2RlLCBuZXdOb2RlKSB7XG4gICAgbmV3Tm9kZS5wYXJlbnQgPSB0aGlzO1xuICAgIHZhciBvbGRJbmRleCA9IHRoaXMuaW5kZXgob2xkTm9kZSk7XG4gICAgdGhpcy5ub2Rlcy5zcGxpY2Uob2xkSW5kZXgsIDAsIG5ld05vZGUpO1xuICAgIG5ld05vZGUucGFyZW50ID0gdGhpcztcbiAgICB2YXIgaW5kZXg7XG4gICAgZm9yICh2YXIgaWQgaW4gdGhpcy5pbmRleGVzKSB7XG4gICAgICBpbmRleCA9IHRoaXMuaW5kZXhlc1tpZF07XG4gICAgICBpZiAoaW5kZXggPD0gb2xkSW5kZXgpIHtcbiAgICAgICAgdGhpcy5pbmRleGVzW2lkXSA9IGluZGV4ICsgMTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG4gIF9wcm90by5fZmluZENoaWxkQXRQb3NpdGlvbiA9IGZ1bmN0aW9uIF9maW5kQ2hpbGRBdFBvc2l0aW9uKGxpbmUsIGNvbCkge1xuICAgIHZhciBmb3VuZCA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLmVhY2goZnVuY3Rpb24gKG5vZGUpIHtcbiAgICAgIGlmIChub2RlLmF0UG9zaXRpb24pIHtcbiAgICAgICAgdmFyIGZvdW5kQ2hpbGQgPSBub2RlLmF0UG9zaXRpb24obGluZSwgY29sKTtcbiAgICAgICAgaWYgKGZvdW5kQ2hpbGQpIHtcbiAgICAgICAgICBmb3VuZCA9IGZvdW5kQ2hpbGQ7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKG5vZGUuaXNBdFBvc2l0aW9uKGxpbmUsIGNvbCkpIHtcbiAgICAgICAgZm91bmQgPSBub2RlO1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIGZvdW5kO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybiB0aGUgbW9zdCBzcGVjaWZpYyBub2RlIGF0IHRoZSBsaW5lIGFuZCBjb2x1bW4gbnVtYmVyIGdpdmVuLlxuICAgKiBUaGUgc291cmNlIGxvY2F0aW9uIGlzIGJhc2VkIG9uIHRoZSBvcmlnaW5hbCBwYXJzZWQgbG9jYXRpb24sIGxvY2F0aW9ucyBhcmVuJ3RcbiAgICogdXBkYXRlZCBhcyBzZWxlY3RvciBub2RlcyBhcmUgbXV0YXRlZC5cbiAgICogXG4gICAqIE5vdGUgdGhhdCB0aGlzIGxvY2F0aW9uIGlzIHJlbGF0aXZlIHRvIHRoZSBsb2NhdGlvbiBvZiB0aGUgZmlyc3QgY2hhcmFjdGVyXG4gICAqIG9mIHRoZSBzZWxlY3RvciwgYW5kIG5vdCB0aGUgbG9jYXRpb24gb2YgdGhlIHNlbGVjdG9yIGluIHRoZSBvdmVyYWxsIGRvY3VtZW50XG4gICAqIHdoZW4gdXNlZCBpbiBjb25qdW5jdGlvbiB3aXRoIHBvc3Rjc3MuXG4gICAqXG4gICAqIElmIG5vdCBmb3VuZCwgcmV0dXJucyB1bmRlZmluZWQuXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBsaW5lIFRoZSBsaW5lIG51bWJlciBvZiB0aGUgbm9kZSB0byBmaW5kLiAoMS1iYXNlZCBpbmRleClcbiAgICogQHBhcmFtIHtudW1iZXJ9IGNvbCAgVGhlIGNvbHVtbiBudW1iZXIgb2YgdGhlIG5vZGUgdG8gZmluZC4gKDEtYmFzZWQgaW5kZXgpXG4gICAqLztcbiAgX3Byb3RvLmF0UG9zaXRpb24gPSBmdW5jdGlvbiBhdFBvc2l0aW9uKGxpbmUsIGNvbCkge1xuICAgIGlmICh0aGlzLmlzQXRQb3NpdGlvbihsaW5lLCBjb2wpKSB7XG4gICAgICByZXR1cm4gdGhpcy5fZmluZENoaWxkQXRQb3NpdGlvbihsaW5lLCBjb2wpIHx8IHRoaXM7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuICB9O1xuICBfcHJvdG8uX2luZmVyRW5kUG9zaXRpb24gPSBmdW5jdGlvbiBfaW5mZXJFbmRQb3NpdGlvbigpIHtcbiAgICBpZiAodGhpcy5sYXN0ICYmIHRoaXMubGFzdC5zb3VyY2UgJiYgdGhpcy5sYXN0LnNvdXJjZS5lbmQpIHtcbiAgICAgIHRoaXMuc291cmNlID0gdGhpcy5zb3VyY2UgfHwge307XG4gICAgICB0aGlzLnNvdXJjZS5lbmQgPSB0aGlzLnNvdXJjZS5lbmQgfHwge307XG4gICAgICBPYmplY3QuYXNzaWduKHRoaXMuc291cmNlLmVuZCwgdGhpcy5sYXN0LnNvdXJjZS5lbmQpO1xuICAgIH1cbiAgfTtcbiAgX3Byb3RvLmVhY2ggPSBmdW5jdGlvbiBlYWNoKGNhbGxiYWNrKSB7XG4gICAgaWYgKCF0aGlzLmxhc3RFYWNoKSB7XG4gICAgICB0aGlzLmxhc3RFYWNoID0gMDtcbiAgICB9XG4gICAgaWYgKCF0aGlzLmluZGV4ZXMpIHtcbiAgICAgIHRoaXMuaW5kZXhlcyA9IHt9O1xuICAgIH1cbiAgICB0aGlzLmxhc3RFYWNoKys7XG4gICAgdmFyIGlkID0gdGhpcy5sYXN0RWFjaDtcbiAgICB0aGlzLmluZGV4ZXNbaWRdID0gMDtcbiAgICBpZiAoIXRoaXMubGVuZ3RoKSB7XG4gICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cbiAgICB2YXIgaW5kZXgsIHJlc3VsdDtcbiAgICB3aGlsZSAodGhpcy5pbmRleGVzW2lkXSA8IHRoaXMubGVuZ3RoKSB7XG4gICAgICBpbmRleCA9IHRoaXMuaW5kZXhlc1tpZF07XG4gICAgICByZXN1bHQgPSBjYWxsYmFjayh0aGlzLmF0KGluZGV4KSwgaW5kZXgpO1xuICAgICAgaWYgKHJlc3VsdCA9PT0gZmFsc2UpIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICB0aGlzLmluZGV4ZXNbaWRdICs9IDE7XG4gICAgfVxuICAgIGRlbGV0ZSB0aGlzLmluZGV4ZXNbaWRdO1xuICAgIGlmIChyZXN1bHQgPT09IGZhbHNlKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9O1xuICBfcHJvdG8ud2FsayA9IGZ1bmN0aW9uIHdhbGsoY2FsbGJhY2spIHtcbiAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uIChub2RlLCBpKSB7XG4gICAgICB2YXIgcmVzdWx0ID0gY2FsbGJhY2sobm9kZSwgaSk7XG4gICAgICBpZiAocmVzdWx0ICE9PSBmYWxzZSAmJiBub2RlLmxlbmd0aCkge1xuICAgICAgICByZXN1bHQgPSBub2RlLndhbGsoY2FsbGJhY2spO1xuICAgICAgfVxuICAgICAgaWYgKHJlc3VsdCA9PT0gZmFsc2UpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgIH0pO1xuICB9O1xuICBfcHJvdG8ud2Fsa0F0dHJpYnV0ZXMgPSBmdW5jdGlvbiB3YWxrQXR0cmlidXRlcyhjYWxsYmFjaykge1xuICAgIHZhciBfdGhpczIgPSB0aGlzO1xuICAgIHJldHVybiB0aGlzLndhbGsoZnVuY3Rpb24gKHNlbGVjdG9yKSB7XG4gICAgICBpZiAoc2VsZWN0b3IudHlwZSA9PT0gdHlwZXMuQVRUUklCVVRFKSB7XG4gICAgICAgIHJldHVybiBjYWxsYmFjay5jYWxsKF90aGlzMiwgc2VsZWN0b3IpO1xuICAgICAgfVxuICAgIH0pO1xuICB9O1xuICBfcHJvdG8ud2Fsa0NsYXNzZXMgPSBmdW5jdGlvbiB3YWxrQ2xhc3NlcyhjYWxsYmFjaykge1xuICAgIHZhciBfdGhpczMgPSB0aGlzO1xuICAgIHJldHVybiB0aGlzLndhbGsoZnVuY3Rpb24gKHNlbGVjdG9yKSB7XG4gICAgICBpZiAoc2VsZWN0b3IudHlwZSA9PT0gdHlwZXMuQ0xBU1MpIHtcbiAgICAgICAgcmV0dXJuIGNhbGxiYWNrLmNhbGwoX3RoaXMzLCBzZWxlY3Rvcik7XG4gICAgICB9XG4gICAgfSk7XG4gIH07XG4gIF9wcm90by53YWxrQ29tYmluYXRvcnMgPSBmdW5jdGlvbiB3YWxrQ29tYmluYXRvcnMoY2FsbGJhY2spIHtcbiAgICB2YXIgX3RoaXM0ID0gdGhpcztcbiAgICByZXR1cm4gdGhpcy53YWxrKGZ1bmN0aW9uIChzZWxlY3Rvcikge1xuICAgICAgaWYgKHNlbGVjdG9yLnR5cGUgPT09IHR5cGVzLkNPTUJJTkFUT1IpIHtcbiAgICAgICAgcmV0dXJuIGNhbGxiYWNrLmNhbGwoX3RoaXM0LCBzZWxlY3Rvcik7XG4gICAgICB9XG4gICAgfSk7XG4gIH07XG4gIF9wcm90by53YWxrQ29tbWVudHMgPSBmdW5jdGlvbiB3YWxrQ29tbWVudHMoY2FsbGJhY2spIHtcbiAgICB2YXIgX3RoaXM1ID0gdGhpcztcbiAgICByZXR1cm4gdGhpcy53YWxrKGZ1bmN0aW9uIChzZWxlY3Rvcikge1xuICAgICAgaWYgKHNlbGVjdG9yLnR5cGUgPT09IHR5cGVzLkNPTU1FTlQpIHtcbiAgICAgICAgcmV0dXJuIGNhbGxiYWNrLmNhbGwoX3RoaXM1LCBzZWxlY3Rvcik7XG4gICAgICB9XG4gICAgfSk7XG4gIH07XG4gIF9wcm90by53YWxrSWRzID0gZnVuY3Rpb24gd2Fsa0lkcyhjYWxsYmFjaykge1xuICAgIHZhciBfdGhpczYgPSB0aGlzO1xuICAgIHJldHVybiB0aGlzLndhbGsoZnVuY3Rpb24gKHNlbGVjdG9yKSB7XG4gICAgICBpZiAoc2VsZWN0b3IudHlwZSA9PT0gdHlwZXMuSUQpIHtcbiAgICAgICAgcmV0dXJuIGNhbGxiYWNrLmNhbGwoX3RoaXM2LCBzZWxlY3Rvcik7XG4gICAgICB9XG4gICAgfSk7XG4gIH07XG4gIF9wcm90by53YWxrTmVzdGluZyA9IGZ1bmN0aW9uIHdhbGtOZXN0aW5nKGNhbGxiYWNrKSB7XG4gICAgdmFyIF90aGlzNyA9IHRoaXM7XG4gICAgcmV0dXJuIHRoaXMud2FsayhmdW5jdGlvbiAoc2VsZWN0b3IpIHtcbiAgICAgIGlmIChzZWxlY3Rvci50eXBlID09PSB0eXBlcy5ORVNUSU5HKSB7XG4gICAgICAgIHJldHVybiBjYWxsYmFjay5jYWxsKF90aGlzNywgc2VsZWN0b3IpO1xuICAgICAgfVxuICAgIH0pO1xuICB9O1xuICBfcHJvdG8ud2Fsa1BzZXVkb3MgPSBmdW5jdGlvbiB3YWxrUHNldWRvcyhjYWxsYmFjaykge1xuICAgIHZhciBfdGhpczggPSB0aGlzO1xuICAgIHJldHVybiB0aGlzLndhbGsoZnVuY3Rpb24gKHNlbGVjdG9yKSB7XG4gICAgICBpZiAoc2VsZWN0b3IudHlwZSA9PT0gdHlwZXMuUFNFVURPKSB7XG4gICAgICAgIHJldHVybiBjYWxsYmFjay5jYWxsKF90aGlzOCwgc2VsZWN0b3IpO1xuICAgICAgfVxuICAgIH0pO1xuICB9O1xuICBfcHJvdG8ud2Fsa1RhZ3MgPSBmdW5jdGlvbiB3YWxrVGFncyhjYWxsYmFjaykge1xuICAgIHZhciBfdGhpczkgPSB0aGlzO1xuICAgIHJldHVybiB0aGlzLndhbGsoZnVuY3Rpb24gKHNlbGVjdG9yKSB7XG4gICAgICBpZiAoc2VsZWN0b3IudHlwZSA9PT0gdHlwZXMuVEFHKSB7XG4gICAgICAgIHJldHVybiBjYWxsYmFjay5jYWxsKF90aGlzOSwgc2VsZWN0b3IpO1xuICAgICAgfVxuICAgIH0pO1xuICB9O1xuICBfcHJvdG8ud2Fsa1VuaXZlcnNhbHMgPSBmdW5jdGlvbiB3YWxrVW5pdmVyc2FscyhjYWxsYmFjaykge1xuICAgIHZhciBfdGhpczEwID0gdGhpcztcbiAgICByZXR1cm4gdGhpcy53YWxrKGZ1bmN0aW9uIChzZWxlY3Rvcikge1xuICAgICAgaWYgKHNlbGVjdG9yLnR5cGUgPT09IHR5cGVzLlVOSVZFUlNBTCkge1xuICAgICAgICByZXR1cm4gY2FsbGJhY2suY2FsbChfdGhpczEwLCBzZWxlY3Rvcik7XG4gICAgICB9XG4gICAgfSk7XG4gIH07XG4gIF9wcm90by5zcGxpdCA9IGZ1bmN0aW9uIHNwbGl0KGNhbGxiYWNrKSB7XG4gICAgdmFyIF90aGlzMTEgPSB0aGlzO1xuICAgIHZhciBjdXJyZW50ID0gW107XG4gICAgcmV0dXJuIHRoaXMucmVkdWNlKGZ1bmN0aW9uIChtZW1vLCBub2RlLCBpbmRleCkge1xuICAgICAgdmFyIHNwbGl0ID0gY2FsbGJhY2suY2FsbChfdGhpczExLCBub2RlKTtcbiAgICAgIGN1cnJlbnQucHVzaChub2RlKTtcbiAgICAgIGlmIChzcGxpdCkge1xuICAgICAgICBtZW1vLnB1c2goY3VycmVudCk7XG4gICAgICAgIGN1cnJlbnQgPSBbXTtcbiAgICAgIH0gZWxzZSBpZiAoaW5kZXggPT09IF90aGlzMTEubGVuZ3RoIC0gMSkge1xuICAgICAgICBtZW1vLnB1c2goY3VycmVudCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gbWVtbztcbiAgICB9LCBbXSk7XG4gIH07XG4gIF9wcm90by5tYXAgPSBmdW5jdGlvbiBtYXAoY2FsbGJhY2spIHtcbiAgICByZXR1cm4gdGhpcy5ub2Rlcy5tYXAoY2FsbGJhY2spO1xuICB9O1xuICBfcHJvdG8ucmVkdWNlID0gZnVuY3Rpb24gcmVkdWNlKGNhbGxiYWNrLCBtZW1vKSB7XG4gICAgcmV0dXJuIHRoaXMubm9kZXMucmVkdWNlKGNhbGxiYWNrLCBtZW1vKTtcbiAgfTtcbiAgX3Byb3RvLmV2ZXJ5ID0gZnVuY3Rpb24gZXZlcnkoY2FsbGJhY2spIHtcbiAgICByZXR1cm4gdGhpcy5ub2Rlcy5ldmVyeShjYWxsYmFjayk7XG4gIH07XG4gIF9wcm90by5zb21lID0gZnVuY3Rpb24gc29tZShjYWxsYmFjaykge1xuICAgIHJldHVybiB0aGlzLm5vZGVzLnNvbWUoY2FsbGJhY2spO1xuICB9O1xuICBfcHJvdG8uZmlsdGVyID0gZnVuY3Rpb24gZmlsdGVyKGNhbGxiYWNrKSB7XG4gICAgcmV0dXJuIHRoaXMubm9kZXMuZmlsdGVyKGNhbGxiYWNrKTtcbiAgfTtcbiAgX3Byb3RvLnNvcnQgPSBmdW5jdGlvbiBzb3J0KGNhbGxiYWNrKSB7XG4gICAgcmV0dXJuIHRoaXMubm9kZXMuc29ydChjYWxsYmFjayk7XG4gIH07XG4gIF9wcm90by50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgIHJldHVybiB0aGlzLm1hcChTdHJpbmcpLmpvaW4oJycpO1xuICB9O1xuICBfY3JlYXRlQ2xhc3MoQ29udGFpbmVyLCBbe1xuICAgIGtleTogXCJmaXJzdFwiLFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgcmV0dXJuIHRoaXMuYXQoMCk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImxhc3RcIixcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHJldHVybiB0aGlzLmF0KHRoaXMubGVuZ3RoIC0gMSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImxlbmd0aFwiLFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgcmV0dXJuIHRoaXMubm9kZXMubGVuZ3RoO1xuICAgIH1cbiAgfV0pO1xuICByZXR1cm4gQ29udGFpbmVyO1xufShfbm9kZVtcImRlZmF1bHRcIl0pO1xuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSBDb250YWluZXI7XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHMuZGVmYXVsdDsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///33631\n')},58500:(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";eval('\n\nexports.__esModule = true;\nexports.isComment = exports.isCombinator = exports.isClassName = exports.isAttribute = void 0;\nexports.isContainer = isContainer;\nexports.isIdentifier = void 0;\nexports.isNamespace = isNamespace;\nexports.isNesting = void 0;\nexports.isNode = isNode;\nexports.isPseudo = void 0;\nexports.isPseudoClass = isPseudoClass;\nexports.isPseudoElement = isPseudoElement;\nexports.isUniversal = exports.isTag = exports.isString = exports.isSelector = exports.isRoot = void 0;\nvar _types = __webpack_require__(11581);\nvar _IS_TYPE;\nvar IS_TYPE = (_IS_TYPE = {}, _IS_TYPE[_types.ATTRIBUTE] = true, _IS_TYPE[_types.CLASS] = true, _IS_TYPE[_types.COMBINATOR] = true, _IS_TYPE[_types.COMMENT] = true, _IS_TYPE[_types.ID] = true, _IS_TYPE[_types.NESTING] = true, _IS_TYPE[_types.PSEUDO] = true, _IS_TYPE[_types.ROOT] = true, _IS_TYPE[_types.SELECTOR] = true, _IS_TYPE[_types.STRING] = true, _IS_TYPE[_types.TAG] = true, _IS_TYPE[_types.UNIVERSAL] = true, _IS_TYPE);\nfunction isNode(node) {\n  return typeof node === "object" && IS_TYPE[node.type];\n}\nfunction isNodeType(type, node) {\n  return isNode(node) && node.type === type;\n}\nvar isAttribute = isNodeType.bind(null, _types.ATTRIBUTE);\nexports.isAttribute = isAttribute;\nvar isClassName = isNodeType.bind(null, _types.CLASS);\nexports.isClassName = isClassName;\nvar isCombinator = isNodeType.bind(null, _types.COMBINATOR);\nexports.isCombinator = isCombinator;\nvar isComment = isNodeType.bind(null, _types.COMMENT);\nexports.isComment = isComment;\nvar isIdentifier = isNodeType.bind(null, _types.ID);\nexports.isIdentifier = isIdentifier;\nvar isNesting = isNodeType.bind(null, _types.NESTING);\nexports.isNesting = isNesting;\nvar isPseudo = isNodeType.bind(null, _types.PSEUDO);\nexports.isPseudo = isPseudo;\nvar isRoot = isNodeType.bind(null, _types.ROOT);\nexports.isRoot = isRoot;\nvar isSelector = isNodeType.bind(null, _types.SELECTOR);\nexports.isSelector = isSelector;\nvar isString = isNodeType.bind(null, _types.STRING);\nexports.isString = isString;\nvar isTag = isNodeType.bind(null, _types.TAG);\nexports.isTag = isTag;\nvar isUniversal = isNodeType.bind(null, _types.UNIVERSAL);\nexports.isUniversal = isUniversal;\nfunction isPseudoElement(node) {\n  return isPseudo(node) && node.value && (node.value.startsWith("::") || node.value.toLowerCase() === ":before" || node.value.toLowerCase() === ":after" || node.value.toLowerCase() === ":first-letter" || node.value.toLowerCase() === ":first-line");\n}\nfunction isPseudoClass(node) {\n  return isPseudo(node) && !isPseudoElement(node);\n}\nfunction isContainer(node) {\n  return !!(isNode(node) && node.walk);\n}\nfunction isNamespace(node) {\n  return isAttribute(node) || isTag(node);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNTg1MDAuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsa0JBQWtCO0FBQ2xCLGlCQUFpQixHQUFHLG9CQUFvQixHQUFHLG1CQUFtQixHQUFHLG1CQUFtQjtBQUNwRixtQkFBbUI7QUFDbkIsb0JBQW9CO0FBQ3BCLG1CQUFtQjtBQUNuQixpQkFBaUI7QUFDakIsY0FBYztBQUNkLGdCQUFnQjtBQUNoQixxQkFBcUI7QUFDckIsdUJBQXVCO0FBQ3ZCLG1CQUFtQixHQUFHLGFBQWEsR0FBRyxnQkFBZ0IsR0FBRyxrQkFBa0IsR0FBRyxjQUFjO0FBQzVGLGFBQWEsbUJBQU8sQ0FBQyxLQUFTO0FBQzlCO0FBQ0EsNEJBQTRCO0FBQzVCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUJBQW1CO0FBQ25CO0FBQ0EsbUJBQW1CO0FBQ25CO0FBQ0Esb0JBQW9CO0FBQ3BCO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0Esb0JBQW9CO0FBQ3BCO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0EsY0FBYztBQUNkO0FBQ0Esa0JBQWtCO0FBQ2xCO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0EsYUFBYTtBQUNiO0FBQ0EsbUJBQW1CO0FBQ25CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2Jsb2NrYml0ZS8uL25vZGVfbW9kdWxlcy9wb3N0Y3NzLXNlbGVjdG9yLXBhcnNlci9kaXN0L3NlbGVjdG9ycy9ndWFyZHMuanM/OWMwZCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbmV4cG9ydHMuaXNDb21tZW50ID0gZXhwb3J0cy5pc0NvbWJpbmF0b3IgPSBleHBvcnRzLmlzQ2xhc3NOYW1lID0gZXhwb3J0cy5pc0F0dHJpYnV0ZSA9IHZvaWQgMDtcbmV4cG9ydHMuaXNDb250YWluZXIgPSBpc0NvbnRhaW5lcjtcbmV4cG9ydHMuaXNJZGVudGlmaWVyID0gdm9pZCAwO1xuZXhwb3J0cy5pc05hbWVzcGFjZSA9IGlzTmFtZXNwYWNlO1xuZXhwb3J0cy5pc05lc3RpbmcgPSB2b2lkIDA7XG5leHBvcnRzLmlzTm9kZSA9IGlzTm9kZTtcbmV4cG9ydHMuaXNQc2V1ZG8gPSB2b2lkIDA7XG5leHBvcnRzLmlzUHNldWRvQ2xhc3MgPSBpc1BzZXVkb0NsYXNzO1xuZXhwb3J0cy5pc1BzZXVkb0VsZW1lbnQgPSBpc1BzZXVkb0VsZW1lbnQ7XG5leHBvcnRzLmlzVW5pdmVyc2FsID0gZXhwb3J0cy5pc1RhZyA9IGV4cG9ydHMuaXNTdHJpbmcgPSBleHBvcnRzLmlzU2VsZWN0b3IgPSBleHBvcnRzLmlzUm9vdCA9IHZvaWQgMDtcbnZhciBfdHlwZXMgPSByZXF1aXJlKFwiLi90eXBlc1wiKTtcbnZhciBfSVNfVFlQRTtcbnZhciBJU19UWVBFID0gKF9JU19UWVBFID0ge30sIF9JU19UWVBFW190eXBlcy5BVFRSSUJVVEVdID0gdHJ1ZSwgX0lTX1RZUEVbX3R5cGVzLkNMQVNTXSA9IHRydWUsIF9JU19UWVBFW190eXBlcy5DT01CSU5BVE9SXSA9IHRydWUsIF9JU19UWVBFW190eXBlcy5DT01NRU5UXSA9IHRydWUsIF9JU19UWVBFW190eXBlcy5JRF0gPSB0cnVlLCBfSVNfVFlQRVtfdHlwZXMuTkVTVElOR10gPSB0cnVlLCBfSVNfVFlQRVtfdHlwZXMuUFNFVURPXSA9IHRydWUsIF9JU19UWVBFW190eXBlcy5ST09UXSA9IHRydWUsIF9JU19UWVBFW190eXBlcy5TRUxFQ1RPUl0gPSB0cnVlLCBfSVNfVFlQRVtfdHlwZXMuU1RSSU5HXSA9IHRydWUsIF9JU19UWVBFW190eXBlcy5UQUddID0gdHJ1ZSwgX0lTX1RZUEVbX3R5cGVzLlVOSVZFUlNBTF0gPSB0cnVlLCBfSVNfVFlQRSk7XG5mdW5jdGlvbiBpc05vZGUobm9kZSkge1xuICByZXR1cm4gdHlwZW9mIG5vZGUgPT09IFwib2JqZWN0XCIgJiYgSVNfVFlQRVtub2RlLnR5cGVdO1xufVxuZnVuY3Rpb24gaXNOb2RlVHlwZSh0eXBlLCBub2RlKSB7XG4gIHJldHVybiBpc05vZGUobm9kZSkgJiYgbm9kZS50eXBlID09PSB0eXBlO1xufVxudmFyIGlzQXR0cmlidXRlID0gaXNOb2RlVHlwZS5iaW5kKG51bGwsIF90eXBlcy5BVFRSSUJVVEUpO1xuZXhwb3J0cy5pc0F0dHJpYnV0ZSA9IGlzQXR0cmlidXRlO1xudmFyIGlzQ2xhc3NOYW1lID0gaXNOb2RlVHlwZS5iaW5kKG51bGwsIF90eXBlcy5DTEFTUyk7XG5leHBvcnRzLmlzQ2xhc3NOYW1lID0gaXNDbGFzc05hbWU7XG52YXIgaXNDb21iaW5hdG9yID0gaXNOb2RlVHlwZS5iaW5kKG51bGwsIF90eXBlcy5DT01CSU5BVE9SKTtcbmV4cG9ydHMuaXNDb21iaW5hdG9yID0gaXNDb21iaW5hdG9yO1xudmFyIGlzQ29tbWVudCA9IGlzTm9kZVR5cGUuYmluZChudWxsLCBfdHlwZXMuQ09NTUVOVCk7XG5leHBvcnRzLmlzQ29tbWVudCA9IGlzQ29tbWVudDtcbnZhciBpc0lkZW50aWZpZXIgPSBpc05vZGVUeXBlLmJpbmQobnVsbCwgX3R5cGVzLklEKTtcbmV4cG9ydHMuaXNJZGVudGlmaWVyID0gaXNJZGVudGlmaWVyO1xudmFyIGlzTmVzdGluZyA9IGlzTm9kZVR5cGUuYmluZChudWxsLCBfdHlwZXMuTkVTVElORyk7XG5leHBvcnRzLmlzTmVzdGluZyA9IGlzTmVzdGluZztcbnZhciBpc1BzZXVkbyA9IGlzTm9kZVR5cGUuYmluZChudWxsLCBfdHlwZXMuUFNFVURPKTtcbmV4cG9ydHMuaXNQc2V1ZG8gPSBpc1BzZXVkbztcbnZhciBpc1Jvb3QgPSBpc05vZGVUeXBlLmJpbmQobnVsbCwgX3R5cGVzLlJPT1QpO1xuZXhwb3J0cy5pc1Jvb3QgPSBpc1Jvb3Q7XG52YXIgaXNTZWxlY3RvciA9IGlzTm9kZVR5cGUuYmluZChudWxsLCBfdHlwZXMuU0VMRUNUT1IpO1xuZXhwb3J0cy5pc1NlbGVjdG9yID0gaXNTZWxlY3RvcjtcbnZhciBpc1N0cmluZyA9IGlzTm9kZVR5cGUuYmluZChudWxsLCBfdHlwZXMuU1RSSU5HKTtcbmV4cG9ydHMuaXNTdHJpbmcgPSBpc1N0cmluZztcbnZhciBpc1RhZyA9IGlzTm9kZVR5cGUuYmluZChudWxsLCBfdHlwZXMuVEFHKTtcbmV4cG9ydHMuaXNUYWcgPSBpc1RhZztcbnZhciBpc1VuaXZlcnNhbCA9IGlzTm9kZVR5cGUuYmluZChudWxsLCBfdHlwZXMuVU5JVkVSU0FMKTtcbmV4cG9ydHMuaXNVbml2ZXJzYWwgPSBpc1VuaXZlcnNhbDtcbmZ1bmN0aW9uIGlzUHNldWRvRWxlbWVudChub2RlKSB7XG4gIHJldHVybiBpc1BzZXVkbyhub2RlKSAmJiBub2RlLnZhbHVlICYmIChub2RlLnZhbHVlLnN0YXJ0c1dpdGgoXCI6OlwiKSB8fCBub2RlLnZhbHVlLnRvTG93ZXJDYXNlKCkgPT09IFwiOmJlZm9yZVwiIHx8IG5vZGUudmFsdWUudG9Mb3dlckNhc2UoKSA9PT0gXCI6YWZ0ZXJcIiB8fCBub2RlLnZhbHVlLnRvTG93ZXJDYXNlKCkgPT09IFwiOmZpcnN0LWxldHRlclwiIHx8IG5vZGUudmFsdWUudG9Mb3dlckNhc2UoKSA9PT0gXCI6Zmlyc3QtbGluZVwiKTtcbn1cbmZ1bmN0aW9uIGlzUHNldWRvQ2xhc3Mobm9kZSkge1xuICByZXR1cm4gaXNQc2V1ZG8obm9kZSkgJiYgIWlzUHNldWRvRWxlbWVudChub2RlKTtcbn1cbmZ1bmN0aW9uIGlzQ29udGFpbmVyKG5vZGUpIHtcbiAgcmV0dXJuICEhKGlzTm9kZShub2RlKSAmJiBub2RlLndhbGspO1xufVxuZnVuY3Rpb24gaXNOYW1lc3BhY2Uobm9kZSkge1xuICByZXR1cm4gaXNBdHRyaWJ1dGUobm9kZSkgfHwgaXNUYWcobm9kZSk7XG59Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///58500\n')},77071:(module,exports,__webpack_require__)=>{"use strict";eval('\n\nexports.__esModule = true;\nexports["default"] = void 0;\nvar _node = _interopRequireDefault(__webpack_require__(44646));\nvar _types = __webpack_require__(11581);\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }\nfunction _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\nvar ID = /*#__PURE__*/function (_Node) {\n  _inheritsLoose(ID, _Node);\n  function ID(opts) {\n    var _this;\n    _this = _Node.call(this, opts) || this;\n    _this.type = _types.ID;\n    return _this;\n  }\n  var _proto = ID.prototype;\n  _proto.valueToString = function valueToString() {\n    return \'#\' + _Node.prototype.valueToString.call(this);\n  };\n  return ID;\n}(_node["default"]);\nexports["default"] = ID;\nmodule.exports = exports.default;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNzcwNzEuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsa0JBQWtCO0FBQ2xCLGtCQUFrQjtBQUNsQixtQ0FBbUMsbUJBQU8sQ0FBQyxLQUFRO0FBQ25ELGFBQWEsbUJBQU8sQ0FBQyxLQUFTO0FBQzlCLHVDQUF1Qyx1Q0FBdUM7QUFDOUUsZ0RBQWdELDBEQUEwRCwyQ0FBMkM7QUFDckosaUNBQWlDLDBHQUEwRyxpQkFBaUIsYUFBYTtBQUN6SztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRCxrQkFBa0I7QUFDbEIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ibG9ja2JpdGUvLi9ub2RlX21vZHVsZXMvcG9zdGNzcy1zZWxlY3Rvci1wYXJzZXIvZGlzdC9zZWxlY3RvcnMvaWQuanM/Yjk4NyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gdm9pZCAwO1xudmFyIF9ub2RlID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9ub2RlXCIpKTtcbnZhciBfdHlwZXMgPSByZXF1aXJlKFwiLi90eXBlc1wiKTtcbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IFwiZGVmYXVsdFwiOiBvYmogfTsgfVxuZnVuY3Rpb24gX2luaGVyaXRzTG9vc2Uoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzLnByb3RvdHlwZSk7IHN1YkNsYXNzLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IHN1YkNsYXNzOyBfc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpOyB9XG5mdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkgeyBfc2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2YuYmluZCgpIDogZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHsgby5fX3Byb3RvX18gPSBwOyByZXR1cm4gbzsgfTsgcmV0dXJuIF9zZXRQcm90b3R5cGVPZihvLCBwKTsgfVxudmFyIElEID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfTm9kZSkge1xuICBfaW5oZXJpdHNMb29zZShJRCwgX05vZGUpO1xuICBmdW5jdGlvbiBJRChvcHRzKSB7XG4gICAgdmFyIF90aGlzO1xuICAgIF90aGlzID0gX05vZGUuY2FsbCh0aGlzLCBvcHRzKSB8fCB0aGlzO1xuICAgIF90aGlzLnR5cGUgPSBfdHlwZXMuSUQ7XG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG4gIHZhciBfcHJvdG8gPSBJRC5wcm90b3R5cGU7XG4gIF9wcm90by52YWx1ZVRvU3RyaW5nID0gZnVuY3Rpb24gdmFsdWVUb1N0cmluZygpIHtcbiAgICByZXR1cm4gJyMnICsgX05vZGUucHJvdG90eXBlLnZhbHVlVG9TdHJpbmcuY2FsbCh0aGlzKTtcbiAgfTtcbiAgcmV0dXJuIElEO1xufShfbm9kZVtcImRlZmF1bHRcIl0pO1xuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSBJRDtcbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0cy5kZWZhdWx0OyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///77071\n')},50680:(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";eval('\n\nexports.__esModule = true;\nvar _types = __webpack_require__(11581);\nObject.keys(_types).forEach(function (key) {\n  if (key === "default" || key === "__esModule") return;\n  if (key in exports && exports[key] === _types[key]) return;\n  exports[key] = _types[key];\n});\nvar _constructors = __webpack_require__(74451);\nObject.keys(_constructors).forEach(function (key) {\n  if (key === "default" || key === "__esModule") return;\n  if (key in exports && exports[key] === _constructors[key]) return;\n  exports[key] = _constructors[key];\n});\nvar _guards = __webpack_require__(58500);\nObject.keys(_guards).forEach(function (key) {\n  if (key === "default" || key === "__esModule") return;\n  if (key in exports && exports[key] === _guards[key]) return;\n  exports[key] = _guards[key];\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNTA2ODAuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsa0JBQWtCO0FBQ2xCLGFBQWEsbUJBQU8sQ0FBQyxLQUFTO0FBQzlCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNELG9CQUFvQixtQkFBTyxDQUFDLEtBQWdCO0FBQzVDO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNELGNBQWMsbUJBQU8sQ0FBQyxLQUFVO0FBQ2hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQyIsInNvdXJjZXMiOlsid2VicGFjazovL2Jsb2NrYml0ZS8uL25vZGVfbW9kdWxlcy9wb3N0Y3NzLXNlbGVjdG9yLXBhcnNlci9kaXN0L3NlbGVjdG9ycy9pbmRleC5qcz80OTQxIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xudmFyIF90eXBlcyA9IHJlcXVpcmUoXCIuL3R5cGVzXCIpO1xuT2JqZWN0LmtleXMoX3R5cGVzKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgaWYgKGtleSA9PT0gXCJkZWZhdWx0XCIgfHwga2V5ID09PSBcIl9fZXNNb2R1bGVcIikgcmV0dXJuO1xuICBpZiAoa2V5IGluIGV4cG9ydHMgJiYgZXhwb3J0c1trZXldID09PSBfdHlwZXNba2V5XSkgcmV0dXJuO1xuICBleHBvcnRzW2tleV0gPSBfdHlwZXNba2V5XTtcbn0pO1xudmFyIF9jb25zdHJ1Y3RvcnMgPSByZXF1aXJlKFwiLi9jb25zdHJ1Y3RvcnNcIik7XG5PYmplY3Qua2V5cyhfY29uc3RydWN0b3JzKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgaWYgKGtleSA9PT0gXCJkZWZhdWx0XCIgfHwga2V5ID09PSBcIl9fZXNNb2R1bGVcIikgcmV0dXJuO1xuICBpZiAoa2V5IGluIGV4cG9ydHMgJiYgZXhwb3J0c1trZXldID09PSBfY29uc3RydWN0b3JzW2tleV0pIHJldHVybjtcbiAgZXhwb3J0c1trZXldID0gX2NvbnN0cnVjdG9yc1trZXldO1xufSk7XG52YXIgX2d1YXJkcyA9IHJlcXVpcmUoXCIuL2d1YXJkc1wiKTtcbk9iamVjdC5rZXlzKF9ndWFyZHMpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICBpZiAoa2V5ID09PSBcImRlZmF1bHRcIiB8fCBrZXkgPT09IFwiX19lc01vZHVsZVwiKSByZXR1cm47XG4gIGlmIChrZXkgaW4gZXhwb3J0cyAmJiBleHBvcnRzW2tleV0gPT09IF9ndWFyZHNba2V5XSkgcmV0dXJuO1xuICBleHBvcnRzW2tleV0gPSBfZ3VhcmRzW2tleV07XG59KTsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///50680\n')},13295:(module,exports,__webpack_require__)=>{"use strict";eval('\n\nexports.__esModule = true;\nexports["default"] = void 0;\nvar _cssesc = _interopRequireDefault(__webpack_require__(68937));\nvar _util = __webpack_require__(39606);\nvar _node = _interopRequireDefault(__webpack_require__(44646));\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }\nfunction _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\nvar Namespace = /*#__PURE__*/function (_Node) {\n  _inheritsLoose(Namespace, _Node);\n  function Namespace() {\n    return _Node.apply(this, arguments) || this;\n  }\n  var _proto = Namespace.prototype;\n  _proto.qualifiedName = function qualifiedName(value) {\n    if (this.namespace) {\n      return this.namespaceString + "|" + value;\n    } else {\n      return value;\n    }\n  };\n  _proto.valueToString = function valueToString() {\n    return this.qualifiedName(_Node.prototype.valueToString.call(this));\n  };\n  _createClass(Namespace, [{\n    key: "namespace",\n    get: function get() {\n      return this._namespace;\n    },\n    set: function set(namespace) {\n      if (namespace === true || namespace === "*" || namespace === "&") {\n        this._namespace = namespace;\n        if (this.raws) {\n          delete this.raws.namespace;\n        }\n        return;\n      }\n      var escaped = (0, _cssesc["default"])(namespace, {\n        isIdentifier: true\n      });\n      this._namespace = namespace;\n      if (escaped !== namespace) {\n        (0, _util.ensureObject)(this, "raws");\n        this.raws.namespace = escaped;\n      } else if (this.raws) {\n        delete this.raws.namespace;\n      }\n    }\n  }, {\n    key: "ns",\n    get: function get() {\n      return this._namespace;\n    },\n    set: function set(namespace) {\n      this.namespace = namespace;\n    }\n  }, {\n    key: "namespaceString",\n    get: function get() {\n      if (this.namespace) {\n        var ns = this.stringifyProperty("namespace");\n        if (ns === true) {\n          return \'\';\n        } else {\n          return ns;\n        }\n      } else {\n        return \'\';\n      }\n    }\n  }]);\n  return Namespace;\n}(_node["default"]);\nexports["default"] = Namespace;\n;\nmodule.exports = exports.default;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTMyOTUuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsa0JBQWtCO0FBQ2xCLGtCQUFrQjtBQUNsQixxQ0FBcUMsbUJBQU8sQ0FBQyxLQUFRO0FBQ3JELFlBQVksbUJBQU8sQ0FBQyxLQUFTO0FBQzdCLG1DQUFtQyxtQkFBTyxDQUFDLEtBQVE7QUFDbkQsdUNBQXVDLHVDQUF1QztBQUM5RSw0Q0FBNEMsZ0JBQWdCLGtCQUFrQixPQUFPLDJCQUEyQix3REFBd0QsZ0NBQWdDLHVEQUF1RDtBQUMvUCw4REFBOEQsc0VBQXNFLDhEQUE4RCxrREFBa0QsaUJBQWlCLEdBQUc7QUFDeFEsZ0RBQWdELDBEQUEwRCwyQ0FBMkM7QUFDckosaUNBQWlDLDBHQUEwRyxpQkFBaUIsYUFBYTtBQUN6SztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsQ0FBQztBQUNELGtCQUFrQjtBQUNsQjtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYmxvY2tiaXRlLy4vbm9kZV9tb2R1bGVzL3Bvc3Rjc3Mtc2VsZWN0b3ItcGFyc2VyL2Rpc3Qvc2VsZWN0b3JzL25hbWVzcGFjZS5qcz9mZjBhIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSB2b2lkIDA7XG52YXIgX2Nzc2VzYyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcImNzc2VzY1wiKSk7XG52YXIgX3V0aWwgPSByZXF1aXJlKFwiLi4vdXRpbFwiKTtcbnZhciBfbm9kZSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vbm9kZVwiKSk7XG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBcImRlZmF1bHRcIjogb2JqIH07IH1cbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH1cbmZ1bmN0aW9uIF9jcmVhdGVDbGFzcyhDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KENvbnN0cnVjdG9yLCBcInByb3RvdHlwZVwiLCB7IHdyaXRhYmxlOiBmYWxzZSB9KTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9XG5mdW5jdGlvbiBfaW5oZXJpdHNMb29zZShzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MucHJvdG90eXBlKTsgc3ViQ2xhc3MucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gc3ViQ2xhc3M7IF9zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcyk7IH1cbmZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7IF9zZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZi5iaW5kKCkgOiBmdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkgeyBvLl9fcHJvdG9fXyA9IHA7IHJldHVybiBvOyB9OyByZXR1cm4gX3NldFByb3RvdHlwZU9mKG8sIHApOyB9XG52YXIgTmFtZXNwYWNlID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfTm9kZSkge1xuICBfaW5oZXJpdHNMb29zZShOYW1lc3BhY2UsIF9Ob2RlKTtcbiAgZnVuY3Rpb24gTmFtZXNwYWNlKCkge1xuICAgIHJldHVybiBfTm9kZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XG4gIH1cbiAgdmFyIF9wcm90byA9IE5hbWVzcGFjZS5wcm90b3R5cGU7XG4gIF9wcm90by5xdWFsaWZpZWROYW1lID0gZnVuY3Rpb24gcXVhbGlmaWVkTmFtZSh2YWx1ZSkge1xuICAgIGlmICh0aGlzLm5hbWVzcGFjZSkge1xuICAgICAgcmV0dXJuIHRoaXMubmFtZXNwYWNlU3RyaW5nICsgXCJ8XCIgKyB2YWx1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH1cbiAgfTtcbiAgX3Byb3RvLnZhbHVlVG9TdHJpbmcgPSBmdW5jdGlvbiB2YWx1ZVRvU3RyaW5nKCkge1xuICAgIHJldHVybiB0aGlzLnF1YWxpZmllZE5hbWUoX05vZGUucHJvdG90eXBlLnZhbHVlVG9TdHJpbmcuY2FsbCh0aGlzKSk7XG4gIH07XG4gIF9jcmVhdGVDbGFzcyhOYW1lc3BhY2UsIFt7XG4gICAga2V5OiBcIm5hbWVzcGFjZVwiLFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgcmV0dXJuIHRoaXMuX25hbWVzcGFjZTtcbiAgICB9LFxuICAgIHNldDogZnVuY3Rpb24gc2V0KG5hbWVzcGFjZSkge1xuICAgICAgaWYgKG5hbWVzcGFjZSA9PT0gdHJ1ZSB8fCBuYW1lc3BhY2UgPT09IFwiKlwiIHx8IG5hbWVzcGFjZSA9PT0gXCImXCIpIHtcbiAgICAgICAgdGhpcy5fbmFtZXNwYWNlID0gbmFtZXNwYWNlO1xuICAgICAgICBpZiAodGhpcy5yYXdzKSB7XG4gICAgICAgICAgZGVsZXRlIHRoaXMucmF3cy5uYW1lc3BhY2U7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgdmFyIGVzY2FwZWQgPSAoMCwgX2Nzc2VzY1tcImRlZmF1bHRcIl0pKG5hbWVzcGFjZSwge1xuICAgICAgICBpc0lkZW50aWZpZXI6IHRydWVcbiAgICAgIH0pO1xuICAgICAgdGhpcy5fbmFtZXNwYWNlID0gbmFtZXNwYWNlO1xuICAgICAgaWYgKGVzY2FwZWQgIT09IG5hbWVzcGFjZSkge1xuICAgICAgICAoMCwgX3V0aWwuZW5zdXJlT2JqZWN0KSh0aGlzLCBcInJhd3NcIik7XG4gICAgICAgIHRoaXMucmF3cy5uYW1lc3BhY2UgPSBlc2NhcGVkO1xuICAgICAgfSBlbHNlIGlmICh0aGlzLnJhd3MpIHtcbiAgICAgICAgZGVsZXRlIHRoaXMucmF3cy5uYW1lc3BhY2U7XG4gICAgICB9XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcIm5zXCIsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gdGhpcy5fbmFtZXNwYWNlO1xuICAgIH0sXG4gICAgc2V0OiBmdW5jdGlvbiBzZXQobmFtZXNwYWNlKSB7XG4gICAgICB0aGlzLm5hbWVzcGFjZSA9IG5hbWVzcGFjZTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwibmFtZXNwYWNlU3RyaW5nXCIsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICBpZiAodGhpcy5uYW1lc3BhY2UpIHtcbiAgICAgICAgdmFyIG5zID0gdGhpcy5zdHJpbmdpZnlQcm9wZXJ0eShcIm5hbWVzcGFjZVwiKTtcbiAgICAgICAgaWYgKG5zID09PSB0cnVlKSB7XG4gICAgICAgICAgcmV0dXJuICcnO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVybiBucztcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuICcnO1xuICAgICAgfVxuICAgIH1cbiAgfV0pO1xuICByZXR1cm4gTmFtZXNwYWNlO1xufShfbm9kZVtcImRlZmF1bHRcIl0pO1xuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSBOYW1lc3BhY2U7XG47XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHMuZGVmYXVsdDsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///13295\n')},62918:(module,exports,__webpack_require__)=>{"use strict";eval('\n\nexports.__esModule = true;\nexports["default"] = void 0;\nvar _node = _interopRequireDefault(__webpack_require__(44646));\nvar _types = __webpack_require__(11581);\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }\nfunction _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\nvar Nesting = /*#__PURE__*/function (_Node) {\n  _inheritsLoose(Nesting, _Node);\n  function Nesting(opts) {\n    var _this;\n    _this = _Node.call(this, opts) || this;\n    _this.type = _types.NESTING;\n    _this.value = \'&\';\n    return _this;\n  }\n  return Nesting;\n}(_node["default"]);\nexports["default"] = Nesting;\nmodule.exports = exports.default;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNjI5MTguanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsa0JBQWtCO0FBQ2xCLGtCQUFrQjtBQUNsQixtQ0FBbUMsbUJBQU8sQ0FBQyxLQUFRO0FBQ25ELGFBQWEsbUJBQU8sQ0FBQyxLQUFTO0FBQzlCLHVDQUF1Qyx1Q0FBdUM7QUFDOUUsZ0RBQWdELDBEQUEwRCwyQ0FBMkM7QUFDckosaUNBQWlDLDBHQUEwRyxpQkFBaUIsYUFBYTtBQUN6SztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRCxrQkFBa0I7QUFDbEIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ibG9ja2JpdGUvLi9ub2RlX21vZHVsZXMvcG9zdGNzcy1zZWxlY3Rvci1wYXJzZXIvZGlzdC9zZWxlY3RvcnMvbmVzdGluZy5qcz8wMTllIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSB2b2lkIDA7XG52YXIgX25vZGUgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL25vZGVcIikpO1xudmFyIF90eXBlcyA9IHJlcXVpcmUoXCIuL3R5cGVzXCIpO1xuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgXCJkZWZhdWx0XCI6IG9iaiB9OyB9XG5mdW5jdGlvbiBfaW5oZXJpdHNMb29zZShzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MucHJvdG90eXBlKTsgc3ViQ2xhc3MucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gc3ViQ2xhc3M7IF9zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcyk7IH1cbmZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7IF9zZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZi5iaW5kKCkgOiBmdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkgeyBvLl9fcHJvdG9fXyA9IHA7IHJldHVybiBvOyB9OyByZXR1cm4gX3NldFByb3RvdHlwZU9mKG8sIHApOyB9XG52YXIgTmVzdGluZyA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX05vZGUpIHtcbiAgX2luaGVyaXRzTG9vc2UoTmVzdGluZywgX05vZGUpO1xuICBmdW5jdGlvbiBOZXN0aW5nKG9wdHMpIHtcbiAgICB2YXIgX3RoaXM7XG4gICAgX3RoaXMgPSBfTm9kZS5jYWxsKHRoaXMsIG9wdHMpIHx8IHRoaXM7XG4gICAgX3RoaXMudHlwZSA9IF90eXBlcy5ORVNUSU5HO1xuICAgIF90aGlzLnZhbHVlID0gJyYnO1xuICAgIHJldHVybiBfdGhpcztcbiAgfVxuICByZXR1cm4gTmVzdGluZztcbn0oX25vZGVbXCJkZWZhdWx0XCJdKTtcbmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gTmVzdGluZztcbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0cy5kZWZhdWx0OyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///62918\n')},44646:(module,exports,__webpack_require__)=>{"use strict";eval('\n\nexports.__esModule = true;\nexports["default"] = void 0;\nvar _util = __webpack_require__(39606);\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }\nvar cloneNode = function cloneNode(obj, parent) {\n  if (typeof obj !== \'object\' || obj === null) {\n    return obj;\n  }\n  var cloned = new obj.constructor();\n  for (var i in obj) {\n    if (!obj.hasOwnProperty(i)) {\n      continue;\n    }\n    var value = obj[i];\n    var type = typeof value;\n    if (i === \'parent\' && type === \'object\') {\n      if (parent) {\n        cloned[i] = parent;\n      }\n    } else if (value instanceof Array) {\n      cloned[i] = value.map(function (j) {\n        return cloneNode(j, cloned);\n      });\n    } else {\n      cloned[i] = cloneNode(value, cloned);\n    }\n  }\n  return cloned;\n};\nvar Node = /*#__PURE__*/function () {\n  function Node(opts) {\n    if (opts === void 0) {\n      opts = {};\n    }\n    Object.assign(this, opts);\n    this.spaces = this.spaces || {};\n    this.spaces.before = this.spaces.before || \'\';\n    this.spaces.after = this.spaces.after || \'\';\n  }\n  var _proto = Node.prototype;\n  _proto.remove = function remove() {\n    if (this.parent) {\n      this.parent.removeChild(this);\n    }\n    this.parent = undefined;\n    return this;\n  };\n  _proto.replaceWith = function replaceWith() {\n    if (this.parent) {\n      for (var index in arguments) {\n        this.parent.insertBefore(this, arguments[index]);\n      }\n      this.remove();\n    }\n    return this;\n  };\n  _proto.next = function next() {\n    return this.parent.at(this.parent.index(this) + 1);\n  };\n  _proto.prev = function prev() {\n    return this.parent.at(this.parent.index(this) - 1);\n  };\n  _proto.clone = function clone(overrides) {\n    if (overrides === void 0) {\n      overrides = {};\n    }\n    var cloned = cloneNode(this);\n    for (var name in overrides) {\n      cloned[name] = overrides[name];\n    }\n    return cloned;\n  }\n\n  /**\n   * Some non-standard syntax doesn\'t follow normal escaping rules for css.\n   * This allows non standard syntax to be appended to an existing property\n   * by specifying the escaped value. By specifying the escaped value,\n   * illegal characters are allowed to be directly inserted into css output.\n   * @param {string} name the property to set\n   * @param {any} value the unescaped value of the property\n   * @param {string} valueEscaped optional. the escaped value of the property.\n   */;\n  _proto.appendToPropertyAndEscape = function appendToPropertyAndEscape(name, value, valueEscaped) {\n    if (!this.raws) {\n      this.raws = {};\n    }\n    var originalValue = this[name];\n    var originalEscaped = this.raws[name];\n    this[name] = originalValue + value; // this may trigger a setter that updates raws, so it has to be set first.\n    if (originalEscaped || valueEscaped !== value) {\n      this.raws[name] = (originalEscaped || originalValue) + valueEscaped;\n    } else {\n      delete this.raws[name]; // delete any escaped value that was created by the setter.\n    }\n  }\n\n  /**\n   * Some non-standard syntax doesn\'t follow normal escaping rules for css.\n   * This allows the escaped value to be specified directly, allowing illegal\n   * characters to be directly inserted into css output.\n   * @param {string} name the property to set\n   * @param {any} value the unescaped value of the property\n   * @param {string} valueEscaped the escaped value of the property.\n   */;\n  _proto.setPropertyAndEscape = function setPropertyAndEscape(name, value, valueEscaped) {\n    if (!this.raws) {\n      this.raws = {};\n    }\n    this[name] = value; // this may trigger a setter that updates raws, so it has to be set first.\n    this.raws[name] = valueEscaped;\n  }\n\n  /**\n   * When you want a value to passed through to CSS directly. This method\n   * deletes the corresponding raw value causing the stringifier to fallback\n   * to the unescaped value.\n   * @param {string} name the property to set.\n   * @param {any} value The value that is both escaped and unescaped.\n   */;\n  _proto.setPropertyWithoutEscape = function setPropertyWithoutEscape(name, value) {\n    this[name] = value; // this may trigger a setter that updates raws, so it has to be set first.\n    if (this.raws) {\n      delete this.raws[name];\n    }\n  }\n\n  /**\n   *\n   * @param {number} line The number (starting with 1)\n   * @param {number} column The column number (starting with 1)\n   */;\n  _proto.isAtPosition = function isAtPosition(line, column) {\n    if (this.source && this.source.start && this.source.end) {\n      if (this.source.start.line > line) {\n        return false;\n      }\n      if (this.source.end.line < line) {\n        return false;\n      }\n      if (this.source.start.line === line && this.source.start.column > column) {\n        return false;\n      }\n      if (this.source.end.line === line && this.source.end.column < column) {\n        return false;\n      }\n      return true;\n    }\n    return undefined;\n  };\n  _proto.stringifyProperty = function stringifyProperty(name) {\n    return this.raws && this.raws[name] || this[name];\n  };\n  _proto.valueToString = function valueToString() {\n    return String(this.stringifyProperty("value"));\n  };\n  _proto.toString = function toString() {\n    return [this.rawSpaceBefore, this.valueToString(), this.rawSpaceAfter].join(\'\');\n  };\n  _createClass(Node, [{\n    key: "rawSpaceBefore",\n    get: function get() {\n      var rawSpace = this.raws && this.raws.spaces && this.raws.spaces.before;\n      if (rawSpace === undefined) {\n        rawSpace = this.spaces && this.spaces.before;\n      }\n      return rawSpace || "";\n    },\n    set: function set(raw) {\n      (0, _util.ensureObject)(this, "raws", "spaces");\n      this.raws.spaces.before = raw;\n    }\n  }, {\n    key: "rawSpaceAfter",\n    get: function get() {\n      var rawSpace = this.raws && this.raws.spaces && this.raws.spaces.after;\n      if (rawSpace === undefined) {\n        rawSpace = this.spaces.after;\n      }\n      return rawSpace || "";\n    },\n    set: function set(raw) {\n      (0, _util.ensureObject)(this, "raws", "spaces");\n      this.raws.spaces.after = raw;\n    }\n  }]);\n  return Node;\n}();\nexports["default"] = Node;\nmodule.exports = exports.default;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///44646\n')},17324:(module,exports,__webpack_require__)=>{"use strict";eval("\n\nexports.__esModule = true;\nexports[\"default\"] = void 0;\nvar _container = _interopRequireDefault(__webpack_require__(33631));\nvar _types = __webpack_require__(11581);\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\nfunction _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\nvar Pseudo = /*#__PURE__*/function (_Container) {\n  _inheritsLoose(Pseudo, _Container);\n  function Pseudo(opts) {\n    var _this;\n    _this = _Container.call(this, opts) || this;\n    _this.type = _types.PSEUDO;\n    return _this;\n  }\n  var _proto = Pseudo.prototype;\n  _proto.toString = function toString() {\n    var params = this.length ? '(' + this.map(String).join(',') + ')' : '';\n    return [this.rawSpaceBefore, this.stringifyProperty(\"value\"), params, this.rawSpaceAfter].join('');\n  };\n  return Pseudo;\n}(_container[\"default\"]);\nexports[\"default\"] = Pseudo;\nmodule.exports = exports.default;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTczMjQuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsa0JBQWtCO0FBQ2xCLGtCQUFrQjtBQUNsQix3Q0FBd0MsbUJBQU8sQ0FBQyxLQUFhO0FBQzdELGFBQWEsbUJBQU8sQ0FBQyxLQUFTO0FBQzlCLHVDQUF1Qyx1Q0FBdUM7QUFDOUUsZ0RBQWdELDBEQUEwRCwyQ0FBMkM7QUFDckosaUNBQWlDLDBHQUEwRyxpQkFBaUIsYUFBYTtBQUN6SztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNELGtCQUFrQjtBQUNsQiIsInNvdXJjZXMiOlsid2VicGFjazovL2Jsb2NrYml0ZS8uL25vZGVfbW9kdWxlcy9wb3N0Y3NzLXNlbGVjdG9yLXBhcnNlci9kaXN0L3NlbGVjdG9ycy9wc2V1ZG8uanM/YTdiOSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gdm9pZCAwO1xudmFyIF9jb250YWluZXIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL2NvbnRhaW5lclwiKSk7XG52YXIgX3R5cGVzID0gcmVxdWlyZShcIi4vdHlwZXNcIik7XG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBcImRlZmF1bHRcIjogb2JqIH07IH1cbmZ1bmN0aW9uIF9pbmhlcml0c0xvb3NlKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcy5wcm90b3R5cGUpOyBzdWJDbGFzcy5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBzdWJDbGFzczsgX3NldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKTsgfVxuZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHsgX3NldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mLmJpbmQoKSA6IGZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7IG8uX19wcm90b19fID0gcDsgcmV0dXJuIG87IH07IHJldHVybiBfc2V0UHJvdG90eXBlT2YobywgcCk7IH1cbnZhciBQc2V1ZG8gPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9Db250YWluZXIpIHtcbiAgX2luaGVyaXRzTG9vc2UoUHNldWRvLCBfQ29udGFpbmVyKTtcbiAgZnVuY3Rpb24gUHNldWRvKG9wdHMpIHtcbiAgICB2YXIgX3RoaXM7XG4gICAgX3RoaXMgPSBfQ29udGFpbmVyLmNhbGwodGhpcywgb3B0cykgfHwgdGhpcztcbiAgICBfdGhpcy50eXBlID0gX3R5cGVzLlBTRVVETztcbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cbiAgdmFyIF9wcm90byA9IFBzZXVkby5wcm90b3R5cGU7XG4gIF9wcm90by50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgIHZhciBwYXJhbXMgPSB0aGlzLmxlbmd0aCA/ICcoJyArIHRoaXMubWFwKFN0cmluZykuam9pbignLCcpICsgJyknIDogJyc7XG4gICAgcmV0dXJuIFt0aGlzLnJhd1NwYWNlQmVmb3JlLCB0aGlzLnN0cmluZ2lmeVByb3BlcnR5KFwidmFsdWVcIiksIHBhcmFtcywgdGhpcy5yYXdTcGFjZUFmdGVyXS5qb2luKCcnKTtcbiAgfTtcbiAgcmV0dXJuIFBzZXVkbztcbn0oX2NvbnRhaW5lcltcImRlZmF1bHRcIl0pO1xuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSBQc2V1ZG87XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHMuZGVmYXVsdDsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///17324\n")},80518:(module,exports,__webpack_require__)=>{"use strict";eval('\n\nexports.__esModule = true;\nexports["default"] = void 0;\nvar _container = _interopRequireDefault(__webpack_require__(33631));\nvar _types = __webpack_require__(11581);\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }\nfunction _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\nvar Root = /*#__PURE__*/function (_Container) {\n  _inheritsLoose(Root, _Container);\n  function Root(opts) {\n    var _this;\n    _this = _Container.call(this, opts) || this;\n    _this.type = _types.ROOT;\n    return _this;\n  }\n  var _proto = Root.prototype;\n  _proto.toString = function toString() {\n    var str = this.reduce(function (memo, selector) {\n      memo.push(String(selector));\n      return memo;\n    }, []).join(\',\');\n    return this.trailingComma ? str + \',\' : str;\n  };\n  _proto.error = function error(message, options) {\n    if (this._error) {\n      return this._error(message, options);\n    } else {\n      return new Error(message);\n    }\n  };\n  _createClass(Root, [{\n    key: "errorGenerator",\n    set: function set(handler) {\n      this._error = handler;\n    }\n  }]);\n  return Root;\n}(_container["default"]);\nexports["default"] = Root;\nmodule.exports = exports.default;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiODA1MTguanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsa0JBQWtCO0FBQ2xCLGtCQUFrQjtBQUNsQix3Q0FBd0MsbUJBQU8sQ0FBQyxLQUFhO0FBQzdELGFBQWEsbUJBQU8sQ0FBQyxLQUFTO0FBQzlCLHVDQUF1Qyx1Q0FBdUM7QUFDOUUsNENBQTRDLGdCQUFnQixrQkFBa0IsT0FBTywyQkFBMkIsd0RBQXdELGdDQUFnQyx1REFBdUQ7QUFDL1AsOERBQThELHNFQUFzRSw4REFBOEQsa0RBQWtELGlCQUFpQixHQUFHO0FBQ3hRLGdEQUFnRCwwREFBMEQsMkNBQTJDO0FBQ3JKLGlDQUFpQywwR0FBMEcsaUJBQWlCLGFBQWE7QUFDeks7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsQ0FBQztBQUNELGtCQUFrQjtBQUNsQiIsInNvdXJjZXMiOlsid2VicGFjazovL2Jsb2NrYml0ZS8uL25vZGVfbW9kdWxlcy9wb3N0Y3NzLXNlbGVjdG9yLXBhcnNlci9kaXN0L3NlbGVjdG9ycy9yb290LmpzP2JlMDciXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IHZvaWQgMDtcbnZhciBfY29udGFpbmVyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9jb250YWluZXJcIikpO1xudmFyIF90eXBlcyA9IHJlcXVpcmUoXCIuL3R5cGVzXCIpO1xuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgXCJkZWZhdWx0XCI6IG9iaiB9OyB9XG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9XG5mdW5jdGlvbiBfY3JlYXRlQ2xhc3MoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShDb25zdHJ1Y3RvciwgXCJwcm90b3R5cGVcIiwgeyB3cml0YWJsZTogZmFsc2UgfSk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfVxuZnVuY3Rpb24gX2luaGVyaXRzTG9vc2Uoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzLnByb3RvdHlwZSk7IHN1YkNsYXNzLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IHN1YkNsYXNzOyBfc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpOyB9XG5mdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkgeyBfc2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2YuYmluZCgpIDogZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHsgby5fX3Byb3RvX18gPSBwOyByZXR1cm4gbzsgfTsgcmV0dXJuIF9zZXRQcm90b3R5cGVPZihvLCBwKTsgfVxudmFyIFJvb3QgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9Db250YWluZXIpIHtcbiAgX2luaGVyaXRzTG9vc2UoUm9vdCwgX0NvbnRhaW5lcik7XG4gIGZ1bmN0aW9uIFJvb3Qob3B0cykge1xuICAgIHZhciBfdGhpcztcbiAgICBfdGhpcyA9IF9Db250YWluZXIuY2FsbCh0aGlzLCBvcHRzKSB8fCB0aGlzO1xuICAgIF90aGlzLnR5cGUgPSBfdHlwZXMuUk9PVDtcbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cbiAgdmFyIF9wcm90byA9IFJvb3QucHJvdG90eXBlO1xuICBfcHJvdG8udG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICB2YXIgc3RyID0gdGhpcy5yZWR1Y2UoZnVuY3Rpb24gKG1lbW8sIHNlbGVjdG9yKSB7XG4gICAgICBtZW1vLnB1c2goU3RyaW5nKHNlbGVjdG9yKSk7XG4gICAgICByZXR1cm4gbWVtbztcbiAgICB9LCBbXSkuam9pbignLCcpO1xuICAgIHJldHVybiB0aGlzLnRyYWlsaW5nQ29tbWEgPyBzdHIgKyAnLCcgOiBzdHI7XG4gIH07XG4gIF9wcm90by5lcnJvciA9IGZ1bmN0aW9uIGVycm9yKG1lc3NhZ2UsIG9wdGlvbnMpIHtcbiAgICBpZiAodGhpcy5fZXJyb3IpIHtcbiAgICAgIHJldHVybiB0aGlzLl9lcnJvcihtZXNzYWdlLCBvcHRpb25zKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIG5ldyBFcnJvcihtZXNzYWdlKTtcbiAgICB9XG4gIH07XG4gIF9jcmVhdGVDbGFzcyhSb290LCBbe1xuICAgIGtleTogXCJlcnJvckdlbmVyYXRvclwiLFxuICAgIHNldDogZnVuY3Rpb24gc2V0KGhhbmRsZXIpIHtcbiAgICAgIHRoaXMuX2Vycm9yID0gaGFuZGxlcjtcbiAgICB9XG4gIH1dKTtcbiAgcmV0dXJuIFJvb3Q7XG59KF9jb250YWluZXJbXCJkZWZhdWx0XCJdKTtcbmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gUm9vdDtcbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0cy5kZWZhdWx0OyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///80518\n')},30339:(module,exports,__webpack_require__)=>{"use strict";eval('\n\nexports.__esModule = true;\nexports["default"] = void 0;\nvar _container = _interopRequireDefault(__webpack_require__(33631));\nvar _types = __webpack_require__(11581);\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }\nfunction _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\nvar Selector = /*#__PURE__*/function (_Container) {\n  _inheritsLoose(Selector, _Container);\n  function Selector(opts) {\n    var _this;\n    _this = _Container.call(this, opts) || this;\n    _this.type = _types.SELECTOR;\n    return _this;\n  }\n  return Selector;\n}(_container["default"]);\nexports["default"] = Selector;\nmodule.exports = exports.default;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzAzMzkuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsa0JBQWtCO0FBQ2xCLGtCQUFrQjtBQUNsQix3Q0FBd0MsbUJBQU8sQ0FBQyxLQUFhO0FBQzdELGFBQWEsbUJBQU8sQ0FBQyxLQUFTO0FBQzlCLHVDQUF1Qyx1Q0FBdUM7QUFDOUUsZ0RBQWdELDBEQUEwRCwyQ0FBMkM7QUFDckosaUNBQWlDLDBHQUEwRyxpQkFBaUIsYUFBYTtBQUN6SztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Qsa0JBQWtCO0FBQ2xCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYmxvY2tiaXRlLy4vbm9kZV9tb2R1bGVzL3Bvc3Rjc3Mtc2VsZWN0b3ItcGFyc2VyL2Rpc3Qvc2VsZWN0b3JzL3NlbGVjdG9yLmpzP2YzNmIiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IHZvaWQgMDtcbnZhciBfY29udGFpbmVyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9jb250YWluZXJcIikpO1xudmFyIF90eXBlcyA9IHJlcXVpcmUoXCIuL3R5cGVzXCIpO1xuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgXCJkZWZhdWx0XCI6IG9iaiB9OyB9XG5mdW5jdGlvbiBfaW5oZXJpdHNMb29zZShzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MucHJvdG90eXBlKTsgc3ViQ2xhc3MucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gc3ViQ2xhc3M7IF9zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcyk7IH1cbmZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7IF9zZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZi5iaW5kKCkgOiBmdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkgeyBvLl9fcHJvdG9fXyA9IHA7IHJldHVybiBvOyB9OyByZXR1cm4gX3NldFByb3RvdHlwZU9mKG8sIHApOyB9XG52YXIgU2VsZWN0b3IgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9Db250YWluZXIpIHtcbiAgX2luaGVyaXRzTG9vc2UoU2VsZWN0b3IsIF9Db250YWluZXIpO1xuICBmdW5jdGlvbiBTZWxlY3RvcihvcHRzKSB7XG4gICAgdmFyIF90aGlzO1xuICAgIF90aGlzID0gX0NvbnRhaW5lci5jYWxsKHRoaXMsIG9wdHMpIHx8IHRoaXM7XG4gICAgX3RoaXMudHlwZSA9IF90eXBlcy5TRUxFQ1RPUjtcbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cbiAgcmV0dXJuIFNlbGVjdG9yO1xufShfY29udGFpbmVyW1wiZGVmYXVsdFwiXSk7XG5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IFNlbGVjdG9yO1xubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzLmRlZmF1bHQ7Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///30339\n')},85799:(module,exports,__webpack_require__)=>{"use strict";eval('\n\nexports.__esModule = true;\nexports["default"] = void 0;\nvar _node = _interopRequireDefault(__webpack_require__(44646));\nvar _types = __webpack_require__(11581);\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }\nfunction _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\nvar String = /*#__PURE__*/function (_Node) {\n  _inheritsLoose(String, _Node);\n  function String(opts) {\n    var _this;\n    _this = _Node.call(this, opts) || this;\n    _this.type = _types.STRING;\n    return _this;\n  }\n  return String;\n}(_node["default"]);\nexports["default"] = String;\nmodule.exports = exports.default;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiODU3OTkuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsa0JBQWtCO0FBQ2xCLGtCQUFrQjtBQUNsQixtQ0FBbUMsbUJBQU8sQ0FBQyxLQUFRO0FBQ25ELGFBQWEsbUJBQU8sQ0FBQyxLQUFTO0FBQzlCLHVDQUF1Qyx1Q0FBdUM7QUFDOUUsZ0RBQWdELDBEQUEwRCwyQ0FBMkM7QUFDckosaUNBQWlDLDBHQUEwRyxpQkFBaUIsYUFBYTtBQUN6SztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Qsa0JBQWtCO0FBQ2xCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYmxvY2tiaXRlLy4vbm9kZV9tb2R1bGVzL3Bvc3Rjc3Mtc2VsZWN0b3ItcGFyc2VyL2Rpc3Qvc2VsZWN0b3JzL3N0cmluZy5qcz9iY2M3Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSB2b2lkIDA7XG52YXIgX25vZGUgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL25vZGVcIikpO1xudmFyIF90eXBlcyA9IHJlcXVpcmUoXCIuL3R5cGVzXCIpO1xuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgXCJkZWZhdWx0XCI6IG9iaiB9OyB9XG5mdW5jdGlvbiBfaW5oZXJpdHNMb29zZShzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MucHJvdG90eXBlKTsgc3ViQ2xhc3MucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gc3ViQ2xhc3M7IF9zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcyk7IH1cbmZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7IF9zZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZi5iaW5kKCkgOiBmdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkgeyBvLl9fcHJvdG9fXyA9IHA7IHJldHVybiBvOyB9OyByZXR1cm4gX3NldFByb3RvdHlwZU9mKG8sIHApOyB9XG52YXIgU3RyaW5nID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfTm9kZSkge1xuICBfaW5oZXJpdHNMb29zZShTdHJpbmcsIF9Ob2RlKTtcbiAgZnVuY3Rpb24gU3RyaW5nKG9wdHMpIHtcbiAgICB2YXIgX3RoaXM7XG4gICAgX3RoaXMgPSBfTm9kZS5jYWxsKHRoaXMsIG9wdHMpIHx8IHRoaXM7XG4gICAgX3RoaXMudHlwZSA9IF90eXBlcy5TVFJJTkc7XG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG4gIHJldHVybiBTdHJpbmc7XG59KF9ub2RlW1wiZGVmYXVsdFwiXSk7XG5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IFN0cmluZztcbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0cy5kZWZhdWx0OyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///85799\n')},79720:(module,exports,__webpack_require__)=>{"use strict";eval('\n\nexports.__esModule = true;\nexports["default"] = void 0;\nvar _namespace = _interopRequireDefault(__webpack_require__(13295));\nvar _types = __webpack_require__(11581);\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }\nfunction _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\nvar Tag = /*#__PURE__*/function (_Namespace) {\n  _inheritsLoose(Tag, _Namespace);\n  function Tag(opts) {\n    var _this;\n    _this = _Namespace.call(this, opts) || this;\n    _this.type = _types.TAG;\n    return _this;\n  }\n  return Tag;\n}(_namespace["default"]);\nexports["default"] = Tag;\nmodule.exports = exports.default;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNzk3MjAuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsa0JBQWtCO0FBQ2xCLGtCQUFrQjtBQUNsQix3Q0FBd0MsbUJBQU8sQ0FBQyxLQUFhO0FBQzdELGFBQWEsbUJBQU8sQ0FBQyxLQUFTO0FBQzlCLHVDQUF1Qyx1Q0FBdUM7QUFDOUUsZ0RBQWdELDBEQUEwRCwyQ0FBMkM7QUFDckosaUNBQWlDLDBHQUEwRyxpQkFBaUIsYUFBYTtBQUN6SztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Qsa0JBQWtCO0FBQ2xCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYmxvY2tiaXRlLy4vbm9kZV9tb2R1bGVzL3Bvc3Rjc3Mtc2VsZWN0b3ItcGFyc2VyL2Rpc3Qvc2VsZWN0b3JzL3RhZy5qcz8xOTNmIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSB2b2lkIDA7XG52YXIgX25hbWVzcGFjZSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vbmFtZXNwYWNlXCIpKTtcbnZhciBfdHlwZXMgPSByZXF1aXJlKFwiLi90eXBlc1wiKTtcbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IFwiZGVmYXVsdFwiOiBvYmogfTsgfVxuZnVuY3Rpb24gX2luaGVyaXRzTG9vc2Uoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzLnByb3RvdHlwZSk7IHN1YkNsYXNzLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IHN1YkNsYXNzOyBfc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpOyB9XG5mdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkgeyBfc2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2YuYmluZCgpIDogZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHsgby5fX3Byb3RvX18gPSBwOyByZXR1cm4gbzsgfTsgcmV0dXJuIF9zZXRQcm90b3R5cGVPZihvLCBwKTsgfVxudmFyIFRhZyA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX05hbWVzcGFjZSkge1xuICBfaW5oZXJpdHNMb29zZShUYWcsIF9OYW1lc3BhY2UpO1xuICBmdW5jdGlvbiBUYWcob3B0cykge1xuICAgIHZhciBfdGhpcztcbiAgICBfdGhpcyA9IF9OYW1lc3BhY2UuY2FsbCh0aGlzLCBvcHRzKSB8fCB0aGlzO1xuICAgIF90aGlzLnR5cGUgPSBfdHlwZXMuVEFHO1xuICAgIHJldHVybiBfdGhpcztcbiAgfVxuICByZXR1cm4gVGFnO1xufShfbmFtZXNwYWNlW1wiZGVmYXVsdFwiXSk7XG5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IFRhZztcbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0cy5kZWZhdWx0OyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///79720\n')},11581:(__unused_webpack_module,exports)=>{"use strict";eval("\n\nexports.__esModule = true;\nexports.UNIVERSAL = exports.TAG = exports.STRING = exports.SELECTOR = exports.ROOT = exports.PSEUDO = exports.NESTING = exports.ID = exports.COMMENT = exports.COMBINATOR = exports.CLASS = exports.ATTRIBUTE = void 0;\nvar TAG = 'tag';\nexports.TAG = TAG;\nvar STRING = 'string';\nexports.STRING = STRING;\nvar SELECTOR = 'selector';\nexports.SELECTOR = SELECTOR;\nvar ROOT = 'root';\nexports.ROOT = ROOT;\nvar PSEUDO = 'pseudo';\nexports.PSEUDO = PSEUDO;\nvar NESTING = 'nesting';\nexports.NESTING = NESTING;\nvar ID = 'id';\nexports.ID = ID;\nvar COMMENT = 'comment';\nexports.COMMENT = COMMENT;\nvar COMBINATOR = 'combinator';\nexports.COMBINATOR = COMBINATOR;\nvar CLASS = 'class';\nexports.CLASS = CLASS;\nvar ATTRIBUTE = 'attribute';\nexports.ATTRIBUTE = ATTRIBUTE;\nvar UNIVERSAL = 'universal';\nexports.UNIVERSAL = UNIVERSAL;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTE1ODEuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsa0JBQWtCO0FBQ2xCLGlCQUFpQixHQUFHLFdBQVcsR0FBRyxjQUFjLEdBQUcsZ0JBQWdCLEdBQUcsWUFBWSxHQUFHLGNBQWMsR0FBRyxlQUFlLEdBQUcsVUFBVSxHQUFHLGVBQWUsR0FBRyxrQkFBa0IsR0FBRyxhQUFhLEdBQUcsaUJBQWlCO0FBQzdNO0FBQ0EsV0FBVztBQUNYO0FBQ0EsY0FBYztBQUNkO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0EsWUFBWTtBQUNaO0FBQ0EsY0FBYztBQUNkO0FBQ0EsZUFBZTtBQUNmO0FBQ0EsVUFBVTtBQUNWO0FBQ0EsZUFBZTtBQUNmO0FBQ0Esa0JBQWtCO0FBQ2xCO0FBQ0EsYUFBYTtBQUNiO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0EsaUJBQWlCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYmxvY2tiaXRlLy4vbm9kZV9tb2R1bGVzL3Bvc3Rjc3Mtc2VsZWN0b3ItcGFyc2VyL2Rpc3Qvc2VsZWN0b3JzL3R5cGVzLmpzPzY5NjQiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5leHBvcnRzLlVOSVZFUlNBTCA9IGV4cG9ydHMuVEFHID0gZXhwb3J0cy5TVFJJTkcgPSBleHBvcnRzLlNFTEVDVE9SID0gZXhwb3J0cy5ST09UID0gZXhwb3J0cy5QU0VVRE8gPSBleHBvcnRzLk5FU1RJTkcgPSBleHBvcnRzLklEID0gZXhwb3J0cy5DT01NRU5UID0gZXhwb3J0cy5DT01CSU5BVE9SID0gZXhwb3J0cy5DTEFTUyA9IGV4cG9ydHMuQVRUUklCVVRFID0gdm9pZCAwO1xudmFyIFRBRyA9ICd0YWcnO1xuZXhwb3J0cy5UQUcgPSBUQUc7XG52YXIgU1RSSU5HID0gJ3N0cmluZyc7XG5leHBvcnRzLlNUUklORyA9IFNUUklORztcbnZhciBTRUxFQ1RPUiA9ICdzZWxlY3Rvcic7XG5leHBvcnRzLlNFTEVDVE9SID0gU0VMRUNUT1I7XG52YXIgUk9PVCA9ICdyb290JztcbmV4cG9ydHMuUk9PVCA9IFJPT1Q7XG52YXIgUFNFVURPID0gJ3BzZXVkbyc7XG5leHBvcnRzLlBTRVVETyA9IFBTRVVETztcbnZhciBORVNUSU5HID0gJ25lc3RpbmcnO1xuZXhwb3J0cy5ORVNUSU5HID0gTkVTVElORztcbnZhciBJRCA9ICdpZCc7XG5leHBvcnRzLklEID0gSUQ7XG52YXIgQ09NTUVOVCA9ICdjb21tZW50JztcbmV4cG9ydHMuQ09NTUVOVCA9IENPTU1FTlQ7XG52YXIgQ09NQklOQVRPUiA9ICdjb21iaW5hdG9yJztcbmV4cG9ydHMuQ09NQklOQVRPUiA9IENPTUJJTkFUT1I7XG52YXIgQ0xBU1MgPSAnY2xhc3MnO1xuZXhwb3J0cy5DTEFTUyA9IENMQVNTO1xudmFyIEFUVFJJQlVURSA9ICdhdHRyaWJ1dGUnO1xuZXhwb3J0cy5BVFRSSUJVVEUgPSBBVFRSSUJVVEU7XG52YXIgVU5JVkVSU0FMID0gJ3VuaXZlcnNhbCc7XG5leHBvcnRzLlVOSVZFUlNBTCA9IFVOSVZFUlNBTDsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///11581\n")},81669:(module,exports,__webpack_require__)=>{"use strict";eval('\n\nexports.__esModule = true;\nexports["default"] = void 0;\nvar _namespace = _interopRequireDefault(__webpack_require__(13295));\nvar _types = __webpack_require__(11581);\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }\nfunction _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\nvar Universal = /*#__PURE__*/function (_Namespace) {\n  _inheritsLoose(Universal, _Namespace);\n  function Universal(opts) {\n    var _this;\n    _this = _Namespace.call(this, opts) || this;\n    _this.type = _types.UNIVERSAL;\n    _this.value = \'*\';\n    return _this;\n  }\n  return Universal;\n}(_namespace["default"]);\nexports["default"] = Universal;\nmodule.exports = exports.default;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiODE2NjkuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsa0JBQWtCO0FBQ2xCLGtCQUFrQjtBQUNsQix3Q0FBd0MsbUJBQU8sQ0FBQyxLQUFhO0FBQzdELGFBQWEsbUJBQU8sQ0FBQyxLQUFTO0FBQzlCLHVDQUF1Qyx1Q0FBdUM7QUFDOUUsZ0RBQWdELDBEQUEwRCwyQ0FBMkM7QUFDckosaUNBQWlDLDBHQUEwRyxpQkFBaUIsYUFBYTtBQUN6SztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRCxrQkFBa0I7QUFDbEIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ibG9ja2JpdGUvLi9ub2RlX21vZHVsZXMvcG9zdGNzcy1zZWxlY3Rvci1wYXJzZXIvZGlzdC9zZWxlY3RvcnMvdW5pdmVyc2FsLmpzPzE3MjAiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IHZvaWQgMDtcbnZhciBfbmFtZXNwYWNlID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9uYW1lc3BhY2VcIikpO1xudmFyIF90eXBlcyA9IHJlcXVpcmUoXCIuL3R5cGVzXCIpO1xuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgXCJkZWZhdWx0XCI6IG9iaiB9OyB9XG5mdW5jdGlvbiBfaW5oZXJpdHNMb29zZShzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MucHJvdG90eXBlKTsgc3ViQ2xhc3MucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gc3ViQ2xhc3M7IF9zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcyk7IH1cbmZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7IF9zZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZi5iaW5kKCkgOiBmdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkgeyBvLl9fcHJvdG9fXyA9IHA7IHJldHVybiBvOyB9OyByZXR1cm4gX3NldFByb3RvdHlwZU9mKG8sIHApOyB9XG52YXIgVW5pdmVyc2FsID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfTmFtZXNwYWNlKSB7XG4gIF9pbmhlcml0c0xvb3NlKFVuaXZlcnNhbCwgX05hbWVzcGFjZSk7XG4gIGZ1bmN0aW9uIFVuaXZlcnNhbChvcHRzKSB7XG4gICAgdmFyIF90aGlzO1xuICAgIF90aGlzID0gX05hbWVzcGFjZS5jYWxsKHRoaXMsIG9wdHMpIHx8IHRoaXM7XG4gICAgX3RoaXMudHlwZSA9IF90eXBlcy5VTklWRVJTQUw7XG4gICAgX3RoaXMudmFsdWUgPSAnKic7XG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG4gIHJldHVybiBVbml2ZXJzYWw7XG59KF9uYW1lc3BhY2VbXCJkZWZhdWx0XCJdKTtcbmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gVW5pdmVyc2FsO1xubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzLmRlZmF1bHQ7Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///81669\n')},20263:(module,exports)=>{"use strict";eval('\n\nexports.__esModule = true;\nexports["default"] = sortAscending;\nfunction sortAscending(list) {\n  return list.sort(function (a, b) {\n    return a - b;\n  });\n}\n;\nmodule.exports = exports.default;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjAyNjMuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsa0JBQWtCO0FBQ2xCLGtCQUFrQjtBQUNsQjtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYmxvY2tiaXRlLy4vbm9kZV9tb2R1bGVzL3Bvc3Rjc3Mtc2VsZWN0b3ItcGFyc2VyL2Rpc3Qvc29ydEFzY2VuZGluZy5qcz81Y2RmIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSBzb3J0QXNjZW5kaW5nO1xuZnVuY3Rpb24gc29ydEFzY2VuZGluZyhsaXN0KSB7XG4gIHJldHVybiBsaXN0LnNvcnQoZnVuY3Rpb24gKGEsIGIpIHtcbiAgICByZXR1cm4gYSAtIGI7XG4gIH0pO1xufVxuO1xubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzLmRlZmF1bHQ7Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///20263\n')},70071:(__unused_webpack_module,exports)=>{"use strict";eval("\n\nexports.__esModule = true;\nexports.word = exports.tilde = exports.tab = exports.str = exports.space = exports.slash = exports.singleQuote = exports.semicolon = exports.plus = exports.pipe = exports.openSquare = exports.openParenthesis = exports.newline = exports.greaterThan = exports.feed = exports.equals = exports.doubleQuote = exports.dollar = exports.cr = exports.comment = exports.comma = exports.combinator = exports.colon = exports.closeSquare = exports.closeParenthesis = exports.caret = exports.bang = exports.backslash = exports.at = exports.asterisk = exports.ampersand = void 0;\nvar ampersand = 38; // `&`.charCodeAt(0);\nexports.ampersand = ampersand;\nvar asterisk = 42; // `*`.charCodeAt(0);\nexports.asterisk = asterisk;\nvar at = 64; // `@`.charCodeAt(0);\nexports.at = at;\nvar comma = 44; // `,`.charCodeAt(0);\nexports.comma = comma;\nvar colon = 58; // `:`.charCodeAt(0);\nexports.colon = colon;\nvar semicolon = 59; // `;`.charCodeAt(0);\nexports.semicolon = semicolon;\nvar openParenthesis = 40; // `(`.charCodeAt(0);\nexports.openParenthesis = openParenthesis;\nvar closeParenthesis = 41; // `)`.charCodeAt(0);\nexports.closeParenthesis = closeParenthesis;\nvar openSquare = 91; // `[`.charCodeAt(0);\nexports.openSquare = openSquare;\nvar closeSquare = 93; // `]`.charCodeAt(0);\nexports.closeSquare = closeSquare;\nvar dollar = 36; // `$`.charCodeAt(0);\nexports.dollar = dollar;\nvar tilde = 126; // `~`.charCodeAt(0);\nexports.tilde = tilde;\nvar caret = 94; // `^`.charCodeAt(0);\nexports.caret = caret;\nvar plus = 43; // `+`.charCodeAt(0);\nexports.plus = plus;\nvar equals = 61; // `=`.charCodeAt(0);\nexports.equals = equals;\nvar pipe = 124; // `|`.charCodeAt(0);\nexports.pipe = pipe;\nvar greaterThan = 62; // `>`.charCodeAt(0);\nexports.greaterThan = greaterThan;\nvar space = 32; // ` `.charCodeAt(0);\nexports.space = space;\nvar singleQuote = 39; // `'`.charCodeAt(0);\nexports.singleQuote = singleQuote;\nvar doubleQuote = 34; // `\"`.charCodeAt(0);\nexports.doubleQuote = doubleQuote;\nvar slash = 47; // `/`.charCodeAt(0);\nexports.slash = slash;\nvar bang = 33; // `!`.charCodeAt(0);\nexports.bang = bang;\nvar backslash = 92; // '\\\\'.charCodeAt(0);\nexports.backslash = backslash;\nvar cr = 13; // '\\r'.charCodeAt(0);\nexports.cr = cr;\nvar feed = 12; // '\\f'.charCodeAt(0);\nexports.feed = feed;\nvar newline = 10; // '\\n'.charCodeAt(0);\nexports.newline = newline;\nvar tab = 9; // '\\t'.charCodeAt(0);\n\n// Expose aliases primarily for readability.\nexports.tab = tab;\nvar str = singleQuote;\n\n// No good single character representation!\nexports.str = str;\nvar comment = -1;\nexports.comment = comment;\nvar word = -2;\nexports.word = word;\nvar combinator = -3;\nexports.combinator = combinator;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNzAwNzEuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsa0JBQWtCO0FBQ2xCLFlBQVksR0FBRyxhQUFhLEdBQUcsV0FBVyxHQUFHLFdBQVcsR0FBRyxhQUFhLEdBQUcsYUFBYSxHQUFHLG1CQUFtQixHQUFHLGlCQUFpQixHQUFHLFlBQVksR0FBRyxZQUFZLEdBQUcsa0JBQWtCLEdBQUcsdUJBQXVCLEdBQUcsZUFBZSxHQUFHLG1CQUFtQixHQUFHLFlBQVksR0FBRyxjQUFjLEdBQUcsbUJBQW1CLEdBQUcsY0FBYyxHQUFHLFVBQVUsR0FBRyxlQUFlLEdBQUcsYUFBYSxHQUFHLGtCQUFrQixHQUFHLGFBQWEsR0FBRyxtQkFBbUIsR0FBRyx3QkFBd0IsR0FBRyxhQUFhLEdBQUcsWUFBWSxHQUFHLGlCQUFpQixHQUFHLFVBQVUsR0FBRyxnQkFBZ0IsR0FBRyxpQkFBaUI7QUFDMWlCLG9CQUFvQjtBQUNwQixpQkFBaUI7QUFDakIsbUJBQW1CO0FBQ25CLGdCQUFnQjtBQUNoQixhQUFhO0FBQ2IsVUFBVTtBQUNWLGdCQUFnQjtBQUNoQixhQUFhO0FBQ2IsZ0JBQWdCO0FBQ2hCLGFBQWE7QUFDYixvQkFBb0IsS0FBSztBQUN6QixpQkFBaUI7QUFDakIsMEJBQTBCO0FBQzFCLHVCQUF1QjtBQUN2QiwyQkFBMkI7QUFDM0Isd0JBQXdCO0FBQ3hCLHFCQUFxQjtBQUNyQixrQkFBa0I7QUFDbEIsc0JBQXNCO0FBQ3RCLG1CQUFtQjtBQUNuQixpQkFBaUI7QUFDakIsY0FBYztBQUNkLGlCQUFpQjtBQUNqQixhQUFhO0FBQ2IsZ0JBQWdCO0FBQ2hCLGFBQWE7QUFDYixlQUFlO0FBQ2YsWUFBWTtBQUNaLGlCQUFpQjtBQUNqQixjQUFjO0FBQ2QsZ0JBQWdCO0FBQ2hCLFlBQVk7QUFDWixzQkFBc0I7QUFDdEIsbUJBQW1CO0FBQ25CLGdCQUFnQjtBQUNoQixhQUFhO0FBQ2Isc0JBQXNCO0FBQ3RCLG1CQUFtQjtBQUNuQixzQkFBc0I7QUFDdEIsbUJBQW1CO0FBQ25CLGdCQUFnQjtBQUNoQixhQUFhO0FBQ2IsZUFBZTtBQUNmLFlBQVk7QUFDWixvQkFBb0I7QUFDcEIsaUJBQWlCO0FBQ2pCLGFBQWE7QUFDYixVQUFVO0FBQ1YsZUFBZTtBQUNmLFlBQVk7QUFDWixrQkFBa0I7QUFDbEIsZUFBZTtBQUNmLGFBQWE7O0FBRWI7QUFDQSxXQUFXO0FBQ1g7O0FBRUE7QUFDQSxXQUFXO0FBQ1g7QUFDQSxlQUFlO0FBQ2Y7QUFDQSxZQUFZO0FBQ1o7QUFDQSxrQkFBa0IiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ibG9ja2JpdGUvLi9ub2RlX21vZHVsZXMvcG9zdGNzcy1zZWxlY3Rvci1wYXJzZXIvZGlzdC90b2tlblR5cGVzLmpzPzJlMDIiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5leHBvcnRzLndvcmQgPSBleHBvcnRzLnRpbGRlID0gZXhwb3J0cy50YWIgPSBleHBvcnRzLnN0ciA9IGV4cG9ydHMuc3BhY2UgPSBleHBvcnRzLnNsYXNoID0gZXhwb3J0cy5zaW5nbGVRdW90ZSA9IGV4cG9ydHMuc2VtaWNvbG9uID0gZXhwb3J0cy5wbHVzID0gZXhwb3J0cy5waXBlID0gZXhwb3J0cy5vcGVuU3F1YXJlID0gZXhwb3J0cy5vcGVuUGFyZW50aGVzaXMgPSBleHBvcnRzLm5ld2xpbmUgPSBleHBvcnRzLmdyZWF0ZXJUaGFuID0gZXhwb3J0cy5mZWVkID0gZXhwb3J0cy5lcXVhbHMgPSBleHBvcnRzLmRvdWJsZVF1b3RlID0gZXhwb3J0cy5kb2xsYXIgPSBleHBvcnRzLmNyID0gZXhwb3J0cy5jb21tZW50ID0gZXhwb3J0cy5jb21tYSA9IGV4cG9ydHMuY29tYmluYXRvciA9IGV4cG9ydHMuY29sb24gPSBleHBvcnRzLmNsb3NlU3F1YXJlID0gZXhwb3J0cy5jbG9zZVBhcmVudGhlc2lzID0gZXhwb3J0cy5jYXJldCA9IGV4cG9ydHMuYmFuZyA9IGV4cG9ydHMuYmFja3NsYXNoID0gZXhwb3J0cy5hdCA9IGV4cG9ydHMuYXN0ZXJpc2sgPSBleHBvcnRzLmFtcGVyc2FuZCA9IHZvaWQgMDtcbnZhciBhbXBlcnNhbmQgPSAzODsgLy8gYCZgLmNoYXJDb2RlQXQoMCk7XG5leHBvcnRzLmFtcGVyc2FuZCA9IGFtcGVyc2FuZDtcbnZhciBhc3RlcmlzayA9IDQyOyAvLyBgKmAuY2hhckNvZGVBdCgwKTtcbmV4cG9ydHMuYXN0ZXJpc2sgPSBhc3RlcmlzaztcbnZhciBhdCA9IDY0OyAvLyBgQGAuY2hhckNvZGVBdCgwKTtcbmV4cG9ydHMuYXQgPSBhdDtcbnZhciBjb21tYSA9IDQ0OyAvLyBgLGAuY2hhckNvZGVBdCgwKTtcbmV4cG9ydHMuY29tbWEgPSBjb21tYTtcbnZhciBjb2xvbiA9IDU4OyAvLyBgOmAuY2hhckNvZGVBdCgwKTtcbmV4cG9ydHMuY29sb24gPSBjb2xvbjtcbnZhciBzZW1pY29sb24gPSA1OTsgLy8gYDtgLmNoYXJDb2RlQXQoMCk7XG5leHBvcnRzLnNlbWljb2xvbiA9IHNlbWljb2xvbjtcbnZhciBvcGVuUGFyZW50aGVzaXMgPSA0MDsgLy8gYChgLmNoYXJDb2RlQXQoMCk7XG5leHBvcnRzLm9wZW5QYXJlbnRoZXNpcyA9IG9wZW5QYXJlbnRoZXNpcztcbnZhciBjbG9zZVBhcmVudGhlc2lzID0gNDE7IC8vIGApYC5jaGFyQ29kZUF0KDApO1xuZXhwb3J0cy5jbG9zZVBhcmVudGhlc2lzID0gY2xvc2VQYXJlbnRoZXNpcztcbnZhciBvcGVuU3F1YXJlID0gOTE7IC8vIGBbYC5jaGFyQ29kZUF0KDApO1xuZXhwb3J0cy5vcGVuU3F1YXJlID0gb3BlblNxdWFyZTtcbnZhciBjbG9zZVNxdWFyZSA9IDkzOyAvLyBgXWAuY2hhckNvZGVBdCgwKTtcbmV4cG9ydHMuY2xvc2VTcXVhcmUgPSBjbG9zZVNxdWFyZTtcbnZhciBkb2xsYXIgPSAzNjsgLy8gYCRgLmNoYXJDb2RlQXQoMCk7XG5leHBvcnRzLmRvbGxhciA9IGRvbGxhcjtcbnZhciB0aWxkZSA9IDEyNjsgLy8gYH5gLmNoYXJDb2RlQXQoMCk7XG5leHBvcnRzLnRpbGRlID0gdGlsZGU7XG52YXIgY2FyZXQgPSA5NDsgLy8gYF5gLmNoYXJDb2RlQXQoMCk7XG5leHBvcnRzLmNhcmV0ID0gY2FyZXQ7XG52YXIgcGx1cyA9IDQzOyAvLyBgK2AuY2hhckNvZGVBdCgwKTtcbmV4cG9ydHMucGx1cyA9IHBsdXM7XG52YXIgZXF1YWxzID0gNjE7IC8vIGA9YC5jaGFyQ29kZUF0KDApO1xuZXhwb3J0cy5lcXVhbHMgPSBlcXVhbHM7XG52YXIgcGlwZSA9IDEyNDsgLy8gYHxgLmNoYXJDb2RlQXQoMCk7XG5leHBvcnRzLnBpcGUgPSBwaXBlO1xudmFyIGdyZWF0ZXJUaGFuID0gNjI7IC8vIGA+YC5jaGFyQ29kZUF0KDApO1xuZXhwb3J0cy5ncmVhdGVyVGhhbiA9IGdyZWF0ZXJUaGFuO1xudmFyIHNwYWNlID0gMzI7IC8vIGAgYC5jaGFyQ29kZUF0KDApO1xuZXhwb3J0cy5zcGFjZSA9IHNwYWNlO1xudmFyIHNpbmdsZVF1b3RlID0gMzk7IC8vIGAnYC5jaGFyQ29kZUF0KDApO1xuZXhwb3J0cy5zaW5nbGVRdW90ZSA9IHNpbmdsZVF1b3RlO1xudmFyIGRvdWJsZVF1b3RlID0gMzQ7IC8vIGBcImAuY2hhckNvZGVBdCgwKTtcbmV4cG9ydHMuZG91YmxlUXVvdGUgPSBkb3VibGVRdW90ZTtcbnZhciBzbGFzaCA9IDQ3OyAvLyBgL2AuY2hhckNvZGVBdCgwKTtcbmV4cG9ydHMuc2xhc2ggPSBzbGFzaDtcbnZhciBiYW5nID0gMzM7IC8vIGAhYC5jaGFyQ29kZUF0KDApO1xuZXhwb3J0cy5iYW5nID0gYmFuZztcbnZhciBiYWNrc2xhc2ggPSA5MjsgLy8gJ1xcXFwnLmNoYXJDb2RlQXQoMCk7XG5leHBvcnRzLmJhY2tzbGFzaCA9IGJhY2tzbGFzaDtcbnZhciBjciA9IDEzOyAvLyAnXFxyJy5jaGFyQ29kZUF0KDApO1xuZXhwb3J0cy5jciA9IGNyO1xudmFyIGZlZWQgPSAxMjsgLy8gJ1xcZicuY2hhckNvZGVBdCgwKTtcbmV4cG9ydHMuZmVlZCA9IGZlZWQ7XG52YXIgbmV3bGluZSA9IDEwOyAvLyAnXFxuJy5jaGFyQ29kZUF0KDApO1xuZXhwb3J0cy5uZXdsaW5lID0gbmV3bGluZTtcbnZhciB0YWIgPSA5OyAvLyAnXFx0Jy5jaGFyQ29kZUF0KDApO1xuXG4vLyBFeHBvc2UgYWxpYXNlcyBwcmltYXJpbHkgZm9yIHJlYWRhYmlsaXR5LlxuZXhwb3J0cy50YWIgPSB0YWI7XG52YXIgc3RyID0gc2luZ2xlUXVvdGU7XG5cbi8vIE5vIGdvb2Qgc2luZ2xlIGNoYXJhY3RlciByZXByZXNlbnRhdGlvbiFcbmV4cG9ydHMuc3RyID0gc3RyO1xudmFyIGNvbW1lbnQgPSAtMTtcbmV4cG9ydHMuY29tbWVudCA9IGNvbW1lbnQ7XG52YXIgd29yZCA9IC0yO1xuZXhwb3J0cy53b3JkID0gd29yZDtcbnZhciBjb21iaW5hdG9yID0gLTM7XG5leHBvcnRzLmNvbWJpbmF0b3IgPSBjb21iaW5hdG9yOyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///70071\n")},82648:(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";eval('\n\nexports.__esModule = true;\nexports.FIELDS = void 0;\nexports["default"] = tokenize;\nvar t = _interopRequireWildcard(__webpack_require__(70071));\nvar _unescapable, _wordDelimiters;\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\nvar unescapable = (_unescapable = {}, _unescapable[t.tab] = true, _unescapable[t.newline] = true, _unescapable[t.cr] = true, _unescapable[t.feed] = true, _unescapable);\nvar wordDelimiters = (_wordDelimiters = {}, _wordDelimiters[t.space] = true, _wordDelimiters[t.tab] = true, _wordDelimiters[t.newline] = true, _wordDelimiters[t.cr] = true, _wordDelimiters[t.feed] = true, _wordDelimiters[t.ampersand] = true, _wordDelimiters[t.asterisk] = true, _wordDelimiters[t.bang] = true, _wordDelimiters[t.comma] = true, _wordDelimiters[t.colon] = true, _wordDelimiters[t.semicolon] = true, _wordDelimiters[t.openParenthesis] = true, _wordDelimiters[t.closeParenthesis] = true, _wordDelimiters[t.openSquare] = true, _wordDelimiters[t.closeSquare] = true, _wordDelimiters[t.singleQuote] = true, _wordDelimiters[t.doubleQuote] = true, _wordDelimiters[t.plus] = true, _wordDelimiters[t.pipe] = true, _wordDelimiters[t.tilde] = true, _wordDelimiters[t.greaterThan] = true, _wordDelimiters[t.equals] = true, _wordDelimiters[t.dollar] = true, _wordDelimiters[t.caret] = true, _wordDelimiters[t.slash] = true, _wordDelimiters);\nvar hex = {};\nvar hexChars = "0123456789abcdefABCDEF";\nfor (var i = 0; i < hexChars.length; i++) {\n  hex[hexChars.charCodeAt(i)] = true;\n}\n\n/**\n *  Returns the last index of the bar css word\n * @param {string} css The string in which the word begins\n * @param {number} start The index into the string where word\'s first letter occurs\n */\nfunction consumeWord(css, start) {\n  var next = start;\n  var code;\n  do {\n    code = css.charCodeAt(next);\n    if (wordDelimiters[code]) {\n      return next - 1;\n    } else if (code === t.backslash) {\n      next = consumeEscape(css, next) + 1;\n    } else {\n      // All other characters are part of the word\n      next++;\n    }\n  } while (next < css.length);\n  return next - 1;\n}\n\n/**\n *  Returns the last index of the escape sequence\n * @param {string} css The string in which the sequence begins\n * @param {number} start The index into the string where escape character (`\\`) occurs.\n */\nfunction consumeEscape(css, start) {\n  var next = start;\n  var code = css.charCodeAt(next + 1);\n  if (unescapable[code]) {\n    // just consume the escape char\n  } else if (hex[code]) {\n    var hexDigits = 0;\n    // consume up to 6 hex chars\n    do {\n      next++;\n      hexDigits++;\n      code = css.charCodeAt(next + 1);\n    } while (hex[code] && hexDigits < 6);\n    // if fewer than 6 hex chars, a trailing space ends the escape\n    if (hexDigits < 6 && code === t.space) {\n      next++;\n    }\n  } else {\n    // the next char is part of the current word\n    next++;\n  }\n  return next;\n}\nvar FIELDS = {\n  TYPE: 0,\n  START_LINE: 1,\n  START_COL: 2,\n  END_LINE: 3,\n  END_COL: 4,\n  START_POS: 5,\n  END_POS: 6\n};\nexports.FIELDS = FIELDS;\nfunction tokenize(input) {\n  var tokens = [];\n  var css = input.css.valueOf();\n  var _css = css,\n    length = _css.length;\n  var offset = -1;\n  var line = 1;\n  var start = 0;\n  var end = 0;\n  var code, content, endColumn, endLine, escaped, escapePos, last, lines, next, nextLine, nextOffset, quote, tokenType;\n  function unclosed(what, fix) {\n    if (input.safe) {\n      // fyi: this is never set to true.\n      css += fix;\n      next = css.length - 1;\n    } else {\n      throw input.error(\'Unclosed \' + what, line, start - offset, start);\n    }\n  }\n  while (start < length) {\n    code = css.charCodeAt(start);\n    if (code === t.newline) {\n      offset = start;\n      line += 1;\n    }\n    switch (code) {\n      case t.space:\n      case t.tab:\n      case t.newline:\n      case t.cr:\n      case t.feed:\n        next = start;\n        do {\n          next += 1;\n          code = css.charCodeAt(next);\n          if (code === t.newline) {\n            offset = next;\n            line += 1;\n          }\n        } while (code === t.space || code === t.newline || code === t.tab || code === t.cr || code === t.feed);\n        tokenType = t.space;\n        endLine = line;\n        endColumn = next - offset - 1;\n        end = next;\n        break;\n      case t.plus:\n      case t.greaterThan:\n      case t.tilde:\n      case t.pipe:\n        next = start;\n        do {\n          next += 1;\n          code = css.charCodeAt(next);\n        } while (code === t.plus || code === t.greaterThan || code === t.tilde || code === t.pipe);\n        tokenType = t.combinator;\n        endLine = line;\n        endColumn = start - offset;\n        end = next;\n        break;\n\n      // Consume these characters as single tokens.\n      case t.asterisk:\n      case t.ampersand:\n      case t.bang:\n      case t.comma:\n      case t.equals:\n      case t.dollar:\n      case t.caret:\n      case t.openSquare:\n      case t.closeSquare:\n      case t.colon:\n      case t.semicolon:\n      case t.openParenthesis:\n      case t.closeParenthesis:\n        next = start;\n        tokenType = code;\n        endLine = line;\n        endColumn = start - offset;\n        end = next + 1;\n        break;\n      case t.singleQuote:\n      case t.doubleQuote:\n        quote = code === t.singleQuote ? "\'" : \'"\';\n        next = start;\n        do {\n          escaped = false;\n          next = css.indexOf(quote, next + 1);\n          if (next === -1) {\n            unclosed(\'quote\', quote);\n          }\n          escapePos = next;\n          while (css.charCodeAt(escapePos - 1) === t.backslash) {\n            escapePos -= 1;\n            escaped = !escaped;\n          }\n        } while (escaped);\n        tokenType = t.str;\n        endLine = line;\n        endColumn = start - offset;\n        end = next + 1;\n        break;\n      default:\n        if (code === t.slash && css.charCodeAt(start + 1) === t.asterisk) {\n          next = css.indexOf(\'*/\', start + 2) + 1;\n          if (next === 0) {\n            unclosed(\'comment\', \'*/\');\n          }\n          content = css.slice(start, next + 1);\n          lines = content.split(\'\\n\');\n          last = lines.length - 1;\n          if (last > 0) {\n            nextLine = line + last;\n            nextOffset = next - lines[last].length;\n          } else {\n            nextLine = line;\n            nextOffset = offset;\n          }\n          tokenType = t.comment;\n          line = nextLine;\n          endLine = nextLine;\n          endColumn = next - nextOffset;\n        } else if (code === t.slash) {\n          next = start;\n          tokenType = code;\n          endLine = line;\n          endColumn = start - offset;\n          end = next + 1;\n        } else {\n          next = consumeWord(css, start);\n          tokenType = t.word;\n          endLine = line;\n          endColumn = next - offset;\n        }\n        end = next + 1;\n        break;\n    }\n\n    // Ensure that the token structure remains consistent\n    tokens.push([tokenType,\n    // [0] Token type\n    line,\n    // [1] Starting line\n    start - offset,\n    // [2] Starting column\n    endLine,\n    // [3] Ending line\n    endColumn,\n    // [4] Ending column\n    start,\n    // [5] Start position / Source index\n    end // [6] End position\n    ]);\n\n    // Reset offset for the next token\n    if (nextOffset) {\n      offset = nextOffset;\n      nextOffset = null;\n    }\n    start = end;\n  }\n  return tokens;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiODI2NDguanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsa0JBQWtCO0FBQ2xCLGNBQWM7QUFDZCxrQkFBa0I7QUFDbEIsZ0NBQWdDLG1CQUFPLENBQUMsS0FBYztBQUN0RDtBQUNBLGlEQUFpRCxnREFBZ0QsdUNBQXVDLHNDQUFzQyxvRkFBb0YsNERBQTREO0FBQzlULHFEQUFxRCw2Q0FBNkMsY0FBYyw0RUFBNEUsU0FBUyxvQkFBb0IsbURBQW1ELCtCQUErQix5QkFBeUIsaUJBQWlCLHNGQUFzRix1QkFBdUIsMkVBQTJFLHFGQUFxRixzQ0FBc0MsNENBQTRDLE9BQU8sOEJBQThCLHlCQUF5QixhQUFhLDBCQUEwQjtBQUN6eEIsb0NBQW9DO0FBQ3BDLDBDQUEwQztBQUMxQztBQUNBO0FBQ0EsZ0JBQWdCLHFCQUFxQjtBQUNyQztBQUNBOztBQUVBO0FBQ0E7QUFDQSxXQUFXLFFBQVE7QUFDbkIsV0FBVyxRQUFRO0FBQ25CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLFdBQVcsUUFBUTtBQUNuQixXQUFXLFFBQVE7QUFDbkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYmxvY2tiaXRlLy4vbm9kZV9tb2R1bGVzL3Bvc3Rjc3Mtc2VsZWN0b3ItcGFyc2VyL2Rpc3QvdG9rZW5pemUuanM/OTliZSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbmV4cG9ydHMuRklFTERTID0gdm9pZCAwO1xuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSB0b2tlbml6ZTtcbnZhciB0ID0gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQocmVxdWlyZShcIi4vdG9rZW5UeXBlc1wiKSk7XG52YXIgX3VuZXNjYXBhYmxlLCBfd29yZERlbGltaXRlcnM7XG5mdW5jdGlvbiBfZ2V0UmVxdWlyZVdpbGRjYXJkQ2FjaGUobm9kZUludGVyb3ApIHsgaWYgKHR5cGVvZiBXZWFrTWFwICE9PSBcImZ1bmN0aW9uXCIpIHJldHVybiBudWxsOyB2YXIgY2FjaGVCYWJlbEludGVyb3AgPSBuZXcgV2Vha01hcCgpOyB2YXIgY2FjaGVOb2RlSW50ZXJvcCA9IG5ldyBXZWFrTWFwKCk7IHJldHVybiAoX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlID0gZnVuY3Rpb24gX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlKG5vZGVJbnRlcm9wKSB7IHJldHVybiBub2RlSW50ZXJvcCA/IGNhY2hlTm9kZUludGVyb3AgOiBjYWNoZUJhYmVsSW50ZXJvcDsgfSkobm9kZUludGVyb3ApOyB9XG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChvYmosIG5vZGVJbnRlcm9wKSB7IGlmICghbm9kZUludGVyb3AgJiYgb2JqICYmIG9iai5fX2VzTW9kdWxlKSB7IHJldHVybiBvYmo7IH0gaWYgKG9iaiA9PT0gbnVsbCB8fCB0eXBlb2Ygb2JqICE9PSBcIm9iamVjdFwiICYmIHR5cGVvZiBvYmogIT09IFwiZnVuY3Rpb25cIikgeyByZXR1cm4geyBcImRlZmF1bHRcIjogb2JqIH07IH0gdmFyIGNhY2hlID0gX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlKG5vZGVJbnRlcm9wKTsgaWYgKGNhY2hlICYmIGNhY2hlLmhhcyhvYmopKSB7IHJldHVybiBjYWNoZS5nZXQob2JqKTsgfSB2YXIgbmV3T2JqID0ge307IHZhciBoYXNQcm9wZXJ0eURlc2NyaXB0b3IgPSBPYmplY3QuZGVmaW5lUHJvcGVydHkgJiYgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjsgZm9yICh2YXIga2V5IGluIG9iaikgeyBpZiAoa2V5ICE9PSBcImRlZmF1bHRcIiAmJiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBrZXkpKSB7IHZhciBkZXNjID0gaGFzUHJvcGVydHlEZXNjcmlwdG9yID8gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmosIGtleSkgOiBudWxsOyBpZiAoZGVzYyAmJiAoZGVzYy5nZXQgfHwgZGVzYy5zZXQpKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShuZXdPYmosIGtleSwgZGVzYyk7IH0gZWxzZSB7IG5ld09ialtrZXldID0gb2JqW2tleV07IH0gfSB9IG5ld09ialtcImRlZmF1bHRcIl0gPSBvYmo7IGlmIChjYWNoZSkgeyBjYWNoZS5zZXQob2JqLCBuZXdPYmopOyB9IHJldHVybiBuZXdPYmo7IH1cbnZhciB1bmVzY2FwYWJsZSA9IChfdW5lc2NhcGFibGUgPSB7fSwgX3VuZXNjYXBhYmxlW3QudGFiXSA9IHRydWUsIF91bmVzY2FwYWJsZVt0Lm5ld2xpbmVdID0gdHJ1ZSwgX3VuZXNjYXBhYmxlW3QuY3JdID0gdHJ1ZSwgX3VuZXNjYXBhYmxlW3QuZmVlZF0gPSB0cnVlLCBfdW5lc2NhcGFibGUpO1xudmFyIHdvcmREZWxpbWl0ZXJzID0gKF93b3JkRGVsaW1pdGVycyA9IHt9LCBfd29yZERlbGltaXRlcnNbdC5zcGFjZV0gPSB0cnVlLCBfd29yZERlbGltaXRlcnNbdC50YWJdID0gdHJ1ZSwgX3dvcmREZWxpbWl0ZXJzW3QubmV3bGluZV0gPSB0cnVlLCBfd29yZERlbGltaXRlcnNbdC5jcl0gPSB0cnVlLCBfd29yZERlbGltaXRlcnNbdC5mZWVkXSA9IHRydWUsIF93b3JkRGVsaW1pdGVyc1t0LmFtcGVyc2FuZF0gPSB0cnVlLCBfd29yZERlbGltaXRlcnNbdC5hc3Rlcmlza10gPSB0cnVlLCBfd29yZERlbGltaXRlcnNbdC5iYW5nXSA9IHRydWUsIF93b3JkRGVsaW1pdGVyc1t0LmNvbW1hXSA9IHRydWUsIF93b3JkRGVsaW1pdGVyc1t0LmNvbG9uXSA9IHRydWUsIF93b3JkRGVsaW1pdGVyc1t0LnNlbWljb2xvbl0gPSB0cnVlLCBfd29yZERlbGltaXRlcnNbdC5vcGVuUGFyZW50aGVzaXNdID0gdHJ1ZSwgX3dvcmREZWxpbWl0ZXJzW3QuY2xvc2VQYXJlbnRoZXNpc10gPSB0cnVlLCBfd29yZERlbGltaXRlcnNbdC5vcGVuU3F1YXJlXSA9IHRydWUsIF93b3JkRGVsaW1pdGVyc1t0LmNsb3NlU3F1YXJlXSA9IHRydWUsIF93b3JkRGVsaW1pdGVyc1t0LnNpbmdsZVF1b3RlXSA9IHRydWUsIF93b3JkRGVsaW1pdGVyc1t0LmRvdWJsZVF1b3RlXSA9IHRydWUsIF93b3JkRGVsaW1pdGVyc1t0LnBsdXNdID0gdHJ1ZSwgX3dvcmREZWxpbWl0ZXJzW3QucGlwZV0gPSB0cnVlLCBfd29yZERlbGltaXRlcnNbdC50aWxkZV0gPSB0cnVlLCBfd29yZERlbGltaXRlcnNbdC5ncmVhdGVyVGhhbl0gPSB0cnVlLCBfd29yZERlbGltaXRlcnNbdC5lcXVhbHNdID0gdHJ1ZSwgX3dvcmREZWxpbWl0ZXJzW3QuZG9sbGFyXSA9IHRydWUsIF93b3JkRGVsaW1pdGVyc1t0LmNhcmV0XSA9IHRydWUsIF93b3JkRGVsaW1pdGVyc1t0LnNsYXNoXSA9IHRydWUsIF93b3JkRGVsaW1pdGVycyk7XG52YXIgaGV4ID0ge307XG52YXIgaGV4Q2hhcnMgPSBcIjAxMjM0NTY3ODlhYmNkZWZBQkNERUZcIjtcbmZvciAodmFyIGkgPSAwOyBpIDwgaGV4Q2hhcnMubGVuZ3RoOyBpKyspIHtcbiAgaGV4W2hleENoYXJzLmNoYXJDb2RlQXQoaSldID0gdHJ1ZTtcbn1cblxuLyoqXG4gKiAgUmV0dXJucyB0aGUgbGFzdCBpbmRleCBvZiB0aGUgYmFyIGNzcyB3b3JkXG4gKiBAcGFyYW0ge3N0cmluZ30gY3NzIFRoZSBzdHJpbmcgaW4gd2hpY2ggdGhlIHdvcmQgYmVnaW5zXG4gKiBAcGFyYW0ge251bWJlcn0gc3RhcnQgVGhlIGluZGV4IGludG8gdGhlIHN0cmluZyB3aGVyZSB3b3JkJ3MgZmlyc3QgbGV0dGVyIG9jY3Vyc1xuICovXG5mdW5jdGlvbiBjb25zdW1lV29yZChjc3MsIHN0YXJ0KSB7XG4gIHZhciBuZXh0ID0gc3RhcnQ7XG4gIHZhciBjb2RlO1xuICBkbyB7XG4gICAgY29kZSA9IGNzcy5jaGFyQ29kZUF0KG5leHQpO1xuICAgIGlmICh3b3JkRGVsaW1pdGVyc1tjb2RlXSkge1xuICAgICAgcmV0dXJuIG5leHQgLSAxO1xuICAgIH0gZWxzZSBpZiAoY29kZSA9PT0gdC5iYWNrc2xhc2gpIHtcbiAgICAgIG5leHQgPSBjb25zdW1lRXNjYXBlKGNzcywgbmV4dCkgKyAxO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBBbGwgb3RoZXIgY2hhcmFjdGVycyBhcmUgcGFydCBvZiB0aGUgd29yZFxuICAgICAgbmV4dCsrO1xuICAgIH1cbiAgfSB3aGlsZSAobmV4dCA8IGNzcy5sZW5ndGgpO1xuICByZXR1cm4gbmV4dCAtIDE7XG59XG5cbi8qKlxuICogIFJldHVybnMgdGhlIGxhc3QgaW5kZXggb2YgdGhlIGVzY2FwZSBzZXF1ZW5jZVxuICogQHBhcmFtIHtzdHJpbmd9IGNzcyBUaGUgc3RyaW5nIGluIHdoaWNoIHRoZSBzZXF1ZW5jZSBiZWdpbnNcbiAqIEBwYXJhbSB7bnVtYmVyfSBzdGFydCBUaGUgaW5kZXggaW50byB0aGUgc3RyaW5nIHdoZXJlIGVzY2FwZSBjaGFyYWN0ZXIgKGBcXGApIG9jY3Vycy5cbiAqL1xuZnVuY3Rpb24gY29uc3VtZUVzY2FwZShjc3MsIHN0YXJ0KSB7XG4gIHZhciBuZXh0ID0gc3RhcnQ7XG4gIHZhciBjb2RlID0gY3NzLmNoYXJDb2RlQXQobmV4dCArIDEpO1xuICBpZiAodW5lc2NhcGFibGVbY29kZV0pIHtcbiAgICAvLyBqdXN0IGNvbnN1bWUgdGhlIGVzY2FwZSBjaGFyXG4gIH0gZWxzZSBpZiAoaGV4W2NvZGVdKSB7XG4gICAgdmFyIGhleERpZ2l0cyA9IDA7XG4gICAgLy8gY29uc3VtZSB1cCB0byA2IGhleCBjaGFyc1xuICAgIGRvIHtcbiAgICAgIG5leHQrKztcbiAgICAgIGhleERpZ2l0cysrO1xuICAgICAgY29kZSA9IGNzcy5jaGFyQ29kZUF0KG5leHQgKyAxKTtcbiAgICB9IHdoaWxlIChoZXhbY29kZV0gJiYgaGV4RGlnaXRzIDwgNik7XG4gICAgLy8gaWYgZmV3ZXIgdGhhbiA2IGhleCBjaGFycywgYSB0cmFpbGluZyBzcGFjZSBlbmRzIHRoZSBlc2NhcGVcbiAgICBpZiAoaGV4RGlnaXRzIDwgNiAmJiBjb2RlID09PSB0LnNwYWNlKSB7XG4gICAgICBuZXh0Kys7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIC8vIHRoZSBuZXh0IGNoYXIgaXMgcGFydCBvZiB0aGUgY3VycmVudCB3b3JkXG4gICAgbmV4dCsrO1xuICB9XG4gIHJldHVybiBuZXh0O1xufVxudmFyIEZJRUxEUyA9IHtcbiAgVFlQRTogMCxcbiAgU1RBUlRfTElORTogMSxcbiAgU1RBUlRfQ09MOiAyLFxuICBFTkRfTElORTogMyxcbiAgRU5EX0NPTDogNCxcbiAgU1RBUlRfUE9TOiA1LFxuICBFTkRfUE9TOiA2XG59O1xuZXhwb3J0cy5GSUVMRFMgPSBGSUVMRFM7XG5mdW5jdGlvbiB0b2tlbml6ZShpbnB1dCkge1xuICB2YXIgdG9rZW5zID0gW107XG4gIHZhciBjc3MgPSBpbnB1dC5jc3MudmFsdWVPZigpO1xuICB2YXIgX2NzcyA9IGNzcyxcbiAgICBsZW5ndGggPSBfY3NzLmxlbmd0aDtcbiAgdmFyIG9mZnNldCA9IC0xO1xuICB2YXIgbGluZSA9IDE7XG4gIHZhciBzdGFydCA9IDA7XG4gIHZhciBlbmQgPSAwO1xuICB2YXIgY29kZSwgY29udGVudCwgZW5kQ29sdW1uLCBlbmRMaW5lLCBlc2NhcGVkLCBlc2NhcGVQb3MsIGxhc3QsIGxpbmVzLCBuZXh0LCBuZXh0TGluZSwgbmV4dE9mZnNldCwgcXVvdGUsIHRva2VuVHlwZTtcbiAgZnVuY3Rpb24gdW5jbG9zZWQod2hhdCwgZml4KSB7XG4gICAgaWYgKGlucHV0LnNhZmUpIHtcbiAgICAgIC8vIGZ5aTogdGhpcyBpcyBuZXZlciBzZXQgdG8gdHJ1ZS5cbiAgICAgIGNzcyArPSBmaXg7XG4gICAgICBuZXh0ID0gY3NzLmxlbmd0aCAtIDE7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IGlucHV0LmVycm9yKCdVbmNsb3NlZCAnICsgd2hhdCwgbGluZSwgc3RhcnQgLSBvZmZzZXQsIHN0YXJ0KTtcbiAgICB9XG4gIH1cbiAgd2hpbGUgKHN0YXJ0IDwgbGVuZ3RoKSB7XG4gICAgY29kZSA9IGNzcy5jaGFyQ29kZUF0KHN0YXJ0KTtcbiAgICBpZiAoY29kZSA9PT0gdC5uZXdsaW5lKSB7XG4gICAgICBvZmZzZXQgPSBzdGFydDtcbiAgICAgIGxpbmUgKz0gMTtcbiAgICB9XG4gICAgc3dpdGNoIChjb2RlKSB7XG4gICAgICBjYXNlIHQuc3BhY2U6XG4gICAgICBjYXNlIHQudGFiOlxuICAgICAgY2FzZSB0Lm5ld2xpbmU6XG4gICAgICBjYXNlIHQuY3I6XG4gICAgICBjYXNlIHQuZmVlZDpcbiAgICAgICAgbmV4dCA9IHN0YXJ0O1xuICAgICAgICBkbyB7XG4gICAgICAgICAgbmV4dCArPSAxO1xuICAgICAgICAgIGNvZGUgPSBjc3MuY2hhckNvZGVBdChuZXh0KTtcbiAgICAgICAgICBpZiAoY29kZSA9PT0gdC5uZXdsaW5lKSB7XG4gICAgICAgICAgICBvZmZzZXQgPSBuZXh0O1xuICAgICAgICAgICAgbGluZSArPSAxO1xuICAgICAgICAgIH1cbiAgICAgICAgfSB3aGlsZSAoY29kZSA9PT0gdC5zcGFjZSB8fCBjb2RlID09PSB0Lm5ld2xpbmUgfHwgY29kZSA9PT0gdC50YWIgfHwgY29kZSA9PT0gdC5jciB8fCBjb2RlID09PSB0LmZlZWQpO1xuICAgICAgICB0b2tlblR5cGUgPSB0LnNwYWNlO1xuICAgICAgICBlbmRMaW5lID0gbGluZTtcbiAgICAgICAgZW5kQ29sdW1uID0gbmV4dCAtIG9mZnNldCAtIDE7XG4gICAgICAgIGVuZCA9IG5leHQ7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSB0LnBsdXM6XG4gICAgICBjYXNlIHQuZ3JlYXRlclRoYW46XG4gICAgICBjYXNlIHQudGlsZGU6XG4gICAgICBjYXNlIHQucGlwZTpcbiAgICAgICAgbmV4dCA9IHN0YXJ0O1xuICAgICAgICBkbyB7XG4gICAgICAgICAgbmV4dCArPSAxO1xuICAgICAgICAgIGNvZGUgPSBjc3MuY2hhckNvZGVBdChuZXh0KTtcbiAgICAgICAgfSB3aGlsZSAoY29kZSA9PT0gdC5wbHVzIHx8IGNvZGUgPT09IHQuZ3JlYXRlclRoYW4gfHwgY29kZSA9PT0gdC50aWxkZSB8fCBjb2RlID09PSB0LnBpcGUpO1xuICAgICAgICB0b2tlblR5cGUgPSB0LmNvbWJpbmF0b3I7XG4gICAgICAgIGVuZExpbmUgPSBsaW5lO1xuICAgICAgICBlbmRDb2x1bW4gPSBzdGFydCAtIG9mZnNldDtcbiAgICAgICAgZW5kID0gbmV4dDtcbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIC8vIENvbnN1bWUgdGhlc2UgY2hhcmFjdGVycyBhcyBzaW5nbGUgdG9rZW5zLlxuICAgICAgY2FzZSB0LmFzdGVyaXNrOlxuICAgICAgY2FzZSB0LmFtcGVyc2FuZDpcbiAgICAgIGNhc2UgdC5iYW5nOlxuICAgICAgY2FzZSB0LmNvbW1hOlxuICAgICAgY2FzZSB0LmVxdWFsczpcbiAgICAgIGNhc2UgdC5kb2xsYXI6XG4gICAgICBjYXNlIHQuY2FyZXQ6XG4gICAgICBjYXNlIHQub3BlblNxdWFyZTpcbiAgICAgIGNhc2UgdC5jbG9zZVNxdWFyZTpcbiAgICAgIGNhc2UgdC5jb2xvbjpcbiAgICAgIGNhc2UgdC5zZW1pY29sb246XG4gICAgICBjYXNlIHQub3BlblBhcmVudGhlc2lzOlxuICAgICAgY2FzZSB0LmNsb3NlUGFyZW50aGVzaXM6XG4gICAgICAgIG5leHQgPSBzdGFydDtcbiAgICAgICAgdG9rZW5UeXBlID0gY29kZTtcbiAgICAgICAgZW5kTGluZSA9IGxpbmU7XG4gICAgICAgIGVuZENvbHVtbiA9IHN0YXJ0IC0gb2Zmc2V0O1xuICAgICAgICBlbmQgPSBuZXh0ICsgMTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIHQuc2luZ2xlUXVvdGU6XG4gICAgICBjYXNlIHQuZG91YmxlUXVvdGU6XG4gICAgICAgIHF1b3RlID0gY29kZSA9PT0gdC5zaW5nbGVRdW90ZSA/IFwiJ1wiIDogJ1wiJztcbiAgICAgICAgbmV4dCA9IHN0YXJ0O1xuICAgICAgICBkbyB7XG4gICAgICAgICAgZXNjYXBlZCA9IGZhbHNlO1xuICAgICAgICAgIG5leHQgPSBjc3MuaW5kZXhPZihxdW90ZSwgbmV4dCArIDEpO1xuICAgICAgICAgIGlmIChuZXh0ID09PSAtMSkge1xuICAgICAgICAgICAgdW5jbG9zZWQoJ3F1b3RlJywgcXVvdGUpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBlc2NhcGVQb3MgPSBuZXh0O1xuICAgICAgICAgIHdoaWxlIChjc3MuY2hhckNvZGVBdChlc2NhcGVQb3MgLSAxKSA9PT0gdC5iYWNrc2xhc2gpIHtcbiAgICAgICAgICAgIGVzY2FwZVBvcyAtPSAxO1xuICAgICAgICAgICAgZXNjYXBlZCA9ICFlc2NhcGVkO1xuICAgICAgICAgIH1cbiAgICAgICAgfSB3aGlsZSAoZXNjYXBlZCk7XG4gICAgICAgIHRva2VuVHlwZSA9IHQuc3RyO1xuICAgICAgICBlbmRMaW5lID0gbGluZTtcbiAgICAgICAgZW5kQ29sdW1uID0gc3RhcnQgLSBvZmZzZXQ7XG4gICAgICAgIGVuZCA9IG5leHQgKyAxO1xuICAgICAgICBicmVhaztcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIGlmIChjb2RlID09PSB0LnNsYXNoICYmIGNzcy5jaGFyQ29kZUF0KHN0YXJ0ICsgMSkgPT09IHQuYXN0ZXJpc2spIHtcbiAgICAgICAgICBuZXh0ID0gY3NzLmluZGV4T2YoJyovJywgc3RhcnQgKyAyKSArIDE7XG4gICAgICAgICAgaWYgKG5leHQgPT09IDApIHtcbiAgICAgICAgICAgIHVuY2xvc2VkKCdjb21tZW50JywgJyovJyk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGNvbnRlbnQgPSBjc3Muc2xpY2Uoc3RhcnQsIG5leHQgKyAxKTtcbiAgICAgICAgICBsaW5lcyA9IGNvbnRlbnQuc3BsaXQoJ1xcbicpO1xuICAgICAgICAgIGxhc3QgPSBsaW5lcy5sZW5ndGggLSAxO1xuICAgICAgICAgIGlmIChsYXN0ID4gMCkge1xuICAgICAgICAgICAgbmV4dExpbmUgPSBsaW5lICsgbGFzdDtcbiAgICAgICAgICAgIG5leHRPZmZzZXQgPSBuZXh0IC0gbGluZXNbbGFzdF0ubGVuZ3RoO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBuZXh0TGluZSA9IGxpbmU7XG4gICAgICAgICAgICBuZXh0T2Zmc2V0ID0gb2Zmc2V0O1xuICAgICAgICAgIH1cbiAgICAgICAgICB0b2tlblR5cGUgPSB0LmNvbW1lbnQ7XG4gICAgICAgICAgbGluZSA9IG5leHRMaW5lO1xuICAgICAgICAgIGVuZExpbmUgPSBuZXh0TGluZTtcbiAgICAgICAgICBlbmRDb2x1bW4gPSBuZXh0IC0gbmV4dE9mZnNldDtcbiAgICAgICAgfSBlbHNlIGlmIChjb2RlID09PSB0LnNsYXNoKSB7XG4gICAgICAgICAgbmV4dCA9IHN0YXJ0O1xuICAgICAgICAgIHRva2VuVHlwZSA9IGNvZGU7XG4gICAgICAgICAgZW5kTGluZSA9IGxpbmU7XG4gICAgICAgICAgZW5kQ29sdW1uID0gc3RhcnQgLSBvZmZzZXQ7XG4gICAgICAgICAgZW5kID0gbmV4dCArIDE7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgbmV4dCA9IGNvbnN1bWVXb3JkKGNzcywgc3RhcnQpO1xuICAgICAgICAgIHRva2VuVHlwZSA9IHQud29yZDtcbiAgICAgICAgICBlbmRMaW5lID0gbGluZTtcbiAgICAgICAgICBlbmRDb2x1bW4gPSBuZXh0IC0gb2Zmc2V0O1xuICAgICAgICB9XG4gICAgICAgIGVuZCA9IG5leHQgKyAxO1xuICAgICAgICBicmVhaztcbiAgICB9XG5cbiAgICAvLyBFbnN1cmUgdGhhdCB0aGUgdG9rZW4gc3RydWN0dXJlIHJlbWFpbnMgY29uc2lzdGVudFxuICAgIHRva2Vucy5wdXNoKFt0b2tlblR5cGUsXG4gICAgLy8gWzBdIFRva2VuIHR5cGVcbiAgICBsaW5lLFxuICAgIC8vIFsxXSBTdGFydGluZyBsaW5lXG4gICAgc3RhcnQgLSBvZmZzZXQsXG4gICAgLy8gWzJdIFN0YXJ0aW5nIGNvbHVtblxuICAgIGVuZExpbmUsXG4gICAgLy8gWzNdIEVuZGluZyBsaW5lXG4gICAgZW5kQ29sdW1uLFxuICAgIC8vIFs0XSBFbmRpbmcgY29sdW1uXG4gICAgc3RhcnQsXG4gICAgLy8gWzVdIFN0YXJ0IHBvc2l0aW9uIC8gU291cmNlIGluZGV4XG4gICAgZW5kIC8vIFs2XSBFbmQgcG9zaXRpb25cbiAgICBdKTtcblxuICAgIC8vIFJlc2V0IG9mZnNldCBmb3IgdGhlIG5leHQgdG9rZW5cbiAgICBpZiAobmV4dE9mZnNldCkge1xuICAgICAgb2Zmc2V0ID0gbmV4dE9mZnNldDtcbiAgICAgIG5leHRPZmZzZXQgPSBudWxsO1xuICAgIH1cbiAgICBzdGFydCA9IGVuZDtcbiAgfVxuICByZXR1cm4gdG9rZW5zO1xufSJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///82648\n')},81557:(module,exports)=>{"use strict";eval('\n\nexports.__esModule = true;\nexports["default"] = ensureObject;\nfunction ensureObject(obj) {\n  for (var _len = arguments.length, props = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    props[_key - 1] = arguments[_key];\n  }\n  while (props.length > 0) {\n    var prop = props.shift();\n    if (!obj[prop]) {\n      obj[prop] = {};\n    }\n    obj = obj[prop];\n  }\n}\nmodule.exports = exports.default;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiODE1NTcuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsa0JBQWtCO0FBQ2xCLGtCQUFrQjtBQUNsQjtBQUNBLDBGQUEwRixhQUFhO0FBQ3ZHO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ibG9ja2JpdGUvLi9ub2RlX21vZHVsZXMvcG9zdGNzcy1zZWxlY3Rvci1wYXJzZXIvZGlzdC91dGlsL2Vuc3VyZU9iamVjdC5qcz82MTZhIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSBlbnN1cmVPYmplY3Q7XG5mdW5jdGlvbiBlbnN1cmVPYmplY3Qob2JqKSB7XG4gIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBwcm9wcyA9IG5ldyBBcnJheShfbGVuID4gMSA/IF9sZW4gLSAxIDogMCksIF9rZXkgPSAxOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgcHJvcHNbX2tleSAtIDFdID0gYXJndW1lbnRzW19rZXldO1xuICB9XG4gIHdoaWxlIChwcm9wcy5sZW5ndGggPiAwKSB7XG4gICAgdmFyIHByb3AgPSBwcm9wcy5zaGlmdCgpO1xuICAgIGlmICghb2JqW3Byb3BdKSB7XG4gICAgICBvYmpbcHJvcF0gPSB7fTtcbiAgICB9XG4gICAgb2JqID0gb2JqW3Byb3BdO1xuICB9XG59XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHMuZGVmYXVsdDsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///81557\n')},36291:(module,exports)=>{"use strict";eval('\n\nexports.__esModule = true;\nexports["default"] = getProp;\nfunction getProp(obj) {\n  for (var _len = arguments.length, props = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    props[_key - 1] = arguments[_key];\n  }\n  while (props.length > 0) {\n    var prop = props.shift();\n    if (!obj[prop]) {\n      return undefined;\n    }\n    obj = obj[prop];\n  }\n  return obj;\n}\nmodule.exports = exports.default;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzYyOTEuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsa0JBQWtCO0FBQ2xCLGtCQUFrQjtBQUNsQjtBQUNBLDBGQUEwRixhQUFhO0FBQ3ZHO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2Jsb2NrYml0ZS8uL25vZGVfbW9kdWxlcy9wb3N0Y3NzLXNlbGVjdG9yLXBhcnNlci9kaXN0L3V0aWwvZ2V0UHJvcC5qcz8xZTU4Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSBnZXRQcm9wO1xuZnVuY3Rpb24gZ2V0UHJvcChvYmopIHtcbiAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIHByb3BzID0gbmV3IEFycmF5KF9sZW4gPiAxID8gX2xlbiAtIDEgOiAwKSwgX2tleSA9IDE7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICBwcm9wc1tfa2V5IC0gMV0gPSBhcmd1bWVudHNbX2tleV07XG4gIH1cbiAgd2hpbGUgKHByb3BzLmxlbmd0aCA+IDApIHtcbiAgICB2YXIgcHJvcCA9IHByb3BzLnNoaWZ0KCk7XG4gICAgaWYgKCFvYmpbcHJvcF0pIHtcbiAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuICAgIG9iaiA9IG9ialtwcm9wXTtcbiAgfVxuICByZXR1cm4gb2JqO1xufVxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzLmRlZmF1bHQ7Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///36291\n')},39606:(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";eval('\n\nexports.__esModule = true;\nexports.unesc = exports.stripComments = exports.getProp = exports.ensureObject = void 0;\nvar _unesc = _interopRequireDefault(__webpack_require__(35286));\nexports.unesc = _unesc["default"];\nvar _getProp = _interopRequireDefault(__webpack_require__(36291));\nexports.getProp = _getProp["default"];\nvar _ensureObject = _interopRequireDefault(__webpack_require__(81557));\nexports.ensureObject = _ensureObject["default"];\nvar _stripComments = _interopRequireDefault(__webpack_require__(58354));\nexports.stripComments = _stripComments["default"];\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzk2MDYuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsa0JBQWtCO0FBQ2xCLGFBQWEsR0FBRyxxQkFBcUIsR0FBRyxlQUFlLEdBQUcsb0JBQW9CO0FBQzlFLG9DQUFvQyxtQkFBTyxDQUFDLEtBQVM7QUFDckQsYUFBYTtBQUNiLHNDQUFzQyxtQkFBTyxDQUFDLEtBQVc7QUFDekQsZUFBZTtBQUNmLDJDQUEyQyxtQkFBTyxDQUFDLEtBQWdCO0FBQ25FLG9CQUFvQjtBQUNwQiw0Q0FBNEMsbUJBQU8sQ0FBQyxLQUFpQjtBQUNyRSxxQkFBcUI7QUFDckIsdUNBQXVDLHVDQUF1QyIsInNvdXJjZXMiOlsid2VicGFjazovL2Jsb2NrYml0ZS8uL25vZGVfbW9kdWxlcy9wb3N0Y3NzLXNlbGVjdG9yLXBhcnNlci9kaXN0L3V0aWwvaW5kZXguanM/MzY1ZCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbmV4cG9ydHMudW5lc2MgPSBleHBvcnRzLnN0cmlwQ29tbWVudHMgPSBleHBvcnRzLmdldFByb3AgPSBleHBvcnRzLmVuc3VyZU9iamVjdCA9IHZvaWQgMDtcbnZhciBfdW5lc2MgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL3VuZXNjXCIpKTtcbmV4cG9ydHMudW5lc2MgPSBfdW5lc2NbXCJkZWZhdWx0XCJdO1xudmFyIF9nZXRQcm9wID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9nZXRQcm9wXCIpKTtcbmV4cG9ydHMuZ2V0UHJvcCA9IF9nZXRQcm9wW1wiZGVmYXVsdFwiXTtcbnZhciBfZW5zdXJlT2JqZWN0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9lbnN1cmVPYmplY3RcIikpO1xuZXhwb3J0cy5lbnN1cmVPYmplY3QgPSBfZW5zdXJlT2JqZWN0W1wiZGVmYXVsdFwiXTtcbnZhciBfc3RyaXBDb21tZW50cyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vc3RyaXBDb21tZW50c1wiKSk7XG5leHBvcnRzLnN0cmlwQ29tbWVudHMgPSBfc3RyaXBDb21tZW50c1tcImRlZmF1bHRcIl07XG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBcImRlZmF1bHRcIjogb2JqIH07IH0iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///39606\n')},58354:(module,exports)=>{"use strict";eval('\n\nexports.__esModule = true;\nexports["default"] = stripComments;\nfunction stripComments(str) {\n  var s = "";\n  var commentStart = str.indexOf("/*");\n  var lastEnd = 0;\n  while (commentStart >= 0) {\n    s = s + str.slice(lastEnd, commentStart);\n    var commentEnd = str.indexOf("*/", commentStart + 2);\n    if (commentEnd < 0) {\n      return s;\n    }\n    lastEnd = commentEnd + 2;\n    commentStart = str.indexOf("/*", lastEnd);\n  }\n  s = s + str.slice(lastEnd);\n  return s;\n}\nmodule.exports = exports.default;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNTgzNTQuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsa0JBQWtCO0FBQ2xCLGtCQUFrQjtBQUNsQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYmxvY2tiaXRlLy4vbm9kZV9tb2R1bGVzL3Bvc3Rjc3Mtc2VsZWN0b3ItcGFyc2VyL2Rpc3QvdXRpbC9zdHJpcENvbW1lbnRzLmpzPzg0NTkiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IHN0cmlwQ29tbWVudHM7XG5mdW5jdGlvbiBzdHJpcENvbW1lbnRzKHN0cikge1xuICB2YXIgcyA9IFwiXCI7XG4gIHZhciBjb21tZW50U3RhcnQgPSBzdHIuaW5kZXhPZihcIi8qXCIpO1xuICB2YXIgbGFzdEVuZCA9IDA7XG4gIHdoaWxlIChjb21tZW50U3RhcnQgPj0gMCkge1xuICAgIHMgPSBzICsgc3RyLnNsaWNlKGxhc3RFbmQsIGNvbW1lbnRTdGFydCk7XG4gICAgdmFyIGNvbW1lbnRFbmQgPSBzdHIuaW5kZXhPZihcIiovXCIsIGNvbW1lbnRTdGFydCArIDIpO1xuICAgIGlmIChjb21tZW50RW5kIDwgMCkge1xuICAgICAgcmV0dXJuIHM7XG4gICAgfVxuICAgIGxhc3RFbmQgPSBjb21tZW50RW5kICsgMjtcbiAgICBjb21tZW50U3RhcnQgPSBzdHIuaW5kZXhPZihcIi8qXCIsIGxhc3RFbmQpO1xuICB9XG4gIHMgPSBzICsgc3RyLnNsaWNlKGxhc3RFbmQpO1xuICByZXR1cm4gcztcbn1cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0cy5kZWZhdWx0OyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///58354\n')},35286:(module,exports)=>{"use strict";eval('\n\nexports.__esModule = true;\nexports["default"] = unesc;\n// Many thanks for this post which made this migration much easier.\n// https://mathiasbynens.be/notes/css-escapes\n\n/**\n * \n * @param {string} str \n * @returns {[string, number]|undefined}\n */\nfunction gobbleHex(str) {\n  var lower = str.toLowerCase();\n  var hex = \'\';\n  var spaceTerminated = false;\n  for (var i = 0; i < 6 && lower[i] !== undefined; i++) {\n    var code = lower.charCodeAt(i);\n    // check to see if we are dealing with a valid hex char [a-f|0-9]\n    var valid = code >= 97 && code <= 102 || code >= 48 && code <= 57;\n    // https://drafts.csswg.org/css-syntax/#consume-escaped-code-point\n    spaceTerminated = code === 32;\n    if (!valid) {\n      break;\n    }\n    hex += lower[i];\n  }\n  if (hex.length === 0) {\n    return undefined;\n  }\n  var codePoint = parseInt(hex, 16);\n  var isSurrogate = codePoint >= 0xD800 && codePoint <= 0xDFFF;\n  // Add special case for\n  // "If this number is zero, or is for a surrogate, or is greater than the maximum allowed code point"\n  // https://drafts.csswg.org/css-syntax/#maximum-allowed-code-point\n  if (isSurrogate || codePoint === 0x0000 || codePoint > 0x10FFFF) {\n    return ["\\uFFFD", hex.length + (spaceTerminated ? 1 : 0)];\n  }\n  return [String.fromCodePoint(codePoint), hex.length + (spaceTerminated ? 1 : 0)];\n}\nvar CONTAINS_ESCAPE = /\\\\/;\nfunction unesc(str) {\n  var needToProcess = CONTAINS_ESCAPE.test(str);\n  if (!needToProcess) {\n    return str;\n  }\n  var ret = "";\n  for (var i = 0; i < str.length; i++) {\n    if (str[i] === "\\\\") {\n      var gobbled = gobbleHex(str.slice(i + 1, i + 7));\n      if (gobbled !== undefined) {\n        ret += gobbled[0];\n        i += gobbled[1];\n        continue;\n      }\n\n      // Retain a pair of \\\\ if double escaped `\\\\\\\\`\n      // https://github.com/postcss/postcss-selector-parser/commit/268c9a7656fb53f543dc620aa5b73a30ec3ff20e\n      if (str[i + 1] === "\\\\") {\n        ret += "\\\\";\n        i++;\n        continue;\n      }\n\n      // if \\\\ is at the end of the string retain it\n      // https://github.com/postcss/postcss-selector-parser/commit/01a6b346e3612ce1ab20219acc26abdc259ccefb\n      if (str.length === i + 1) {\n        ret += str[i];\n      }\n      continue;\n    }\n    ret += str[i];\n  }\n  return ret;\n}\nmodule.exports = exports.default;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzUyODYuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsa0JBQWtCO0FBQ2xCLGtCQUFrQjtBQUNsQjtBQUNBOztBQUVBO0FBQ0E7QUFDQSxXQUFXLFFBQVE7QUFDbkIsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0IsaUNBQWlDO0FBQ25EO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQixnQkFBZ0I7QUFDbEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYmxvY2tiaXRlLy4vbm9kZV9tb2R1bGVzL3Bvc3Rjc3Mtc2VsZWN0b3ItcGFyc2VyL2Rpc3QvdXRpbC91bmVzYy5qcz8xMGQ2Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSB1bmVzYztcbi8vIE1hbnkgdGhhbmtzIGZvciB0aGlzIHBvc3Qgd2hpY2ggbWFkZSB0aGlzIG1pZ3JhdGlvbiBtdWNoIGVhc2llci5cbi8vIGh0dHBzOi8vbWF0aGlhc2J5bmVucy5iZS9ub3Rlcy9jc3MtZXNjYXBlc1xuXG4vKipcbiAqIFxuICogQHBhcmFtIHtzdHJpbmd9IHN0ciBcbiAqIEByZXR1cm5zIHtbc3RyaW5nLCBudW1iZXJdfHVuZGVmaW5lZH1cbiAqL1xuZnVuY3Rpb24gZ29iYmxlSGV4KHN0cikge1xuICB2YXIgbG93ZXIgPSBzdHIudG9Mb3dlckNhc2UoKTtcbiAgdmFyIGhleCA9ICcnO1xuICB2YXIgc3BhY2VUZXJtaW5hdGVkID0gZmFsc2U7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgNiAmJiBsb3dlcltpXSAhPT0gdW5kZWZpbmVkOyBpKyspIHtcbiAgICB2YXIgY29kZSA9IGxvd2VyLmNoYXJDb2RlQXQoaSk7XG4gICAgLy8gY2hlY2sgdG8gc2VlIGlmIHdlIGFyZSBkZWFsaW5nIHdpdGggYSB2YWxpZCBoZXggY2hhciBbYS1mfDAtOV1cbiAgICB2YXIgdmFsaWQgPSBjb2RlID49IDk3ICYmIGNvZGUgPD0gMTAyIHx8IGNvZGUgPj0gNDggJiYgY29kZSA8PSA1NztcbiAgICAvLyBodHRwczovL2RyYWZ0cy5jc3N3Zy5vcmcvY3NzLXN5bnRheC8jY29uc3VtZS1lc2NhcGVkLWNvZGUtcG9pbnRcbiAgICBzcGFjZVRlcm1pbmF0ZWQgPSBjb2RlID09PSAzMjtcbiAgICBpZiAoIXZhbGlkKSB7XG4gICAgICBicmVhaztcbiAgICB9XG4gICAgaGV4ICs9IGxvd2VyW2ldO1xuICB9XG4gIGlmIChoZXgubGVuZ3RoID09PSAwKSB7XG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfVxuICB2YXIgY29kZVBvaW50ID0gcGFyc2VJbnQoaGV4LCAxNik7XG4gIHZhciBpc1N1cnJvZ2F0ZSA9IGNvZGVQb2ludCA+PSAweEQ4MDAgJiYgY29kZVBvaW50IDw9IDB4REZGRjtcbiAgLy8gQWRkIHNwZWNpYWwgY2FzZSBmb3JcbiAgLy8gXCJJZiB0aGlzIG51bWJlciBpcyB6ZXJvLCBvciBpcyBmb3IgYSBzdXJyb2dhdGUsIG9yIGlzIGdyZWF0ZXIgdGhhbiB0aGUgbWF4aW11bSBhbGxvd2VkIGNvZGUgcG9pbnRcIlxuICAvLyBodHRwczovL2RyYWZ0cy5jc3N3Zy5vcmcvY3NzLXN5bnRheC8jbWF4aW11bS1hbGxvd2VkLWNvZGUtcG9pbnRcbiAgaWYgKGlzU3Vycm9nYXRlIHx8IGNvZGVQb2ludCA9PT0gMHgwMDAwIHx8IGNvZGVQb2ludCA+IDB4MTBGRkZGKSB7XG4gICAgcmV0dXJuIFtcIlxcdUZGRkRcIiwgaGV4Lmxlbmd0aCArIChzcGFjZVRlcm1pbmF0ZWQgPyAxIDogMCldO1xuICB9XG4gIHJldHVybiBbU3RyaW5nLmZyb21Db2RlUG9pbnQoY29kZVBvaW50KSwgaGV4Lmxlbmd0aCArIChzcGFjZVRlcm1pbmF0ZWQgPyAxIDogMCldO1xufVxudmFyIENPTlRBSU5TX0VTQ0FQRSA9IC9cXFxcLztcbmZ1bmN0aW9uIHVuZXNjKHN0cikge1xuICB2YXIgbmVlZFRvUHJvY2VzcyA9IENPTlRBSU5TX0VTQ0FQRS50ZXN0KHN0cik7XG4gIGlmICghbmVlZFRvUHJvY2Vzcykge1xuICAgIHJldHVybiBzdHI7XG4gIH1cbiAgdmFyIHJldCA9IFwiXCI7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgc3RyLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKHN0cltpXSA9PT0gXCJcXFxcXCIpIHtcbiAgICAgIHZhciBnb2JibGVkID0gZ29iYmxlSGV4KHN0ci5zbGljZShpICsgMSwgaSArIDcpKTtcbiAgICAgIGlmIChnb2JibGVkICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmV0ICs9IGdvYmJsZWRbMF07XG4gICAgICAgIGkgKz0gZ29iYmxlZFsxXTtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG5cbiAgICAgIC8vIFJldGFpbiBhIHBhaXIgb2YgXFxcXCBpZiBkb3VibGUgZXNjYXBlZCBgXFxcXFxcXFxgXG4gICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vcG9zdGNzcy9wb3N0Y3NzLXNlbGVjdG9yLXBhcnNlci9jb21taXQvMjY4YzlhNzY1NmZiNTNmNTQzZGM2MjBhYTViNzNhMzBlYzNmZjIwZVxuICAgICAgaWYgKHN0cltpICsgMV0gPT09IFwiXFxcXFwiKSB7XG4gICAgICAgIHJldCArPSBcIlxcXFxcIjtcbiAgICAgICAgaSsrO1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgLy8gaWYgXFxcXCBpcyBhdCB0aGUgZW5kIG9mIHRoZSBzdHJpbmcgcmV0YWluIGl0XG4gICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vcG9zdGNzcy9wb3N0Y3NzLXNlbGVjdG9yLXBhcnNlci9jb21taXQvMDFhNmIzNDZlMzYxMmNlMWFiMjAyMTlhY2MyNmFiZGMyNTljY2VmYlxuICAgICAgaWYgKHN0ci5sZW5ndGggPT09IGkgKyAxKSB7XG4gICAgICAgIHJldCArPSBzdHJbaV07XG4gICAgICB9XG4gICAgICBjb250aW51ZTtcbiAgICB9XG4gICAgcmV0ICs9IHN0cltpXTtcbiAgfVxuICByZXR1cm4gcmV0O1xufVxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzLmRlZmF1bHQ7Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///35286\n')},40396:(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval("\n\nlet Container = __webpack_require__(77793)\n\nclass AtRule extends Container {\n  constructor(defaults) {\n    super(defaults)\n    this.type = 'atrule'\n  }\n\n  append(...children) {\n    if (!this.proxyOf.nodes) this.nodes = []\n    return super.append(...children)\n  }\n\n  prepend(...children) {\n    if (!this.proxyOf.nodes) this.nodes = []\n    return super.prepend(...children)\n  }\n}\n\nmodule.exports = AtRule\nAtRule.default = AtRule\n\nContainer.registerAtRule(AtRule)\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDAzOTYuanMiLCJtYXBwaW5ncyI6IkFBQVk7O0FBRVosZ0JBQWdCLG1CQUFPLENBQUMsS0FBYTs7QUFFckM7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ibG9ja2JpdGUvLi9ub2RlX21vZHVsZXMvcG9zdGNzcy9saWIvYXQtcnVsZS5qcz9hZjI2Il0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0J1xuXG5sZXQgQ29udGFpbmVyID0gcmVxdWlyZSgnLi9jb250YWluZXInKVxuXG5jbGFzcyBBdFJ1bGUgZXh0ZW5kcyBDb250YWluZXIge1xuICBjb25zdHJ1Y3RvcihkZWZhdWx0cykge1xuICAgIHN1cGVyKGRlZmF1bHRzKVxuICAgIHRoaXMudHlwZSA9ICdhdHJ1bGUnXG4gIH1cblxuICBhcHBlbmQoLi4uY2hpbGRyZW4pIHtcbiAgICBpZiAoIXRoaXMucHJveHlPZi5ub2RlcykgdGhpcy5ub2RlcyA9IFtdXG4gICAgcmV0dXJuIHN1cGVyLmFwcGVuZCguLi5jaGlsZHJlbilcbiAgfVxuXG4gIHByZXBlbmQoLi4uY2hpbGRyZW4pIHtcbiAgICBpZiAoIXRoaXMucHJveHlPZi5ub2RlcykgdGhpcy5ub2RlcyA9IFtdXG4gICAgcmV0dXJuIHN1cGVyLnByZXBlbmQoLi4uY2hpbGRyZW4pXG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBBdFJ1bGVcbkF0UnVsZS5kZWZhdWx0ID0gQXRSdWxlXG5cbkNvbnRhaW5lci5yZWdpc3RlckF0UnVsZShBdFJ1bGUpXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///40396\n")},49371:(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval("\n\nlet Node = __webpack_require__(63152)\n\nclass Comment extends Node {\n  constructor(defaults) {\n    super(defaults)\n    this.type = 'comment'\n  }\n}\n\nmodule.exports = Comment\nComment.default = Comment\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDkzNzEuanMiLCJtYXBwaW5ncyI6IkFBQVk7O0FBRVosV0FBVyxtQkFBTyxDQUFDLEtBQVE7O0FBRTNCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYmxvY2tiaXRlLy4vbm9kZV9tb2R1bGVzL3Bvc3Rjc3MvbGliL2NvbW1lbnQuanM/NTQ5OCJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCdcblxubGV0IE5vZGUgPSByZXF1aXJlKCcuL25vZGUnKVxuXG5jbGFzcyBDb21tZW50IGV4dGVuZHMgTm9kZSB7XG4gIGNvbnN0cnVjdG9yKGRlZmF1bHRzKSB7XG4gICAgc3VwZXIoZGVmYXVsdHMpXG4gICAgdGhpcy50eXBlID0gJ2NvbW1lbnQnXG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBDb21tZW50XG5Db21tZW50LmRlZmF1bHQgPSBDb21tZW50XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///49371\n")},77793:(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval("\n\nlet Comment = __webpack_require__(49371)\nlet Declaration = __webpack_require__(35238)\nlet Node = __webpack_require__(63152)\nlet { isClean, my } = __webpack_require__(84151)\n\nlet AtRule, parse, Root, Rule\n\nfunction cleanSource(nodes) {\n  return nodes.map(i => {\n    if (i.nodes) i.nodes = cleanSource(i.nodes)\n    delete i.source\n    return i\n  })\n}\n\nfunction markTreeDirty(node) {\n  node[isClean] = false\n  if (node.proxyOf.nodes) {\n    for (let i of node.proxyOf.nodes) {\n      markTreeDirty(i)\n    }\n  }\n}\n\nclass Container extends Node {\n  append(...children) {\n    for (let child of children) {\n      let nodes = this.normalize(child, this.last)\n      for (let node of nodes) this.proxyOf.nodes.push(node)\n    }\n\n    this.markDirty()\n\n    return this\n  }\n\n  cleanRaws(keepBetween) {\n    super.cleanRaws(keepBetween)\n    if (this.nodes) {\n      for (let node of this.nodes) node.cleanRaws(keepBetween)\n    }\n  }\n\n  each(callback) {\n    if (!this.proxyOf.nodes) return undefined\n    let iterator = this.getIterator()\n\n    let index, result\n    while (this.indexes[iterator] < this.proxyOf.nodes.length) {\n      index = this.indexes[iterator]\n      result = callback(this.proxyOf.nodes[index], index)\n      if (result === false) break\n\n      this.indexes[iterator] += 1\n    }\n\n    delete this.indexes[iterator]\n    return result\n  }\n\n  every(condition) {\n    return this.nodes.every(condition)\n  }\n\n  getIterator() {\n    if (!this.lastEach) this.lastEach = 0\n    if (!this.indexes) this.indexes = {}\n\n    this.lastEach += 1\n    let iterator = this.lastEach\n    this.indexes[iterator] = 0\n\n    return iterator\n  }\n\n  getProxyProcessor() {\n    return {\n      get(node, prop) {\n        if (prop === 'proxyOf') {\n          return node\n        } else if (!node[prop]) {\n          return node[prop]\n        } else if (\n          prop === 'each' ||\n          (typeof prop === 'string' && prop.startsWith('walk'))\n        ) {\n          return (...args) => {\n            return node[prop](\n              ...args.map(i => {\n                if (typeof i === 'function') {\n                  return (child, index) => i(child.toProxy(), index)\n                } else {\n                  return i\n                }\n              })\n            )\n          }\n        } else if (prop === 'every' || prop === 'some') {\n          return cb => {\n            return node[prop]((child, ...other) =>\n              cb(child.toProxy(), ...other)\n            )\n          }\n        } else if (prop === 'root') {\n          return () => node.root().toProxy()\n        } else if (prop === 'nodes') {\n          return node.nodes.map(i => i.toProxy())\n        } else if (prop === 'first' || prop === 'last') {\n          return node[prop].toProxy()\n        } else {\n          return node[prop]\n        }\n      },\n\n      set(node, prop, value) {\n        if (node[prop] === value) return true\n        node[prop] = value\n        if (prop === 'name' || prop === 'params' || prop === 'selector') {\n          node.markDirty()\n        }\n        return true\n      }\n    }\n  }\n\n  index(child) {\n    if (typeof child === 'number') return child\n    if (child.proxyOf) child = child.proxyOf\n    return this.proxyOf.nodes.indexOf(child)\n  }\n\n  insertAfter(exist, add) {\n    let existIndex = this.index(exist)\n    let nodes = this.normalize(add, this.proxyOf.nodes[existIndex]).reverse()\n    existIndex = this.index(exist)\n    for (let node of nodes) this.proxyOf.nodes.splice(existIndex + 1, 0, node)\n\n    let index\n    for (let id in this.indexes) {\n      index = this.indexes[id]\n      if (existIndex < index) {\n        this.indexes[id] = index + nodes.length\n      }\n    }\n\n    this.markDirty()\n\n    return this\n  }\n\n  insertBefore(exist, add) {\n    let existIndex = this.index(exist)\n    let type = existIndex === 0 ? 'prepend' : false\n    let nodes = this.normalize(\n      add,\n      this.proxyOf.nodes[existIndex],\n      type\n    ).reverse()\n    existIndex = this.index(exist)\n    for (let node of nodes) this.proxyOf.nodes.splice(existIndex, 0, node)\n\n    let index\n    for (let id in this.indexes) {\n      index = this.indexes[id]\n      if (existIndex <= index) {\n        this.indexes[id] = index + nodes.length\n      }\n    }\n\n    this.markDirty()\n\n    return this\n  }\n\n  normalize(nodes, sample) {\n    if (typeof nodes === 'string') {\n      nodes = cleanSource(parse(nodes).nodes)\n    } else if (typeof nodes === 'undefined') {\n      nodes = []\n    } else if (Array.isArray(nodes)) {\n      nodes = nodes.slice(0)\n      for (let i of nodes) {\n        if (i.parent) i.parent.removeChild(i, 'ignore')\n      }\n    } else if (nodes.type === 'root' && this.type !== 'document') {\n      nodes = nodes.nodes.slice(0)\n      for (let i of nodes) {\n        if (i.parent) i.parent.removeChild(i, 'ignore')\n      }\n    } else if (nodes.type) {\n      nodes = [nodes]\n    } else if (nodes.prop) {\n      if (typeof nodes.value === 'undefined') {\n        throw new Error('Value field is missed in node creation')\n      } else if (typeof nodes.value !== 'string') {\n        nodes.value = String(nodes.value)\n      }\n      nodes = [new Declaration(nodes)]\n    } else if (nodes.selector || nodes.selectors) {\n      nodes = [new Rule(nodes)]\n    } else if (nodes.name) {\n      nodes = [new AtRule(nodes)]\n    } else if (nodes.text) {\n      nodes = [new Comment(nodes)]\n    } else {\n      throw new Error('Unknown node type in node creation')\n    }\n\n    let processed = nodes.map(i => {\n      /* c8 ignore next */\n      if (!i[my]) Container.rebuild(i)\n      i = i.proxyOf\n      if (i.parent) i.parent.removeChild(i)\n      if (i[isClean]) markTreeDirty(i)\n\n      if (!i.raws) i.raws = {}\n      if (typeof i.raws.before === 'undefined') {\n        if (sample && typeof sample.raws.before !== 'undefined') {\n          i.raws.before = sample.raws.before.replace(/\\S/g, '')\n        }\n      }\n      i.parent = this.proxyOf\n      return i\n    })\n\n    return processed\n  }\n\n  prepend(...children) {\n    children = children.reverse()\n    for (let child of children) {\n      let nodes = this.normalize(child, this.first, 'prepend').reverse()\n      for (let node of nodes) this.proxyOf.nodes.unshift(node)\n      for (let id in this.indexes) {\n        this.indexes[id] = this.indexes[id] + nodes.length\n      }\n    }\n\n    this.markDirty()\n\n    return this\n  }\n\n  push(child) {\n    child.parent = this\n    this.proxyOf.nodes.push(child)\n    return this\n  }\n\n  removeAll() {\n    for (let node of this.proxyOf.nodes) node.parent = undefined\n    this.proxyOf.nodes = []\n\n    this.markDirty()\n\n    return this\n  }\n\n  removeChild(child) {\n    child = this.index(child)\n    this.proxyOf.nodes[child].parent = undefined\n    this.proxyOf.nodes.splice(child, 1)\n\n    let index\n    for (let id in this.indexes) {\n      index = this.indexes[id]\n      if (index >= child) {\n        this.indexes[id] = index - 1\n      }\n    }\n\n    this.markDirty()\n\n    return this\n  }\n\n  replaceValues(pattern, opts, callback) {\n    if (!callback) {\n      callback = opts\n      opts = {}\n    }\n\n    this.walkDecls(decl => {\n      if (opts.props && !opts.props.includes(decl.prop)) return\n      if (opts.fast && !decl.value.includes(opts.fast)) return\n\n      decl.value = decl.value.replace(pattern, callback)\n    })\n\n    this.markDirty()\n\n    return this\n  }\n\n  some(condition) {\n    return this.nodes.some(condition)\n  }\n\n  walk(callback) {\n    return this.each((child, i) => {\n      let result\n      try {\n        result = callback(child, i)\n      } catch (e) {\n        throw child.addToError(e)\n      }\n      if (result !== false && child.walk) {\n        result = child.walk(callback)\n      }\n\n      return result\n    })\n  }\n\n  walkAtRules(name, callback) {\n    if (!callback) {\n      callback = name\n      return this.walk((child, i) => {\n        if (child.type === 'atrule') {\n          return callback(child, i)\n        }\n      })\n    }\n    if (name instanceof RegExp) {\n      return this.walk((child, i) => {\n        if (child.type === 'atrule' && name.test(child.name)) {\n          return callback(child, i)\n        }\n      })\n    }\n    return this.walk((child, i) => {\n      if (child.type === 'atrule' && child.name === name) {\n        return callback(child, i)\n      }\n    })\n  }\n\n  walkComments(callback) {\n    return this.walk((child, i) => {\n      if (child.type === 'comment') {\n        return callback(child, i)\n      }\n    })\n  }\n\n  walkDecls(prop, callback) {\n    if (!callback) {\n      callback = prop\n      return this.walk((child, i) => {\n        if (child.type === 'decl') {\n          return callback(child, i)\n        }\n      })\n    }\n    if (prop instanceof RegExp) {\n      return this.walk((child, i) => {\n        if (child.type === 'decl' && prop.test(child.prop)) {\n          return callback(child, i)\n        }\n      })\n    }\n    return this.walk((child, i) => {\n      if (child.type === 'decl' && child.prop === prop) {\n        return callback(child, i)\n      }\n    })\n  }\n\n  walkRules(selector, callback) {\n    if (!callback) {\n      callback = selector\n\n      return this.walk((child, i) => {\n        if (child.type === 'rule') {\n          return callback(child, i)\n        }\n      })\n    }\n    if (selector instanceof RegExp) {\n      return this.walk((child, i) => {\n        if (child.type === 'rule' && selector.test(child.selector)) {\n          return callback(child, i)\n        }\n      })\n    }\n    return this.walk((child, i) => {\n      if (child.type === 'rule' && child.selector === selector) {\n        return callback(child, i)\n      }\n    })\n  }\n\n  get first() {\n    if (!this.proxyOf.nodes) return undefined\n    return this.proxyOf.nodes[0]\n  }\n\n  get last() {\n    if (!this.proxyOf.nodes) return undefined\n    return this.proxyOf.nodes[this.proxyOf.nodes.length - 1]\n  }\n}\n\nContainer.registerParse = dependant => {\n  parse = dependant\n}\n\nContainer.registerRule = dependant => {\n  Rule = dependant\n}\n\nContainer.registerAtRule = dependant => {\n  AtRule = dependant\n}\n\nContainer.registerRoot = dependant => {\n  Root = dependant\n}\n\nmodule.exports = Container\nContainer.default = Container\n\n/* c8 ignore start */\nContainer.rebuild = node => {\n  if (node.type === 'atrule') {\n    Object.setPrototypeOf(node, AtRule.prototype)\n  } else if (node.type === 'rule') {\n    Object.setPrototypeOf(node, Rule.prototype)\n  } else if (node.type === 'decl') {\n    Object.setPrototypeOf(node, Declaration.prototype)\n  } else if (node.type === 'comment') {\n    Object.setPrototypeOf(node, Comment.prototype)\n  } else if (node.type === 'root') {\n    Object.setPrototypeOf(node, Root.prototype)\n  }\n\n  node[my] = true\n\n  if (node.nodes) {\n    node.nodes.forEach(child => {\n      Container.rebuild(child)\n    })\n  }\n}\n/* c8 ignore stop */\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///77793\n")},53614:(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval("\n\nlet pico = __webpack_require__(48633)\n\nlet terminalHighlight = __webpack_require__(49746)\n\nclass CssSyntaxError extends Error {\n  constructor(message, line, column, source, file, plugin) {\n    super(message)\n    this.name = 'CssSyntaxError'\n    this.reason = message\n\n    if (file) {\n      this.file = file\n    }\n    if (source) {\n      this.source = source\n    }\n    if (plugin) {\n      this.plugin = plugin\n    }\n    if (typeof line !== 'undefined' && typeof column !== 'undefined') {\n      if (typeof line === 'number') {\n        this.line = line\n        this.column = column\n      } else {\n        this.line = line.line\n        this.column = line.column\n        this.endLine = column.line\n        this.endColumn = column.column\n      }\n    }\n\n    this.setMessage()\n\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, CssSyntaxError)\n    }\n  }\n\n  setMessage() {\n    this.message = this.plugin ? this.plugin + ': ' : ''\n    this.message += this.file ? this.file : '<css input>'\n    if (typeof this.line !== 'undefined') {\n      this.message += ':' + this.line + ':' + this.column\n    }\n    this.message += ': ' + this.reason\n  }\n\n  showSourceCode(color) {\n    if (!this.source) return ''\n\n    let css = this.source\n    if (color == null) color = pico.isColorSupported\n\n    let aside = text => text\n    let mark = text => text\n    let highlight = text => text\n    if (color) {\n      let { bold, gray, red } = pico.createColors(true)\n      mark = text => bold(red(text))\n      aside = text => gray(text)\n      if (terminalHighlight) {\n        highlight = text => terminalHighlight(text)\n      }\n    }\n\n    let lines = css.split(/\\r?\\n/)\n    let start = Math.max(this.line - 3, 0)\n    let end = Math.min(this.line + 2, lines.length)\n    let maxWidth = String(end).length\n\n    return lines\n      .slice(start, end)\n      .map((line, index) => {\n        let number = start + 1 + index\n        let gutter = ' ' + (' ' + number).slice(-maxWidth) + ' | '\n        if (number === this.line) {\n          if (line.length > 160) {\n            let padding = 20\n            let subLineStart = Math.max(0, this.column - padding)\n            let subLineEnd = Math.max(\n              this.column + padding,\n              this.endColumn + padding\n            )\n            let subLine = line.slice(subLineStart, subLineEnd)\n\n            let spacing =\n              aside(gutter.replace(/\\d/g, ' ')) +\n              line\n                .slice(0, Math.min(this.column - 1, padding - 1))\n                .replace(/[^\\t]/g, ' ')\n\n            return (\n              mark('>') +\n              aside(gutter) +\n              highlight(subLine) +\n              '\\n ' +\n              spacing +\n              mark('^')\n            )\n          }\n\n          let spacing =\n            aside(gutter.replace(/\\d/g, ' ')) +\n            line.slice(0, this.column - 1).replace(/[^\\t]/g, ' ')\n\n          return (\n            mark('>') +\n            aside(gutter) +\n            highlight(line) +\n            '\\n ' +\n            spacing +\n            mark('^')\n          )\n        }\n\n        return ' ' + aside(gutter) + highlight(line)\n      })\n      .join('\\n')\n  }\n\n  toString() {\n    let code = this.showSourceCode()\n    if (code) {\n      code = '\\n\\n' + code + '\\n'\n    }\n    return this.name + ': ' + this.message + code\n  }\n}\n\nmodule.exports = CssSyntaxError\nCssSyntaxError.default = CssSyntaxError\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNTM2MTQuanMiLCJtYXBwaW5ncyI6IkFBQVk7O0FBRVosV0FBVyxtQkFBTyxDQUFDLEtBQVk7O0FBRS9CLHdCQUF3QixtQkFBTyxDQUFDLEtBQXNCOztBQUV0RDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVksa0JBQWtCO0FBQzlCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxPQUFPO0FBQ1A7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ibG9ja2JpdGUvLi9ub2RlX21vZHVsZXMvcG9zdGNzcy9saWIvY3NzLXN5bnRheC1lcnJvci5qcz8zYzdhIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0J1xuXG5sZXQgcGljbyA9IHJlcXVpcmUoJ3BpY29jb2xvcnMnKVxuXG5sZXQgdGVybWluYWxIaWdobGlnaHQgPSByZXF1aXJlKCcuL3Rlcm1pbmFsLWhpZ2hsaWdodCcpXG5cbmNsYXNzIENzc1N5bnRheEVycm9yIGV4dGVuZHMgRXJyb3Ige1xuICBjb25zdHJ1Y3RvcihtZXNzYWdlLCBsaW5lLCBjb2x1bW4sIHNvdXJjZSwgZmlsZSwgcGx1Z2luKSB7XG4gICAgc3VwZXIobWVzc2FnZSlcbiAgICB0aGlzLm5hbWUgPSAnQ3NzU3ludGF4RXJyb3InXG4gICAgdGhpcy5yZWFzb24gPSBtZXNzYWdlXG5cbiAgICBpZiAoZmlsZSkge1xuICAgICAgdGhpcy5maWxlID0gZmlsZVxuICAgIH1cbiAgICBpZiAoc291cmNlKSB7XG4gICAgICB0aGlzLnNvdXJjZSA9IHNvdXJjZVxuICAgIH1cbiAgICBpZiAocGx1Z2luKSB7XG4gICAgICB0aGlzLnBsdWdpbiA9IHBsdWdpblxuICAgIH1cbiAgICBpZiAodHlwZW9mIGxpbmUgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBjb2x1bW4gIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBpZiAodHlwZW9mIGxpbmUgPT09ICdudW1iZXInKSB7XG4gICAgICAgIHRoaXMubGluZSA9IGxpbmVcbiAgICAgICAgdGhpcy5jb2x1bW4gPSBjb2x1bW5cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMubGluZSA9IGxpbmUubGluZVxuICAgICAgICB0aGlzLmNvbHVtbiA9IGxpbmUuY29sdW1uXG4gICAgICAgIHRoaXMuZW5kTGluZSA9IGNvbHVtbi5saW5lXG4gICAgICAgIHRoaXMuZW5kQ29sdW1uID0gY29sdW1uLmNvbHVtblxuICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMuc2V0TWVzc2FnZSgpXG5cbiAgICBpZiAoRXJyb3IuY2FwdHVyZVN0YWNrVHJhY2UpIHtcbiAgICAgIEVycm9yLmNhcHR1cmVTdGFja1RyYWNlKHRoaXMsIENzc1N5bnRheEVycm9yKVxuICAgIH1cbiAgfVxuXG4gIHNldE1lc3NhZ2UoKSB7XG4gICAgdGhpcy5tZXNzYWdlID0gdGhpcy5wbHVnaW4gPyB0aGlzLnBsdWdpbiArICc6ICcgOiAnJ1xuICAgIHRoaXMubWVzc2FnZSArPSB0aGlzLmZpbGUgPyB0aGlzLmZpbGUgOiAnPGNzcyBpbnB1dD4nXG4gICAgaWYgKHR5cGVvZiB0aGlzLmxpbmUgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICB0aGlzLm1lc3NhZ2UgKz0gJzonICsgdGhpcy5saW5lICsgJzonICsgdGhpcy5jb2x1bW5cbiAgICB9XG4gICAgdGhpcy5tZXNzYWdlICs9ICc6ICcgKyB0aGlzLnJlYXNvblxuICB9XG5cbiAgc2hvd1NvdXJjZUNvZGUoY29sb3IpIHtcbiAgICBpZiAoIXRoaXMuc291cmNlKSByZXR1cm4gJydcblxuICAgIGxldCBjc3MgPSB0aGlzLnNvdXJjZVxuICAgIGlmIChjb2xvciA9PSBudWxsKSBjb2xvciA9IHBpY28uaXNDb2xvclN1cHBvcnRlZFxuXG4gICAgbGV0IGFzaWRlID0gdGV4dCA9PiB0ZXh0XG4gICAgbGV0IG1hcmsgPSB0ZXh0ID0+IHRleHRcbiAgICBsZXQgaGlnaGxpZ2h0ID0gdGV4dCA9PiB0ZXh0XG4gICAgaWYgKGNvbG9yKSB7XG4gICAgICBsZXQgeyBib2xkLCBncmF5LCByZWQgfSA9IHBpY28uY3JlYXRlQ29sb3JzKHRydWUpXG4gICAgICBtYXJrID0gdGV4dCA9PiBib2xkKHJlZCh0ZXh0KSlcbiAgICAgIGFzaWRlID0gdGV4dCA9PiBncmF5KHRleHQpXG4gICAgICBpZiAodGVybWluYWxIaWdobGlnaHQpIHtcbiAgICAgICAgaGlnaGxpZ2h0ID0gdGV4dCA9PiB0ZXJtaW5hbEhpZ2hsaWdodCh0ZXh0KVxuICAgICAgfVxuICAgIH1cblxuICAgIGxldCBsaW5lcyA9IGNzcy5zcGxpdCgvXFxyP1xcbi8pXG4gICAgbGV0IHN0YXJ0ID0gTWF0aC5tYXgodGhpcy5saW5lIC0gMywgMClcbiAgICBsZXQgZW5kID0gTWF0aC5taW4odGhpcy5saW5lICsgMiwgbGluZXMubGVuZ3RoKVxuICAgIGxldCBtYXhXaWR0aCA9IFN0cmluZyhlbmQpLmxlbmd0aFxuXG4gICAgcmV0dXJuIGxpbmVzXG4gICAgICAuc2xpY2Uoc3RhcnQsIGVuZClcbiAgICAgIC5tYXAoKGxpbmUsIGluZGV4KSA9PiB7XG4gICAgICAgIGxldCBudW1iZXIgPSBzdGFydCArIDEgKyBpbmRleFxuICAgICAgICBsZXQgZ3V0dGVyID0gJyAnICsgKCcgJyArIG51bWJlcikuc2xpY2UoLW1heFdpZHRoKSArICcgfCAnXG4gICAgICAgIGlmIChudW1iZXIgPT09IHRoaXMubGluZSkge1xuICAgICAgICAgIGlmIChsaW5lLmxlbmd0aCA+IDE2MCkge1xuICAgICAgICAgICAgbGV0IHBhZGRpbmcgPSAyMFxuICAgICAgICAgICAgbGV0IHN1YkxpbmVTdGFydCA9IE1hdGgubWF4KDAsIHRoaXMuY29sdW1uIC0gcGFkZGluZylcbiAgICAgICAgICAgIGxldCBzdWJMaW5lRW5kID0gTWF0aC5tYXgoXG4gICAgICAgICAgICAgIHRoaXMuY29sdW1uICsgcGFkZGluZyxcbiAgICAgICAgICAgICAgdGhpcy5lbmRDb2x1bW4gKyBwYWRkaW5nXG4gICAgICAgICAgICApXG4gICAgICAgICAgICBsZXQgc3ViTGluZSA9IGxpbmUuc2xpY2Uoc3ViTGluZVN0YXJ0LCBzdWJMaW5lRW5kKVxuXG4gICAgICAgICAgICBsZXQgc3BhY2luZyA9XG4gICAgICAgICAgICAgIGFzaWRlKGd1dHRlci5yZXBsYWNlKC9cXGQvZywgJyAnKSkgK1xuICAgICAgICAgICAgICBsaW5lXG4gICAgICAgICAgICAgICAgLnNsaWNlKDAsIE1hdGgubWluKHRoaXMuY29sdW1uIC0gMSwgcGFkZGluZyAtIDEpKVxuICAgICAgICAgICAgICAgIC5yZXBsYWNlKC9bXlxcdF0vZywgJyAnKVxuXG4gICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICBtYXJrKCc+JykgK1xuICAgICAgICAgICAgICBhc2lkZShndXR0ZXIpICtcbiAgICAgICAgICAgICAgaGlnaGxpZ2h0KHN1YkxpbmUpICtcbiAgICAgICAgICAgICAgJ1xcbiAnICtcbiAgICAgICAgICAgICAgc3BhY2luZyArXG4gICAgICAgICAgICAgIG1hcmsoJ14nKVxuICAgICAgICAgICAgKVxuICAgICAgICAgIH1cblxuICAgICAgICAgIGxldCBzcGFjaW5nID1cbiAgICAgICAgICAgIGFzaWRlKGd1dHRlci5yZXBsYWNlKC9cXGQvZywgJyAnKSkgK1xuICAgICAgICAgICAgbGluZS5zbGljZSgwLCB0aGlzLmNvbHVtbiAtIDEpLnJlcGxhY2UoL1teXFx0XS9nLCAnICcpXG5cbiAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgbWFyaygnPicpICtcbiAgICAgICAgICAgIGFzaWRlKGd1dHRlcikgK1xuICAgICAgICAgICAgaGlnaGxpZ2h0KGxpbmUpICtcbiAgICAgICAgICAgICdcXG4gJyArXG4gICAgICAgICAgICBzcGFjaW5nICtcbiAgICAgICAgICAgIG1hcmsoJ14nKVxuICAgICAgICAgIClcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiAnICcgKyBhc2lkZShndXR0ZXIpICsgaGlnaGxpZ2h0KGxpbmUpXG4gICAgICB9KVxuICAgICAgLmpvaW4oJ1xcbicpXG4gIH1cblxuICB0b1N0cmluZygpIHtcbiAgICBsZXQgY29kZSA9IHRoaXMuc2hvd1NvdXJjZUNvZGUoKVxuICAgIGlmIChjb2RlKSB7XG4gICAgICBjb2RlID0gJ1xcblxcbicgKyBjb2RlICsgJ1xcbidcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMubmFtZSArICc6ICcgKyB0aGlzLm1lc3NhZ2UgKyBjb2RlXG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBDc3NTeW50YXhFcnJvclxuQ3NzU3ludGF4RXJyb3IuZGVmYXVsdCA9IENzc1N5bnRheEVycm9yXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///53614\n")},35238:(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval("\n\nlet Node = __webpack_require__(63152)\n\nclass Declaration extends Node {\n  constructor(defaults) {\n    if (\n      defaults &&\n      typeof defaults.value !== 'undefined' &&\n      typeof defaults.value !== 'string'\n    ) {\n      defaults = { ...defaults, value: String(defaults.value) }\n    }\n    super(defaults)\n    this.type = 'decl'\n  }\n\n  get variable() {\n    return this.prop.startsWith('--') || this.prop[0] === '$'\n  }\n}\n\nmodule.exports = Declaration\nDeclaration.default = Declaration\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzUyMzguanMiLCJtYXBwaW5ncyI6IkFBQVk7O0FBRVosV0FBVyxtQkFBTyxDQUFDLEtBQVE7O0FBRTNCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUJBQW1CO0FBQ25CO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ibG9ja2JpdGUvLi9ub2RlX21vZHVsZXMvcG9zdGNzcy9saWIvZGVjbGFyYXRpb24uanM/NTI3YyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCdcblxubGV0IE5vZGUgPSByZXF1aXJlKCcuL25vZGUnKVxuXG5jbGFzcyBEZWNsYXJhdGlvbiBleHRlbmRzIE5vZGUge1xuICBjb25zdHJ1Y3RvcihkZWZhdWx0cykge1xuICAgIGlmIChcbiAgICAgIGRlZmF1bHRzICYmXG4gICAgICB0eXBlb2YgZGVmYXVsdHMudmFsdWUgIT09ICd1bmRlZmluZWQnICYmXG4gICAgICB0eXBlb2YgZGVmYXVsdHMudmFsdWUgIT09ICdzdHJpbmcnXG4gICAgKSB7XG4gICAgICBkZWZhdWx0cyA9IHsgLi4uZGVmYXVsdHMsIHZhbHVlOiBTdHJpbmcoZGVmYXVsdHMudmFsdWUpIH1cbiAgICB9XG4gICAgc3VwZXIoZGVmYXVsdHMpXG4gICAgdGhpcy50eXBlID0gJ2RlY2wnXG4gIH1cblxuICBnZXQgdmFyaWFibGUoKSB7XG4gICAgcmV0dXJuIHRoaXMucHJvcC5zdGFydHNXaXRoKCctLScpIHx8IHRoaXMucHJvcFswXSA9PT0gJyQnXG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBEZWNsYXJhdGlvblxuRGVjbGFyYXRpb24uZGVmYXVsdCA9IERlY2xhcmF0aW9uXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///35238\n")},40145:(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval("\n\nlet Container = __webpack_require__(77793)\n\nlet LazyResult, Processor\n\nclass Document extends Container {\n  constructor(defaults) {\n    // type needs to be passed to super, otherwise child roots won't be normalized correctly\n    super({ type: 'document', ...defaults })\n\n    if (!this.nodes) {\n      this.nodes = []\n    }\n  }\n\n  toResult(opts = {}) {\n    let lazy = new LazyResult(new Processor(), this, opts)\n\n    return lazy.stringify()\n  }\n}\n\nDocument.registerLazyResult = dependant => {\n  LazyResult = dependant\n}\n\nDocument.registerProcessor = dependant => {\n  Processor = dependant\n}\n\nmodule.exports = Document\nDocument.default = Document\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDAxNDUuanMiLCJtYXBwaW5ncyI6IkFBQVk7O0FBRVosZ0JBQWdCLG1CQUFPLENBQUMsS0FBYTs7QUFFckM7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsWUFBWSwrQkFBK0I7O0FBRTNDO0FBQ0E7QUFDQTtBQUNBOztBQUVBLG9CQUFvQjtBQUNwQjs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYmxvY2tiaXRlLy4vbm9kZV9tb2R1bGVzL3Bvc3Rjc3MvbGliL2RvY3VtZW50LmpzP2ZhZjgiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnXG5cbmxldCBDb250YWluZXIgPSByZXF1aXJlKCcuL2NvbnRhaW5lcicpXG5cbmxldCBMYXp5UmVzdWx0LCBQcm9jZXNzb3JcblxuY2xhc3MgRG9jdW1lbnQgZXh0ZW5kcyBDb250YWluZXIge1xuICBjb25zdHJ1Y3RvcihkZWZhdWx0cykge1xuICAgIC8vIHR5cGUgbmVlZHMgdG8gYmUgcGFzc2VkIHRvIHN1cGVyLCBvdGhlcndpc2UgY2hpbGQgcm9vdHMgd29uJ3QgYmUgbm9ybWFsaXplZCBjb3JyZWN0bHlcbiAgICBzdXBlcih7IHR5cGU6ICdkb2N1bWVudCcsIC4uLmRlZmF1bHRzIH0pXG5cbiAgICBpZiAoIXRoaXMubm9kZXMpIHtcbiAgICAgIHRoaXMubm9kZXMgPSBbXVxuICAgIH1cbiAgfVxuXG4gIHRvUmVzdWx0KG9wdHMgPSB7fSkge1xuICAgIGxldCBsYXp5ID0gbmV3IExhenlSZXN1bHQobmV3IFByb2Nlc3NvcigpLCB0aGlzLCBvcHRzKVxuXG4gICAgcmV0dXJuIGxhenkuc3RyaW5naWZ5KClcbiAgfVxufVxuXG5Eb2N1bWVudC5yZWdpc3RlckxhenlSZXN1bHQgPSBkZXBlbmRhbnQgPT4ge1xuICBMYXp5UmVzdWx0ID0gZGVwZW5kYW50XG59XG5cbkRvY3VtZW50LnJlZ2lzdGVyUHJvY2Vzc29yID0gZGVwZW5kYW50ID0+IHtcbiAgUHJvY2Vzc29yID0gZGVwZW5kYW50XG59XG5cbm1vZHVsZS5leHBvcnRzID0gRG9jdW1lbnRcbkRvY3VtZW50LmRlZmF1bHQgPSBEb2N1bWVudFxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///40145\n")},33438:(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval("\n\nlet AtRule = __webpack_require__(40396)\nlet Comment = __webpack_require__(49371)\nlet Declaration = __webpack_require__(35238)\nlet Input = __webpack_require__(61106)\nlet PreviousMap = __webpack_require__(93878)\nlet Root = __webpack_require__(25644)\nlet Rule = __webpack_require__(61534)\n\nfunction fromJSON(json, inputs) {\n  if (Array.isArray(json)) return json.map(n => fromJSON(n))\n\n  let { inputs: ownInputs, ...defaults } = json\n  if (ownInputs) {\n    inputs = []\n    for (let input of ownInputs) {\n      let inputHydrated = { ...input, __proto__: Input.prototype }\n      if (inputHydrated.map) {\n        inputHydrated.map = {\n          ...inputHydrated.map,\n          __proto__: PreviousMap.prototype\n        }\n      }\n      inputs.push(inputHydrated)\n    }\n  }\n  if (defaults.nodes) {\n    defaults.nodes = json.nodes.map(n => fromJSON(n, inputs))\n  }\n  if (defaults.source) {\n    let { inputId, ...source } = defaults.source\n    defaults.source = source\n    if (inputId != null) {\n      defaults.source.input = inputs[inputId]\n    }\n  }\n  if (defaults.type === 'root') {\n    return new Root(defaults)\n  } else if (defaults.type === 'decl') {\n    return new Declaration(defaults)\n  } else if (defaults.type === 'rule') {\n    return new Rule(defaults)\n  } else if (defaults.type === 'comment') {\n    return new Comment(defaults)\n  } else if (defaults.type === 'atrule') {\n    return new AtRule(defaults)\n  } else {\n    throw new Error('Unknown node type: ' + json.type)\n  }\n}\n\nmodule.exports = fromJSON\nfromJSON.default = fromJSON\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzM0MzguanMiLCJtYXBwaW5ncyI6IkFBQVk7O0FBRVosYUFBYSxtQkFBTyxDQUFDLEtBQVc7QUFDaEMsY0FBYyxtQkFBTyxDQUFDLEtBQVc7QUFDakMsa0JBQWtCLG1CQUFPLENBQUMsS0FBZTtBQUN6QyxZQUFZLG1CQUFPLENBQUMsS0FBUztBQUM3QixrQkFBa0IsbUJBQU8sQ0FBQyxLQUFnQjtBQUMxQyxXQUFXLG1CQUFPLENBQUMsS0FBUTtBQUMzQixXQUFXLG1CQUFPLENBQUMsS0FBUTs7QUFFM0I7QUFDQTs7QUFFQSxRQUFRLGlDQUFpQztBQUN6QztBQUNBO0FBQ0E7QUFDQSw0QkFBNEI7QUFDNUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVLHFCQUFxQjtBQUMvQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBLElBQUk7QUFDSjtBQUNBLElBQUk7QUFDSjtBQUNBLElBQUk7QUFDSjtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7O0FBRUE7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2Jsb2NrYml0ZS8uL25vZGVfbW9kdWxlcy9wb3N0Y3NzL2xpYi9mcm9tSlNPTi5qcz81OWZhIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0J1xuXG5sZXQgQXRSdWxlID0gcmVxdWlyZSgnLi9hdC1ydWxlJylcbmxldCBDb21tZW50ID0gcmVxdWlyZSgnLi9jb21tZW50JylcbmxldCBEZWNsYXJhdGlvbiA9IHJlcXVpcmUoJy4vZGVjbGFyYXRpb24nKVxubGV0IElucHV0ID0gcmVxdWlyZSgnLi9pbnB1dCcpXG5sZXQgUHJldmlvdXNNYXAgPSByZXF1aXJlKCcuL3ByZXZpb3VzLW1hcCcpXG5sZXQgUm9vdCA9IHJlcXVpcmUoJy4vcm9vdCcpXG5sZXQgUnVsZSA9IHJlcXVpcmUoJy4vcnVsZScpXG5cbmZ1bmN0aW9uIGZyb21KU09OKGpzb24sIGlucHV0cykge1xuICBpZiAoQXJyYXkuaXNBcnJheShqc29uKSkgcmV0dXJuIGpzb24ubWFwKG4gPT4gZnJvbUpTT04obikpXG5cbiAgbGV0IHsgaW5wdXRzOiBvd25JbnB1dHMsIC4uLmRlZmF1bHRzIH0gPSBqc29uXG4gIGlmIChvd25JbnB1dHMpIHtcbiAgICBpbnB1dHMgPSBbXVxuICAgIGZvciAobGV0IGlucHV0IG9mIG93bklucHV0cykge1xuICAgICAgbGV0IGlucHV0SHlkcmF0ZWQgPSB7IC4uLmlucHV0LCBfX3Byb3RvX186IElucHV0LnByb3RvdHlwZSB9XG4gICAgICBpZiAoaW5wdXRIeWRyYXRlZC5tYXApIHtcbiAgICAgICAgaW5wdXRIeWRyYXRlZC5tYXAgPSB7XG4gICAgICAgICAgLi4uaW5wdXRIeWRyYXRlZC5tYXAsXG4gICAgICAgICAgX19wcm90b19fOiBQcmV2aW91c01hcC5wcm90b3R5cGVcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaW5wdXRzLnB1c2goaW5wdXRIeWRyYXRlZClcbiAgICB9XG4gIH1cbiAgaWYgKGRlZmF1bHRzLm5vZGVzKSB7XG4gICAgZGVmYXVsdHMubm9kZXMgPSBqc29uLm5vZGVzLm1hcChuID0+IGZyb21KU09OKG4sIGlucHV0cykpXG4gIH1cbiAgaWYgKGRlZmF1bHRzLnNvdXJjZSkge1xuICAgIGxldCB7IGlucHV0SWQsIC4uLnNvdXJjZSB9ID0gZGVmYXVsdHMuc291cmNlXG4gICAgZGVmYXVsdHMuc291cmNlID0gc291cmNlXG4gICAgaWYgKGlucHV0SWQgIT0gbnVsbCkge1xuICAgICAgZGVmYXVsdHMuc291cmNlLmlucHV0ID0gaW5wdXRzW2lucHV0SWRdXG4gICAgfVxuICB9XG4gIGlmIChkZWZhdWx0cy50eXBlID09PSAncm9vdCcpIHtcbiAgICByZXR1cm4gbmV3IFJvb3QoZGVmYXVsdHMpXG4gIH0gZWxzZSBpZiAoZGVmYXVsdHMudHlwZSA9PT0gJ2RlY2wnKSB7XG4gICAgcmV0dXJuIG5ldyBEZWNsYXJhdGlvbihkZWZhdWx0cylcbiAgfSBlbHNlIGlmIChkZWZhdWx0cy50eXBlID09PSAncnVsZScpIHtcbiAgICByZXR1cm4gbmV3IFJ1bGUoZGVmYXVsdHMpXG4gIH0gZWxzZSBpZiAoZGVmYXVsdHMudHlwZSA9PT0gJ2NvbW1lbnQnKSB7XG4gICAgcmV0dXJuIG5ldyBDb21tZW50KGRlZmF1bHRzKVxuICB9IGVsc2UgaWYgKGRlZmF1bHRzLnR5cGUgPT09ICdhdHJ1bGUnKSB7XG4gICAgcmV0dXJuIG5ldyBBdFJ1bGUoZGVmYXVsdHMpXG4gIH0gZWxzZSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdVbmtub3duIG5vZGUgdHlwZTogJyArIGpzb24udHlwZSlcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZyb21KU09OXG5mcm9tSlNPTi5kZWZhdWx0ID0gZnJvbUpTT05cbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///33438\n")},61106:(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval("\n\nlet { nanoid } = __webpack_require__(45463)\nlet { isAbsolute, resolve } = __webpack_require__(197)\nlet { SourceMapConsumer, SourceMapGenerator } = __webpack_require__(21866)\nlet { fileURLToPath, pathToFileURL } = __webpack_require__(52739)\n\nlet CssSyntaxError = __webpack_require__(53614)\nlet PreviousMap = __webpack_require__(93878)\nlet terminalHighlight = __webpack_require__(49746)\n\nlet fromOffsetCache = Symbol('fromOffsetCache')\n\nlet sourceMapAvailable = Boolean(SourceMapConsumer && SourceMapGenerator)\nlet pathAvailable = Boolean(resolve && isAbsolute)\n\nclass Input {\n  constructor(css, opts = {}) {\n    if (\n      css === null ||\n      typeof css === 'undefined' ||\n      (typeof css === 'object' && !css.toString)\n    ) {\n      throw new Error(`PostCSS received ${css} instead of CSS string`)\n    }\n\n    this.css = css.toString()\n\n    if (this.css[0] === '\\uFEFF' || this.css[0] === '\\uFFFE') {\n      this.hasBOM = true\n      this.css = this.css.slice(1)\n    } else {\n      this.hasBOM = false\n    }\n\n    if (opts.from) {\n      if (\n        !pathAvailable ||\n        /^\\w+:\\/\\//.test(opts.from) ||\n        isAbsolute(opts.from)\n      ) {\n        this.file = opts.from\n      } else {\n        this.file = resolve(opts.from)\n      }\n    }\n\n    if (pathAvailable && sourceMapAvailable) {\n      let map = new PreviousMap(this.css, opts)\n      if (map.text) {\n        this.map = map\n        let file = map.consumer().file\n        if (!this.file && file) this.file = this.mapResolve(file)\n      }\n    }\n\n    if (!this.file) {\n      this.id = '<input css ' + nanoid(6) + '>'\n    }\n    if (this.map) this.map.file = this.from\n  }\n\n  error(message, line, column, opts = {}) {\n    let endColumn, endLine, result\n\n    if (line && typeof line === 'object') {\n      let start = line\n      let end = column\n      if (typeof start.offset === 'number') {\n        let pos = this.fromOffset(start.offset)\n        line = pos.line\n        column = pos.col\n      } else {\n        line = start.line\n        column = start.column\n      }\n      if (typeof end.offset === 'number') {\n        let pos = this.fromOffset(end.offset)\n        endLine = pos.line\n        endColumn = pos.col\n      } else {\n        endLine = end.line\n        endColumn = end.column\n      }\n    } else if (!column) {\n      let pos = this.fromOffset(line)\n      line = pos.line\n      column = pos.col\n    }\n\n    let origin = this.origin(line, column, endLine, endColumn)\n    if (origin) {\n      result = new CssSyntaxError(\n        message,\n        origin.endLine === undefined\n          ? origin.line\n          : { column: origin.column, line: origin.line },\n        origin.endLine === undefined\n          ? origin.column\n          : { column: origin.endColumn, line: origin.endLine },\n        origin.source,\n        origin.file,\n        opts.plugin\n      )\n    } else {\n      result = new CssSyntaxError(\n        message,\n        endLine === undefined ? line : { column, line },\n        endLine === undefined ? column : { column: endColumn, line: endLine },\n        this.css,\n        this.file,\n        opts.plugin\n      )\n    }\n\n    result.input = { column, endColumn, endLine, line, source: this.css }\n    if (this.file) {\n      if (pathToFileURL) {\n        result.input.url = pathToFileURL(this.file).toString()\n      }\n      result.input.file = this.file\n    }\n\n    return result\n  }\n\n  fromOffset(offset) {\n    let lastLine, lineToIndex\n    if (!this[fromOffsetCache]) {\n      let lines = this.css.split('\\n')\n      lineToIndex = new Array(lines.length)\n      let prevIndex = 0\n\n      for (let i = 0, l = lines.length; i < l; i++) {\n        lineToIndex[i] = prevIndex\n        prevIndex += lines[i].length + 1\n      }\n\n      this[fromOffsetCache] = lineToIndex\n    } else {\n      lineToIndex = this[fromOffsetCache]\n    }\n    lastLine = lineToIndex[lineToIndex.length - 1]\n\n    let min = 0\n    if (offset >= lastLine) {\n      min = lineToIndex.length - 1\n    } else {\n      let max = lineToIndex.length - 2\n      let mid\n      while (min < max) {\n        mid = min + ((max - min) >> 1)\n        if (offset < lineToIndex[mid]) {\n          max = mid - 1\n        } else if (offset >= lineToIndex[mid + 1]) {\n          min = mid + 1\n        } else {\n          min = mid\n          break\n        }\n      }\n    }\n    return {\n      col: offset - lineToIndex[min] + 1,\n      line: min + 1\n    }\n  }\n\n  mapResolve(file) {\n    if (/^\\w+:\\/\\//.test(file)) {\n      return file\n    }\n    return resolve(this.map.consumer().sourceRoot || this.map.root || '.', file)\n  }\n\n  origin(line, column, endLine, endColumn) {\n    if (!this.map) return false\n    let consumer = this.map.consumer()\n\n    let from = consumer.originalPositionFor({ column, line })\n    if (!from.source) return false\n\n    let to\n    if (typeof endLine === 'number') {\n      to = consumer.originalPositionFor({ column: endColumn, line: endLine })\n    }\n\n    let fromUrl\n\n    if (isAbsolute(from.source)) {\n      fromUrl = pathToFileURL(from.source)\n    } else {\n      fromUrl = new URL(\n        from.source,\n        this.map.consumer().sourceRoot || pathToFileURL(this.map.mapFile)\n      )\n    }\n\n    let result = {\n      column: from.column,\n      endColumn: to && to.column,\n      endLine: to && to.line,\n      line: from.line,\n      url: fromUrl.toString()\n    }\n\n    if (fromUrl.protocol === 'file:') {\n      if (fileURLToPath) {\n        result.file = fileURLToPath(fromUrl)\n      } else {\n        /* c8 ignore next 2 */\n        throw new Error(`file: protocol is not available in this PostCSS build`)\n      }\n    }\n\n    let source = consumer.sourceContentFor(from.source)\n    if (source) result.source = source\n\n    return result\n  }\n\n  toJSON() {\n    let json = {}\n    for (let name of ['hasBOM', 'css', 'file', 'id']) {\n      if (this[name] != null) {\n        json[name] = this[name]\n      }\n    }\n    if (this.map) {\n      json.map = { ...this.map }\n      if (json.map.consumerCache) {\n        json.map.consumerCache = undefined\n      }\n    }\n    return json\n  }\n\n  get from() {\n    return this.file || this.id\n  }\n}\n\nmodule.exports = Input\nInput.default = Input\n\nif (terminalHighlight && terminalHighlight.registerInput) {\n  terminalHighlight.registerInput(Input)\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///61106\n")},96966:(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval("\n\nlet Container = __webpack_require__(77793)\nlet Document = __webpack_require__(40145)\nlet MapGenerator = __webpack_require__(13604)\nlet parse = __webpack_require__(69577)\nlet Result = __webpack_require__(33717)\nlet Root = __webpack_require__(25644)\nlet stringify = __webpack_require__(83303)\nlet { isClean, my } = __webpack_require__(84151)\nlet warnOnce = __webpack_require__(6156)\n\nconst TYPE_TO_CLASS_NAME = {\n  atrule: 'AtRule',\n  comment: 'Comment',\n  decl: 'Declaration',\n  document: 'Document',\n  root: 'Root',\n  rule: 'Rule'\n}\n\nconst PLUGIN_PROPS = {\n  AtRule: true,\n  AtRuleExit: true,\n  Comment: true,\n  CommentExit: true,\n  Declaration: true,\n  DeclarationExit: true,\n  Document: true,\n  DocumentExit: true,\n  Once: true,\n  OnceExit: true,\n  postcssPlugin: true,\n  prepare: true,\n  Root: true,\n  RootExit: true,\n  Rule: true,\n  RuleExit: true\n}\n\nconst NOT_VISITORS = {\n  Once: true,\n  postcssPlugin: true,\n  prepare: true\n}\n\nconst CHILDREN = 0\n\nfunction isPromise(obj) {\n  return typeof obj === 'object' && typeof obj.then === 'function'\n}\n\nfunction getEvents(node) {\n  let key = false\n  let type = TYPE_TO_CLASS_NAME[node.type]\n  if (node.type === 'decl') {\n    key = node.prop.toLowerCase()\n  } else if (node.type === 'atrule') {\n    key = node.name.toLowerCase()\n  }\n\n  if (key && node.append) {\n    return [\n      type,\n      type + '-' + key,\n      CHILDREN,\n      type + 'Exit',\n      type + 'Exit-' + key\n    ]\n  } else if (key) {\n    return [type, type + '-' + key, type + 'Exit', type + 'Exit-' + key]\n  } else if (node.append) {\n    return [type, CHILDREN, type + 'Exit']\n  } else {\n    return [type, type + 'Exit']\n  }\n}\n\nfunction toStack(node) {\n  let events\n  if (node.type === 'document') {\n    events = ['Document', CHILDREN, 'DocumentExit']\n  } else if (node.type === 'root') {\n    events = ['Root', CHILDREN, 'RootExit']\n  } else {\n    events = getEvents(node)\n  }\n\n  return {\n    eventIndex: 0,\n    events,\n    iterator: 0,\n    node,\n    visitorIndex: 0,\n    visitors: []\n  }\n}\n\nfunction cleanMarks(node) {\n  node[isClean] = false\n  if (node.nodes) node.nodes.forEach(i => cleanMarks(i))\n  return node\n}\n\nlet postcss = {}\n\nclass LazyResult {\n  constructor(processor, css, opts) {\n    this.stringified = false\n    this.processed = false\n\n    let root\n    if (\n      typeof css === 'object' &&\n      css !== null &&\n      (css.type === 'root' || css.type === 'document')\n    ) {\n      root = cleanMarks(css)\n    } else if (css instanceof LazyResult || css instanceof Result) {\n      root = cleanMarks(css.root)\n      if (css.map) {\n        if (typeof opts.map === 'undefined') opts.map = {}\n        if (!opts.map.inline) opts.map.inline = false\n        opts.map.prev = css.map\n      }\n    } else {\n      let parser = parse\n      if (opts.syntax) parser = opts.syntax.parse\n      if (opts.parser) parser = opts.parser\n      if (parser.parse) parser = parser.parse\n\n      try {\n        root = parser(css, opts)\n      } catch (error) {\n        this.processed = true\n        this.error = error\n      }\n\n      if (root && !root[my]) {\n        /* c8 ignore next 2 */\n        Container.rebuild(root)\n      }\n    }\n\n    this.result = new Result(processor, root, opts)\n    this.helpers = { ...postcss, postcss, result: this.result }\n    this.plugins = this.processor.plugins.map(plugin => {\n      if (typeof plugin === 'object' && plugin.prepare) {\n        return { ...plugin, ...plugin.prepare(this.result) }\n      } else {\n        return plugin\n      }\n    })\n  }\n\n  async() {\n    if (this.error) return Promise.reject(this.error)\n    if (this.processed) return Promise.resolve(this.result)\n    if (!this.processing) {\n      this.processing = this.runAsync()\n    }\n    return this.processing\n  }\n\n  catch(onRejected) {\n    return this.async().catch(onRejected)\n  }\n\n  finally(onFinally) {\n    return this.async().then(onFinally, onFinally)\n  }\n\n  getAsyncError() {\n    throw new Error('Use process(css).then(cb) to work with async plugins')\n  }\n\n  handleError(error, node) {\n    let plugin = this.result.lastPlugin\n    try {\n      if (node) node.addToError(error)\n      this.error = error\n      if (error.name === 'CssSyntaxError' && !error.plugin) {\n        error.plugin = plugin.postcssPlugin\n        error.setMessage()\n      } else if (plugin.postcssVersion) {\n        if (false) {}\n      }\n    } catch (err) {\n      /* c8 ignore next 3 */\n      // eslint-disable-next-line no-console\n      if (console && console.error) console.error(err)\n    }\n    return error\n  }\n\n  prepareVisitors() {\n    this.listeners = {}\n    let add = (plugin, type, cb) => {\n      if (!this.listeners[type]) this.listeners[type] = []\n      this.listeners[type].push([plugin, cb])\n    }\n    for (let plugin of this.plugins) {\n      if (typeof plugin === 'object') {\n        for (let event in plugin) {\n          if (!PLUGIN_PROPS[event] && /^[A-Z]/.test(event)) {\n            throw new Error(\n              `Unknown event ${event} in ${plugin.postcssPlugin}. ` +\n                `Try to update PostCSS (${this.processor.version} now).`\n            )\n          }\n          if (!NOT_VISITORS[event]) {\n            if (typeof plugin[event] === 'object') {\n              for (let filter in plugin[event]) {\n                if (filter === '*') {\n                  add(plugin, event, plugin[event][filter])\n                } else {\n                  add(\n                    plugin,\n                    event + '-' + filter.toLowerCase(),\n                    plugin[event][filter]\n                  )\n                }\n              }\n            } else if (typeof plugin[event] === 'function') {\n              add(plugin, event, plugin[event])\n            }\n          }\n        }\n      }\n    }\n    this.hasListener = Object.keys(this.listeners).length > 0\n  }\n\n  async runAsync() {\n    this.plugin = 0\n    for (let i = 0; i < this.plugins.length; i++) {\n      let plugin = this.plugins[i]\n      let promise = this.runOnRoot(plugin)\n      if (isPromise(promise)) {\n        try {\n          await promise\n        } catch (error) {\n          throw this.handleError(error)\n        }\n      }\n    }\n\n    this.prepareVisitors()\n    if (this.hasListener) {\n      let root = this.result.root\n      while (!root[isClean]) {\n        root[isClean] = true\n        let stack = [toStack(root)]\n        while (stack.length > 0) {\n          let promise = this.visitTick(stack)\n          if (isPromise(promise)) {\n            try {\n              await promise\n            } catch (e) {\n              let node = stack[stack.length - 1].node\n              throw this.handleError(e, node)\n            }\n          }\n        }\n      }\n\n      if (this.listeners.OnceExit) {\n        for (let [plugin, visitor] of this.listeners.OnceExit) {\n          this.result.lastPlugin = plugin\n          try {\n            if (root.type === 'document') {\n              let roots = root.nodes.map(subRoot =>\n                visitor(subRoot, this.helpers)\n              )\n\n              await Promise.all(roots)\n            } else {\n              await visitor(root, this.helpers)\n            }\n          } catch (e) {\n            throw this.handleError(e)\n          }\n        }\n      }\n    }\n\n    this.processed = true\n    return this.stringify()\n  }\n\n  runOnRoot(plugin) {\n    this.result.lastPlugin = plugin\n    try {\n      if (typeof plugin === 'object' && plugin.Once) {\n        if (this.result.root.type === 'document') {\n          let roots = this.result.root.nodes.map(root =>\n            plugin.Once(root, this.helpers)\n          )\n\n          if (isPromise(roots[0])) {\n            return Promise.all(roots)\n          }\n\n          return roots\n        }\n\n        return plugin.Once(this.result.root, this.helpers)\n      } else if (typeof plugin === 'function') {\n        return plugin(this.result.root, this.result)\n      }\n    } catch (error) {\n      throw this.handleError(error)\n    }\n  }\n\n  stringify() {\n    if (this.error) throw this.error\n    if (this.stringified) return this.result\n    this.stringified = true\n\n    this.sync()\n\n    let opts = this.result.opts\n    let str = stringify\n    if (opts.syntax) str = opts.syntax.stringify\n    if (opts.stringifier) str = opts.stringifier\n    if (str.stringify) str = str.stringify\n\n    let map = new MapGenerator(str, this.result.root, this.result.opts)\n    let data = map.generate()\n    this.result.css = data[0]\n    this.result.map = data[1]\n\n    return this.result\n  }\n\n  sync() {\n    if (this.error) throw this.error\n    if (this.processed) return this.result\n    this.processed = true\n\n    if (this.processing) {\n      throw this.getAsyncError()\n    }\n\n    for (let plugin of this.plugins) {\n      let promise = this.runOnRoot(plugin)\n      if (isPromise(promise)) {\n        throw this.getAsyncError()\n      }\n    }\n\n    this.prepareVisitors()\n    if (this.hasListener) {\n      let root = this.result.root\n      while (!root[isClean]) {\n        root[isClean] = true\n        this.walkSync(root)\n      }\n      if (this.listeners.OnceExit) {\n        if (root.type === 'document') {\n          for (let subRoot of root.nodes) {\n            this.visitSync(this.listeners.OnceExit, subRoot)\n          }\n        } else {\n          this.visitSync(this.listeners.OnceExit, root)\n        }\n      }\n    }\n\n    return this.result\n  }\n\n  then(onFulfilled, onRejected) {\n    if (false) {}\n    return this.async().then(onFulfilled, onRejected)\n  }\n\n  toString() {\n    return this.css\n  }\n\n  visitSync(visitors, node) {\n    for (let [plugin, visitor] of visitors) {\n      this.result.lastPlugin = plugin\n      let promise\n      try {\n        promise = visitor(node, this.helpers)\n      } catch (e) {\n        throw this.handleError(e, node.proxyOf)\n      }\n      if (node.type !== 'root' && node.type !== 'document' && !node.parent) {\n        return true\n      }\n      if (isPromise(promise)) {\n        throw this.getAsyncError()\n      }\n    }\n  }\n\n  visitTick(stack) {\n    let visit = stack[stack.length - 1]\n    let { node, visitors } = visit\n\n    if (node.type !== 'root' && node.type !== 'document' && !node.parent) {\n      stack.pop()\n      return\n    }\n\n    if (visitors.length > 0 && visit.visitorIndex < visitors.length) {\n      let [plugin, visitor] = visitors[visit.visitorIndex]\n      visit.visitorIndex += 1\n      if (visit.visitorIndex === visitors.length) {\n        visit.visitors = []\n        visit.visitorIndex = 0\n      }\n      this.result.lastPlugin = plugin\n      try {\n        return visitor(node.toProxy(), this.helpers)\n      } catch (e) {\n        throw this.handleError(e, node)\n      }\n    }\n\n    if (visit.iterator !== 0) {\n      let iterator = visit.iterator\n      let child\n      while ((child = node.nodes[node.indexes[iterator]])) {\n        node.indexes[iterator] += 1\n        if (!child[isClean]) {\n          child[isClean] = true\n          stack.push(toStack(child))\n          return\n        }\n      }\n      visit.iterator = 0\n      delete node.indexes[iterator]\n    }\n\n    let events = visit.events\n    while (visit.eventIndex < events.length) {\n      let event = events[visit.eventIndex]\n      visit.eventIndex += 1\n      if (event === CHILDREN) {\n        if (node.nodes && node.nodes.length) {\n          node[isClean] = true\n          visit.iterator = node.getIterator()\n        }\n        return\n      } else if (this.listeners[event]) {\n        visit.visitors = this.listeners[event]\n        return\n      }\n    }\n    stack.pop()\n  }\n\n  walkSync(node) {\n    node[isClean] = true\n    let events = getEvents(node)\n    for (let event of events) {\n      if (event === CHILDREN) {\n        if (node.nodes) {\n          node.each(child => {\n            if (!child[isClean]) this.walkSync(child)\n          })\n        }\n      } else {\n        let visitors = this.listeners[event]\n        if (visitors) {\n          if (this.visitSync(visitors, node.toProxy())) return\n        }\n      }\n    }\n  }\n\n  warnings() {\n    return this.sync().warnings()\n  }\n\n  get content() {\n    return this.stringify().content\n  }\n\n  get css() {\n    return this.stringify().css\n  }\n\n  get map() {\n    return this.stringify().map\n  }\n\n  get messages() {\n    return this.sync().messages\n  }\n\n  get opts() {\n    return this.result.opts\n  }\n\n  get processor() {\n    return this.result.processor\n  }\n\n  get root() {\n    return this.sync().root\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'LazyResult'\n  }\n}\n\nLazyResult.registerPostcss = dependant => {\n  postcss = dependant\n}\n\nmodule.exports = LazyResult\nLazyResult.default = LazyResult\n\nRoot.registerLazyResult(LazyResult)\nDocument.registerLazyResult(LazyResult)\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOTY5NjYuanMiLCJtYXBwaW5ncyI6IkFBQVk7O0FBRVosZ0JBQWdCLG1CQUFPLENBQUMsS0FBYTtBQUNyQyxlQUFlLG1CQUFPLENBQUMsS0FBWTtBQUNuQyxtQkFBbUIsbUJBQU8sQ0FBQyxLQUFpQjtBQUM1QyxZQUFZLG1CQUFPLENBQUMsS0FBUztBQUM3QixhQUFhLG1CQUFPLENBQUMsS0FBVTtBQUMvQixXQUFXLG1CQUFPLENBQUMsS0FBUTtBQUMzQixnQkFBZ0IsbUJBQU8sQ0FBQyxLQUFhO0FBQ3JDLE1BQU0sY0FBYyxFQUFFLG1CQUFPLENBQUMsS0FBVztBQUN6QyxlQUFlLG1CQUFPLENBQUMsSUFBYTs7QUFFcEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQSxJQUFJO0FBQ0o7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxxQkFBcUI7QUFDckI7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQixRQUFRO0FBQ1I7QUFDQTtBQUNBLEtBQUs7QUFDTDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1IsWUFBWSxLQUFxQyxFQUFFLEVBb0IxQztBQUNUO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsK0JBQStCLE9BQU8sS0FBSyxxQkFBcUI7QUFDaEUsMENBQTBDLHdCQUF3QjtBQUNsRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQjtBQUNsQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWM7QUFDZDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxvQkFBb0IseUJBQXlCO0FBQzdDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWM7QUFDZDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLGNBQWM7QUFDZDtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQSxRQUFRLEtBQXFDLEVBQUUsRUFRMUM7QUFDTDtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLFVBQVUsaUJBQWlCOztBQUUzQjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWDtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ibG9ja2JpdGUvLi9ub2RlX21vZHVsZXMvcG9zdGNzcy9saWIvbGF6eS1yZXN1bHQuanM/YWE1ZSJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCdcblxubGV0IENvbnRhaW5lciA9IHJlcXVpcmUoJy4vY29udGFpbmVyJylcbmxldCBEb2N1bWVudCA9IHJlcXVpcmUoJy4vZG9jdW1lbnQnKVxubGV0IE1hcEdlbmVyYXRvciA9IHJlcXVpcmUoJy4vbWFwLWdlbmVyYXRvcicpXG5sZXQgcGFyc2UgPSByZXF1aXJlKCcuL3BhcnNlJylcbmxldCBSZXN1bHQgPSByZXF1aXJlKCcuL3Jlc3VsdCcpXG5sZXQgUm9vdCA9IHJlcXVpcmUoJy4vcm9vdCcpXG5sZXQgc3RyaW5naWZ5ID0gcmVxdWlyZSgnLi9zdHJpbmdpZnknKVxubGV0IHsgaXNDbGVhbiwgbXkgfSA9IHJlcXVpcmUoJy4vc3ltYm9scycpXG5sZXQgd2Fybk9uY2UgPSByZXF1aXJlKCcuL3dhcm4tb25jZScpXG5cbmNvbnN0IFRZUEVfVE9fQ0xBU1NfTkFNRSA9IHtcbiAgYXRydWxlOiAnQXRSdWxlJyxcbiAgY29tbWVudDogJ0NvbW1lbnQnLFxuICBkZWNsOiAnRGVjbGFyYXRpb24nLFxuICBkb2N1bWVudDogJ0RvY3VtZW50JyxcbiAgcm9vdDogJ1Jvb3QnLFxuICBydWxlOiAnUnVsZSdcbn1cblxuY29uc3QgUExVR0lOX1BST1BTID0ge1xuICBBdFJ1bGU6IHRydWUsXG4gIEF0UnVsZUV4aXQ6IHRydWUsXG4gIENvbW1lbnQ6IHRydWUsXG4gIENvbW1lbnRFeGl0OiB0cnVlLFxuICBEZWNsYXJhdGlvbjogdHJ1ZSxcbiAgRGVjbGFyYXRpb25FeGl0OiB0cnVlLFxuICBEb2N1bWVudDogdHJ1ZSxcbiAgRG9jdW1lbnRFeGl0OiB0cnVlLFxuICBPbmNlOiB0cnVlLFxuICBPbmNlRXhpdDogdHJ1ZSxcbiAgcG9zdGNzc1BsdWdpbjogdHJ1ZSxcbiAgcHJlcGFyZTogdHJ1ZSxcbiAgUm9vdDogdHJ1ZSxcbiAgUm9vdEV4aXQ6IHRydWUsXG4gIFJ1bGU6IHRydWUsXG4gIFJ1bGVFeGl0OiB0cnVlXG59XG5cbmNvbnN0IE5PVF9WSVNJVE9SUyA9IHtcbiAgT25jZTogdHJ1ZSxcbiAgcG9zdGNzc1BsdWdpbjogdHJ1ZSxcbiAgcHJlcGFyZTogdHJ1ZVxufVxuXG5jb25zdCBDSElMRFJFTiA9IDBcblxuZnVuY3Rpb24gaXNQcm9taXNlKG9iaikge1xuICByZXR1cm4gdHlwZW9mIG9iaiA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG9iai50aGVuID09PSAnZnVuY3Rpb24nXG59XG5cbmZ1bmN0aW9uIGdldEV2ZW50cyhub2RlKSB7XG4gIGxldCBrZXkgPSBmYWxzZVxuICBsZXQgdHlwZSA9IFRZUEVfVE9fQ0xBU1NfTkFNRVtub2RlLnR5cGVdXG4gIGlmIChub2RlLnR5cGUgPT09ICdkZWNsJykge1xuICAgIGtleSA9IG5vZGUucHJvcC50b0xvd2VyQ2FzZSgpXG4gIH0gZWxzZSBpZiAobm9kZS50eXBlID09PSAnYXRydWxlJykge1xuICAgIGtleSA9IG5vZGUubmFtZS50b0xvd2VyQ2FzZSgpXG4gIH1cblxuICBpZiAoa2V5ICYmIG5vZGUuYXBwZW5kKSB7XG4gICAgcmV0dXJuIFtcbiAgICAgIHR5cGUsXG4gICAgICB0eXBlICsgJy0nICsga2V5LFxuICAgICAgQ0hJTERSRU4sXG4gICAgICB0eXBlICsgJ0V4aXQnLFxuICAgICAgdHlwZSArICdFeGl0LScgKyBrZXlcbiAgICBdXG4gIH0gZWxzZSBpZiAoa2V5KSB7XG4gICAgcmV0dXJuIFt0eXBlLCB0eXBlICsgJy0nICsga2V5LCB0eXBlICsgJ0V4aXQnLCB0eXBlICsgJ0V4aXQtJyArIGtleV1cbiAgfSBlbHNlIGlmIChub2RlLmFwcGVuZCkge1xuICAgIHJldHVybiBbdHlwZSwgQ0hJTERSRU4sIHR5cGUgKyAnRXhpdCddXG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIFt0eXBlLCB0eXBlICsgJ0V4aXQnXVxuICB9XG59XG5cbmZ1bmN0aW9uIHRvU3RhY2sobm9kZSkge1xuICBsZXQgZXZlbnRzXG4gIGlmIChub2RlLnR5cGUgPT09ICdkb2N1bWVudCcpIHtcbiAgICBldmVudHMgPSBbJ0RvY3VtZW50JywgQ0hJTERSRU4sICdEb2N1bWVudEV4aXQnXVxuICB9IGVsc2UgaWYgKG5vZGUudHlwZSA9PT0gJ3Jvb3QnKSB7XG4gICAgZXZlbnRzID0gWydSb290JywgQ0hJTERSRU4sICdSb290RXhpdCddXG4gIH0gZWxzZSB7XG4gICAgZXZlbnRzID0gZ2V0RXZlbnRzKG5vZGUpXG4gIH1cblxuICByZXR1cm4ge1xuICAgIGV2ZW50SW5kZXg6IDAsXG4gICAgZXZlbnRzLFxuICAgIGl0ZXJhdG9yOiAwLFxuICAgIG5vZGUsXG4gICAgdmlzaXRvckluZGV4OiAwLFxuICAgIHZpc2l0b3JzOiBbXVxuICB9XG59XG5cbmZ1bmN0aW9uIGNsZWFuTWFya3Mobm9kZSkge1xuICBub2RlW2lzQ2xlYW5dID0gZmFsc2VcbiAgaWYgKG5vZGUubm9kZXMpIG5vZGUubm9kZXMuZm9yRWFjaChpID0+IGNsZWFuTWFya3MoaSkpXG4gIHJldHVybiBub2RlXG59XG5cbmxldCBwb3N0Y3NzID0ge31cblxuY2xhc3MgTGF6eVJlc3VsdCB7XG4gIGNvbnN0cnVjdG9yKHByb2Nlc3NvciwgY3NzLCBvcHRzKSB7XG4gICAgdGhpcy5zdHJpbmdpZmllZCA9IGZhbHNlXG4gICAgdGhpcy5wcm9jZXNzZWQgPSBmYWxzZVxuXG4gICAgbGV0IHJvb3RcbiAgICBpZiAoXG4gICAgICB0eXBlb2YgY3NzID09PSAnb2JqZWN0JyAmJlxuICAgICAgY3NzICE9PSBudWxsICYmXG4gICAgICAoY3NzLnR5cGUgPT09ICdyb290JyB8fCBjc3MudHlwZSA9PT0gJ2RvY3VtZW50JylcbiAgICApIHtcbiAgICAgIHJvb3QgPSBjbGVhbk1hcmtzKGNzcylcbiAgICB9IGVsc2UgaWYgKGNzcyBpbnN0YW5jZW9mIExhenlSZXN1bHQgfHwgY3NzIGluc3RhbmNlb2YgUmVzdWx0KSB7XG4gICAgICByb290ID0gY2xlYW5NYXJrcyhjc3Mucm9vdClcbiAgICAgIGlmIChjc3MubWFwKSB7XG4gICAgICAgIGlmICh0eXBlb2Ygb3B0cy5tYXAgPT09ICd1bmRlZmluZWQnKSBvcHRzLm1hcCA9IHt9XG4gICAgICAgIGlmICghb3B0cy5tYXAuaW5saW5lKSBvcHRzLm1hcC5pbmxpbmUgPSBmYWxzZVxuICAgICAgICBvcHRzLm1hcC5wcmV2ID0gY3NzLm1hcFxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBsZXQgcGFyc2VyID0gcGFyc2VcbiAgICAgIGlmIChvcHRzLnN5bnRheCkgcGFyc2VyID0gb3B0cy5zeW50YXgucGFyc2VcbiAgICAgIGlmIChvcHRzLnBhcnNlcikgcGFyc2VyID0gb3B0cy5wYXJzZXJcbiAgICAgIGlmIChwYXJzZXIucGFyc2UpIHBhcnNlciA9IHBhcnNlci5wYXJzZVxuXG4gICAgICB0cnkge1xuICAgICAgICByb290ID0gcGFyc2VyKGNzcywgb3B0cylcbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIHRoaXMucHJvY2Vzc2VkID0gdHJ1ZVxuICAgICAgICB0aGlzLmVycm9yID0gZXJyb3JcbiAgICAgIH1cblxuICAgICAgaWYgKHJvb3QgJiYgIXJvb3RbbXldKSB7XG4gICAgICAgIC8qIGM4IGlnbm9yZSBuZXh0IDIgKi9cbiAgICAgICAgQ29udGFpbmVyLnJlYnVpbGQocm9vdClcbiAgICAgIH1cbiAgICB9XG5cbiAgICB0aGlzLnJlc3VsdCA9IG5ldyBSZXN1bHQocHJvY2Vzc29yLCByb290LCBvcHRzKVxuICAgIHRoaXMuaGVscGVycyA9IHsgLi4ucG9zdGNzcywgcG9zdGNzcywgcmVzdWx0OiB0aGlzLnJlc3VsdCB9XG4gICAgdGhpcy5wbHVnaW5zID0gdGhpcy5wcm9jZXNzb3IucGx1Z2lucy5tYXAocGx1Z2luID0+IHtcbiAgICAgIGlmICh0eXBlb2YgcGx1Z2luID09PSAnb2JqZWN0JyAmJiBwbHVnaW4ucHJlcGFyZSkge1xuICAgICAgICByZXR1cm4geyAuLi5wbHVnaW4sIC4uLnBsdWdpbi5wcmVwYXJlKHRoaXMucmVzdWx0KSB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gcGx1Z2luXG4gICAgICB9XG4gICAgfSlcbiAgfVxuXG4gIGFzeW5jKCkge1xuICAgIGlmICh0aGlzLmVycm9yKSByZXR1cm4gUHJvbWlzZS5yZWplY3QodGhpcy5lcnJvcilcbiAgICBpZiAodGhpcy5wcm9jZXNzZWQpIHJldHVybiBQcm9taXNlLnJlc29sdmUodGhpcy5yZXN1bHQpXG4gICAgaWYgKCF0aGlzLnByb2Nlc3NpbmcpIHtcbiAgICAgIHRoaXMucHJvY2Vzc2luZyA9IHRoaXMucnVuQXN5bmMoKVxuICAgIH1cbiAgICByZXR1cm4gdGhpcy5wcm9jZXNzaW5nXG4gIH1cblxuICBjYXRjaChvblJlamVjdGVkKSB7XG4gICAgcmV0dXJuIHRoaXMuYXN5bmMoKS5jYXRjaChvblJlamVjdGVkKVxuICB9XG5cbiAgZmluYWxseShvbkZpbmFsbHkpIHtcbiAgICByZXR1cm4gdGhpcy5hc3luYygpLnRoZW4ob25GaW5hbGx5LCBvbkZpbmFsbHkpXG4gIH1cblxuICBnZXRBc3luY0Vycm9yKCkge1xuICAgIHRocm93IG5ldyBFcnJvcignVXNlIHByb2Nlc3MoY3NzKS50aGVuKGNiKSB0byB3b3JrIHdpdGggYXN5bmMgcGx1Z2lucycpXG4gIH1cblxuICBoYW5kbGVFcnJvcihlcnJvciwgbm9kZSkge1xuICAgIGxldCBwbHVnaW4gPSB0aGlzLnJlc3VsdC5sYXN0UGx1Z2luXG4gICAgdHJ5IHtcbiAgICAgIGlmIChub2RlKSBub2RlLmFkZFRvRXJyb3IoZXJyb3IpXG4gICAgICB0aGlzLmVycm9yID0gZXJyb3JcbiAgICAgIGlmIChlcnJvci5uYW1lID09PSAnQ3NzU3ludGF4RXJyb3InICYmICFlcnJvci5wbHVnaW4pIHtcbiAgICAgICAgZXJyb3IucGx1Z2luID0gcGx1Z2luLnBvc3Rjc3NQbHVnaW5cbiAgICAgICAgZXJyb3Iuc2V0TWVzc2FnZSgpXG4gICAgICB9IGVsc2UgaWYgKHBsdWdpbi5wb3N0Y3NzVmVyc2lvbikge1xuICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICAgIGxldCBwbHVnaW5OYW1lID0gcGx1Z2luLnBvc3Rjc3NQbHVnaW5cbiAgICAgICAgICBsZXQgcGx1Z2luVmVyID0gcGx1Z2luLnBvc3Rjc3NWZXJzaW9uXG4gICAgICAgICAgbGV0IHJ1bnRpbWVWZXIgPSB0aGlzLnJlc3VsdC5wcm9jZXNzb3IudmVyc2lvblxuICAgICAgICAgIGxldCBhID0gcGx1Z2luVmVyLnNwbGl0KCcuJylcbiAgICAgICAgICBsZXQgYiA9IHJ1bnRpbWVWZXIuc3BsaXQoJy4nKVxuXG4gICAgICAgICAgaWYgKGFbMF0gIT09IGJbMF0gfHwgcGFyc2VJbnQoYVsxXSkgPiBwYXJzZUludChiWzFdKSkge1xuICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnNvbGVcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoXG4gICAgICAgICAgICAgICdVbmtub3duIGVycm9yIGZyb20gUG9zdENTUyBwbHVnaW4uIFlvdXIgY3VycmVudCBQb3N0Q1NTICcgK1xuICAgICAgICAgICAgICAgICd2ZXJzaW9uIGlzICcgK1xuICAgICAgICAgICAgICAgIHJ1bnRpbWVWZXIgK1xuICAgICAgICAgICAgICAgICcsIGJ1dCAnICtcbiAgICAgICAgICAgICAgICBwbHVnaW5OYW1lICtcbiAgICAgICAgICAgICAgICAnIHVzZXMgJyArXG4gICAgICAgICAgICAgICAgcGx1Z2luVmVyICtcbiAgICAgICAgICAgICAgICAnLiBQZXJoYXBzIHRoaXMgaXMgdGhlIHNvdXJjZSBvZiB0aGUgZXJyb3IgYmVsb3cuJ1xuICAgICAgICAgICAgKVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgLyogYzggaWdub3JlIG5leHQgMyAqL1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnNvbGVcbiAgICAgIGlmIChjb25zb2xlICYmIGNvbnNvbGUuZXJyb3IpIGNvbnNvbGUuZXJyb3IoZXJyKVxuICAgIH1cbiAgICByZXR1cm4gZXJyb3JcbiAgfVxuXG4gIHByZXBhcmVWaXNpdG9ycygpIHtcbiAgICB0aGlzLmxpc3RlbmVycyA9IHt9XG4gICAgbGV0IGFkZCA9IChwbHVnaW4sIHR5cGUsIGNiKSA9PiB7XG4gICAgICBpZiAoIXRoaXMubGlzdGVuZXJzW3R5cGVdKSB0aGlzLmxpc3RlbmVyc1t0eXBlXSA9IFtdXG4gICAgICB0aGlzLmxpc3RlbmVyc1t0eXBlXS5wdXNoKFtwbHVnaW4sIGNiXSlcbiAgICB9XG4gICAgZm9yIChsZXQgcGx1Z2luIG9mIHRoaXMucGx1Z2lucykge1xuICAgICAgaWYgKHR5cGVvZiBwbHVnaW4gPT09ICdvYmplY3QnKSB7XG4gICAgICAgIGZvciAobGV0IGV2ZW50IGluIHBsdWdpbikge1xuICAgICAgICAgIGlmICghUExVR0lOX1BST1BTW2V2ZW50XSAmJiAvXltBLVpdLy50ZXN0KGV2ZW50KSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAgICAgICBgVW5rbm93biBldmVudCAke2V2ZW50fSBpbiAke3BsdWdpbi5wb3N0Y3NzUGx1Z2lufS4gYCArXG4gICAgICAgICAgICAgICAgYFRyeSB0byB1cGRhdGUgUG9zdENTUyAoJHt0aGlzLnByb2Nlc3Nvci52ZXJzaW9ufSBub3cpLmBcbiAgICAgICAgICAgIClcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKCFOT1RfVklTSVRPUlNbZXZlbnRdKSB7XG4gICAgICAgICAgICBpZiAodHlwZW9mIHBsdWdpbltldmVudF0gPT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgICAgIGZvciAobGV0IGZpbHRlciBpbiBwbHVnaW5bZXZlbnRdKSB7XG4gICAgICAgICAgICAgICAgaWYgKGZpbHRlciA9PT0gJyonKSB7XG4gICAgICAgICAgICAgICAgICBhZGQocGx1Z2luLCBldmVudCwgcGx1Z2luW2V2ZW50XVtmaWx0ZXJdKVxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICBhZGQoXG4gICAgICAgICAgICAgICAgICAgIHBsdWdpbixcbiAgICAgICAgICAgICAgICAgICAgZXZlbnQgKyAnLScgKyBmaWx0ZXIudG9Mb3dlckNhc2UoKSxcbiAgICAgICAgICAgICAgICAgICAgcGx1Z2luW2V2ZW50XVtmaWx0ZXJdXG4gICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiBwbHVnaW5bZXZlbnRdID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAgIGFkZChwbHVnaW4sIGV2ZW50LCBwbHVnaW5bZXZlbnRdKVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICB0aGlzLmhhc0xpc3RlbmVyID0gT2JqZWN0LmtleXModGhpcy5saXN0ZW5lcnMpLmxlbmd0aCA+IDBcbiAgfVxuXG4gIGFzeW5jIHJ1bkFzeW5jKCkge1xuICAgIHRoaXMucGx1Z2luID0gMFxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5wbHVnaW5zLmxlbmd0aDsgaSsrKSB7XG4gICAgICBsZXQgcGx1Z2luID0gdGhpcy5wbHVnaW5zW2ldXG4gICAgICBsZXQgcHJvbWlzZSA9IHRoaXMucnVuT25Sb290KHBsdWdpbilcbiAgICAgIGlmIChpc1Byb21pc2UocHJvbWlzZSkpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBhd2FpdCBwcm9taXNlXG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgdGhyb3cgdGhpcy5oYW5kbGVFcnJvcihlcnJvcilcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMucHJlcGFyZVZpc2l0b3JzKClcbiAgICBpZiAodGhpcy5oYXNMaXN0ZW5lcikge1xuICAgICAgbGV0IHJvb3QgPSB0aGlzLnJlc3VsdC5yb290XG4gICAgICB3aGlsZSAoIXJvb3RbaXNDbGVhbl0pIHtcbiAgICAgICAgcm9vdFtpc0NsZWFuXSA9IHRydWVcbiAgICAgICAgbGV0IHN0YWNrID0gW3RvU3RhY2socm9vdCldXG4gICAgICAgIHdoaWxlIChzdGFjay5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgbGV0IHByb21pc2UgPSB0aGlzLnZpc2l0VGljayhzdGFjaylcbiAgICAgICAgICBpZiAoaXNQcm9taXNlKHByb21pc2UpKSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICBhd2FpdCBwcm9taXNlXG4gICAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgIGxldCBub2RlID0gc3RhY2tbc3RhY2subGVuZ3RoIC0gMV0ubm9kZVxuICAgICAgICAgICAgICB0aHJvdyB0aGlzLmhhbmRsZUVycm9yKGUsIG5vZGUpXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLmxpc3RlbmVycy5PbmNlRXhpdCkge1xuICAgICAgICBmb3IgKGxldCBbcGx1Z2luLCB2aXNpdG9yXSBvZiB0aGlzLmxpc3RlbmVycy5PbmNlRXhpdCkge1xuICAgICAgICAgIHRoaXMucmVzdWx0Lmxhc3RQbHVnaW4gPSBwbHVnaW5cbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgaWYgKHJvb3QudHlwZSA9PT0gJ2RvY3VtZW50Jykge1xuICAgICAgICAgICAgICBsZXQgcm9vdHMgPSByb290Lm5vZGVzLm1hcChzdWJSb290ID0+XG4gICAgICAgICAgICAgICAgdmlzaXRvcihzdWJSb290LCB0aGlzLmhlbHBlcnMpXG4gICAgICAgICAgICAgIClcblxuICAgICAgICAgICAgICBhd2FpdCBQcm9taXNlLmFsbChyb290cylcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIGF3YWl0IHZpc2l0b3Iocm9vdCwgdGhpcy5oZWxwZXJzKVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIHRocm93IHRoaXMuaGFuZGxlRXJyb3IoZSlcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICB0aGlzLnByb2Nlc3NlZCA9IHRydWVcbiAgICByZXR1cm4gdGhpcy5zdHJpbmdpZnkoKVxuICB9XG5cbiAgcnVuT25Sb290KHBsdWdpbikge1xuICAgIHRoaXMucmVzdWx0Lmxhc3RQbHVnaW4gPSBwbHVnaW5cbiAgICB0cnkge1xuICAgICAgaWYgKHR5cGVvZiBwbHVnaW4gPT09ICdvYmplY3QnICYmIHBsdWdpbi5PbmNlKSB7XG4gICAgICAgIGlmICh0aGlzLnJlc3VsdC5yb290LnR5cGUgPT09ICdkb2N1bWVudCcpIHtcbiAgICAgICAgICBsZXQgcm9vdHMgPSB0aGlzLnJlc3VsdC5yb290Lm5vZGVzLm1hcChyb290ID0+XG4gICAgICAgICAgICBwbHVnaW4uT25jZShyb290LCB0aGlzLmhlbHBlcnMpXG4gICAgICAgICAgKVxuXG4gICAgICAgICAgaWYgKGlzUHJvbWlzZShyb290c1swXSkpIHtcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLmFsbChyb290cylcbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZXR1cm4gcm9vdHNcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBwbHVnaW4uT25jZSh0aGlzLnJlc3VsdC5yb290LCB0aGlzLmhlbHBlcnMpXG4gICAgICB9IGVsc2UgaWYgKHR5cGVvZiBwbHVnaW4gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgcmV0dXJuIHBsdWdpbih0aGlzLnJlc3VsdC5yb290LCB0aGlzLnJlc3VsdClcbiAgICAgIH1cbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgdGhyb3cgdGhpcy5oYW5kbGVFcnJvcihlcnJvcilcbiAgICB9XG4gIH1cblxuICBzdHJpbmdpZnkoKSB7XG4gICAgaWYgKHRoaXMuZXJyb3IpIHRocm93IHRoaXMuZXJyb3JcbiAgICBpZiAodGhpcy5zdHJpbmdpZmllZCkgcmV0dXJuIHRoaXMucmVzdWx0XG4gICAgdGhpcy5zdHJpbmdpZmllZCA9IHRydWVcblxuICAgIHRoaXMuc3luYygpXG5cbiAgICBsZXQgb3B0cyA9IHRoaXMucmVzdWx0Lm9wdHNcbiAgICBsZXQgc3RyID0gc3RyaW5naWZ5XG4gICAgaWYgKG9wdHMuc3ludGF4KSBzdHIgPSBvcHRzLnN5bnRheC5zdHJpbmdpZnlcbiAgICBpZiAob3B0cy5zdHJpbmdpZmllcikgc3RyID0gb3B0cy5zdHJpbmdpZmllclxuICAgIGlmIChzdHIuc3RyaW5naWZ5KSBzdHIgPSBzdHIuc3RyaW5naWZ5XG5cbiAgICBsZXQgbWFwID0gbmV3IE1hcEdlbmVyYXRvcihzdHIsIHRoaXMucmVzdWx0LnJvb3QsIHRoaXMucmVzdWx0Lm9wdHMpXG4gICAgbGV0IGRhdGEgPSBtYXAuZ2VuZXJhdGUoKVxuICAgIHRoaXMucmVzdWx0LmNzcyA9IGRhdGFbMF1cbiAgICB0aGlzLnJlc3VsdC5tYXAgPSBkYXRhWzFdXG5cbiAgICByZXR1cm4gdGhpcy5yZXN1bHRcbiAgfVxuXG4gIHN5bmMoKSB7XG4gICAgaWYgKHRoaXMuZXJyb3IpIHRocm93IHRoaXMuZXJyb3JcbiAgICBpZiAodGhpcy5wcm9jZXNzZWQpIHJldHVybiB0aGlzLnJlc3VsdFxuICAgIHRoaXMucHJvY2Vzc2VkID0gdHJ1ZVxuXG4gICAgaWYgKHRoaXMucHJvY2Vzc2luZykge1xuICAgICAgdGhyb3cgdGhpcy5nZXRBc3luY0Vycm9yKClcbiAgICB9XG5cbiAgICBmb3IgKGxldCBwbHVnaW4gb2YgdGhpcy5wbHVnaW5zKSB7XG4gICAgICBsZXQgcHJvbWlzZSA9IHRoaXMucnVuT25Sb290KHBsdWdpbilcbiAgICAgIGlmIChpc1Byb21pc2UocHJvbWlzZSkpIHtcbiAgICAgICAgdGhyb3cgdGhpcy5nZXRBc3luY0Vycm9yKClcbiAgICAgIH1cbiAgICB9XG5cbiAgICB0aGlzLnByZXBhcmVWaXNpdG9ycygpXG4gICAgaWYgKHRoaXMuaGFzTGlzdGVuZXIpIHtcbiAgICAgIGxldCByb290ID0gdGhpcy5yZXN1bHQucm9vdFxuICAgICAgd2hpbGUgKCFyb290W2lzQ2xlYW5dKSB7XG4gICAgICAgIHJvb3RbaXNDbGVhbl0gPSB0cnVlXG4gICAgICAgIHRoaXMud2Fsa1N5bmMocm9vdClcbiAgICAgIH1cbiAgICAgIGlmICh0aGlzLmxpc3RlbmVycy5PbmNlRXhpdCkge1xuICAgICAgICBpZiAocm9vdC50eXBlID09PSAnZG9jdW1lbnQnKSB7XG4gICAgICAgICAgZm9yIChsZXQgc3ViUm9vdCBvZiByb290Lm5vZGVzKSB7XG4gICAgICAgICAgICB0aGlzLnZpc2l0U3luYyh0aGlzLmxpc3RlbmVycy5PbmNlRXhpdCwgc3ViUm9vdClcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhpcy52aXNpdFN5bmModGhpcy5saXN0ZW5lcnMuT25jZUV4aXQsIHJvb3QpXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5yZXN1bHRcbiAgfVxuXG4gIHRoZW4ob25GdWxmaWxsZWQsIG9uUmVqZWN0ZWQpIHtcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgaWYgKCEoJ2Zyb20nIGluIHRoaXMub3B0cykpIHtcbiAgICAgICAgd2Fybk9uY2UoXG4gICAgICAgICAgJ1dpdGhvdXQgYGZyb21gIG9wdGlvbiBQb3N0Q1NTIGNvdWxkIGdlbmVyYXRlIHdyb25nIHNvdXJjZSBtYXAgJyArXG4gICAgICAgICAgICAnYW5kIHdpbGwgbm90IGZpbmQgQnJvd3NlcnNsaXN0IGNvbmZpZy4gU2V0IGl0IHRvIENTUyBmaWxlIHBhdGggJyArXG4gICAgICAgICAgICAnb3IgdG8gYHVuZGVmaW5lZGAgdG8gcHJldmVudCB0aGlzIHdhcm5pbmcuJ1xuICAgICAgICApXG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0aGlzLmFzeW5jKCkudGhlbihvbkZ1bGZpbGxlZCwgb25SZWplY3RlZClcbiAgfVxuXG4gIHRvU3RyaW5nKCkge1xuICAgIHJldHVybiB0aGlzLmNzc1xuICB9XG5cbiAgdmlzaXRTeW5jKHZpc2l0b3JzLCBub2RlKSB7XG4gICAgZm9yIChsZXQgW3BsdWdpbiwgdmlzaXRvcl0gb2YgdmlzaXRvcnMpIHtcbiAgICAgIHRoaXMucmVzdWx0Lmxhc3RQbHVnaW4gPSBwbHVnaW5cbiAgICAgIGxldCBwcm9taXNlXG4gICAgICB0cnkge1xuICAgICAgICBwcm9taXNlID0gdmlzaXRvcihub2RlLCB0aGlzLmhlbHBlcnMpXG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIHRocm93IHRoaXMuaGFuZGxlRXJyb3IoZSwgbm9kZS5wcm94eU9mKVxuICAgICAgfVxuICAgICAgaWYgKG5vZGUudHlwZSAhPT0gJ3Jvb3QnICYmIG5vZGUudHlwZSAhPT0gJ2RvY3VtZW50JyAmJiAhbm9kZS5wYXJlbnQpIHtcbiAgICAgICAgcmV0dXJuIHRydWVcbiAgICAgIH1cbiAgICAgIGlmIChpc1Byb21pc2UocHJvbWlzZSkpIHtcbiAgICAgICAgdGhyb3cgdGhpcy5nZXRBc3luY0Vycm9yKClcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICB2aXNpdFRpY2soc3RhY2spIHtcbiAgICBsZXQgdmlzaXQgPSBzdGFja1tzdGFjay5sZW5ndGggLSAxXVxuICAgIGxldCB7IG5vZGUsIHZpc2l0b3JzIH0gPSB2aXNpdFxuXG4gICAgaWYgKG5vZGUudHlwZSAhPT0gJ3Jvb3QnICYmIG5vZGUudHlwZSAhPT0gJ2RvY3VtZW50JyAmJiAhbm9kZS5wYXJlbnQpIHtcbiAgICAgIHN0YWNrLnBvcCgpXG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICBpZiAodmlzaXRvcnMubGVuZ3RoID4gMCAmJiB2aXNpdC52aXNpdG9ySW5kZXggPCB2aXNpdG9ycy5sZW5ndGgpIHtcbiAgICAgIGxldCBbcGx1Z2luLCB2aXNpdG9yXSA9IHZpc2l0b3JzW3Zpc2l0LnZpc2l0b3JJbmRleF1cbiAgICAgIHZpc2l0LnZpc2l0b3JJbmRleCArPSAxXG4gICAgICBpZiAodmlzaXQudmlzaXRvckluZGV4ID09PSB2aXNpdG9ycy5sZW5ndGgpIHtcbiAgICAgICAgdmlzaXQudmlzaXRvcnMgPSBbXVxuICAgICAgICB2aXNpdC52aXNpdG9ySW5kZXggPSAwXG4gICAgICB9XG4gICAgICB0aGlzLnJlc3VsdC5sYXN0UGx1Z2luID0gcGx1Z2luXG4gICAgICB0cnkge1xuICAgICAgICByZXR1cm4gdmlzaXRvcihub2RlLnRvUHJveHkoKSwgdGhpcy5oZWxwZXJzKVxuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICB0aHJvdyB0aGlzLmhhbmRsZUVycm9yKGUsIG5vZGUpXG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHZpc2l0Lml0ZXJhdG9yICE9PSAwKSB7XG4gICAgICBsZXQgaXRlcmF0b3IgPSB2aXNpdC5pdGVyYXRvclxuICAgICAgbGV0IGNoaWxkXG4gICAgICB3aGlsZSAoKGNoaWxkID0gbm9kZS5ub2Rlc1tub2RlLmluZGV4ZXNbaXRlcmF0b3JdXSkpIHtcbiAgICAgICAgbm9kZS5pbmRleGVzW2l0ZXJhdG9yXSArPSAxXG4gICAgICAgIGlmICghY2hpbGRbaXNDbGVhbl0pIHtcbiAgICAgICAgICBjaGlsZFtpc0NsZWFuXSA9IHRydWVcbiAgICAgICAgICBzdGFjay5wdXNoKHRvU3RhY2soY2hpbGQpKVxuICAgICAgICAgIHJldHVyblxuICAgICAgICB9XG4gICAgICB9XG4gICAgICB2aXNpdC5pdGVyYXRvciA9IDBcbiAgICAgIGRlbGV0ZSBub2RlLmluZGV4ZXNbaXRlcmF0b3JdXG4gICAgfVxuXG4gICAgbGV0IGV2ZW50cyA9IHZpc2l0LmV2ZW50c1xuICAgIHdoaWxlICh2aXNpdC5ldmVudEluZGV4IDwgZXZlbnRzLmxlbmd0aCkge1xuICAgICAgbGV0IGV2ZW50ID0gZXZlbnRzW3Zpc2l0LmV2ZW50SW5kZXhdXG4gICAgICB2aXNpdC5ldmVudEluZGV4ICs9IDFcbiAgICAgIGlmIChldmVudCA9PT0gQ0hJTERSRU4pIHtcbiAgICAgICAgaWYgKG5vZGUubm9kZXMgJiYgbm9kZS5ub2Rlcy5sZW5ndGgpIHtcbiAgICAgICAgICBub2RlW2lzQ2xlYW5dID0gdHJ1ZVxuICAgICAgICAgIHZpc2l0Lml0ZXJhdG9yID0gbm9kZS5nZXRJdGVyYXRvcigpXG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuXG4gICAgICB9IGVsc2UgaWYgKHRoaXMubGlzdGVuZXJzW2V2ZW50XSkge1xuICAgICAgICB2aXNpdC52aXNpdG9ycyA9IHRoaXMubGlzdGVuZXJzW2V2ZW50XVxuICAgICAgICByZXR1cm5cbiAgICAgIH1cbiAgICB9XG4gICAgc3RhY2sucG9wKClcbiAgfVxuXG4gIHdhbGtTeW5jKG5vZGUpIHtcbiAgICBub2RlW2lzQ2xlYW5dID0gdHJ1ZVxuICAgIGxldCBldmVudHMgPSBnZXRFdmVudHMobm9kZSlcbiAgICBmb3IgKGxldCBldmVudCBvZiBldmVudHMpIHtcbiAgICAgIGlmIChldmVudCA9PT0gQ0hJTERSRU4pIHtcbiAgICAgICAgaWYgKG5vZGUubm9kZXMpIHtcbiAgICAgICAgICBub2RlLmVhY2goY2hpbGQgPT4ge1xuICAgICAgICAgICAgaWYgKCFjaGlsZFtpc0NsZWFuXSkgdGhpcy53YWxrU3luYyhjaGlsZClcbiAgICAgICAgICB9KVxuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBsZXQgdmlzaXRvcnMgPSB0aGlzLmxpc3RlbmVyc1tldmVudF1cbiAgICAgICAgaWYgKHZpc2l0b3JzKSB7XG4gICAgICAgICAgaWYgKHRoaXMudmlzaXRTeW5jKHZpc2l0b3JzLCBub2RlLnRvUHJveHkoKSkpIHJldHVyblxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgd2FybmluZ3MoKSB7XG4gICAgcmV0dXJuIHRoaXMuc3luYygpLndhcm5pbmdzKClcbiAgfVxuXG4gIGdldCBjb250ZW50KCkge1xuICAgIHJldHVybiB0aGlzLnN0cmluZ2lmeSgpLmNvbnRlbnRcbiAgfVxuXG4gIGdldCBjc3MoKSB7XG4gICAgcmV0dXJuIHRoaXMuc3RyaW5naWZ5KCkuY3NzXG4gIH1cblxuICBnZXQgbWFwKCkge1xuICAgIHJldHVybiB0aGlzLnN0cmluZ2lmeSgpLm1hcFxuICB9XG5cbiAgZ2V0IG1lc3NhZ2VzKCkge1xuICAgIHJldHVybiB0aGlzLnN5bmMoKS5tZXNzYWdlc1xuICB9XG5cbiAgZ2V0IG9wdHMoKSB7XG4gICAgcmV0dXJuIHRoaXMucmVzdWx0Lm9wdHNcbiAgfVxuXG4gIGdldCBwcm9jZXNzb3IoKSB7XG4gICAgcmV0dXJuIHRoaXMucmVzdWx0LnByb2Nlc3NvclxuICB9XG5cbiAgZ2V0IHJvb3QoKSB7XG4gICAgcmV0dXJuIHRoaXMuc3luYygpLnJvb3RcbiAgfVxuXG4gIGdldCBbU3ltYm9sLnRvU3RyaW5nVGFnXSgpIHtcbiAgICByZXR1cm4gJ0xhenlSZXN1bHQnXG4gIH1cbn1cblxuTGF6eVJlc3VsdC5yZWdpc3RlclBvc3Rjc3MgPSBkZXBlbmRhbnQgPT4ge1xuICBwb3N0Y3NzID0gZGVwZW5kYW50XG59XG5cbm1vZHVsZS5leHBvcnRzID0gTGF6eVJlc3VsdFxuTGF6eVJlc3VsdC5kZWZhdWx0ID0gTGF6eVJlc3VsdFxuXG5Sb290LnJlZ2lzdGVyTGF6eVJlc3VsdChMYXp5UmVzdWx0KVxuRG9jdW1lbnQucmVnaXN0ZXJMYXp5UmVzdWx0KExhenlSZXN1bHQpXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///96966\n")},81752:module=>{"use strict";eval("\n\nlet list = {\n  comma(string) {\n    return list.split(string, [','], true)\n  },\n\n  space(string) {\n    let spaces = [' ', '\\n', '\\t']\n    return list.split(string, spaces)\n  },\n\n  split(string, separators, last) {\n    let array = []\n    let current = ''\n    let split = false\n\n    let func = 0\n    let inQuote = false\n    let prevQuote = ''\n    let escape = false\n\n    for (let letter of string) {\n      if (escape) {\n        escape = false\n      } else if (letter === '\\\\') {\n        escape = true\n      } else if (inQuote) {\n        if (letter === prevQuote) {\n          inQuote = false\n        }\n      } else if (letter === '\"' || letter === \"'\") {\n        inQuote = true\n        prevQuote = letter\n      } else if (letter === '(') {\n        func += 1\n      } else if (letter === ')') {\n        if (func > 0) func -= 1\n      } else if (func === 0) {\n        if (separators.includes(letter)) split = true\n      }\n\n      if (split) {\n        if (current !== '') array.push(current.trim())\n        current = ''\n        split = false\n      } else {\n        current += letter\n      }\n    }\n\n    if (last || current !== '') array.push(current.trim())\n    return array\n  }\n}\n\nmodule.exports = list\nlist.default = list\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiODE3NTIuanMiLCJtYXBwaW5ncyI6IkFBQVk7O0FBRVo7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBLFFBQVE7QUFDUjtBQUNBLFFBQVE7QUFDUjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYmxvY2tiaXRlLy4vbm9kZV9tb2R1bGVzL3Bvc3Rjc3MvbGliL2xpc3QuanM/OTNhMiJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCdcblxubGV0IGxpc3QgPSB7XG4gIGNvbW1hKHN0cmluZykge1xuICAgIHJldHVybiBsaXN0LnNwbGl0KHN0cmluZywgWycsJ10sIHRydWUpXG4gIH0sXG5cbiAgc3BhY2Uoc3RyaW5nKSB7XG4gICAgbGV0IHNwYWNlcyA9IFsnICcsICdcXG4nLCAnXFx0J11cbiAgICByZXR1cm4gbGlzdC5zcGxpdChzdHJpbmcsIHNwYWNlcylcbiAgfSxcblxuICBzcGxpdChzdHJpbmcsIHNlcGFyYXRvcnMsIGxhc3QpIHtcbiAgICBsZXQgYXJyYXkgPSBbXVxuICAgIGxldCBjdXJyZW50ID0gJydcbiAgICBsZXQgc3BsaXQgPSBmYWxzZVxuXG4gICAgbGV0IGZ1bmMgPSAwXG4gICAgbGV0IGluUXVvdGUgPSBmYWxzZVxuICAgIGxldCBwcmV2UXVvdGUgPSAnJ1xuICAgIGxldCBlc2NhcGUgPSBmYWxzZVxuXG4gICAgZm9yIChsZXQgbGV0dGVyIG9mIHN0cmluZykge1xuICAgICAgaWYgKGVzY2FwZSkge1xuICAgICAgICBlc2NhcGUgPSBmYWxzZVxuICAgICAgfSBlbHNlIGlmIChsZXR0ZXIgPT09ICdcXFxcJykge1xuICAgICAgICBlc2NhcGUgPSB0cnVlXG4gICAgICB9IGVsc2UgaWYgKGluUXVvdGUpIHtcbiAgICAgICAgaWYgKGxldHRlciA9PT0gcHJldlF1b3RlKSB7XG4gICAgICAgICAgaW5RdW90ZSA9IGZhbHNlXG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAobGV0dGVyID09PSAnXCInIHx8IGxldHRlciA9PT0gXCInXCIpIHtcbiAgICAgICAgaW5RdW90ZSA9IHRydWVcbiAgICAgICAgcHJldlF1b3RlID0gbGV0dGVyXG4gICAgICB9IGVsc2UgaWYgKGxldHRlciA9PT0gJygnKSB7XG4gICAgICAgIGZ1bmMgKz0gMVxuICAgICAgfSBlbHNlIGlmIChsZXR0ZXIgPT09ICcpJykge1xuICAgICAgICBpZiAoZnVuYyA+IDApIGZ1bmMgLT0gMVxuICAgICAgfSBlbHNlIGlmIChmdW5jID09PSAwKSB7XG4gICAgICAgIGlmIChzZXBhcmF0b3JzLmluY2x1ZGVzKGxldHRlcikpIHNwbGl0ID0gdHJ1ZVxuICAgICAgfVxuXG4gICAgICBpZiAoc3BsaXQpIHtcbiAgICAgICAgaWYgKGN1cnJlbnQgIT09ICcnKSBhcnJheS5wdXNoKGN1cnJlbnQudHJpbSgpKVxuICAgICAgICBjdXJyZW50ID0gJydcbiAgICAgICAgc3BsaXQgPSBmYWxzZVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY3VycmVudCArPSBsZXR0ZXJcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAobGFzdCB8fCBjdXJyZW50ICE9PSAnJykgYXJyYXkucHVzaChjdXJyZW50LnRyaW0oKSlcbiAgICByZXR1cm4gYXJyYXlcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGxpc3Rcbmxpc3QuZGVmYXVsdCA9IGxpc3RcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///81752\n")},13604:(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval("\n\nlet { dirname, relative, resolve, sep } = __webpack_require__(197)\nlet { SourceMapConsumer, SourceMapGenerator } = __webpack_require__(21866)\nlet { pathToFileURL } = __webpack_require__(52739)\n\nlet Input = __webpack_require__(61106)\n\nlet sourceMapAvailable = Boolean(SourceMapConsumer && SourceMapGenerator)\nlet pathAvailable = Boolean(dirname && resolve && relative && sep)\n\nclass MapGenerator {\n  constructor(stringify, root, opts, cssString) {\n    this.stringify = stringify\n    this.mapOpts = opts.map || {}\n    this.root = root\n    this.opts = opts\n    this.css = cssString\n    this.originalCSS = cssString\n    this.usesFileUrls = !this.mapOpts.from && this.mapOpts.absolute\n\n    this.memoizedFileURLs = new Map()\n    this.memoizedPaths = new Map()\n    this.memoizedURLs = new Map()\n  }\n\n  addAnnotation() {\n    let content\n\n    if (this.isInline()) {\n      content =\n        'data:application/json;base64,' + this.toBase64(this.map.toString())\n    } else if (typeof this.mapOpts.annotation === 'string') {\n      content = this.mapOpts.annotation\n    } else if (typeof this.mapOpts.annotation === 'function') {\n      content = this.mapOpts.annotation(this.opts.to, this.root)\n    } else {\n      content = this.outputFile() + '.map'\n    }\n    let eol = '\\n'\n    if (this.css.includes('\\r\\n')) eol = '\\r\\n'\n\n    this.css += eol + '/*# sourceMappingURL=' + content + ' */'\n  }\n\n  applyPrevMaps() {\n    for (let prev of this.previous()) {\n      let from = this.toUrl(this.path(prev.file))\n      let root = prev.root || dirname(prev.file)\n      let map\n\n      if (this.mapOpts.sourcesContent === false) {\n        map = new SourceMapConsumer(prev.text)\n        if (map.sourcesContent) {\n          map.sourcesContent = null\n        }\n      } else {\n        map = prev.consumer()\n      }\n\n      this.map.applySourceMap(map, from, this.toUrl(this.path(root)))\n    }\n  }\n\n  clearAnnotation() {\n    if (this.mapOpts.annotation === false) return\n\n    if (this.root) {\n      let node\n      for (let i = this.root.nodes.length - 1; i >= 0; i--) {\n        node = this.root.nodes[i]\n        if (node.type !== 'comment') continue\n        if (node.text.startsWith('# sourceMappingURL=')) {\n          this.root.removeChild(i)\n        }\n      }\n    } else if (this.css) {\n      this.css = this.css.replace(/\\n*\\/\\*#[\\S\\s]*?\\*\\/$/gm, '')\n    }\n  }\n\n  generate() {\n    this.clearAnnotation()\n    if (pathAvailable && sourceMapAvailable && this.isMap()) {\n      return this.generateMap()\n    } else {\n      let result = ''\n      this.stringify(this.root, i => {\n        result += i\n      })\n      return [result]\n    }\n  }\n\n  generateMap() {\n    if (this.root) {\n      this.generateString()\n    } else if (this.previous().length === 1) {\n      let prev = this.previous()[0].consumer()\n      prev.file = this.outputFile()\n      this.map = SourceMapGenerator.fromSourceMap(prev, {\n        ignoreInvalidMapping: true\n      })\n    } else {\n      this.map = new SourceMapGenerator({\n        file: this.outputFile(),\n        ignoreInvalidMapping: true\n      })\n      this.map.addMapping({\n        generated: { column: 0, line: 1 },\n        original: { column: 0, line: 1 },\n        source: this.opts.from\n          ? this.toUrl(this.path(this.opts.from))\n          : '<no source>'\n      })\n    }\n\n    if (this.isSourcesContent()) this.setSourcesContent()\n    if (this.root && this.previous().length > 0) this.applyPrevMaps()\n    if (this.isAnnotation()) this.addAnnotation()\n\n    if (this.isInline()) {\n      return [this.css]\n    } else {\n      return [this.css, this.map]\n    }\n  }\n\n  generateString() {\n    this.css = ''\n    this.map = new SourceMapGenerator({\n      file: this.outputFile(),\n      ignoreInvalidMapping: true\n    })\n\n    let line = 1\n    let column = 1\n\n    let noSource = '<no source>'\n    let mapping = {\n      generated: { column: 0, line: 0 },\n      original: { column: 0, line: 0 },\n      source: ''\n    }\n\n    let last, lines\n    this.stringify(this.root, (str, node, type) => {\n      this.css += str\n\n      if (node && type !== 'end') {\n        mapping.generated.line = line\n        mapping.generated.column = column - 1\n        if (node.source && node.source.start) {\n          mapping.source = this.sourcePath(node)\n          mapping.original.line = node.source.start.line\n          mapping.original.column = node.source.start.column - 1\n          this.map.addMapping(mapping)\n        } else {\n          mapping.source = noSource\n          mapping.original.line = 1\n          mapping.original.column = 0\n          this.map.addMapping(mapping)\n        }\n      }\n\n      lines = str.match(/\\n/g)\n      if (lines) {\n        line += lines.length\n        last = str.lastIndexOf('\\n')\n        column = str.length - last\n      } else {\n        column += str.length\n      }\n\n      if (node && type !== 'start') {\n        let p = node.parent || { raws: {} }\n        let childless =\n          node.type === 'decl' || (node.type === 'atrule' && !node.nodes)\n        if (!childless || node !== p.last || p.raws.semicolon) {\n          if (node.source && node.source.end) {\n            mapping.source = this.sourcePath(node)\n            mapping.original.line = node.source.end.line\n            mapping.original.column = node.source.end.column - 1\n            mapping.generated.line = line\n            mapping.generated.column = column - 2\n            this.map.addMapping(mapping)\n          } else {\n            mapping.source = noSource\n            mapping.original.line = 1\n            mapping.original.column = 0\n            mapping.generated.line = line\n            mapping.generated.column = column - 1\n            this.map.addMapping(mapping)\n          }\n        }\n      }\n    })\n  }\n\n  isAnnotation() {\n    if (this.isInline()) {\n      return true\n    }\n    if (typeof this.mapOpts.annotation !== 'undefined') {\n      return this.mapOpts.annotation\n    }\n    if (this.previous().length) {\n      return this.previous().some(i => i.annotation)\n    }\n    return true\n  }\n\n  isInline() {\n    if (typeof this.mapOpts.inline !== 'undefined') {\n      return this.mapOpts.inline\n    }\n\n    let annotation = this.mapOpts.annotation\n    if (typeof annotation !== 'undefined' && annotation !== true) {\n      return false\n    }\n\n    if (this.previous().length) {\n      return this.previous().some(i => i.inline)\n    }\n    return true\n  }\n\n  isMap() {\n    if (typeof this.opts.map !== 'undefined') {\n      return !!this.opts.map\n    }\n    return this.previous().length > 0\n  }\n\n  isSourcesContent() {\n    if (typeof this.mapOpts.sourcesContent !== 'undefined') {\n      return this.mapOpts.sourcesContent\n    }\n    if (this.previous().length) {\n      return this.previous().some(i => i.withContent())\n    }\n    return true\n  }\n\n  outputFile() {\n    if (this.opts.to) {\n      return this.path(this.opts.to)\n    } else if (this.opts.from) {\n      return this.path(this.opts.from)\n    } else {\n      return 'to.css'\n    }\n  }\n\n  path(file) {\n    if (this.mapOpts.absolute) return file\n    if (file.charCodeAt(0) === 60 /* `<` */) return file\n    if (/^\\w+:\\/\\//.test(file)) return file\n    let cached = this.memoizedPaths.get(file)\n    if (cached) return cached\n\n    let from = this.opts.to ? dirname(this.opts.to) : '.'\n\n    if (typeof this.mapOpts.annotation === 'string') {\n      from = dirname(resolve(from, this.mapOpts.annotation))\n    }\n\n    let path = relative(from, file)\n    this.memoizedPaths.set(file, path)\n\n    return path\n  }\n\n  previous() {\n    if (!this.previousMaps) {\n      this.previousMaps = []\n      if (this.root) {\n        this.root.walk(node => {\n          if (node.source && node.source.input.map) {\n            let map = node.source.input.map\n            if (!this.previousMaps.includes(map)) {\n              this.previousMaps.push(map)\n            }\n          }\n        })\n      } else {\n        let input = new Input(this.originalCSS, this.opts)\n        if (input.map) this.previousMaps.push(input.map)\n      }\n    }\n\n    return this.previousMaps\n  }\n\n  setSourcesContent() {\n    let already = {}\n    if (this.root) {\n      this.root.walk(node => {\n        if (node.source) {\n          let from = node.source.input.from\n          if (from && !already[from]) {\n            already[from] = true\n            let fromUrl = this.usesFileUrls\n              ? this.toFileUrl(from)\n              : this.toUrl(this.path(from))\n            this.map.setSourceContent(fromUrl, node.source.input.css)\n          }\n        }\n      })\n    } else if (this.css) {\n      let from = this.opts.from\n        ? this.toUrl(this.path(this.opts.from))\n        : '<no source>'\n      this.map.setSourceContent(from, this.css)\n    }\n  }\n\n  sourcePath(node) {\n    if (this.mapOpts.from) {\n      return this.toUrl(this.mapOpts.from)\n    } else if (this.usesFileUrls) {\n      return this.toFileUrl(node.source.input.from)\n    } else {\n      return this.toUrl(this.path(node.source.input.from))\n    }\n  }\n\n  toBase64(str) {\n    if (Buffer) {\n      return Buffer.from(str).toString('base64')\n    } else {\n      return window.btoa(unescape(encodeURIComponent(str)))\n    }\n  }\n\n  toFileUrl(path) {\n    let cached = this.memoizedFileURLs.get(path)\n    if (cached) return cached\n\n    if (pathToFileURL) {\n      let fileURL = pathToFileURL(path).toString()\n      this.memoizedFileURLs.set(path, fileURL)\n\n      return fileURL\n    } else {\n      throw new Error(\n        '`map.absolute` option is not available in this PostCSS build'\n      )\n    }\n  }\n\n  toUrl(path) {\n    let cached = this.memoizedURLs.get(path)\n    if (cached) return cached\n\n    if (sep === '\\\\') {\n      path = path.replace(/\\\\/g, '/')\n    }\n\n    let url = encodeURI(path).replace(/[#?]/g, encodeURIComponent)\n    this.memoizedURLs.set(path, url)\n\n    return url\n  }\n}\n\nmodule.exports = MapGenerator\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///13604\n")},84211:(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval("\n\nlet MapGenerator = __webpack_require__(13604)\nlet parse = __webpack_require__(69577)\nconst Result = __webpack_require__(33717)\nlet stringify = __webpack_require__(83303)\nlet warnOnce = __webpack_require__(6156)\n\nclass NoWorkResult {\n  constructor(processor, css, opts) {\n    css = css.toString()\n    this.stringified = false\n\n    this._processor = processor\n    this._css = css\n    this._opts = opts\n    this._map = undefined\n    let root\n\n    let str = stringify\n    this.result = new Result(this._processor, root, this._opts)\n    this.result.css = css\n\n    let self = this\n    Object.defineProperty(this.result, 'root', {\n      get() {\n        return self.root\n      }\n    })\n\n    let map = new MapGenerator(str, root, this._opts, css)\n    if (map.isMap()) {\n      let [generatedCSS, generatedMap] = map.generate()\n      if (generatedCSS) {\n        this.result.css = generatedCSS\n      }\n      if (generatedMap) {\n        this.result.map = generatedMap\n      }\n    } else {\n      map.clearAnnotation()\n      this.result.css = map.css\n    }\n  }\n\n  async() {\n    if (this.error) return Promise.reject(this.error)\n    return Promise.resolve(this.result)\n  }\n\n  catch(onRejected) {\n    return this.async().catch(onRejected)\n  }\n\n  finally(onFinally) {\n    return this.async().then(onFinally, onFinally)\n  }\n\n  sync() {\n    if (this.error) throw this.error\n    return this.result\n  }\n\n  then(onFulfilled, onRejected) {\n    if (false) {}\n\n    return this.async().then(onFulfilled, onRejected)\n  }\n\n  toString() {\n    return this._css\n  }\n\n  warnings() {\n    return []\n  }\n\n  get content() {\n    return this.result.css\n  }\n\n  get css() {\n    return this.result.css\n  }\n\n  get map() {\n    return this.result.map\n  }\n\n  get messages() {\n    return []\n  }\n\n  get opts() {\n    return this.result.opts\n  }\n\n  get processor() {\n    return this.result.processor\n  }\n\n  get root() {\n    if (this._root) {\n      return this._root\n    }\n\n    let root\n    let parser = parse\n\n    try {\n      root = parser(this._css, this._opts)\n    } catch (error) {\n      this.error = error\n    }\n\n    if (this.error) {\n      throw this.error\n    } else {\n      this._root = root\n      return root\n    }\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'NoWorkResult'\n  }\n}\n\nmodule.exports = NoWorkResult\nNoWorkResult.default = NoWorkResult\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiODQyMTEuanMiLCJtYXBwaW5ncyI6IkFBQVk7O0FBRVosbUJBQW1CLG1CQUFPLENBQUMsS0FBaUI7QUFDNUMsWUFBWSxtQkFBTyxDQUFDLEtBQVM7QUFDN0IsZUFBZSxtQkFBTyxDQUFDLEtBQVU7QUFDakMsZ0JBQWdCLG1CQUFPLENBQUMsS0FBYTtBQUNyQyxlQUFlLG1CQUFPLENBQUMsSUFBYTs7QUFFcEM7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxRQUFRLEtBQXFDLEVBQUUsRUFRMUM7O0FBRUw7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBOztBQUVBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2Jsb2NrYml0ZS8uL25vZGVfbW9kdWxlcy9wb3N0Y3NzL2xpYi9uby13b3JrLXJlc3VsdC5qcz85Yzg4Il0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0J1xuXG5sZXQgTWFwR2VuZXJhdG9yID0gcmVxdWlyZSgnLi9tYXAtZ2VuZXJhdG9yJylcbmxldCBwYXJzZSA9IHJlcXVpcmUoJy4vcGFyc2UnKVxuY29uc3QgUmVzdWx0ID0gcmVxdWlyZSgnLi9yZXN1bHQnKVxubGV0IHN0cmluZ2lmeSA9IHJlcXVpcmUoJy4vc3RyaW5naWZ5JylcbmxldCB3YXJuT25jZSA9IHJlcXVpcmUoJy4vd2Fybi1vbmNlJylcblxuY2xhc3MgTm9Xb3JrUmVzdWx0IHtcbiAgY29uc3RydWN0b3IocHJvY2Vzc29yLCBjc3MsIG9wdHMpIHtcbiAgICBjc3MgPSBjc3MudG9TdHJpbmcoKVxuICAgIHRoaXMuc3RyaW5naWZpZWQgPSBmYWxzZVxuXG4gICAgdGhpcy5fcHJvY2Vzc29yID0gcHJvY2Vzc29yXG4gICAgdGhpcy5fY3NzID0gY3NzXG4gICAgdGhpcy5fb3B0cyA9IG9wdHNcbiAgICB0aGlzLl9tYXAgPSB1bmRlZmluZWRcbiAgICBsZXQgcm9vdFxuXG4gICAgbGV0IHN0ciA9IHN0cmluZ2lmeVxuICAgIHRoaXMucmVzdWx0ID0gbmV3IFJlc3VsdCh0aGlzLl9wcm9jZXNzb3IsIHJvb3QsIHRoaXMuX29wdHMpXG4gICAgdGhpcy5yZXN1bHQuY3NzID0gY3NzXG5cbiAgICBsZXQgc2VsZiA9IHRoaXNcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcy5yZXN1bHQsICdyb290Jywge1xuICAgICAgZ2V0KCkge1xuICAgICAgICByZXR1cm4gc2VsZi5yb290XG4gICAgICB9XG4gICAgfSlcblxuICAgIGxldCBtYXAgPSBuZXcgTWFwR2VuZXJhdG9yKHN0ciwgcm9vdCwgdGhpcy5fb3B0cywgY3NzKVxuICAgIGlmIChtYXAuaXNNYXAoKSkge1xuICAgICAgbGV0IFtnZW5lcmF0ZWRDU1MsIGdlbmVyYXRlZE1hcF0gPSBtYXAuZ2VuZXJhdGUoKVxuICAgICAgaWYgKGdlbmVyYXRlZENTUykge1xuICAgICAgICB0aGlzLnJlc3VsdC5jc3MgPSBnZW5lcmF0ZWRDU1NcbiAgICAgIH1cbiAgICAgIGlmIChnZW5lcmF0ZWRNYXApIHtcbiAgICAgICAgdGhpcy5yZXN1bHQubWFwID0gZ2VuZXJhdGVkTWFwXG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIG1hcC5jbGVhckFubm90YXRpb24oKVxuICAgICAgdGhpcy5yZXN1bHQuY3NzID0gbWFwLmNzc1xuICAgIH1cbiAgfVxuXG4gIGFzeW5jKCkge1xuICAgIGlmICh0aGlzLmVycm9yKSByZXR1cm4gUHJvbWlzZS5yZWplY3QodGhpcy5lcnJvcilcbiAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHRoaXMucmVzdWx0KVxuICB9XG5cbiAgY2F0Y2gob25SZWplY3RlZCkge1xuICAgIHJldHVybiB0aGlzLmFzeW5jKCkuY2F0Y2gob25SZWplY3RlZClcbiAgfVxuXG4gIGZpbmFsbHkob25GaW5hbGx5KSB7XG4gICAgcmV0dXJuIHRoaXMuYXN5bmMoKS50aGVuKG9uRmluYWxseSwgb25GaW5hbGx5KVxuICB9XG5cbiAgc3luYygpIHtcbiAgICBpZiAodGhpcy5lcnJvcikgdGhyb3cgdGhpcy5lcnJvclxuICAgIHJldHVybiB0aGlzLnJlc3VsdFxuICB9XG5cbiAgdGhlbihvbkZ1bGZpbGxlZCwgb25SZWplY3RlZCkge1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBpZiAoISgnZnJvbScgaW4gdGhpcy5fb3B0cykpIHtcbiAgICAgICAgd2Fybk9uY2UoXG4gICAgICAgICAgJ1dpdGhvdXQgYGZyb21gIG9wdGlvbiBQb3N0Q1NTIGNvdWxkIGdlbmVyYXRlIHdyb25nIHNvdXJjZSBtYXAgJyArXG4gICAgICAgICAgICAnYW5kIHdpbGwgbm90IGZpbmQgQnJvd3NlcnNsaXN0IGNvbmZpZy4gU2V0IGl0IHRvIENTUyBmaWxlIHBhdGggJyArXG4gICAgICAgICAgICAnb3IgdG8gYHVuZGVmaW5lZGAgdG8gcHJldmVudCB0aGlzIHdhcm5pbmcuJ1xuICAgICAgICApXG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuYXN5bmMoKS50aGVuKG9uRnVsZmlsbGVkLCBvblJlamVjdGVkKVxuICB9XG5cbiAgdG9TdHJpbmcoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2Nzc1xuICB9XG5cbiAgd2FybmluZ3MoKSB7XG4gICAgcmV0dXJuIFtdXG4gIH1cblxuICBnZXQgY29udGVudCgpIHtcbiAgICByZXR1cm4gdGhpcy5yZXN1bHQuY3NzXG4gIH1cblxuICBnZXQgY3NzKCkge1xuICAgIHJldHVybiB0aGlzLnJlc3VsdC5jc3NcbiAgfVxuXG4gIGdldCBtYXAoKSB7XG4gICAgcmV0dXJuIHRoaXMucmVzdWx0Lm1hcFxuICB9XG5cbiAgZ2V0IG1lc3NhZ2VzKCkge1xuICAgIHJldHVybiBbXVxuICB9XG5cbiAgZ2V0IG9wdHMoKSB7XG4gICAgcmV0dXJuIHRoaXMucmVzdWx0Lm9wdHNcbiAgfVxuXG4gIGdldCBwcm9jZXNzb3IoKSB7XG4gICAgcmV0dXJuIHRoaXMucmVzdWx0LnByb2Nlc3NvclxuICB9XG5cbiAgZ2V0IHJvb3QoKSB7XG4gICAgaWYgKHRoaXMuX3Jvb3QpIHtcbiAgICAgIHJldHVybiB0aGlzLl9yb290XG4gICAgfVxuXG4gICAgbGV0IHJvb3RcbiAgICBsZXQgcGFyc2VyID0gcGFyc2VcblxuICAgIHRyeSB7XG4gICAgICByb290ID0gcGFyc2VyKHRoaXMuX2NzcywgdGhpcy5fb3B0cylcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgdGhpcy5lcnJvciA9IGVycm9yXG4gICAgfVxuXG4gICAgaWYgKHRoaXMuZXJyb3IpIHtcbiAgICAgIHRocm93IHRoaXMuZXJyb3JcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5fcm9vdCA9IHJvb3RcbiAgICAgIHJldHVybiByb290XG4gICAgfVxuICB9XG5cbiAgZ2V0IFtTeW1ib2wudG9TdHJpbmdUYWddKCkge1xuICAgIHJldHVybiAnTm9Xb3JrUmVzdWx0J1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gTm9Xb3JrUmVzdWx0XG5Ob1dvcmtSZXN1bHQuZGVmYXVsdCA9IE5vV29ya1Jlc3VsdFxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///84211\n")},63152:(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval("\n\nlet CssSyntaxError = __webpack_require__(53614)\nlet Stringifier = __webpack_require__(47668)\nlet stringify = __webpack_require__(83303)\nlet { isClean, my } = __webpack_require__(84151)\n\nfunction cloneNode(obj, parent) {\n  let cloned = new obj.constructor()\n\n  for (let i in obj) {\n    if (!Object.prototype.hasOwnProperty.call(obj, i)) {\n      /* c8 ignore next 2 */\n      continue\n    }\n    if (i === 'proxyCache') continue\n    let value = obj[i]\n    let type = typeof value\n\n    if (i === 'parent' && type === 'object') {\n      if (parent) cloned[i] = parent\n    } else if (i === 'source') {\n      cloned[i] = value\n    } else if (Array.isArray(value)) {\n      cloned[i] = value.map(j => cloneNode(j, cloned))\n    } else {\n      if (type === 'object' && value !== null) value = cloneNode(value)\n      cloned[i] = value\n    }\n  }\n\n  return cloned\n}\n\nclass Node {\n  constructor(defaults = {}) {\n    this.raws = {}\n    this[isClean] = false\n    this[my] = true\n\n    for (let name in defaults) {\n      if (name === 'nodes') {\n        this.nodes = []\n        for (let node of defaults[name]) {\n          if (typeof node.clone === 'function') {\n            this.append(node.clone())\n          } else {\n            this.append(node)\n          }\n        }\n      } else {\n        this[name] = defaults[name]\n      }\n    }\n  }\n\n  addToError(error) {\n    error.postcssNode = this\n    if (error.stack && this.source && /\\n\\s{4}at /.test(error.stack)) {\n      let s = this.source\n      error.stack = error.stack.replace(\n        /\\n\\s{4}at /,\n        `$&${s.input.from}:${s.start.line}:${s.start.column}$&`\n      )\n    }\n    return error\n  }\n\n  after(add) {\n    this.parent.insertAfter(this, add)\n    return this\n  }\n\n  assign(overrides = {}) {\n    for (let name in overrides) {\n      this[name] = overrides[name]\n    }\n    return this\n  }\n\n  before(add) {\n    this.parent.insertBefore(this, add)\n    return this\n  }\n\n  cleanRaws(keepBetween) {\n    delete this.raws.before\n    delete this.raws.after\n    if (!keepBetween) delete this.raws.between\n  }\n\n  clone(overrides = {}) {\n    let cloned = cloneNode(this)\n    for (let name in overrides) {\n      cloned[name] = overrides[name]\n    }\n    return cloned\n  }\n\n  cloneAfter(overrides = {}) {\n    let cloned = this.clone(overrides)\n    this.parent.insertAfter(this, cloned)\n    return cloned\n  }\n\n  cloneBefore(overrides = {}) {\n    let cloned = this.clone(overrides)\n    this.parent.insertBefore(this, cloned)\n    return cloned\n  }\n\n  error(message, opts = {}) {\n    if (this.source) {\n      let { end, start } = this.rangeBy(opts)\n      return this.source.input.error(\n        message,\n        { column: start.column, line: start.line },\n        { column: end.column, line: end.line },\n        opts\n      )\n    }\n    return new CssSyntaxError(message)\n  }\n\n  getProxyProcessor() {\n    return {\n      get(node, prop) {\n        if (prop === 'proxyOf') {\n          return node\n        } else if (prop === 'root') {\n          return () => node.root().toProxy()\n        } else {\n          return node[prop]\n        }\n      },\n\n      set(node, prop, value) {\n        if (node[prop] === value) return true\n        node[prop] = value\n        if (\n          prop === 'prop' ||\n          prop === 'value' ||\n          prop === 'name' ||\n          prop === 'params' ||\n          prop === 'important' ||\n          /* c8 ignore next */\n          prop === 'text'\n        ) {\n          node.markDirty()\n        }\n        return true\n      }\n    }\n  }\n\n  /* c8 ignore next 3 */\n  markClean() {\n    this[isClean] = true\n  }\n\n  markDirty() {\n    if (this[isClean]) {\n      this[isClean] = false\n      let next = this\n      while ((next = next.parent)) {\n        next[isClean] = false\n      }\n    }\n  }\n\n  next() {\n    if (!this.parent) return undefined\n    let index = this.parent.index(this)\n    return this.parent.nodes[index + 1]\n  }\n\n  positionBy(opts, stringRepresentation) {\n    let pos = this.source.start\n    if (opts.index) {\n      pos = this.positionInside(opts.index, stringRepresentation)\n    } else if (opts.word) {\n      stringRepresentation = this.toString()\n      let index = stringRepresentation.indexOf(opts.word)\n      if (index !== -1) pos = this.positionInside(index, stringRepresentation)\n    }\n    return pos\n  }\n\n  positionInside(index, stringRepresentation) {\n    let string = stringRepresentation || this.toString()\n    let column = this.source.start.column\n    let line = this.source.start.line\n\n    for (let i = 0; i < index; i++) {\n      if (string[i] === '\\n') {\n        column = 1\n        line += 1\n      } else {\n        column += 1\n      }\n    }\n\n    return { column, line }\n  }\n\n  prev() {\n    if (!this.parent) return undefined\n    let index = this.parent.index(this)\n    return this.parent.nodes[index - 1]\n  }\n\n  rangeBy(opts) {\n    let start = {\n      column: this.source.start.column,\n      line: this.source.start.line\n    }\n    let end = this.source.end\n      ? {\n          column: this.source.end.column + 1,\n          line: this.source.end.line\n        }\n      : {\n          column: start.column + 1,\n          line: start.line\n        }\n\n    if (opts.word) {\n      let stringRepresentation = this.toString()\n      let index = stringRepresentation.indexOf(opts.word)\n      if (index !== -1) {\n        start = this.positionInside(index, stringRepresentation)\n        end = this.positionInside(\n          index + opts.word.length,\n          stringRepresentation\n        )\n      }\n    } else {\n      if (opts.start) {\n        start = {\n          column: opts.start.column,\n          line: opts.start.line\n        }\n      } else if (opts.index) {\n        start = this.positionInside(opts.index)\n      }\n\n      if (opts.end) {\n        end = {\n          column: opts.end.column,\n          line: opts.end.line\n        }\n      } else if (typeof opts.endIndex === 'number') {\n        end = this.positionInside(opts.endIndex)\n      } else if (opts.index) {\n        end = this.positionInside(opts.index + 1)\n      }\n    }\n\n    if (\n      end.line < start.line ||\n      (end.line === start.line && end.column <= start.column)\n    ) {\n      end = { column: start.column + 1, line: start.line }\n    }\n\n    return { end, start }\n  }\n\n  raw(prop, defaultType) {\n    let str = new Stringifier()\n    return str.raw(this, prop, defaultType)\n  }\n\n  remove() {\n    if (this.parent) {\n      this.parent.removeChild(this)\n    }\n    this.parent = undefined\n    return this\n  }\n\n  replaceWith(...nodes) {\n    if (this.parent) {\n      let bookmark = this\n      let foundSelf = false\n      for (let node of nodes) {\n        if (node === this) {\n          foundSelf = true\n        } else if (foundSelf) {\n          this.parent.insertAfter(bookmark, node)\n          bookmark = node\n        } else {\n          this.parent.insertBefore(bookmark, node)\n        }\n      }\n\n      if (!foundSelf) {\n        this.remove()\n      }\n    }\n\n    return this\n  }\n\n  root() {\n    let result = this\n    while (result.parent && result.parent.type !== 'document') {\n      result = result.parent\n    }\n    return result\n  }\n\n  toJSON(_, inputs) {\n    let fixed = {}\n    let emitInputs = inputs == null\n    inputs = inputs || new Map()\n    let inputsNextIndex = 0\n\n    for (let name in this) {\n      if (!Object.prototype.hasOwnProperty.call(this, name)) {\n        /* c8 ignore next 2 */\n        continue\n      }\n      if (name === 'parent' || name === 'proxyCache') continue\n      let value = this[name]\n\n      if (Array.isArray(value)) {\n        fixed[name] = value.map(i => {\n          if (typeof i === 'object' && i.toJSON) {\n            return i.toJSON(null, inputs)\n          } else {\n            return i\n          }\n        })\n      } else if (typeof value === 'object' && value.toJSON) {\n        fixed[name] = value.toJSON(null, inputs)\n      } else if (name === 'source') {\n        let inputId = inputs.get(value.input)\n        if (inputId == null) {\n          inputId = inputsNextIndex\n          inputs.set(value.input, inputsNextIndex)\n          inputsNextIndex++\n        }\n        fixed[name] = {\n          end: value.end,\n          inputId,\n          start: value.start\n        }\n      } else {\n        fixed[name] = value\n      }\n    }\n\n    if (emitInputs) {\n      fixed.inputs = [...inputs.keys()].map(input => input.toJSON())\n    }\n\n    return fixed\n  }\n\n  toProxy() {\n    if (!this.proxyCache) {\n      this.proxyCache = new Proxy(this, this.getProxyProcessor())\n    }\n    return this.proxyCache\n  }\n\n  toString(stringifier = stringify) {\n    if (stringifier.stringify) stringifier = stringifier.stringify\n    let result = ''\n    stringifier(this, i => {\n      result += i\n    })\n    return result\n  }\n\n  warn(result, text, opts) {\n    let data = { node: this }\n    for (let i in opts) data[i] = opts[i]\n    return result.warn(text, data)\n  }\n\n  get proxyOf() {\n    return this\n  }\n}\n\nmodule.exports = Node\nNode.default = Node\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///63152\n")},69577:(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval("\n\nlet Container = __webpack_require__(77793)\nlet Input = __webpack_require__(61106)\nlet Parser = __webpack_require__(68339)\n\nfunction parse(css, opts) {\n  let input = new Input(css, opts)\n  let parser = new Parser(input)\n  try {\n    parser.parse()\n  } catch (e) {\n    if (false) {}\n    throw e\n  }\n\n  return parser.root\n}\n\nmodule.exports = parse\nparse.default = parse\n\nContainer.registerParse(parse)\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNjk1NzcuanMiLCJtYXBwaW5ncyI6IkFBQVk7O0FBRVosZ0JBQWdCLG1CQUFPLENBQUMsS0FBYTtBQUNyQyxZQUFZLG1CQUFPLENBQUMsS0FBUztBQUM3QixhQUFhLG1CQUFPLENBQUMsS0FBVTs7QUFFL0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSixRQUFRLEtBQXFDLEVBQUUsRUFtQjFDO0FBQ0w7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ibG9ja2JpdGUvLi9ub2RlX21vZHVsZXMvcG9zdGNzcy9saWIvcGFyc2UuanM/MGYxYSJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCdcblxubGV0IENvbnRhaW5lciA9IHJlcXVpcmUoJy4vY29udGFpbmVyJylcbmxldCBJbnB1dCA9IHJlcXVpcmUoJy4vaW5wdXQnKVxubGV0IFBhcnNlciA9IHJlcXVpcmUoJy4vcGFyc2VyJylcblxuZnVuY3Rpb24gcGFyc2UoY3NzLCBvcHRzKSB7XG4gIGxldCBpbnB1dCA9IG5ldyBJbnB1dChjc3MsIG9wdHMpXG4gIGxldCBwYXJzZXIgPSBuZXcgUGFyc2VyKGlucHV0KVxuICB0cnkge1xuICAgIHBhcnNlci5wYXJzZSgpXG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgaWYgKGUubmFtZSA9PT0gJ0Nzc1N5bnRheEVycm9yJyAmJiBvcHRzICYmIG9wdHMuZnJvbSkge1xuICAgICAgICBpZiAoL1xcLnNjc3MkL2kudGVzdChvcHRzLmZyb20pKSB7XG4gICAgICAgICAgZS5tZXNzYWdlICs9XG4gICAgICAgICAgICAnXFxuWW91IHRyaWVkIHRvIHBhcnNlIFNDU1Mgd2l0aCAnICtcbiAgICAgICAgICAgICd0aGUgc3RhbmRhcmQgQ1NTIHBhcnNlcjsgJyArXG4gICAgICAgICAgICAndHJ5IGFnYWluIHdpdGggdGhlIHBvc3Rjc3Mtc2NzcyBwYXJzZXInXG4gICAgICAgIH0gZWxzZSBpZiAoL1xcLnNhc3MvaS50ZXN0KG9wdHMuZnJvbSkpIHtcbiAgICAgICAgICBlLm1lc3NhZ2UgKz1cbiAgICAgICAgICAgICdcXG5Zb3UgdHJpZWQgdG8gcGFyc2UgU2FzcyB3aXRoICcgK1xuICAgICAgICAgICAgJ3RoZSBzdGFuZGFyZCBDU1MgcGFyc2VyOyAnICtcbiAgICAgICAgICAgICd0cnkgYWdhaW4gd2l0aCB0aGUgcG9zdGNzcy1zYXNzIHBhcnNlcidcbiAgICAgICAgfSBlbHNlIGlmICgvXFwubGVzcyQvaS50ZXN0KG9wdHMuZnJvbSkpIHtcbiAgICAgICAgICBlLm1lc3NhZ2UgKz1cbiAgICAgICAgICAgICdcXG5Zb3UgdHJpZWQgdG8gcGFyc2UgTGVzcyB3aXRoICcgK1xuICAgICAgICAgICAgJ3RoZSBzdGFuZGFyZCBDU1MgcGFyc2VyOyAnICtcbiAgICAgICAgICAgICd0cnkgYWdhaW4gd2l0aCB0aGUgcG9zdGNzcy1sZXNzIHBhcnNlcidcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICB0aHJvdyBlXG4gIH1cblxuICByZXR1cm4gcGFyc2VyLnJvb3Rcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBwYXJzZVxucGFyc2UuZGVmYXVsdCA9IHBhcnNlXG5cbkNvbnRhaW5lci5yZWdpc3RlclBhcnNlKHBhcnNlKVxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///69577\n")},68339:(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval("\n\nlet AtRule = __webpack_require__(40396)\nlet Comment = __webpack_require__(49371)\nlet Declaration = __webpack_require__(35238)\nlet Root = __webpack_require__(25644)\nlet Rule = __webpack_require__(61534)\nlet tokenizer = __webpack_require__(45781)\n\nconst SAFE_COMMENT_NEIGHBOR = {\n  empty: true,\n  space: true\n}\n\nfunction findLastWithPosition(tokens) {\n  for (let i = tokens.length - 1; i >= 0; i--) {\n    let token = tokens[i]\n    let pos = token[3] || token[2]\n    if (pos) return pos\n  }\n}\n\nclass Parser {\n  constructor(input) {\n    this.input = input\n\n    this.root = new Root()\n    this.current = this.root\n    this.spaces = ''\n    this.semicolon = false\n\n    this.createTokenizer()\n    this.root.source = { input, start: { column: 1, line: 1, offset: 0 } }\n  }\n\n  atrule(token) {\n    let node = new AtRule()\n    node.name = token[1].slice(1)\n    if (node.name === '') {\n      this.unnamedAtrule(node, token)\n    }\n    this.init(node, token[2])\n\n    let type\n    let prev\n    let shift\n    let last = false\n    let open = false\n    let params = []\n    let brackets = []\n\n    while (!this.tokenizer.endOfFile()) {\n      token = this.tokenizer.nextToken()\n      type = token[0]\n\n      if (type === '(' || type === '[') {\n        brackets.push(type === '(' ? ')' : ']')\n      } else if (type === '{' && brackets.length > 0) {\n        brackets.push('}')\n      } else if (type === brackets[brackets.length - 1]) {\n        brackets.pop()\n      }\n\n      if (brackets.length === 0) {\n        if (type === ';') {\n          node.source.end = this.getPosition(token[2])\n          node.source.end.offset++\n          this.semicolon = true\n          break\n        } else if (type === '{') {\n          open = true\n          break\n        } else if (type === '}') {\n          if (params.length > 0) {\n            shift = params.length - 1\n            prev = params[shift]\n            while (prev && prev[0] === 'space') {\n              prev = params[--shift]\n            }\n            if (prev) {\n              node.source.end = this.getPosition(prev[3] || prev[2])\n              node.source.end.offset++\n            }\n          }\n          this.end(token)\n          break\n        } else {\n          params.push(token)\n        }\n      } else {\n        params.push(token)\n      }\n\n      if (this.tokenizer.endOfFile()) {\n        last = true\n        break\n      }\n    }\n\n    node.raws.between = this.spacesAndCommentsFromEnd(params)\n    if (params.length) {\n      node.raws.afterName = this.spacesAndCommentsFromStart(params)\n      this.raw(node, 'params', params)\n      if (last) {\n        token = params[params.length - 1]\n        node.source.end = this.getPosition(token[3] || token[2])\n        node.source.end.offset++\n        this.spaces = node.raws.between\n        node.raws.between = ''\n      }\n    } else {\n      node.raws.afterName = ''\n      node.params = ''\n    }\n\n    if (open) {\n      node.nodes = []\n      this.current = node\n    }\n  }\n\n  checkMissedSemicolon(tokens) {\n    let colon = this.colon(tokens)\n    if (colon === false) return\n\n    let founded = 0\n    let token\n    for (let j = colon - 1; j >= 0; j--) {\n      token = tokens[j]\n      if (token[0] !== 'space') {\n        founded += 1\n        if (founded === 2) break\n      }\n    }\n    // If the token is a word, e.g. `!important`, `red` or any other valid property's value.\n    // Then we need to return the colon after that word token. [3] is the \"end\" colon of that word.\n    // And because we need it after that one we do +1 to get the next one.\n    throw this.input.error(\n      'Missed semicolon',\n      token[0] === 'word' ? token[3] + 1 : token[2]\n    )\n  }\n\n  colon(tokens) {\n    let brackets = 0\n    let prev, token, type\n    for (let [i, element] of tokens.entries()) {\n      token = element\n      type = token[0]\n\n      if (type === '(') {\n        brackets += 1\n      }\n      if (type === ')') {\n        brackets -= 1\n      }\n      if (brackets === 0 && type === ':') {\n        if (!prev) {\n          this.doubleColon(token)\n        } else if (prev[0] === 'word' && prev[1] === 'progid') {\n          continue\n        } else {\n          return i\n        }\n      }\n\n      prev = token\n    }\n    return false\n  }\n\n  comment(token) {\n    let node = new Comment()\n    this.init(node, token[2])\n    node.source.end = this.getPosition(token[3] || token[2])\n    node.source.end.offset++\n\n    let text = token[1].slice(2, -2)\n    if (/^\\s*$/.test(text)) {\n      node.text = ''\n      node.raws.left = text\n      node.raws.right = ''\n    } else {\n      let match = text.match(/^(\\s*)([^]*\\S)(\\s*)$/)\n      node.text = match[2]\n      node.raws.left = match[1]\n      node.raws.right = match[3]\n    }\n  }\n\n  createTokenizer() {\n    this.tokenizer = tokenizer(this.input)\n  }\n\n  decl(tokens, customProperty) {\n    let node = new Declaration()\n    this.init(node, tokens[0][2])\n\n    let last = tokens[tokens.length - 1]\n    if (last[0] === ';') {\n      this.semicolon = true\n      tokens.pop()\n    }\n\n    node.source.end = this.getPosition(\n      last[3] || last[2] || findLastWithPosition(tokens)\n    )\n    node.source.end.offset++\n\n    while (tokens[0][0] !== 'word') {\n      if (tokens.length === 1) this.unknownWord(tokens)\n      node.raws.before += tokens.shift()[1]\n    }\n    node.source.start = this.getPosition(tokens[0][2])\n\n    node.prop = ''\n    while (tokens.length) {\n      let type = tokens[0][0]\n      if (type === ':' || type === 'space' || type === 'comment') {\n        break\n      }\n      node.prop += tokens.shift()[1]\n    }\n\n    node.raws.between = ''\n\n    let token\n    while (tokens.length) {\n      token = tokens.shift()\n\n      if (token[0] === ':') {\n        node.raws.between += token[1]\n        break\n      } else {\n        if (token[0] === 'word' && /\\w/.test(token[1])) {\n          this.unknownWord([token])\n        }\n        node.raws.between += token[1]\n      }\n    }\n\n    if (node.prop[0] === '_' || node.prop[0] === '*') {\n      node.raws.before += node.prop[0]\n      node.prop = node.prop.slice(1)\n    }\n\n    let firstSpaces = []\n    let next\n    while (tokens.length) {\n      next = tokens[0][0]\n      if (next !== 'space' && next !== 'comment') break\n      firstSpaces.push(tokens.shift())\n    }\n\n    this.precheckMissedSemicolon(tokens)\n\n    for (let i = tokens.length - 1; i >= 0; i--) {\n      token = tokens[i]\n      if (token[1].toLowerCase() === '!important') {\n        node.important = true\n        let string = this.stringFrom(tokens, i)\n        string = this.spacesFromEnd(tokens) + string\n        if (string !== ' !important') node.raws.important = string\n        break\n      } else if (token[1].toLowerCase() === 'important') {\n        let cache = tokens.slice(0)\n        let str = ''\n        for (let j = i; j > 0; j--) {\n          let type = cache[j][0]\n          if (str.trim().startsWith('!') && type !== 'space') {\n            break\n          }\n          str = cache.pop()[1] + str\n        }\n        if (str.trim().startsWith('!')) {\n          node.important = true\n          node.raws.important = str\n          tokens = cache\n        }\n      }\n\n      if (token[0] !== 'space' && token[0] !== 'comment') {\n        break\n      }\n    }\n\n    let hasWord = tokens.some(i => i[0] !== 'space' && i[0] !== 'comment')\n\n    if (hasWord) {\n      node.raws.between += firstSpaces.map(i => i[1]).join('')\n      firstSpaces = []\n    }\n    this.raw(node, 'value', firstSpaces.concat(tokens), customProperty)\n\n    if (node.value.includes(':') && !customProperty) {\n      this.checkMissedSemicolon(tokens)\n    }\n  }\n\n  doubleColon(token) {\n    throw this.input.error(\n      'Double colon',\n      { offset: token[2] },\n      { offset: token[2] + token[1].length }\n    )\n  }\n\n  emptyRule(token) {\n    let node = new Rule()\n    this.init(node, token[2])\n    node.selector = ''\n    node.raws.between = ''\n    this.current = node\n  }\n\n  end(token) {\n    if (this.current.nodes && this.current.nodes.length) {\n      this.current.raws.semicolon = this.semicolon\n    }\n    this.semicolon = false\n\n    this.current.raws.after = (this.current.raws.after || '') + this.spaces\n    this.spaces = ''\n\n    if (this.current.parent) {\n      this.current.source.end = this.getPosition(token[2])\n      this.current.source.end.offset++\n      this.current = this.current.parent\n    } else {\n      this.unexpectedClose(token)\n    }\n  }\n\n  endFile() {\n    if (this.current.parent) this.unclosedBlock()\n    if (this.current.nodes && this.current.nodes.length) {\n      this.current.raws.semicolon = this.semicolon\n    }\n    this.current.raws.after = (this.current.raws.after || '') + this.spaces\n    this.root.source.end = this.getPosition(this.tokenizer.position())\n  }\n\n  freeSemicolon(token) {\n    this.spaces += token[1]\n    if (this.current.nodes) {\n      let prev = this.current.nodes[this.current.nodes.length - 1]\n      if (prev && prev.type === 'rule' && !prev.raws.ownSemicolon) {\n        prev.raws.ownSemicolon = this.spaces\n        this.spaces = ''\n      }\n    }\n  }\n\n  // Helpers\n\n  getPosition(offset) {\n    let pos = this.input.fromOffset(offset)\n    return {\n      column: pos.col,\n      line: pos.line,\n      offset\n    }\n  }\n\n  init(node, offset) {\n    this.current.push(node)\n    node.source = {\n      input: this.input,\n      start: this.getPosition(offset)\n    }\n    node.raws.before = this.spaces\n    this.spaces = ''\n    if (node.type !== 'comment') this.semicolon = false\n  }\n\n  other(start) {\n    let end = false\n    let type = null\n    let colon = false\n    let bracket = null\n    let brackets = []\n    let customProperty = start[1].startsWith('--')\n\n    let tokens = []\n    let token = start\n    while (token) {\n      type = token[0]\n      tokens.push(token)\n\n      if (type === '(' || type === '[') {\n        if (!bracket) bracket = token\n        brackets.push(type === '(' ? ')' : ']')\n      } else if (customProperty && colon && type === '{') {\n        if (!bracket) bracket = token\n        brackets.push('}')\n      } else if (brackets.length === 0) {\n        if (type === ';') {\n          if (colon) {\n            this.decl(tokens, customProperty)\n            return\n          } else {\n            break\n          }\n        } else if (type === '{') {\n          this.rule(tokens)\n          return\n        } else if (type === '}') {\n          this.tokenizer.back(tokens.pop())\n          end = true\n          break\n        } else if (type === ':') {\n          colon = true\n        }\n      } else if (type === brackets[brackets.length - 1]) {\n        brackets.pop()\n        if (brackets.length === 0) bracket = null\n      }\n\n      token = this.tokenizer.nextToken()\n    }\n\n    if (this.tokenizer.endOfFile()) end = true\n    if (brackets.length > 0) this.unclosedBracket(bracket)\n\n    if (end && colon) {\n      if (!customProperty) {\n        while (tokens.length) {\n          token = tokens[tokens.length - 1][0]\n          if (token !== 'space' && token !== 'comment') break\n          this.tokenizer.back(tokens.pop())\n        }\n      }\n      this.decl(tokens, customProperty)\n    } else {\n      this.unknownWord(tokens)\n    }\n  }\n\n  parse() {\n    let token\n    while (!this.tokenizer.endOfFile()) {\n      token = this.tokenizer.nextToken()\n\n      switch (token[0]) {\n        case 'space':\n          this.spaces += token[1]\n          break\n\n        case ';':\n          this.freeSemicolon(token)\n          break\n\n        case '}':\n          this.end(token)\n          break\n\n        case 'comment':\n          this.comment(token)\n          break\n\n        case 'at-word':\n          this.atrule(token)\n          break\n\n        case '{':\n          this.emptyRule(token)\n          break\n\n        default:\n          this.other(token)\n          break\n      }\n    }\n    this.endFile()\n  }\n\n  precheckMissedSemicolon(/* tokens */) {\n    // Hook for Safe Parser\n  }\n\n  raw(node, prop, tokens, customProperty) {\n    let token, type\n    let length = tokens.length\n    let value = ''\n    let clean = true\n    let next, prev\n\n    for (let i = 0; i < length; i += 1) {\n      token = tokens[i]\n      type = token[0]\n      if (type === 'space' && i === length - 1 && !customProperty) {\n        clean = false\n      } else if (type === 'comment') {\n        prev = tokens[i - 1] ? tokens[i - 1][0] : 'empty'\n        next = tokens[i + 1] ? tokens[i + 1][0] : 'empty'\n        if (!SAFE_COMMENT_NEIGHBOR[prev] && !SAFE_COMMENT_NEIGHBOR[next]) {\n          if (value.slice(-1) === ',') {\n            clean = false\n          } else {\n            value += token[1]\n          }\n        } else {\n          clean = false\n        }\n      } else {\n        value += token[1]\n      }\n    }\n    if (!clean) {\n      let raw = tokens.reduce((all, i) => all + i[1], '')\n      node.raws[prop] = { raw, value }\n    }\n    node[prop] = value\n  }\n\n  rule(tokens) {\n    tokens.pop()\n\n    let node = new Rule()\n    this.init(node, tokens[0][2])\n\n    node.raws.between = this.spacesAndCommentsFromEnd(tokens)\n    this.raw(node, 'selector', tokens)\n    this.current = node\n  }\n\n  spacesAndCommentsFromEnd(tokens) {\n    let lastTokenType\n    let spaces = ''\n    while (tokens.length) {\n      lastTokenType = tokens[tokens.length - 1][0]\n      if (lastTokenType !== 'space' && lastTokenType !== 'comment') break\n      spaces = tokens.pop()[1] + spaces\n    }\n    return spaces\n  }\n\n  // Errors\n\n  spacesAndCommentsFromStart(tokens) {\n    let next\n    let spaces = ''\n    while (tokens.length) {\n      next = tokens[0][0]\n      if (next !== 'space' && next !== 'comment') break\n      spaces += tokens.shift()[1]\n    }\n    return spaces\n  }\n\n  spacesFromEnd(tokens) {\n    let lastTokenType\n    let spaces = ''\n    while (tokens.length) {\n      lastTokenType = tokens[tokens.length - 1][0]\n      if (lastTokenType !== 'space') break\n      spaces = tokens.pop()[1] + spaces\n    }\n    return spaces\n  }\n\n  stringFrom(tokens, from) {\n    let result = ''\n    for (let i = from; i < tokens.length; i++) {\n      result += tokens[i][1]\n    }\n    tokens.splice(from, tokens.length - from)\n    return result\n  }\n\n  unclosedBlock() {\n    let pos = this.current.source.start\n    throw this.input.error('Unclosed block', pos.line, pos.column)\n  }\n\n  unclosedBracket(bracket) {\n    throw this.input.error(\n      'Unclosed bracket',\n      { offset: bracket[2] },\n      { offset: bracket[2] + 1 }\n    )\n  }\n\n  unexpectedClose(token) {\n    throw this.input.error(\n      'Unexpected }',\n      { offset: token[2] },\n      { offset: token[2] + 1 }\n    )\n  }\n\n  unknownWord(tokens) {\n    throw this.input.error(\n      'Unknown word',\n      { offset: tokens[0][2] },\n      { offset: tokens[0][2] + tokens[0][1].length }\n    )\n  }\n\n  unnamedAtrule(node, token) {\n    throw this.input.error(\n      'At-rule without name',\n      { offset: token[2] },\n      { offset: token[2] + token[1].length }\n    )\n  }\n}\n\nmodule.exports = Parser\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///68339\n")},12895:(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval("\n\nlet AtRule = __webpack_require__(40396)\nlet Comment = __webpack_require__(49371)\nlet Container = __webpack_require__(77793)\nlet CssSyntaxError = __webpack_require__(53614)\nlet Declaration = __webpack_require__(35238)\nlet Document = __webpack_require__(40145)\nlet fromJSON = __webpack_require__(33438)\nlet Input = __webpack_require__(61106)\nlet LazyResult = __webpack_require__(96966)\nlet list = __webpack_require__(81752)\nlet Node = __webpack_require__(63152)\nlet parse = __webpack_require__(69577)\nlet Processor = __webpack_require__(96846)\nlet Result = __webpack_require__(33717)\nlet Root = __webpack_require__(25644)\nlet Rule = __webpack_require__(61534)\nlet stringify = __webpack_require__(83303)\nlet Warning = __webpack_require__(60038)\n\nfunction postcss(...plugins) {\n  if (plugins.length === 1 && Array.isArray(plugins[0])) {\n    plugins = plugins[0]\n  }\n  return new Processor(plugins)\n}\n\npostcss.plugin = function plugin(name, initializer) {\n  let warningPrinted = false\n  function creator(...args) {\n    // eslint-disable-next-line no-console\n    if (console && console.warn && !warningPrinted) {\n      warningPrinted = true\n      // eslint-disable-next-line no-console\n      console.warn(\n        name +\n          ': postcss.plugin was deprecated. Migration guide:\\n' +\n          'https://evilmartians.com/chronicles/postcss-8-plugin-migration'\n      )\n      if (process.env.LANG && process.env.LANG.startsWith('cn')) {\n        /* c8 ignore next 7 */\n        // eslint-disable-next-line no-console\n        console.warn(\n          name +\n            ': 里面 postcss.plugin 被弃用. 迁移指南:\\n' +\n            'https://www.w3ctech.com/topic/2226'\n        )\n      }\n    }\n    let transformer = initializer(...args)\n    transformer.postcssPlugin = name\n    transformer.postcssVersion = new Processor().version\n    return transformer\n  }\n\n  let cache\n  Object.defineProperty(creator, 'postcss', {\n    get() {\n      if (!cache) cache = creator()\n      return cache\n    }\n  })\n\n  creator.process = function (css, processOpts, pluginOpts) {\n    return postcss([creator(pluginOpts)]).process(css, processOpts)\n  }\n\n  return creator\n}\n\npostcss.stringify = stringify\npostcss.parse = parse\npostcss.fromJSON = fromJSON\npostcss.list = list\n\npostcss.comment = defaults => new Comment(defaults)\npostcss.atRule = defaults => new AtRule(defaults)\npostcss.decl = defaults => new Declaration(defaults)\npostcss.rule = defaults => new Rule(defaults)\npostcss.root = defaults => new Root(defaults)\npostcss.document = defaults => new Document(defaults)\n\npostcss.CssSyntaxError = CssSyntaxError\npostcss.Declaration = Declaration\npostcss.Container = Container\npostcss.Processor = Processor\npostcss.Document = Document\npostcss.Comment = Comment\npostcss.Warning = Warning\npostcss.AtRule = AtRule\npostcss.Result = Result\npostcss.Input = Input\npostcss.Rule = Rule\npostcss.Root = Root\npostcss.Node = Node\n\nLazyResult.registerPostcss(postcss)\n\nmodule.exports = postcss\npostcss.default = postcss\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTI4OTUuanMiLCJtYXBwaW5ncyI6IkFBQVk7O0FBRVosYUFBYSxtQkFBTyxDQUFDLEtBQVc7QUFDaEMsY0FBYyxtQkFBTyxDQUFDLEtBQVc7QUFDakMsZ0JBQWdCLG1CQUFPLENBQUMsS0FBYTtBQUNyQyxxQkFBcUIsbUJBQU8sQ0FBQyxLQUFvQjtBQUNqRCxrQkFBa0IsbUJBQU8sQ0FBQyxLQUFlO0FBQ3pDLGVBQWUsbUJBQU8sQ0FBQyxLQUFZO0FBQ25DLGVBQWUsbUJBQU8sQ0FBQyxLQUFZO0FBQ25DLFlBQVksbUJBQU8sQ0FBQyxLQUFTO0FBQzdCLGlCQUFpQixtQkFBTyxDQUFDLEtBQWU7QUFDeEMsV0FBVyxtQkFBTyxDQUFDLEtBQVE7QUFDM0IsV0FBVyxtQkFBTyxDQUFDLEtBQVE7QUFDM0IsWUFBWSxtQkFBTyxDQUFDLEtBQVM7QUFDN0IsZ0JBQWdCLG1CQUFPLENBQUMsS0FBYTtBQUNyQyxhQUFhLG1CQUFPLENBQUMsS0FBYTtBQUNsQyxXQUFXLG1CQUFPLENBQUMsS0FBUTtBQUMzQixXQUFXLG1CQUFPLENBQUMsS0FBUTtBQUMzQixnQkFBZ0IsbUJBQU8sQ0FBQyxLQUFhO0FBQ3JDLGNBQWMsbUJBQU8sQ0FBQyxLQUFXOztBQUVqQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ibG9ja2JpdGUvLi9ub2RlX21vZHVsZXMvcG9zdGNzcy9saWIvcG9zdGNzcy5qcz8zOTg0Il0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0J1xuXG5sZXQgQXRSdWxlID0gcmVxdWlyZSgnLi9hdC1ydWxlJylcbmxldCBDb21tZW50ID0gcmVxdWlyZSgnLi9jb21tZW50JylcbmxldCBDb250YWluZXIgPSByZXF1aXJlKCcuL2NvbnRhaW5lcicpXG5sZXQgQ3NzU3ludGF4RXJyb3IgPSByZXF1aXJlKCcuL2Nzcy1zeW50YXgtZXJyb3InKVxubGV0IERlY2xhcmF0aW9uID0gcmVxdWlyZSgnLi9kZWNsYXJhdGlvbicpXG5sZXQgRG9jdW1lbnQgPSByZXF1aXJlKCcuL2RvY3VtZW50JylcbmxldCBmcm9tSlNPTiA9IHJlcXVpcmUoJy4vZnJvbUpTT04nKVxubGV0IElucHV0ID0gcmVxdWlyZSgnLi9pbnB1dCcpXG5sZXQgTGF6eVJlc3VsdCA9IHJlcXVpcmUoJy4vbGF6eS1yZXN1bHQnKVxubGV0IGxpc3QgPSByZXF1aXJlKCcuL2xpc3QnKVxubGV0IE5vZGUgPSByZXF1aXJlKCcuL25vZGUnKVxubGV0IHBhcnNlID0gcmVxdWlyZSgnLi9wYXJzZScpXG5sZXQgUHJvY2Vzc29yID0gcmVxdWlyZSgnLi9wcm9jZXNzb3InKVxubGV0IFJlc3VsdCA9IHJlcXVpcmUoJy4vcmVzdWx0LmpzJylcbmxldCBSb290ID0gcmVxdWlyZSgnLi9yb290JylcbmxldCBSdWxlID0gcmVxdWlyZSgnLi9ydWxlJylcbmxldCBzdHJpbmdpZnkgPSByZXF1aXJlKCcuL3N0cmluZ2lmeScpXG5sZXQgV2FybmluZyA9IHJlcXVpcmUoJy4vd2FybmluZycpXG5cbmZ1bmN0aW9uIHBvc3Rjc3MoLi4ucGx1Z2lucykge1xuICBpZiAocGx1Z2lucy5sZW5ndGggPT09IDEgJiYgQXJyYXkuaXNBcnJheShwbHVnaW5zWzBdKSkge1xuICAgIHBsdWdpbnMgPSBwbHVnaW5zWzBdXG4gIH1cbiAgcmV0dXJuIG5ldyBQcm9jZXNzb3IocGx1Z2lucylcbn1cblxucG9zdGNzcy5wbHVnaW4gPSBmdW5jdGlvbiBwbHVnaW4obmFtZSwgaW5pdGlhbGl6ZXIpIHtcbiAgbGV0IHdhcm5pbmdQcmludGVkID0gZmFsc2VcbiAgZnVuY3Rpb24gY3JlYXRvciguLi5hcmdzKSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnNvbGVcbiAgICBpZiAoY29uc29sZSAmJiBjb25zb2xlLndhcm4gJiYgIXdhcm5pbmdQcmludGVkKSB7XG4gICAgICB3YXJuaW5nUHJpbnRlZCA9IHRydWVcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zb2xlXG4gICAgICBjb25zb2xlLndhcm4oXG4gICAgICAgIG5hbWUgK1xuICAgICAgICAgICc6IHBvc3Rjc3MucGx1Z2luIHdhcyBkZXByZWNhdGVkLiBNaWdyYXRpb24gZ3VpZGU6XFxuJyArXG4gICAgICAgICAgJ2h0dHBzOi8vZXZpbG1hcnRpYW5zLmNvbS9jaHJvbmljbGVzL3Bvc3Rjc3MtOC1wbHVnaW4tbWlncmF0aW9uJ1xuICAgICAgKVxuICAgICAgaWYgKHByb2Nlc3MuZW52LkxBTkcgJiYgcHJvY2Vzcy5lbnYuTEFORy5zdGFydHNXaXRoKCdjbicpKSB7XG4gICAgICAgIC8qIGM4IGlnbm9yZSBuZXh0IDcgKi9cbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnNvbGVcbiAgICAgICAgY29uc29sZS53YXJuKFxuICAgICAgICAgIG5hbWUgK1xuICAgICAgICAgICAgJzog6YeM6Z2iIHBvc3Rjc3MucGx1Z2luIOiiq+W8g+eUqC4g6L+B56e75oyH5Y2XOlxcbicgK1xuICAgICAgICAgICAgJ2h0dHBzOi8vd3d3LnczY3RlY2guY29tL3RvcGljLzIyMjYnXG4gICAgICAgIClcbiAgICAgIH1cbiAgICB9XG4gICAgbGV0IHRyYW5zZm9ybWVyID0gaW5pdGlhbGl6ZXIoLi4uYXJncylcbiAgICB0cmFuc2Zvcm1lci5wb3N0Y3NzUGx1Z2luID0gbmFtZVxuICAgIHRyYW5zZm9ybWVyLnBvc3Rjc3NWZXJzaW9uID0gbmV3IFByb2Nlc3NvcigpLnZlcnNpb25cbiAgICByZXR1cm4gdHJhbnNmb3JtZXJcbiAgfVxuXG4gIGxldCBjYWNoZVxuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoY3JlYXRvciwgJ3Bvc3Rjc3MnLCB7XG4gICAgZ2V0KCkge1xuICAgICAgaWYgKCFjYWNoZSkgY2FjaGUgPSBjcmVhdG9yKClcbiAgICAgIHJldHVybiBjYWNoZVxuICAgIH1cbiAgfSlcblxuICBjcmVhdG9yLnByb2Nlc3MgPSBmdW5jdGlvbiAoY3NzLCBwcm9jZXNzT3B0cywgcGx1Z2luT3B0cykge1xuICAgIHJldHVybiBwb3N0Y3NzKFtjcmVhdG9yKHBsdWdpbk9wdHMpXSkucHJvY2Vzcyhjc3MsIHByb2Nlc3NPcHRzKVxuICB9XG5cbiAgcmV0dXJuIGNyZWF0b3Jcbn1cblxucG9zdGNzcy5zdHJpbmdpZnkgPSBzdHJpbmdpZnlcbnBvc3Rjc3MucGFyc2UgPSBwYXJzZVxucG9zdGNzcy5mcm9tSlNPTiA9IGZyb21KU09OXG5wb3N0Y3NzLmxpc3QgPSBsaXN0XG5cbnBvc3Rjc3MuY29tbWVudCA9IGRlZmF1bHRzID0+IG5ldyBDb21tZW50KGRlZmF1bHRzKVxucG9zdGNzcy5hdFJ1bGUgPSBkZWZhdWx0cyA9PiBuZXcgQXRSdWxlKGRlZmF1bHRzKVxucG9zdGNzcy5kZWNsID0gZGVmYXVsdHMgPT4gbmV3IERlY2xhcmF0aW9uKGRlZmF1bHRzKVxucG9zdGNzcy5ydWxlID0gZGVmYXVsdHMgPT4gbmV3IFJ1bGUoZGVmYXVsdHMpXG5wb3N0Y3NzLnJvb3QgPSBkZWZhdWx0cyA9PiBuZXcgUm9vdChkZWZhdWx0cylcbnBvc3Rjc3MuZG9jdW1lbnQgPSBkZWZhdWx0cyA9PiBuZXcgRG9jdW1lbnQoZGVmYXVsdHMpXG5cbnBvc3Rjc3MuQ3NzU3ludGF4RXJyb3IgPSBDc3NTeW50YXhFcnJvclxucG9zdGNzcy5EZWNsYXJhdGlvbiA9IERlY2xhcmF0aW9uXG5wb3N0Y3NzLkNvbnRhaW5lciA9IENvbnRhaW5lclxucG9zdGNzcy5Qcm9jZXNzb3IgPSBQcm9jZXNzb3JcbnBvc3Rjc3MuRG9jdW1lbnQgPSBEb2N1bWVudFxucG9zdGNzcy5Db21tZW50ID0gQ29tbWVudFxucG9zdGNzcy5XYXJuaW5nID0gV2FybmluZ1xucG9zdGNzcy5BdFJ1bGUgPSBBdFJ1bGVcbnBvc3Rjc3MuUmVzdWx0ID0gUmVzdWx0XG5wb3N0Y3NzLklucHV0ID0gSW5wdXRcbnBvc3Rjc3MuUnVsZSA9IFJ1bGVcbnBvc3Rjc3MuUm9vdCA9IFJvb3RcbnBvc3Rjc3MuTm9kZSA9IE5vZGVcblxuTGF6eVJlc3VsdC5yZWdpc3RlclBvc3Rjc3MocG9zdGNzcylcblxubW9kdWxlLmV4cG9ydHMgPSBwb3N0Y3NzXG5wb3N0Y3NzLmRlZmF1bHQgPSBwb3N0Y3NzXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///12895\n")},93878:(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval("\n\nlet { existsSync, readFileSync } = __webpack_require__(19977)\nlet { dirname, join } = __webpack_require__(197)\nlet { SourceMapConsumer, SourceMapGenerator } = __webpack_require__(21866)\n\nfunction fromBase64(str) {\n  if (Buffer) {\n    return Buffer.from(str, 'base64').toString()\n  } else {\n    /* c8 ignore next 2 */\n    return window.atob(str)\n  }\n}\n\nclass PreviousMap {\n  constructor(css, opts) {\n    if (opts.map === false) return\n    this.loadAnnotation(css)\n    this.inline = this.startWith(this.annotation, 'data:')\n\n    let prev = opts.map ? opts.map.prev : undefined\n    let text = this.loadMap(opts.from, prev)\n    if (!this.mapFile && opts.from) {\n      this.mapFile = opts.from\n    }\n    if (this.mapFile) this.root = dirname(this.mapFile)\n    if (text) this.text = text\n  }\n\n  consumer() {\n    if (!this.consumerCache) {\n      this.consumerCache = new SourceMapConsumer(this.text)\n    }\n    return this.consumerCache\n  }\n\n  decodeInline(text) {\n    let baseCharsetUri = /^data:application\\/json;charset=utf-?8;base64,/\n    let baseUri = /^data:application\\/json;base64,/\n    let charsetUri = /^data:application\\/json;charset=utf-?8,/\n    let uri = /^data:application\\/json,/\n\n    let uriMatch = text.match(charsetUri) || text.match(uri)\n    if (uriMatch) {\n      return decodeURIComponent(text.substr(uriMatch[0].length))\n    }\n\n    let baseUriMatch = text.match(baseCharsetUri) || text.match(baseUri)\n    if (baseUriMatch) {\n      return fromBase64(text.substr(baseUriMatch[0].length))\n    }\n\n    let encoding = text.match(/data:application\\/json;([^,]+),/)[1]\n    throw new Error('Unsupported source map encoding ' + encoding)\n  }\n\n  getAnnotationURL(sourceMapString) {\n    return sourceMapString.replace(/^\\/\\*\\s*# sourceMappingURL=/, '').trim()\n  }\n\n  isMap(map) {\n    if (typeof map !== 'object') return false\n    return (\n      typeof map.mappings === 'string' ||\n      typeof map._mappings === 'string' ||\n      Array.isArray(map.sections)\n    )\n  }\n\n  loadAnnotation(css) {\n    let comments = css.match(/\\/\\*\\s*# sourceMappingURL=/g)\n    if (!comments) return\n\n    // sourceMappingURLs from comments, strings, etc.\n    let start = css.lastIndexOf(comments.pop())\n    let end = css.indexOf('*/', start)\n\n    if (start > -1 && end > -1) {\n      // Locate the last sourceMappingURL to avoid pickin\n      this.annotation = this.getAnnotationURL(css.substring(start, end))\n    }\n  }\n\n  loadFile(path) {\n    this.root = dirname(path)\n    if (existsSync(path)) {\n      this.mapFile = path\n      return readFileSync(path, 'utf-8').toString().trim()\n    }\n  }\n\n  loadMap(file, prev) {\n    if (prev === false) return false\n\n    if (prev) {\n      if (typeof prev === 'string') {\n        return prev\n      } else if (typeof prev === 'function') {\n        let prevPath = prev(file)\n        if (prevPath) {\n          let map = this.loadFile(prevPath)\n          if (!map) {\n            throw new Error(\n              'Unable to load previous source map: ' + prevPath.toString()\n            )\n          }\n          return map\n        }\n      } else if (prev instanceof SourceMapConsumer) {\n        return SourceMapGenerator.fromSourceMap(prev).toString()\n      } else if (prev instanceof SourceMapGenerator) {\n        return prev.toString()\n      } else if (this.isMap(prev)) {\n        return JSON.stringify(prev)\n      } else {\n        throw new Error(\n          'Unsupported previous source map format: ' + prev.toString()\n        )\n      }\n    } else if (this.inline) {\n      return this.decodeInline(this.annotation)\n    } else if (this.annotation) {\n      let map = this.annotation\n      if (file) map = join(dirname(file), map)\n      return this.loadFile(map)\n    }\n  }\n\n  startWith(string, start) {\n    if (!string) return false\n    return string.substr(0, start.length) === start\n  }\n\n  withContent() {\n    return !!(\n      this.consumer().sourcesContent &&\n      this.consumer().sourcesContent.length > 0\n    )\n  }\n}\n\nmodule.exports = PreviousMap\nPreviousMap.default = PreviousMap\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOTM4NzguanMiLCJtYXBwaW5ncyI6IkFBQVk7O0FBRVosTUFBTSwyQkFBMkIsRUFBRSxtQkFBTyxDQUFDLEtBQUk7QUFDL0MsTUFBTSxnQkFBZ0IsRUFBRSxtQkFBTyxDQUFDLEdBQU07QUFDdEMsTUFBTSx3Q0FBd0MsRUFBRSxtQkFBTyxDQUFDLEtBQWU7O0FBRXZFO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0Esa0RBQWtELGVBQWU7QUFDakUsMkNBQTJDO0FBQzNDLDhDQUE4QztBQUM5Qzs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxzREFBc0Q7QUFDdEQ7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQSxRQUFRO0FBQ1I7QUFDQSxRQUFRO0FBQ1I7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYmxvY2tiaXRlLy4vbm9kZV9tb2R1bGVzL3Bvc3Rjc3MvbGliL3ByZXZpb3VzLW1hcC5qcz8wYjcxIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0J1xuXG5sZXQgeyBleGlzdHNTeW5jLCByZWFkRmlsZVN5bmMgfSA9IHJlcXVpcmUoJ2ZzJylcbmxldCB7IGRpcm5hbWUsIGpvaW4gfSA9IHJlcXVpcmUoJ3BhdGgnKVxubGV0IHsgU291cmNlTWFwQ29uc3VtZXIsIFNvdXJjZU1hcEdlbmVyYXRvciB9ID0gcmVxdWlyZSgnc291cmNlLW1hcC1qcycpXG5cbmZ1bmN0aW9uIGZyb21CYXNlNjQoc3RyKSB7XG4gIGlmIChCdWZmZXIpIHtcbiAgICByZXR1cm4gQnVmZmVyLmZyb20oc3RyLCAnYmFzZTY0JykudG9TdHJpbmcoKVxuICB9IGVsc2Uge1xuICAgIC8qIGM4IGlnbm9yZSBuZXh0IDIgKi9cbiAgICByZXR1cm4gd2luZG93LmF0b2Ioc3RyKVxuICB9XG59XG5cbmNsYXNzIFByZXZpb3VzTWFwIHtcbiAgY29uc3RydWN0b3IoY3NzLCBvcHRzKSB7XG4gICAgaWYgKG9wdHMubWFwID09PSBmYWxzZSkgcmV0dXJuXG4gICAgdGhpcy5sb2FkQW5ub3RhdGlvbihjc3MpXG4gICAgdGhpcy5pbmxpbmUgPSB0aGlzLnN0YXJ0V2l0aCh0aGlzLmFubm90YXRpb24sICdkYXRhOicpXG5cbiAgICBsZXQgcHJldiA9IG9wdHMubWFwID8gb3B0cy5tYXAucHJldiA6IHVuZGVmaW5lZFxuICAgIGxldCB0ZXh0ID0gdGhpcy5sb2FkTWFwKG9wdHMuZnJvbSwgcHJldilcbiAgICBpZiAoIXRoaXMubWFwRmlsZSAmJiBvcHRzLmZyb20pIHtcbiAgICAgIHRoaXMubWFwRmlsZSA9IG9wdHMuZnJvbVxuICAgIH1cbiAgICBpZiAodGhpcy5tYXBGaWxlKSB0aGlzLnJvb3QgPSBkaXJuYW1lKHRoaXMubWFwRmlsZSlcbiAgICBpZiAodGV4dCkgdGhpcy50ZXh0ID0gdGV4dFxuICB9XG5cbiAgY29uc3VtZXIoKSB7XG4gICAgaWYgKCF0aGlzLmNvbnN1bWVyQ2FjaGUpIHtcbiAgICAgIHRoaXMuY29uc3VtZXJDYWNoZSA9IG5ldyBTb3VyY2VNYXBDb25zdW1lcih0aGlzLnRleHQpXG4gICAgfVxuICAgIHJldHVybiB0aGlzLmNvbnN1bWVyQ2FjaGVcbiAgfVxuXG4gIGRlY29kZUlubGluZSh0ZXh0KSB7XG4gICAgbGV0IGJhc2VDaGFyc2V0VXJpID0gL15kYXRhOmFwcGxpY2F0aW9uXFwvanNvbjtjaGFyc2V0PXV0Zi0/ODtiYXNlNjQsL1xuICAgIGxldCBiYXNlVXJpID0gL15kYXRhOmFwcGxpY2F0aW9uXFwvanNvbjtiYXNlNjQsL1xuICAgIGxldCBjaGFyc2V0VXJpID0gL15kYXRhOmFwcGxpY2F0aW9uXFwvanNvbjtjaGFyc2V0PXV0Zi0/OCwvXG4gICAgbGV0IHVyaSA9IC9eZGF0YTphcHBsaWNhdGlvblxcL2pzb24sL1xuXG4gICAgbGV0IHVyaU1hdGNoID0gdGV4dC5tYXRjaChjaGFyc2V0VXJpKSB8fCB0ZXh0Lm1hdGNoKHVyaSlcbiAgICBpZiAodXJpTWF0Y2gpIHtcbiAgICAgIHJldHVybiBkZWNvZGVVUklDb21wb25lbnQodGV4dC5zdWJzdHIodXJpTWF0Y2hbMF0ubGVuZ3RoKSlcbiAgICB9XG5cbiAgICBsZXQgYmFzZVVyaU1hdGNoID0gdGV4dC5tYXRjaChiYXNlQ2hhcnNldFVyaSkgfHwgdGV4dC5tYXRjaChiYXNlVXJpKVxuICAgIGlmIChiYXNlVXJpTWF0Y2gpIHtcbiAgICAgIHJldHVybiBmcm9tQmFzZTY0KHRleHQuc3Vic3RyKGJhc2VVcmlNYXRjaFswXS5sZW5ndGgpKVxuICAgIH1cblxuICAgIGxldCBlbmNvZGluZyA9IHRleHQubWF0Y2goL2RhdGE6YXBwbGljYXRpb25cXC9qc29uOyhbXixdKyksLylbMV1cbiAgICB0aHJvdyBuZXcgRXJyb3IoJ1Vuc3VwcG9ydGVkIHNvdXJjZSBtYXAgZW5jb2RpbmcgJyArIGVuY29kaW5nKVxuICB9XG5cbiAgZ2V0QW5ub3RhdGlvblVSTChzb3VyY2VNYXBTdHJpbmcpIHtcbiAgICByZXR1cm4gc291cmNlTWFwU3RyaW5nLnJlcGxhY2UoL15cXC9cXCpcXHMqIyBzb3VyY2VNYXBwaW5nVVJMPS8sICcnKS50cmltKClcbiAgfVxuXG4gIGlzTWFwKG1hcCkge1xuICAgIGlmICh0eXBlb2YgbWFwICE9PSAnb2JqZWN0JykgcmV0dXJuIGZhbHNlXG4gICAgcmV0dXJuIChcbiAgICAgIHR5cGVvZiBtYXAubWFwcGluZ3MgPT09ICdzdHJpbmcnIHx8XG4gICAgICB0eXBlb2YgbWFwLl9tYXBwaW5ncyA9PT0gJ3N0cmluZycgfHxcbiAgICAgIEFycmF5LmlzQXJyYXkobWFwLnNlY3Rpb25zKVxuICAgIClcbiAgfVxuXG4gIGxvYWRBbm5vdGF0aW9uKGNzcykge1xuICAgIGxldCBjb21tZW50cyA9IGNzcy5tYXRjaCgvXFwvXFwqXFxzKiMgc291cmNlTWFwcGluZ1VSTD0vZylcbiAgICBpZiAoIWNvbW1lbnRzKSByZXR1cm5cblxuICAgIC8vIHNvdXJjZU1hcHBpbmdVUkxzIGZyb20gY29tbWVudHMsIHN0cmluZ3MsIGV0Yy5cbiAgICBsZXQgc3RhcnQgPSBjc3MubGFzdEluZGV4T2YoY29tbWVudHMucG9wKCkpXG4gICAgbGV0IGVuZCA9IGNzcy5pbmRleE9mKCcqLycsIHN0YXJ0KVxuXG4gICAgaWYgKHN0YXJ0ID4gLTEgJiYgZW5kID4gLTEpIHtcbiAgICAgIC8vIExvY2F0ZSB0aGUgbGFzdCBzb3VyY2VNYXBwaW5nVVJMIHRvIGF2b2lkIHBpY2tpblxuICAgICAgdGhpcy5hbm5vdGF0aW9uID0gdGhpcy5nZXRBbm5vdGF0aW9uVVJMKGNzcy5zdWJzdHJpbmcoc3RhcnQsIGVuZCkpXG4gICAgfVxuICB9XG5cbiAgbG9hZEZpbGUocGF0aCkge1xuICAgIHRoaXMucm9vdCA9IGRpcm5hbWUocGF0aClcbiAgICBpZiAoZXhpc3RzU3luYyhwYXRoKSkge1xuICAgICAgdGhpcy5tYXBGaWxlID0gcGF0aFxuICAgICAgcmV0dXJuIHJlYWRGaWxlU3luYyhwYXRoLCAndXRmLTgnKS50b1N0cmluZygpLnRyaW0oKVxuICAgIH1cbiAgfVxuXG4gIGxvYWRNYXAoZmlsZSwgcHJldikge1xuICAgIGlmIChwcmV2ID09PSBmYWxzZSkgcmV0dXJuIGZhbHNlXG5cbiAgICBpZiAocHJldikge1xuICAgICAgaWYgKHR5cGVvZiBwcmV2ID09PSAnc3RyaW5nJykge1xuICAgICAgICByZXR1cm4gcHJldlxuICAgICAgfSBlbHNlIGlmICh0eXBlb2YgcHJldiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICBsZXQgcHJldlBhdGggPSBwcmV2KGZpbGUpXG4gICAgICAgIGlmIChwcmV2UGF0aCkge1xuICAgICAgICAgIGxldCBtYXAgPSB0aGlzLmxvYWRGaWxlKHByZXZQYXRoKVxuICAgICAgICAgIGlmICghbWFwKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICAgICAgICdVbmFibGUgdG8gbG9hZCBwcmV2aW91cyBzb3VyY2UgbWFwOiAnICsgcHJldlBhdGgudG9TdHJpbmcoKVxuICAgICAgICAgICAgKVxuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gbWFwXG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAocHJldiBpbnN0YW5jZW9mIFNvdXJjZU1hcENvbnN1bWVyKSB7XG4gICAgICAgIHJldHVybiBTb3VyY2VNYXBHZW5lcmF0b3IuZnJvbVNvdXJjZU1hcChwcmV2KS50b1N0cmluZygpXG4gICAgICB9IGVsc2UgaWYgKHByZXYgaW5zdGFuY2VvZiBTb3VyY2VNYXBHZW5lcmF0b3IpIHtcbiAgICAgICAgcmV0dXJuIHByZXYudG9TdHJpbmcoKVxuICAgICAgfSBlbHNlIGlmICh0aGlzLmlzTWFwKHByZXYpKSB7XG4gICAgICAgIHJldHVybiBKU09OLnN0cmluZ2lmeShwcmV2KVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAgICdVbnN1cHBvcnRlZCBwcmV2aW91cyBzb3VyY2UgbWFwIGZvcm1hdDogJyArIHByZXYudG9TdHJpbmcoKVxuICAgICAgICApXG4gICAgICB9XG4gICAgfSBlbHNlIGlmICh0aGlzLmlubGluZSkge1xuICAgICAgcmV0dXJuIHRoaXMuZGVjb2RlSW5saW5lKHRoaXMuYW5ub3RhdGlvbilcbiAgICB9IGVsc2UgaWYgKHRoaXMuYW5ub3RhdGlvbikge1xuICAgICAgbGV0IG1hcCA9IHRoaXMuYW5ub3RhdGlvblxuICAgICAgaWYgKGZpbGUpIG1hcCA9IGpvaW4oZGlybmFtZShmaWxlKSwgbWFwKVxuICAgICAgcmV0dXJuIHRoaXMubG9hZEZpbGUobWFwKVxuICAgIH1cbiAgfVxuXG4gIHN0YXJ0V2l0aChzdHJpbmcsIHN0YXJ0KSB7XG4gICAgaWYgKCFzdHJpbmcpIHJldHVybiBmYWxzZVxuICAgIHJldHVybiBzdHJpbmcuc3Vic3RyKDAsIHN0YXJ0Lmxlbmd0aCkgPT09IHN0YXJ0XG4gIH1cblxuICB3aXRoQ29udGVudCgpIHtcbiAgICByZXR1cm4gISEoXG4gICAgICB0aGlzLmNvbnN1bWVyKCkuc291cmNlc0NvbnRlbnQgJiZcbiAgICAgIHRoaXMuY29uc3VtZXIoKS5zb3VyY2VzQ29udGVudC5sZW5ndGggPiAwXG4gICAgKVxuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gUHJldmlvdXNNYXBcblByZXZpb3VzTWFwLmRlZmF1bHQgPSBQcmV2aW91c01hcFxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///93878\n")},96846:(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval("\n\nlet Document = __webpack_require__(40145)\nlet LazyResult = __webpack_require__(96966)\nlet NoWorkResult = __webpack_require__(84211)\nlet Root = __webpack_require__(25644)\n\nclass Processor {\n  constructor(plugins = []) {\n    this.version = '8.4.47'\n    this.plugins = this.normalize(plugins)\n  }\n\n  normalize(plugins) {\n    let normalized = []\n    for (let i of plugins) {\n      if (i.postcss === true) {\n        i = i()\n      } else if (i.postcss) {\n        i = i.postcss\n      }\n\n      if (typeof i === 'object' && Array.isArray(i.plugins)) {\n        normalized = normalized.concat(i.plugins)\n      } else if (typeof i === 'object' && i.postcssPlugin) {\n        normalized.push(i)\n      } else if (typeof i === 'function') {\n        normalized.push(i)\n      } else if (typeof i === 'object' && (i.parse || i.stringify)) {\n        if (false) {}\n      } else {\n        throw new Error(i + ' is not a PostCSS plugin')\n      }\n    }\n    return normalized\n  }\n\n  process(css, opts = {}) {\n    if (\n      !this.plugins.length &&\n      !opts.parser &&\n      !opts.stringifier &&\n      !opts.syntax\n    ) {\n      return new NoWorkResult(this, css, opts)\n    } else {\n      return new LazyResult(this, css, opts)\n    }\n  }\n\n  use(plugin) {\n    this.plugins = this.plugins.concat(this.normalize([plugin]))\n    return this\n  }\n}\n\nmodule.exports = Processor\nProcessor.default = Processor\n\nRoot.registerProcessor(Processor)\nDocument.registerProcessor(Processor)\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOTY4NDYuanMiLCJtYXBwaW5ncyI6IkFBQVk7O0FBRVosZUFBZSxtQkFBTyxDQUFDLEtBQVk7QUFDbkMsaUJBQWlCLG1CQUFPLENBQUMsS0FBZTtBQUN4QyxtQkFBbUIsbUJBQU8sQ0FBQyxLQUFrQjtBQUM3QyxXQUFXLG1CQUFPLENBQUMsS0FBUTs7QUFFM0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBLFFBQVE7QUFDUjtBQUNBLFFBQVE7QUFDUixZQUFZLEtBQXFDLEVBQUUsRUFNMUM7QUFDVCxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSx3QkFBd0I7QUFDeEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYmxvY2tiaXRlLy4vbm9kZV9tb2R1bGVzL3Bvc3Rjc3MvbGliL3Byb2Nlc3Nvci5qcz81OGQzIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0J1xuXG5sZXQgRG9jdW1lbnQgPSByZXF1aXJlKCcuL2RvY3VtZW50JylcbmxldCBMYXp5UmVzdWx0ID0gcmVxdWlyZSgnLi9sYXp5LXJlc3VsdCcpXG5sZXQgTm9Xb3JrUmVzdWx0ID0gcmVxdWlyZSgnLi9uby13b3JrLXJlc3VsdCcpXG5sZXQgUm9vdCA9IHJlcXVpcmUoJy4vcm9vdCcpXG5cbmNsYXNzIFByb2Nlc3NvciB7XG4gIGNvbnN0cnVjdG9yKHBsdWdpbnMgPSBbXSkge1xuICAgIHRoaXMudmVyc2lvbiA9ICc4LjQuNDcnXG4gICAgdGhpcy5wbHVnaW5zID0gdGhpcy5ub3JtYWxpemUocGx1Z2lucylcbiAgfVxuXG4gIG5vcm1hbGl6ZShwbHVnaW5zKSB7XG4gICAgbGV0IG5vcm1hbGl6ZWQgPSBbXVxuICAgIGZvciAobGV0IGkgb2YgcGx1Z2lucykge1xuICAgICAgaWYgKGkucG9zdGNzcyA9PT0gdHJ1ZSkge1xuICAgICAgICBpID0gaSgpXG4gICAgICB9IGVsc2UgaWYgKGkucG9zdGNzcykge1xuICAgICAgICBpID0gaS5wb3N0Y3NzXG4gICAgICB9XG5cbiAgICAgIGlmICh0eXBlb2YgaSA9PT0gJ29iamVjdCcgJiYgQXJyYXkuaXNBcnJheShpLnBsdWdpbnMpKSB7XG4gICAgICAgIG5vcm1hbGl6ZWQgPSBub3JtYWxpemVkLmNvbmNhdChpLnBsdWdpbnMpXG4gICAgICB9IGVsc2UgaWYgKHR5cGVvZiBpID09PSAnb2JqZWN0JyAmJiBpLnBvc3Rjc3NQbHVnaW4pIHtcbiAgICAgICAgbm9ybWFsaXplZC5wdXNoKGkpXG4gICAgICB9IGVsc2UgaWYgKHR5cGVvZiBpID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIG5vcm1hbGl6ZWQucHVzaChpKVxuICAgICAgfSBlbHNlIGlmICh0eXBlb2YgaSA9PT0gJ29iamVjdCcgJiYgKGkucGFyc2UgfHwgaS5zdHJpbmdpZnkpKSB7XG4gICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAgICAgJ1Bvc3RDU1Mgc3ludGF4ZXMgY2Fubm90IGJlIHVzZWQgYXMgcGx1Z2lucy4gSW5zdGVhZCwgcGxlYXNlIHVzZSAnICtcbiAgICAgICAgICAgICAgJ29uZSBvZiB0aGUgc3ludGF4L3BhcnNlci9zdHJpbmdpZmllciBvcHRpb25zIGFzIG91dGxpbmVkICcgK1xuICAgICAgICAgICAgICAnaW4geW91ciBQb3N0Q1NTIHJ1bm5lciBkb2N1bWVudGF0aW9uLidcbiAgICAgICAgICApXG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihpICsgJyBpcyBub3QgYSBQb3N0Q1NTIHBsdWdpbicpXG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBub3JtYWxpemVkXG4gIH1cblxuICBwcm9jZXNzKGNzcywgb3B0cyA9IHt9KSB7XG4gICAgaWYgKFxuICAgICAgIXRoaXMucGx1Z2lucy5sZW5ndGggJiZcbiAgICAgICFvcHRzLnBhcnNlciAmJlxuICAgICAgIW9wdHMuc3RyaW5naWZpZXIgJiZcbiAgICAgICFvcHRzLnN5bnRheFxuICAgICkge1xuICAgICAgcmV0dXJuIG5ldyBOb1dvcmtSZXN1bHQodGhpcywgY3NzLCBvcHRzKVxuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gbmV3IExhenlSZXN1bHQodGhpcywgY3NzLCBvcHRzKVxuICAgIH1cbiAgfVxuXG4gIHVzZShwbHVnaW4pIHtcbiAgICB0aGlzLnBsdWdpbnMgPSB0aGlzLnBsdWdpbnMuY29uY2F0KHRoaXMubm9ybWFsaXplKFtwbHVnaW5dKSlcbiAgICByZXR1cm4gdGhpc1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gUHJvY2Vzc29yXG5Qcm9jZXNzb3IuZGVmYXVsdCA9IFByb2Nlc3NvclxuXG5Sb290LnJlZ2lzdGVyUHJvY2Vzc29yKFByb2Nlc3NvcilcbkRvY3VtZW50LnJlZ2lzdGVyUHJvY2Vzc29yKFByb2Nlc3NvcilcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///96846\n")},33717:(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval("\n\nlet Warning = __webpack_require__(60038)\n\nclass Result {\n  constructor(processor, root, opts) {\n    this.processor = processor\n    this.messages = []\n    this.root = root\n    this.opts = opts\n    this.css = undefined\n    this.map = undefined\n  }\n\n  toString() {\n    return this.css\n  }\n\n  warn(text, opts = {}) {\n    if (!opts.plugin) {\n      if (this.lastPlugin && this.lastPlugin.postcssPlugin) {\n        opts.plugin = this.lastPlugin.postcssPlugin\n      }\n    }\n\n    let warning = new Warning(text, opts)\n    this.messages.push(warning)\n\n    return warning\n  }\n\n  warnings() {\n    return this.messages.filter(i => i.type === 'warning')\n  }\n\n  get content() {\n    return this.css\n  }\n}\n\nmodule.exports = Result\nResult.default = Result\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzM3MTcuanMiLCJtYXBwaW5ncyI6IkFBQVk7O0FBRVosY0FBYyxtQkFBTyxDQUFDLEtBQVc7O0FBRWpDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUEsc0JBQXNCO0FBQ3RCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYmxvY2tiaXRlLy4vbm9kZV9tb2R1bGVzL3Bvc3Rjc3MvbGliL3Jlc3VsdC5qcz9iN2E0Il0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0J1xuXG5sZXQgV2FybmluZyA9IHJlcXVpcmUoJy4vd2FybmluZycpXG5cbmNsYXNzIFJlc3VsdCB7XG4gIGNvbnN0cnVjdG9yKHByb2Nlc3Nvciwgcm9vdCwgb3B0cykge1xuICAgIHRoaXMucHJvY2Vzc29yID0gcHJvY2Vzc29yXG4gICAgdGhpcy5tZXNzYWdlcyA9IFtdXG4gICAgdGhpcy5yb290ID0gcm9vdFxuICAgIHRoaXMub3B0cyA9IG9wdHNcbiAgICB0aGlzLmNzcyA9IHVuZGVmaW5lZFxuICAgIHRoaXMubWFwID0gdW5kZWZpbmVkXG4gIH1cblxuICB0b1N0cmluZygpIHtcbiAgICByZXR1cm4gdGhpcy5jc3NcbiAgfVxuXG4gIHdhcm4odGV4dCwgb3B0cyA9IHt9KSB7XG4gICAgaWYgKCFvcHRzLnBsdWdpbikge1xuICAgICAgaWYgKHRoaXMubGFzdFBsdWdpbiAmJiB0aGlzLmxhc3RQbHVnaW4ucG9zdGNzc1BsdWdpbikge1xuICAgICAgICBvcHRzLnBsdWdpbiA9IHRoaXMubGFzdFBsdWdpbi5wb3N0Y3NzUGx1Z2luXG4gICAgICB9XG4gICAgfVxuXG4gICAgbGV0IHdhcm5pbmcgPSBuZXcgV2FybmluZyh0ZXh0LCBvcHRzKVxuICAgIHRoaXMubWVzc2FnZXMucHVzaCh3YXJuaW5nKVxuXG4gICAgcmV0dXJuIHdhcm5pbmdcbiAgfVxuXG4gIHdhcm5pbmdzKCkge1xuICAgIHJldHVybiB0aGlzLm1lc3NhZ2VzLmZpbHRlcihpID0+IGkudHlwZSA9PT0gJ3dhcm5pbmcnKVxuICB9XG5cbiAgZ2V0IGNvbnRlbnQoKSB7XG4gICAgcmV0dXJuIHRoaXMuY3NzXG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBSZXN1bHRcblJlc3VsdC5kZWZhdWx0ID0gUmVzdWx0XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///33717\n")},25644:(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval("\n\nlet Container = __webpack_require__(77793)\n\nlet LazyResult, Processor\n\nclass Root extends Container {\n  constructor(defaults) {\n    super(defaults)\n    this.type = 'root'\n    if (!this.nodes) this.nodes = []\n  }\n\n  normalize(child, sample, type) {\n    let nodes = super.normalize(child)\n\n    if (sample) {\n      if (type === 'prepend') {\n        if (this.nodes.length > 1) {\n          sample.raws.before = this.nodes[1].raws.before\n        } else {\n          delete sample.raws.before\n        }\n      } else if (this.first !== sample) {\n        for (let node of nodes) {\n          node.raws.before = sample.raws.before\n        }\n      }\n    }\n\n    return nodes\n  }\n\n  removeChild(child, ignore) {\n    let index = this.index(child)\n\n    if (!ignore && index === 0 && this.nodes.length > 1) {\n      this.nodes[1].raws.before = this.nodes[index].raws.before\n    }\n\n    return super.removeChild(child)\n  }\n\n  toResult(opts = {}) {\n    let lazy = new LazyResult(new Processor(), this, opts)\n    return lazy.stringify()\n  }\n}\n\nRoot.registerLazyResult = dependant => {\n  LazyResult = dependant\n}\n\nRoot.registerProcessor = dependant => {\n  Processor = dependant\n}\n\nmodule.exports = Root\nRoot.default = Root\n\nContainer.registerRoot(Root)\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjU2NDQuanMiLCJtYXBwaW5ncyI6IkFBQVk7O0FBRVosZ0JBQWdCLG1CQUFPLENBQUMsS0FBYTs7QUFFckM7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQSxvQkFBb0I7QUFDcEI7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYmxvY2tiaXRlLy4vbm9kZV9tb2R1bGVzL3Bvc3Rjc3MvbGliL3Jvb3QuanM/NGRlYiJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCdcblxubGV0IENvbnRhaW5lciA9IHJlcXVpcmUoJy4vY29udGFpbmVyJylcblxubGV0IExhenlSZXN1bHQsIFByb2Nlc3NvclxuXG5jbGFzcyBSb290IGV4dGVuZHMgQ29udGFpbmVyIHtcbiAgY29uc3RydWN0b3IoZGVmYXVsdHMpIHtcbiAgICBzdXBlcihkZWZhdWx0cylcbiAgICB0aGlzLnR5cGUgPSAncm9vdCdcbiAgICBpZiAoIXRoaXMubm9kZXMpIHRoaXMubm9kZXMgPSBbXVxuICB9XG5cbiAgbm9ybWFsaXplKGNoaWxkLCBzYW1wbGUsIHR5cGUpIHtcbiAgICBsZXQgbm9kZXMgPSBzdXBlci5ub3JtYWxpemUoY2hpbGQpXG5cbiAgICBpZiAoc2FtcGxlKSB7XG4gICAgICBpZiAodHlwZSA9PT0gJ3ByZXBlbmQnKSB7XG4gICAgICAgIGlmICh0aGlzLm5vZGVzLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgICBzYW1wbGUucmF3cy5iZWZvcmUgPSB0aGlzLm5vZGVzWzFdLnJhd3MuYmVmb3JlXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZGVsZXRlIHNhbXBsZS5yYXdzLmJlZm9yZVxuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKHRoaXMuZmlyc3QgIT09IHNhbXBsZSkge1xuICAgICAgICBmb3IgKGxldCBub2RlIG9mIG5vZGVzKSB7XG4gICAgICAgICAgbm9kZS5yYXdzLmJlZm9yZSA9IHNhbXBsZS5yYXdzLmJlZm9yZVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIG5vZGVzXG4gIH1cblxuICByZW1vdmVDaGlsZChjaGlsZCwgaWdub3JlKSB7XG4gICAgbGV0IGluZGV4ID0gdGhpcy5pbmRleChjaGlsZClcblxuICAgIGlmICghaWdub3JlICYmIGluZGV4ID09PSAwICYmIHRoaXMubm9kZXMubGVuZ3RoID4gMSkge1xuICAgICAgdGhpcy5ub2Rlc1sxXS5yYXdzLmJlZm9yZSA9IHRoaXMubm9kZXNbaW5kZXhdLnJhd3MuYmVmb3JlXG4gICAgfVxuXG4gICAgcmV0dXJuIHN1cGVyLnJlbW92ZUNoaWxkKGNoaWxkKVxuICB9XG5cbiAgdG9SZXN1bHQob3B0cyA9IHt9KSB7XG4gICAgbGV0IGxhenkgPSBuZXcgTGF6eVJlc3VsdChuZXcgUHJvY2Vzc29yKCksIHRoaXMsIG9wdHMpXG4gICAgcmV0dXJuIGxhenkuc3RyaW5naWZ5KClcbiAgfVxufVxuXG5Sb290LnJlZ2lzdGVyTGF6eVJlc3VsdCA9IGRlcGVuZGFudCA9PiB7XG4gIExhenlSZXN1bHQgPSBkZXBlbmRhbnRcbn1cblxuUm9vdC5yZWdpc3RlclByb2Nlc3NvciA9IGRlcGVuZGFudCA9PiB7XG4gIFByb2Nlc3NvciA9IGRlcGVuZGFudFxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IFJvb3RcblJvb3QuZGVmYXVsdCA9IFJvb3RcblxuQ29udGFpbmVyLnJlZ2lzdGVyUm9vdChSb290KVxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///25644\n")},61534:(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval("\n\nlet Container = __webpack_require__(77793)\nlet list = __webpack_require__(81752)\n\nclass Rule extends Container {\n  constructor(defaults) {\n    super(defaults)\n    this.type = 'rule'\n    if (!this.nodes) this.nodes = []\n  }\n\n  get selectors() {\n    return list.comma(this.selector)\n  }\n\n  set selectors(values) {\n    let match = this.selector ? this.selector.match(/,\\s*/) : null\n    let sep = match ? match[0] : ',' + this.raw('between', 'beforeOpen')\n    this.selector = values.join(sep)\n  }\n}\n\nmodule.exports = Rule\nRule.default = Rule\n\nContainer.registerRule(Rule)\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNjE1MzQuanMiLCJtYXBwaW5ncyI6IkFBQVk7O0FBRVosZ0JBQWdCLG1CQUFPLENBQUMsS0FBYTtBQUNyQyxXQUFXLG1CQUFPLENBQUMsS0FBUTs7QUFFM0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQSIsInNvdXJjZXMiOlsid2VicGFjazovL2Jsb2NrYml0ZS8uL25vZGVfbW9kdWxlcy9wb3N0Y3NzL2xpYi9ydWxlLmpzP2RjNTciXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnXG5cbmxldCBDb250YWluZXIgPSByZXF1aXJlKCcuL2NvbnRhaW5lcicpXG5sZXQgbGlzdCA9IHJlcXVpcmUoJy4vbGlzdCcpXG5cbmNsYXNzIFJ1bGUgZXh0ZW5kcyBDb250YWluZXIge1xuICBjb25zdHJ1Y3RvcihkZWZhdWx0cykge1xuICAgIHN1cGVyKGRlZmF1bHRzKVxuICAgIHRoaXMudHlwZSA9ICdydWxlJ1xuICAgIGlmICghdGhpcy5ub2RlcykgdGhpcy5ub2RlcyA9IFtdXG4gIH1cblxuICBnZXQgc2VsZWN0b3JzKCkge1xuICAgIHJldHVybiBsaXN0LmNvbW1hKHRoaXMuc2VsZWN0b3IpXG4gIH1cblxuICBzZXQgc2VsZWN0b3JzKHZhbHVlcykge1xuICAgIGxldCBtYXRjaCA9IHRoaXMuc2VsZWN0b3IgPyB0aGlzLnNlbGVjdG9yLm1hdGNoKC8sXFxzKi8pIDogbnVsbFxuICAgIGxldCBzZXAgPSBtYXRjaCA/IG1hdGNoWzBdIDogJywnICsgdGhpcy5yYXcoJ2JldHdlZW4nLCAnYmVmb3JlT3BlbicpXG4gICAgdGhpcy5zZWxlY3RvciA9IHZhbHVlcy5qb2luKHNlcClcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IFJ1bGVcblJ1bGUuZGVmYXVsdCA9IFJ1bGVcblxuQ29udGFpbmVyLnJlZ2lzdGVyUnVsZShSdWxlKVxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///61534\n")},47668:module=>{"use strict";eval("\n\nconst DEFAULT_RAW = {\n  after: '\\n',\n  beforeClose: '\\n',\n  beforeComment: '\\n',\n  beforeDecl: '\\n',\n  beforeOpen: ' ',\n  beforeRule: '\\n',\n  colon: ': ',\n  commentLeft: ' ',\n  commentRight: ' ',\n  emptyBody: '',\n  indent: '    ',\n  semicolon: false\n}\n\nfunction capitalize(str) {\n  return str[0].toUpperCase() + str.slice(1)\n}\n\nclass Stringifier {\n  constructor(builder) {\n    this.builder = builder\n  }\n\n  atrule(node, semicolon) {\n    let name = '@' + node.name\n    let params = node.params ? this.rawValue(node, 'params') : ''\n\n    if (typeof node.raws.afterName !== 'undefined') {\n      name += node.raws.afterName\n    } else if (params) {\n      name += ' '\n    }\n\n    if (node.nodes) {\n      this.block(node, name + params)\n    } else {\n      let end = (node.raws.between || '') + (semicolon ? ';' : '')\n      this.builder(name + params + end, node)\n    }\n  }\n\n  beforeAfter(node, detect) {\n    let value\n    if (node.type === 'decl') {\n      value = this.raw(node, null, 'beforeDecl')\n    } else if (node.type === 'comment') {\n      value = this.raw(node, null, 'beforeComment')\n    } else if (detect === 'before') {\n      value = this.raw(node, null, 'beforeRule')\n    } else {\n      value = this.raw(node, null, 'beforeClose')\n    }\n\n    let buf = node.parent\n    let depth = 0\n    while (buf && buf.type !== 'root') {\n      depth += 1\n      buf = buf.parent\n    }\n\n    if (value.includes('\\n')) {\n      let indent = this.raw(node, null, 'indent')\n      if (indent.length) {\n        for (let step = 0; step < depth; step++) value += indent\n      }\n    }\n\n    return value\n  }\n\n  block(node, start) {\n    let between = this.raw(node, 'between', 'beforeOpen')\n    this.builder(start + between + '{', node, 'start')\n\n    let after\n    if (node.nodes && node.nodes.length) {\n      this.body(node)\n      after = this.raw(node, 'after')\n    } else {\n      after = this.raw(node, 'after', 'emptyBody')\n    }\n\n    if (after) this.builder(after)\n    this.builder('}', node, 'end')\n  }\n\n  body(node) {\n    let last = node.nodes.length - 1\n    while (last > 0) {\n      if (node.nodes[last].type !== 'comment') break\n      last -= 1\n    }\n\n    let semicolon = this.raw(node, 'semicolon')\n    for (let i = 0; i < node.nodes.length; i++) {\n      let child = node.nodes[i]\n      let before = this.raw(child, 'before')\n      if (before) this.builder(before)\n      this.stringify(child, last !== i || semicolon)\n    }\n  }\n\n  comment(node) {\n    let left = this.raw(node, 'left', 'commentLeft')\n    let right = this.raw(node, 'right', 'commentRight')\n    this.builder('/*' + left + node.text + right + '*/', node)\n  }\n\n  decl(node, semicolon) {\n    let between = this.raw(node, 'between', 'colon')\n    let string = node.prop + between + this.rawValue(node, 'value')\n\n    if (node.important) {\n      string += node.raws.important || ' !important'\n    }\n\n    if (semicolon) string += ';'\n    this.builder(string, node)\n  }\n\n  document(node) {\n    this.body(node)\n  }\n\n  raw(node, own, detect) {\n    let value\n    if (!detect) detect = own\n\n    // Already had\n    if (own) {\n      value = node.raws[own]\n      if (typeof value !== 'undefined') return value\n    }\n\n    let parent = node.parent\n\n    if (detect === 'before') {\n      // Hack for first rule in CSS\n      if (!parent || (parent.type === 'root' && parent.first === node)) {\n        return ''\n      }\n\n      // `root` nodes in `document` should use only their own raws\n      if (parent && parent.type === 'document') {\n        return ''\n      }\n    }\n\n    // Floating child without parent\n    if (!parent) return DEFAULT_RAW[detect]\n\n    // Detect style by other nodes\n    let root = node.root()\n    if (!root.rawCache) root.rawCache = {}\n    if (typeof root.rawCache[detect] !== 'undefined') {\n      return root.rawCache[detect]\n    }\n\n    if (detect === 'before' || detect === 'after') {\n      return this.beforeAfter(node, detect)\n    } else {\n      let method = 'raw' + capitalize(detect)\n      if (this[method]) {\n        value = this[method](root, node)\n      } else {\n        root.walk(i => {\n          value = i.raws[own]\n          if (typeof value !== 'undefined') return false\n        })\n      }\n    }\n\n    if (typeof value === 'undefined') value = DEFAULT_RAW[detect]\n\n    root.rawCache[detect] = value\n    return value\n  }\n\n  rawBeforeClose(root) {\n    let value\n    root.walk(i => {\n      if (i.nodes && i.nodes.length > 0) {\n        if (typeof i.raws.after !== 'undefined') {\n          value = i.raws.after\n          if (value.includes('\\n')) {\n            value = value.replace(/[^\\n]+$/, '')\n          }\n          return false\n        }\n      }\n    })\n    if (value) value = value.replace(/\\S/g, '')\n    return value\n  }\n\n  rawBeforeComment(root, node) {\n    let value\n    root.walkComments(i => {\n      if (typeof i.raws.before !== 'undefined') {\n        value = i.raws.before\n        if (value.includes('\\n')) {\n          value = value.replace(/[^\\n]+$/, '')\n        }\n        return false\n      }\n    })\n    if (typeof value === 'undefined') {\n      value = this.raw(node, null, 'beforeDecl')\n    } else if (value) {\n      value = value.replace(/\\S/g, '')\n    }\n    return value\n  }\n\n  rawBeforeDecl(root, node) {\n    let value\n    root.walkDecls(i => {\n      if (typeof i.raws.before !== 'undefined') {\n        value = i.raws.before\n        if (value.includes('\\n')) {\n          value = value.replace(/[^\\n]+$/, '')\n        }\n        return false\n      }\n    })\n    if (typeof value === 'undefined') {\n      value = this.raw(node, null, 'beforeRule')\n    } else if (value) {\n      value = value.replace(/\\S/g, '')\n    }\n    return value\n  }\n\n  rawBeforeOpen(root) {\n    let value\n    root.walk(i => {\n      if (i.type !== 'decl') {\n        value = i.raws.between\n        if (typeof value !== 'undefined') return false\n      }\n    })\n    return value\n  }\n\n  rawBeforeRule(root) {\n    let value\n    root.walk(i => {\n      if (i.nodes && (i.parent !== root || root.first !== i)) {\n        if (typeof i.raws.before !== 'undefined') {\n          value = i.raws.before\n          if (value.includes('\\n')) {\n            value = value.replace(/[^\\n]+$/, '')\n          }\n          return false\n        }\n      }\n    })\n    if (value) value = value.replace(/\\S/g, '')\n    return value\n  }\n\n  rawColon(root) {\n    let value\n    root.walkDecls(i => {\n      if (typeof i.raws.between !== 'undefined') {\n        value = i.raws.between.replace(/[^\\s:]/g, '')\n        return false\n      }\n    })\n    return value\n  }\n\n  rawEmptyBody(root) {\n    let value\n    root.walk(i => {\n      if (i.nodes && i.nodes.length === 0) {\n        value = i.raws.after\n        if (typeof value !== 'undefined') return false\n      }\n    })\n    return value\n  }\n\n  rawIndent(root) {\n    if (root.raws.indent) return root.raws.indent\n    let value\n    root.walk(i => {\n      let p = i.parent\n      if (p && p !== root && p.parent && p.parent === root) {\n        if (typeof i.raws.before !== 'undefined') {\n          let parts = i.raws.before.split('\\n')\n          value = parts[parts.length - 1]\n          value = value.replace(/\\S/g, '')\n          return false\n        }\n      }\n    })\n    return value\n  }\n\n  rawSemicolon(root) {\n    let value\n    root.walk(i => {\n      if (i.nodes && i.nodes.length && i.last.type === 'decl') {\n        value = i.raws.semicolon\n        if (typeof value !== 'undefined') return false\n      }\n    })\n    return value\n  }\n\n  rawValue(node, prop) {\n    let value = node[prop]\n    let raw = node.raws[prop]\n    if (raw && raw.value === value) {\n      return raw.raw\n    }\n\n    return value\n  }\n\n  root(node) {\n    this.body(node)\n    if (node.raws.after) this.builder(node.raws.after)\n  }\n\n  rule(node) {\n    this.block(node, this.rawValue(node, 'selector'))\n    if (node.raws.ownSemicolon) {\n      this.builder(node.raws.ownSemicolon, node, 'end')\n    }\n  }\n\n  stringify(node, semicolon) {\n    /* c8 ignore start */\n    if (!this[node.type]) {\n      throw new Error(\n        'Unknown AST node type ' +\n          node.type +\n          '. ' +\n          'Maybe you need to change PostCSS stringifier.'\n      )\n    }\n    /* c8 ignore stop */\n    this[node.type](node, semicolon)\n  }\n}\n\nmodule.exports = Stringifier\nStringifier.default = Stringifier\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///47668\n")},83303:(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval("\n\nlet Stringifier = __webpack_require__(47668)\n\nfunction stringify(node, builder) {\n  let str = new Stringifier(builder)\n  str.stringify(node)\n}\n\nmodule.exports = stringify\nstringify.default = stringify\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiODMzMDMuanMiLCJtYXBwaW5ncyI6IkFBQVk7O0FBRVosa0JBQWtCLG1CQUFPLENBQUMsS0FBZTs7QUFFekM7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2Jsb2NrYml0ZS8uL25vZGVfbW9kdWxlcy9wb3N0Y3NzL2xpYi9zdHJpbmdpZnkuanM/ZDQ3YiJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCdcblxubGV0IFN0cmluZ2lmaWVyID0gcmVxdWlyZSgnLi9zdHJpbmdpZmllcicpXG5cbmZ1bmN0aW9uIHN0cmluZ2lmeShub2RlLCBidWlsZGVyKSB7XG4gIGxldCBzdHIgPSBuZXcgU3RyaW5naWZpZXIoYnVpbGRlcilcbiAgc3RyLnN0cmluZ2lmeShub2RlKVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHN0cmluZ2lmeVxuc3RyaW5naWZ5LmRlZmF1bHQgPSBzdHJpbmdpZnlcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///83303\n")},84151:module=>{"use strict";eval("\n\nmodule.exports.isClean = Symbol('isClean')\n\nmodule.exports.my = Symbol('my')\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiODQxNTEuanMiLCJtYXBwaW5ncyI6IkFBQVk7O0FBRVosc0JBQXNCOztBQUV0QixpQkFBaUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ibG9ja2JpdGUvLi9ub2RlX21vZHVsZXMvcG9zdGNzcy9saWIvc3ltYm9scy5qcz83OGZlIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0J1xuXG5tb2R1bGUuZXhwb3J0cy5pc0NsZWFuID0gU3ltYm9sKCdpc0NsZWFuJylcblxubW9kdWxlLmV4cG9ydHMubXkgPSBTeW1ib2woJ215JylcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///84151\n")},45781:module=>{"use strict";eval("\n\nconst SINGLE_QUOTE = \"'\".charCodeAt(0)\nconst DOUBLE_QUOTE = '\"'.charCodeAt(0)\nconst BACKSLASH = '\\\\'.charCodeAt(0)\nconst SLASH = '/'.charCodeAt(0)\nconst NEWLINE = '\\n'.charCodeAt(0)\nconst SPACE = ' '.charCodeAt(0)\nconst FEED = '\\f'.charCodeAt(0)\nconst TAB = '\\t'.charCodeAt(0)\nconst CR = '\\r'.charCodeAt(0)\nconst OPEN_SQUARE = '['.charCodeAt(0)\nconst CLOSE_SQUARE = ']'.charCodeAt(0)\nconst OPEN_PARENTHESES = '('.charCodeAt(0)\nconst CLOSE_PARENTHESES = ')'.charCodeAt(0)\nconst OPEN_CURLY = '{'.charCodeAt(0)\nconst CLOSE_CURLY = '}'.charCodeAt(0)\nconst SEMICOLON = ';'.charCodeAt(0)\nconst ASTERISK = '*'.charCodeAt(0)\nconst COLON = ':'.charCodeAt(0)\nconst AT = '@'.charCodeAt(0)\n\nconst RE_AT_END = /[\\t\\n\\f\\r \"#'()/;[\\\\\\]{}]/g\nconst RE_WORD_END = /[\\t\\n\\f\\r !\"#'():;@[\\\\\\]{}]|\\/(?=\\*)/g\nconst RE_BAD_BRACKET = /.[\\r\\n\"'(/\\\\]/\nconst RE_HEX_ESCAPE = /[\\da-f]/i\n\nmodule.exports = function tokenizer(input, options = {}) {\n  let css = input.css.valueOf()\n  let ignore = options.ignoreErrors\n\n  let code, content, escape, next, quote\n  let currentToken, escaped, escapePos, n, prev\n\n  let length = css.length\n  let pos = 0\n  let buffer = []\n  let returned = []\n\n  function position() {\n    return pos\n  }\n\n  function unclosed(what) {\n    throw input.error('Unclosed ' + what, pos)\n  }\n\n  function endOfFile() {\n    return returned.length === 0 && pos >= length\n  }\n\n  function nextToken(opts) {\n    if (returned.length) return returned.pop()\n    if (pos >= length) return\n\n    let ignoreUnclosed = opts ? opts.ignoreUnclosed : false\n\n    code = css.charCodeAt(pos)\n\n    switch (code) {\n      case NEWLINE:\n      case SPACE:\n      case TAB:\n      case CR:\n      case FEED: {\n        next = pos\n        do {\n          next += 1\n          code = css.charCodeAt(next)\n        } while (\n          code === SPACE ||\n          code === NEWLINE ||\n          code === TAB ||\n          code === CR ||\n          code === FEED\n        )\n\n        currentToken = ['space', css.slice(pos, next)]\n        pos = next - 1\n        break\n      }\n\n      case OPEN_SQUARE:\n      case CLOSE_SQUARE:\n      case OPEN_CURLY:\n      case CLOSE_CURLY:\n      case COLON:\n      case SEMICOLON:\n      case CLOSE_PARENTHESES: {\n        let controlChar = String.fromCharCode(code)\n        currentToken = [controlChar, controlChar, pos]\n        break\n      }\n\n      case OPEN_PARENTHESES: {\n        prev = buffer.length ? buffer.pop()[1] : ''\n        n = css.charCodeAt(pos + 1)\n        if (\n          prev === 'url' &&\n          n !== SINGLE_QUOTE &&\n          n !== DOUBLE_QUOTE &&\n          n !== SPACE &&\n          n !== NEWLINE &&\n          n !== TAB &&\n          n !== FEED &&\n          n !== CR\n        ) {\n          next = pos\n          do {\n            escaped = false\n            next = css.indexOf(')', next + 1)\n            if (next === -1) {\n              if (ignore || ignoreUnclosed) {\n                next = pos\n                break\n              } else {\n                unclosed('bracket')\n              }\n            }\n            escapePos = next\n            while (css.charCodeAt(escapePos - 1) === BACKSLASH) {\n              escapePos -= 1\n              escaped = !escaped\n            }\n          } while (escaped)\n\n          currentToken = ['brackets', css.slice(pos, next + 1), pos, next]\n\n          pos = next\n        } else {\n          next = css.indexOf(')', pos + 1)\n          content = css.slice(pos, next + 1)\n\n          if (next === -1 || RE_BAD_BRACKET.test(content)) {\n            currentToken = ['(', '(', pos]\n          } else {\n            currentToken = ['brackets', content, pos, next]\n            pos = next\n          }\n        }\n\n        break\n      }\n\n      case SINGLE_QUOTE:\n      case DOUBLE_QUOTE: {\n        quote = code === SINGLE_QUOTE ? \"'\" : '\"'\n        next = pos\n        do {\n          escaped = false\n          next = css.indexOf(quote, next + 1)\n          if (next === -1) {\n            if (ignore || ignoreUnclosed) {\n              next = pos + 1\n              break\n            } else {\n              unclosed('string')\n            }\n          }\n          escapePos = next\n          while (css.charCodeAt(escapePos - 1) === BACKSLASH) {\n            escapePos -= 1\n            escaped = !escaped\n          }\n        } while (escaped)\n\n        currentToken = ['string', css.slice(pos, next + 1), pos, next]\n        pos = next\n        break\n      }\n\n      case AT: {\n        RE_AT_END.lastIndex = pos + 1\n        RE_AT_END.test(css)\n        if (RE_AT_END.lastIndex === 0) {\n          next = css.length - 1\n        } else {\n          next = RE_AT_END.lastIndex - 2\n        }\n\n        currentToken = ['at-word', css.slice(pos, next + 1), pos, next]\n\n        pos = next\n        break\n      }\n\n      case BACKSLASH: {\n        next = pos\n        escape = true\n        while (css.charCodeAt(next + 1) === BACKSLASH) {\n          next += 1\n          escape = !escape\n        }\n        code = css.charCodeAt(next + 1)\n        if (\n          escape &&\n          code !== SLASH &&\n          code !== SPACE &&\n          code !== NEWLINE &&\n          code !== TAB &&\n          code !== CR &&\n          code !== FEED\n        ) {\n          next += 1\n          if (RE_HEX_ESCAPE.test(css.charAt(next))) {\n            while (RE_HEX_ESCAPE.test(css.charAt(next + 1))) {\n              next += 1\n            }\n            if (css.charCodeAt(next + 1) === SPACE) {\n              next += 1\n            }\n          }\n        }\n\n        currentToken = ['word', css.slice(pos, next + 1), pos, next]\n\n        pos = next\n        break\n      }\n\n      default: {\n        if (code === SLASH && css.charCodeAt(pos + 1) === ASTERISK) {\n          next = css.indexOf('*/', pos + 2) + 1\n          if (next === 0) {\n            if (ignore || ignoreUnclosed) {\n              next = css.length\n            } else {\n              unclosed('comment')\n            }\n          }\n\n          currentToken = ['comment', css.slice(pos, next + 1), pos, next]\n          pos = next\n        } else {\n          RE_WORD_END.lastIndex = pos + 1\n          RE_WORD_END.test(css)\n          if (RE_WORD_END.lastIndex === 0) {\n            next = css.length - 1\n          } else {\n            next = RE_WORD_END.lastIndex - 2\n          }\n\n          currentToken = ['word', css.slice(pos, next + 1), pos, next]\n          buffer.push(currentToken)\n          pos = next\n        }\n\n        break\n      }\n    }\n\n    pos++\n    return currentToken\n  }\n\n  function back(token) {\n    returned.push(token)\n  }\n\n  return {\n    back,\n    endOfFile,\n    nextToken,\n    position\n  }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///45781\n")},6156:module=>{"use strict";eval("/* eslint-disable no-console */\n\n\nlet printed = {}\n\nmodule.exports = function warnOnce(message) {\n  if (printed[message]) return\n  printed[message] = true\n\n  if (typeof console !== 'undefined' && console.warn) {\n    console.warn(message)\n  }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNjE1Ni5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUNZOztBQUVaOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2Jsb2NrYml0ZS8uL25vZGVfbW9kdWxlcy9wb3N0Y3NzL2xpYi93YXJuLW9uY2UuanM/NzFiMCJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiBlc2xpbnQtZGlzYWJsZSBuby1jb25zb2xlICovXG4ndXNlIHN0cmljdCdcblxubGV0IHByaW50ZWQgPSB7fVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHdhcm5PbmNlKG1lc3NhZ2UpIHtcbiAgaWYgKHByaW50ZWRbbWVzc2FnZV0pIHJldHVyblxuICBwcmludGVkW21lc3NhZ2VdID0gdHJ1ZVxuXG4gIGlmICh0eXBlb2YgY29uc29sZSAhPT0gJ3VuZGVmaW5lZCcgJiYgY29uc29sZS53YXJuKSB7XG4gICAgY29uc29sZS53YXJuKG1lc3NhZ2UpXG4gIH1cbn1cbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///6156\n")},60038:module=>{"use strict";eval("\n\nclass Warning {\n  constructor(text, opts = {}) {\n    this.type = 'warning'\n    this.text = text\n\n    if (opts.node && opts.node.source) {\n      let range = opts.node.rangeBy(opts)\n      this.line = range.start.line\n      this.column = range.start.column\n      this.endLine = range.end.line\n      this.endColumn = range.end.column\n    }\n\n    for (let opt in opts) this[opt] = opts[opt]\n  }\n\n  toString() {\n    if (this.node) {\n      return this.node.error(this.text, {\n        index: this.index,\n        plugin: this.plugin,\n        word: this.word\n      }).message\n    }\n\n    if (this.plugin) {\n      return this.plugin + ': ' + this.text\n    }\n\n    return this.text\n  }\n}\n\nmodule.exports = Warning\nWarning.default = Warning\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNjAwMzguanMiLCJtYXBwaW5ncyI6IkFBQVk7O0FBRVo7QUFDQSw2QkFBNkI7QUFDN0I7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ibG9ja2JpdGUvLi9ub2RlX21vZHVsZXMvcG9zdGNzcy9saWIvd2FybmluZy5qcz9mYjJiIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0J1xuXG5jbGFzcyBXYXJuaW5nIHtcbiAgY29uc3RydWN0b3IodGV4dCwgb3B0cyA9IHt9KSB7XG4gICAgdGhpcy50eXBlID0gJ3dhcm5pbmcnXG4gICAgdGhpcy50ZXh0ID0gdGV4dFxuXG4gICAgaWYgKG9wdHMubm9kZSAmJiBvcHRzLm5vZGUuc291cmNlKSB7XG4gICAgICBsZXQgcmFuZ2UgPSBvcHRzLm5vZGUucmFuZ2VCeShvcHRzKVxuICAgICAgdGhpcy5saW5lID0gcmFuZ2Uuc3RhcnQubGluZVxuICAgICAgdGhpcy5jb2x1bW4gPSByYW5nZS5zdGFydC5jb2x1bW5cbiAgICAgIHRoaXMuZW5kTGluZSA9IHJhbmdlLmVuZC5saW5lXG4gICAgICB0aGlzLmVuZENvbHVtbiA9IHJhbmdlLmVuZC5jb2x1bW5cbiAgICB9XG5cbiAgICBmb3IgKGxldCBvcHQgaW4gb3B0cykgdGhpc1tvcHRdID0gb3B0c1tvcHRdXG4gIH1cblxuICB0b1N0cmluZygpIHtcbiAgICBpZiAodGhpcy5ub2RlKSB7XG4gICAgICByZXR1cm4gdGhpcy5ub2RlLmVycm9yKHRoaXMudGV4dCwge1xuICAgICAgICBpbmRleDogdGhpcy5pbmRleCxcbiAgICAgICAgcGx1Z2luOiB0aGlzLnBsdWdpbixcbiAgICAgICAgd29yZDogdGhpcy53b3JkXG4gICAgICB9KS5tZXNzYWdlXG4gICAgfVxuXG4gICAgaWYgKHRoaXMucGx1Z2luKSB7XG4gICAgICByZXR1cm4gdGhpcy5wbHVnaW4gKyAnOiAnICsgdGhpcy50ZXh0XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMudGV4dFxuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gV2FybmluZ1xuV2FybmluZy5kZWZhdWx0ID0gV2FybmluZ1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///60038\n")},54361:(__unused_webpack_module,exports,__webpack_require__)=>{eval("/* -*- Mode: js; js-indent-level: 2; -*- */\n/*\n * Copyright 2011 Mozilla Foundation and contributors\n * Licensed under the New BSD license. See LICENSE or:\n * http://opensource.org/licenses/BSD-3-Clause\n */\n\nvar util = __webpack_require__(48829);\nvar has = Object.prototype.hasOwnProperty;\nvar hasNativeMap = typeof Map !== \"undefined\";\n\n/**\n * A data structure which is a combination of an array and a set. Adding a new\n * member is O(1), testing for membership is O(1), and finding the index of an\n * element is O(1). Removing elements from the set is not supported. Only\n * strings are supported for membership.\n */\nfunction ArraySet() {\n  this._array = [];\n  this._set = hasNativeMap ? new Map() : Object.create(null);\n}\n\n/**\n * Static method for creating ArraySet instances from an existing array.\n */\nArraySet.fromArray = function ArraySet_fromArray(aArray, aAllowDuplicates) {\n  var set = new ArraySet();\n  for (var i = 0, len = aArray.length; i < len; i++) {\n    set.add(aArray[i], aAllowDuplicates);\n  }\n  return set;\n};\n\n/**\n * Return how many unique items are in this ArraySet. If duplicates have been\n * added, than those do not count towards the size.\n *\n * @returns Number\n */\nArraySet.prototype.size = function ArraySet_size() {\n  return hasNativeMap ? this._set.size : Object.getOwnPropertyNames(this._set).length;\n};\n\n/**\n * Add the given string to this set.\n *\n * @param String aStr\n */\nArraySet.prototype.add = function ArraySet_add(aStr, aAllowDuplicates) {\n  var sStr = hasNativeMap ? aStr : util.toSetString(aStr);\n  var isDuplicate = hasNativeMap ? this.has(aStr) : has.call(this._set, sStr);\n  var idx = this._array.length;\n  if (!isDuplicate || aAllowDuplicates) {\n    this._array.push(aStr);\n  }\n  if (!isDuplicate) {\n    if (hasNativeMap) {\n      this._set.set(aStr, idx);\n    } else {\n      this._set[sStr] = idx;\n    }\n  }\n};\n\n/**\n * Is the given string a member of this set?\n *\n * @param String aStr\n */\nArraySet.prototype.has = function ArraySet_has(aStr) {\n  if (hasNativeMap) {\n    return this._set.has(aStr);\n  } else {\n    var sStr = util.toSetString(aStr);\n    return has.call(this._set, sStr);\n  }\n};\n\n/**\n * What is the index of the given string in the array?\n *\n * @param String aStr\n */\nArraySet.prototype.indexOf = function ArraySet_indexOf(aStr) {\n  if (hasNativeMap) {\n    var idx = this._set.get(aStr);\n    if (idx >= 0) {\n        return idx;\n    }\n  } else {\n    var sStr = util.toSetString(aStr);\n    if (has.call(this._set, sStr)) {\n      return this._set[sStr];\n    }\n  }\n\n  throw new Error('\"' + aStr + '\" is not in the set.');\n};\n\n/**\n * What is the element at the given index?\n *\n * @param Number aIdx\n */\nArraySet.prototype.at = function ArraySet_at(aIdx) {\n  if (aIdx >= 0 && aIdx < this._array.length) {\n    return this._array[aIdx];\n  }\n  throw new Error('No element indexed by ' + aIdx);\n};\n\n/**\n * Returns the array representation of this set (which has the proper indices\n * indicated by indexOf). Note that this is a copy of the internal array used\n * for storing the members so that no one can mess with internal state.\n */\nArraySet.prototype.toArray = function ArraySet_toArray() {\n  return this._array.slice();\n};\n\nexports.C = ArraySet;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNTQzNjEuanMiLCJtYXBwaW5ncyI6IkFBQUEsaUJBQWlCLG9CQUFvQjtBQUNyQztBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLFdBQVcsbUJBQU8sQ0FBQyxLQUFRO0FBQzNCO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVDQUF1QyxTQUFTO0FBQ2hEO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsU0FBZ0IiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ibG9ja2JpdGUvLi9ub2RlX21vZHVsZXMvc291cmNlLW1hcC1qcy9saWIvYXJyYXktc2V0LmpzPzIyYzIiXSwic291cmNlc0NvbnRlbnQiOlsiLyogLSotIE1vZGU6IGpzOyBqcy1pbmRlbnQtbGV2ZWw6IDI7IC0qLSAqL1xuLypcbiAqIENvcHlyaWdodCAyMDExIE1vemlsbGEgRm91bmRhdGlvbiBhbmQgY29udHJpYnV0b3JzXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgTmV3IEJTRCBsaWNlbnNlLiBTZWUgTElDRU5TRSBvcjpcbiAqIGh0dHA6Ly9vcGVuc291cmNlLm9yZy9saWNlbnNlcy9CU0QtMy1DbGF1c2VcbiAqL1xuXG52YXIgdXRpbCA9IHJlcXVpcmUoJy4vdXRpbCcpO1xudmFyIGhhcyA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG52YXIgaGFzTmF0aXZlTWFwID0gdHlwZW9mIE1hcCAhPT0gXCJ1bmRlZmluZWRcIjtcblxuLyoqXG4gKiBBIGRhdGEgc3RydWN0dXJlIHdoaWNoIGlzIGEgY29tYmluYXRpb24gb2YgYW4gYXJyYXkgYW5kIGEgc2V0LiBBZGRpbmcgYSBuZXdcbiAqIG1lbWJlciBpcyBPKDEpLCB0ZXN0aW5nIGZvciBtZW1iZXJzaGlwIGlzIE8oMSksIGFuZCBmaW5kaW5nIHRoZSBpbmRleCBvZiBhblxuICogZWxlbWVudCBpcyBPKDEpLiBSZW1vdmluZyBlbGVtZW50cyBmcm9tIHRoZSBzZXQgaXMgbm90IHN1cHBvcnRlZC4gT25seVxuICogc3RyaW5ncyBhcmUgc3VwcG9ydGVkIGZvciBtZW1iZXJzaGlwLlxuICovXG5mdW5jdGlvbiBBcnJheVNldCgpIHtcbiAgdGhpcy5fYXJyYXkgPSBbXTtcbiAgdGhpcy5fc2V0ID0gaGFzTmF0aXZlTWFwID8gbmV3IE1hcCgpIDogT2JqZWN0LmNyZWF0ZShudWxsKTtcbn1cblxuLyoqXG4gKiBTdGF0aWMgbWV0aG9kIGZvciBjcmVhdGluZyBBcnJheVNldCBpbnN0YW5jZXMgZnJvbSBhbiBleGlzdGluZyBhcnJheS5cbiAqL1xuQXJyYXlTZXQuZnJvbUFycmF5ID0gZnVuY3Rpb24gQXJyYXlTZXRfZnJvbUFycmF5KGFBcnJheSwgYUFsbG93RHVwbGljYXRlcykge1xuICB2YXIgc2V0ID0gbmV3IEFycmF5U2V0KCk7XG4gIGZvciAodmFyIGkgPSAwLCBsZW4gPSBhQXJyYXkubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICBzZXQuYWRkKGFBcnJheVtpXSwgYUFsbG93RHVwbGljYXRlcyk7XG4gIH1cbiAgcmV0dXJuIHNldDtcbn07XG5cbi8qKlxuICogUmV0dXJuIGhvdyBtYW55IHVuaXF1ZSBpdGVtcyBhcmUgaW4gdGhpcyBBcnJheVNldC4gSWYgZHVwbGljYXRlcyBoYXZlIGJlZW5cbiAqIGFkZGVkLCB0aGFuIHRob3NlIGRvIG5vdCBjb3VudCB0b3dhcmRzIHRoZSBzaXplLlxuICpcbiAqIEByZXR1cm5zIE51bWJlclxuICovXG5BcnJheVNldC5wcm90b3R5cGUuc2l6ZSA9IGZ1bmN0aW9uIEFycmF5U2V0X3NpemUoKSB7XG4gIHJldHVybiBoYXNOYXRpdmVNYXAgPyB0aGlzLl9zZXQuc2l6ZSA6IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHRoaXMuX3NldCkubGVuZ3RoO1xufTtcblxuLyoqXG4gKiBBZGQgdGhlIGdpdmVuIHN0cmluZyB0byB0aGlzIHNldC5cbiAqXG4gKiBAcGFyYW0gU3RyaW5nIGFTdHJcbiAqL1xuQXJyYXlTZXQucHJvdG90eXBlLmFkZCA9IGZ1bmN0aW9uIEFycmF5U2V0X2FkZChhU3RyLCBhQWxsb3dEdXBsaWNhdGVzKSB7XG4gIHZhciBzU3RyID0gaGFzTmF0aXZlTWFwID8gYVN0ciA6IHV0aWwudG9TZXRTdHJpbmcoYVN0cik7XG4gIHZhciBpc0R1cGxpY2F0ZSA9IGhhc05hdGl2ZU1hcCA/IHRoaXMuaGFzKGFTdHIpIDogaGFzLmNhbGwodGhpcy5fc2V0LCBzU3RyKTtcbiAgdmFyIGlkeCA9IHRoaXMuX2FycmF5Lmxlbmd0aDtcbiAgaWYgKCFpc0R1cGxpY2F0ZSB8fCBhQWxsb3dEdXBsaWNhdGVzKSB7XG4gICAgdGhpcy5fYXJyYXkucHVzaChhU3RyKTtcbiAgfVxuICBpZiAoIWlzRHVwbGljYXRlKSB7XG4gICAgaWYgKGhhc05hdGl2ZU1hcCkge1xuICAgICAgdGhpcy5fc2V0LnNldChhU3RyLCBpZHgpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLl9zZXRbc1N0cl0gPSBpZHg7XG4gICAgfVxuICB9XG59O1xuXG4vKipcbiAqIElzIHRoZSBnaXZlbiBzdHJpbmcgYSBtZW1iZXIgb2YgdGhpcyBzZXQ/XG4gKlxuICogQHBhcmFtIFN0cmluZyBhU3RyXG4gKi9cbkFycmF5U2V0LnByb3RvdHlwZS5oYXMgPSBmdW5jdGlvbiBBcnJheVNldF9oYXMoYVN0cikge1xuICBpZiAoaGFzTmF0aXZlTWFwKSB7XG4gICAgcmV0dXJuIHRoaXMuX3NldC5oYXMoYVN0cik7XG4gIH0gZWxzZSB7XG4gICAgdmFyIHNTdHIgPSB1dGlsLnRvU2V0U3RyaW5nKGFTdHIpO1xuICAgIHJldHVybiBoYXMuY2FsbCh0aGlzLl9zZXQsIHNTdHIpO1xuICB9XG59O1xuXG4vKipcbiAqIFdoYXQgaXMgdGhlIGluZGV4IG9mIHRoZSBnaXZlbiBzdHJpbmcgaW4gdGhlIGFycmF5P1xuICpcbiAqIEBwYXJhbSBTdHJpbmcgYVN0clxuICovXG5BcnJheVNldC5wcm90b3R5cGUuaW5kZXhPZiA9IGZ1bmN0aW9uIEFycmF5U2V0X2luZGV4T2YoYVN0cikge1xuICBpZiAoaGFzTmF0aXZlTWFwKSB7XG4gICAgdmFyIGlkeCA9IHRoaXMuX3NldC5nZXQoYVN0cik7XG4gICAgaWYgKGlkeCA+PSAwKSB7XG4gICAgICAgIHJldHVybiBpZHg7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHZhciBzU3RyID0gdXRpbC50b1NldFN0cmluZyhhU3RyKTtcbiAgICBpZiAoaGFzLmNhbGwodGhpcy5fc2V0LCBzU3RyKSkge1xuICAgICAgcmV0dXJuIHRoaXMuX3NldFtzU3RyXTtcbiAgICB9XG4gIH1cblxuICB0aHJvdyBuZXcgRXJyb3IoJ1wiJyArIGFTdHIgKyAnXCIgaXMgbm90IGluIHRoZSBzZXQuJyk7XG59O1xuXG4vKipcbiAqIFdoYXQgaXMgdGhlIGVsZW1lbnQgYXQgdGhlIGdpdmVuIGluZGV4P1xuICpcbiAqIEBwYXJhbSBOdW1iZXIgYUlkeFxuICovXG5BcnJheVNldC5wcm90b3R5cGUuYXQgPSBmdW5jdGlvbiBBcnJheVNldF9hdChhSWR4KSB7XG4gIGlmIChhSWR4ID49IDAgJiYgYUlkeCA8IHRoaXMuX2FycmF5Lmxlbmd0aCkge1xuICAgIHJldHVybiB0aGlzLl9hcnJheVthSWR4XTtcbiAgfVxuICB0aHJvdyBuZXcgRXJyb3IoJ05vIGVsZW1lbnQgaW5kZXhlZCBieSAnICsgYUlkeCk7XG59O1xuXG4vKipcbiAqIFJldHVybnMgdGhlIGFycmF5IHJlcHJlc2VudGF0aW9uIG9mIHRoaXMgc2V0ICh3aGljaCBoYXMgdGhlIHByb3BlciBpbmRpY2VzXG4gKiBpbmRpY2F0ZWQgYnkgaW5kZXhPZikuIE5vdGUgdGhhdCB0aGlzIGlzIGEgY29weSBvZiB0aGUgaW50ZXJuYWwgYXJyYXkgdXNlZFxuICogZm9yIHN0b3JpbmcgdGhlIG1lbWJlcnMgc28gdGhhdCBubyBvbmUgY2FuIG1lc3Mgd2l0aCBpbnRlcm5hbCBzdGF0ZS5cbiAqL1xuQXJyYXlTZXQucHJvdG90eXBlLnRvQXJyYXkgPSBmdW5jdGlvbiBBcnJheVNldF90b0FycmF5KCkge1xuICByZXR1cm4gdGhpcy5fYXJyYXkuc2xpY2UoKTtcbn07XG5cbmV4cG9ydHMuQXJyYXlTZXQgPSBBcnJheVNldDtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///54361\n")},582:(__unused_webpack_module,exports,__webpack_require__)=>{eval('/* -*- Mode: js; js-indent-level: 2; -*- */\n/*\n * Copyright 2011 Mozilla Foundation and contributors\n * Licensed under the New BSD license. See LICENSE or:\n * http://opensource.org/licenses/BSD-3-Clause\n *\n * Based on the Base 64 VLQ implementation in Closure Compiler:\n * https://code.google.com/p/closure-compiler/source/browse/trunk/src/com/google/debugging/sourcemap/Base64VLQ.java\n *\n * Copyright 2011 The Closure Compiler Authors. All rights reserved.\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are\n * met:\n *\n *  * Redistributions of source code must retain the above copyright\n *    notice, this list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above\n *    copyright notice, this list of conditions and the following\n *    disclaimer in the documentation and/or other materials provided\n *    with the distribution.\n *  * Neither the name of Google Inc. nor the names of its\n *    contributors may be used to endorse or promote products derived\n *    from this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\nvar base64 = __webpack_require__(11642);\n\n// A single base 64 digit can contain 6 bits of data. For the base 64 variable\n// length quantities we use in the source map spec, the first bit is the sign,\n// the next four bits are the actual value, and the 6th bit is the\n// continuation bit. The continuation bit tells us whether there are more\n// digits in this value following this digit.\n//\n//   Continuation\n//   |    Sign\n//   |    |\n//   V    V\n//   101011\n\nvar VLQ_BASE_SHIFT = 5;\n\n// binary: 100000\nvar VLQ_BASE = 1 << VLQ_BASE_SHIFT;\n\n// binary: 011111\nvar VLQ_BASE_MASK = VLQ_BASE - 1;\n\n// binary: 100000\nvar VLQ_CONTINUATION_BIT = VLQ_BASE;\n\n/**\n * Converts from a two-complement value to a value where the sign bit is\n * placed in the least significant bit.  For example, as decimals:\n *   1 becomes 2 (10 binary), -1 becomes 3 (11 binary)\n *   2 becomes 4 (100 binary), -2 becomes 5 (101 binary)\n */\nfunction toVLQSigned(aValue) {\n  return aValue < 0\n    ? ((-aValue) << 1) + 1\n    : (aValue << 1) + 0;\n}\n\n/**\n * Converts to a two-complement value from a value where the sign bit is\n * placed in the least significant bit.  For example, as decimals:\n *   2 (10 binary) becomes 1, 3 (11 binary) becomes -1\n *   4 (100 binary) becomes 2, 5 (101 binary) becomes -2\n */\nfunction fromVLQSigned(aValue) {\n  var isNegative = (aValue & 1) === 1;\n  var shifted = aValue >> 1;\n  return isNegative\n    ? -shifted\n    : shifted;\n}\n\n/**\n * Returns the base 64 VLQ encoded value.\n */\nexports.encode = function base64VLQ_encode(aValue) {\n  var encoded = "";\n  var digit;\n\n  var vlq = toVLQSigned(aValue);\n\n  do {\n    digit = vlq & VLQ_BASE_MASK;\n    vlq >>>= VLQ_BASE_SHIFT;\n    if (vlq > 0) {\n      // There are still more digits in this value, so we must make sure the\n      // continuation bit is marked.\n      digit |= VLQ_CONTINUATION_BIT;\n    }\n    encoded += base64.encode(digit);\n  } while (vlq > 0);\n\n  return encoded;\n};\n\n/**\n * Decodes the next base 64 VLQ value from the given string and returns the\n * value and the rest of the string via the out parameter.\n */\nexports.decode = function base64VLQ_decode(aStr, aIndex, aOutParam) {\n  var strLen = aStr.length;\n  var result = 0;\n  var shift = 0;\n  var continuation, digit;\n\n  do {\n    if (aIndex >= strLen) {\n      throw new Error("Expected more digits in base 64 VLQ value.");\n    }\n\n    digit = base64.decode(aStr.charCodeAt(aIndex++));\n    if (digit === -1) {\n      throw new Error("Invalid base64 digit: " + aStr.charAt(aIndex - 1));\n    }\n\n    continuation = !!(digit & VLQ_CONTINUATION_BIT);\n    digit &= VLQ_BASE_MASK;\n    result = result + (digit << shift);\n    shift += VLQ_BASE_SHIFT;\n  } while (continuation);\n\n  aOutParam.value = fromVLQSigned(result);\n  aOutParam.rest = aIndex;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNTgyLmpzIiwibWFwcGluZ3MiOiJBQUFBLGlCQUFpQixvQkFBb0I7QUFDckM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDREQUE0RDtBQUM1RCxxQkFBcUI7QUFDckI7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsYUFBYSxtQkFBTyxDQUFDLEtBQVU7O0FBRS9CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxjQUFjO0FBQ2Q7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJOztBQUVKO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjO0FBQ2Q7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJOztBQUVKO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2Jsb2NrYml0ZS8uL25vZGVfbW9kdWxlcy9zb3VyY2UtbWFwLWpzL2xpYi9iYXNlNjQtdmxxLmpzPzc3NGEiXSwic291cmNlc0NvbnRlbnQiOlsiLyogLSotIE1vZGU6IGpzOyBqcy1pbmRlbnQtbGV2ZWw6IDI7IC0qLSAqL1xuLypcbiAqIENvcHlyaWdodCAyMDExIE1vemlsbGEgRm91bmRhdGlvbiBhbmQgY29udHJpYnV0b3JzXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgTmV3IEJTRCBsaWNlbnNlLiBTZWUgTElDRU5TRSBvcjpcbiAqIGh0dHA6Ly9vcGVuc291cmNlLm9yZy9saWNlbnNlcy9CU0QtMy1DbGF1c2VcbiAqXG4gKiBCYXNlZCBvbiB0aGUgQmFzZSA2NCBWTFEgaW1wbGVtZW50YXRpb24gaW4gQ2xvc3VyZSBDb21waWxlcjpcbiAqIGh0dHBzOi8vY29kZS5nb29nbGUuY29tL3AvY2xvc3VyZS1jb21waWxlci9zb3VyY2UvYnJvd3NlL3RydW5rL3NyYy9jb20vZ29vZ2xlL2RlYnVnZ2luZy9zb3VyY2VtYXAvQmFzZTY0VkxRLmphdmFcbiAqXG4gKiBDb3B5cmlnaHQgMjAxMSBUaGUgQ2xvc3VyZSBDb21waWxlciBBdXRob3JzLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogUmVkaXN0cmlidXRpb24gYW5kIHVzZSBpbiBzb3VyY2UgYW5kIGJpbmFyeSBmb3Jtcywgd2l0aCBvciB3aXRob3V0XG4gKiBtb2RpZmljYXRpb24sIGFyZSBwZXJtaXR0ZWQgcHJvdmlkZWQgdGhhdCB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnMgYXJlXG4gKiBtZXQ6XG4gKlxuICogICogUmVkaXN0cmlidXRpb25zIG9mIHNvdXJjZSBjb2RlIG11c3QgcmV0YWluIHRoZSBhYm92ZSBjb3B5cmlnaHRcbiAqICAgIG5vdGljZSwgdGhpcyBsaXN0IG9mIGNvbmRpdGlvbnMgYW5kIHRoZSBmb2xsb3dpbmcgZGlzY2xhaW1lci5cbiAqICAqIFJlZGlzdHJpYnV0aW9ucyBpbiBiaW5hcnkgZm9ybSBtdXN0IHJlcHJvZHVjZSB0aGUgYWJvdmVcbiAqICAgIGNvcHlyaWdodCBub3RpY2UsIHRoaXMgbGlzdCBvZiBjb25kaXRpb25zIGFuZCB0aGUgZm9sbG93aW5nXG4gKiAgICBkaXNjbGFpbWVyIGluIHRoZSBkb2N1bWVudGF0aW9uIGFuZC9vciBvdGhlciBtYXRlcmlhbHMgcHJvdmlkZWRcbiAqICAgIHdpdGggdGhlIGRpc3RyaWJ1dGlvbi5cbiAqICAqIE5laXRoZXIgdGhlIG5hbWUgb2YgR29vZ2xlIEluYy4gbm9yIHRoZSBuYW1lcyBvZiBpdHNcbiAqICAgIGNvbnRyaWJ1dG9ycyBtYXkgYmUgdXNlZCB0byBlbmRvcnNlIG9yIHByb21vdGUgcHJvZHVjdHMgZGVyaXZlZFxuICogICAgZnJvbSB0aGlzIHNvZnR3YXJlIHdpdGhvdXQgc3BlY2lmaWMgcHJpb3Igd3JpdHRlbiBwZXJtaXNzaW9uLlxuICpcbiAqIFRISVMgU09GVFdBUkUgSVMgUFJPVklERUQgQlkgVEhFIENPUFlSSUdIVCBIT0xERVJTIEFORCBDT05UUklCVVRPUlNcbiAqIFwiQVMgSVNcIiBBTkQgQU5ZIEVYUFJFU1MgT1IgSU1QTElFRCBXQVJSQU5USUVTLCBJTkNMVURJTkcsIEJVVCBOT1RcbiAqIExJTUlURUQgVE8sIFRIRSBJTVBMSUVEIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZIEFORCBGSVRORVNTIEZPUlxuICogQSBQQVJUSUNVTEFSIFBVUlBPU0UgQVJFIERJU0NMQUlNRUQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRSBDT1BZUklHSFRcbiAqIE9XTkVSIE9SIENPTlRSSUJVVE9SUyBCRSBMSUFCTEUgRk9SIEFOWSBESVJFQ1QsIElORElSRUNULCBJTkNJREVOVEFMLFxuICogU1BFQ0lBTCwgRVhFTVBMQVJZLCBPUiBDT05TRVFVRU5USUFMIERBTUFHRVMgKElOQ0xVRElORywgQlVUIE5PVFxuICogTElNSVRFRCBUTywgUFJPQ1VSRU1FTlQgT0YgU1VCU1RJVFVURSBHT09EUyBPUiBTRVJWSUNFUzsgTE9TUyBPRiBVU0UsXG4gKiBEQVRBLCBPUiBQUk9GSVRTOyBPUiBCVVNJTkVTUyBJTlRFUlJVUFRJT04pIEhPV0VWRVIgQ0FVU0VEIEFORCBPTiBBTllcbiAqIFRIRU9SWSBPRiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQ09OVFJBQ1QsIFNUUklDVCBMSUFCSUxJVFksIE9SIFRPUlRcbiAqIChJTkNMVURJTkcgTkVHTElHRU5DRSBPUiBPVEhFUldJU0UpIEFSSVNJTkcgSU4gQU5ZIFdBWSBPVVQgT0YgVEhFIFVTRVxuICogT0YgVEhJUyBTT0ZUV0FSRSwgRVZFTiBJRiBBRFZJU0VEIE9GIFRIRSBQT1NTSUJJTElUWSBPRiBTVUNIIERBTUFHRS5cbiAqL1xuXG52YXIgYmFzZTY0ID0gcmVxdWlyZSgnLi9iYXNlNjQnKTtcblxuLy8gQSBzaW5nbGUgYmFzZSA2NCBkaWdpdCBjYW4gY29udGFpbiA2IGJpdHMgb2YgZGF0YS4gRm9yIHRoZSBiYXNlIDY0IHZhcmlhYmxlXG4vLyBsZW5ndGggcXVhbnRpdGllcyB3ZSB1c2UgaW4gdGhlIHNvdXJjZSBtYXAgc3BlYywgdGhlIGZpcnN0IGJpdCBpcyB0aGUgc2lnbixcbi8vIHRoZSBuZXh0IGZvdXIgYml0cyBhcmUgdGhlIGFjdHVhbCB2YWx1ZSwgYW5kIHRoZSA2dGggYml0IGlzIHRoZVxuLy8gY29udGludWF0aW9uIGJpdC4gVGhlIGNvbnRpbnVhdGlvbiBiaXQgdGVsbHMgdXMgd2hldGhlciB0aGVyZSBhcmUgbW9yZVxuLy8gZGlnaXRzIGluIHRoaXMgdmFsdWUgZm9sbG93aW5nIHRoaXMgZGlnaXQuXG4vL1xuLy8gICBDb250aW51YXRpb25cbi8vICAgfCAgICBTaWduXG4vLyAgIHwgICAgfFxuLy8gICBWICAgIFZcbi8vICAgMTAxMDExXG5cbnZhciBWTFFfQkFTRV9TSElGVCA9IDU7XG5cbi8vIGJpbmFyeTogMTAwMDAwXG52YXIgVkxRX0JBU0UgPSAxIDw8IFZMUV9CQVNFX1NISUZUO1xuXG4vLyBiaW5hcnk6IDAxMTExMVxudmFyIFZMUV9CQVNFX01BU0sgPSBWTFFfQkFTRSAtIDE7XG5cbi8vIGJpbmFyeTogMTAwMDAwXG52YXIgVkxRX0NPTlRJTlVBVElPTl9CSVQgPSBWTFFfQkFTRTtcblxuLyoqXG4gKiBDb252ZXJ0cyBmcm9tIGEgdHdvLWNvbXBsZW1lbnQgdmFsdWUgdG8gYSB2YWx1ZSB3aGVyZSB0aGUgc2lnbiBiaXQgaXNcbiAqIHBsYWNlZCBpbiB0aGUgbGVhc3Qgc2lnbmlmaWNhbnQgYml0LiAgRm9yIGV4YW1wbGUsIGFzIGRlY2ltYWxzOlxuICogICAxIGJlY29tZXMgMiAoMTAgYmluYXJ5KSwgLTEgYmVjb21lcyAzICgxMSBiaW5hcnkpXG4gKiAgIDIgYmVjb21lcyA0ICgxMDAgYmluYXJ5KSwgLTIgYmVjb21lcyA1ICgxMDEgYmluYXJ5KVxuICovXG5mdW5jdGlvbiB0b1ZMUVNpZ25lZChhVmFsdWUpIHtcbiAgcmV0dXJuIGFWYWx1ZSA8IDBcbiAgICA/ICgoLWFWYWx1ZSkgPDwgMSkgKyAxXG4gICAgOiAoYVZhbHVlIDw8IDEpICsgMDtcbn1cblxuLyoqXG4gKiBDb252ZXJ0cyB0byBhIHR3by1jb21wbGVtZW50IHZhbHVlIGZyb20gYSB2YWx1ZSB3aGVyZSB0aGUgc2lnbiBiaXQgaXNcbiAqIHBsYWNlZCBpbiB0aGUgbGVhc3Qgc2lnbmlmaWNhbnQgYml0LiAgRm9yIGV4YW1wbGUsIGFzIGRlY2ltYWxzOlxuICogICAyICgxMCBiaW5hcnkpIGJlY29tZXMgMSwgMyAoMTEgYmluYXJ5KSBiZWNvbWVzIC0xXG4gKiAgIDQgKDEwMCBiaW5hcnkpIGJlY29tZXMgMiwgNSAoMTAxIGJpbmFyeSkgYmVjb21lcyAtMlxuICovXG5mdW5jdGlvbiBmcm9tVkxRU2lnbmVkKGFWYWx1ZSkge1xuICB2YXIgaXNOZWdhdGl2ZSA9IChhVmFsdWUgJiAxKSA9PT0gMTtcbiAgdmFyIHNoaWZ0ZWQgPSBhVmFsdWUgPj4gMTtcbiAgcmV0dXJuIGlzTmVnYXRpdmVcbiAgICA/IC1zaGlmdGVkXG4gICAgOiBzaGlmdGVkO1xufVxuXG4vKipcbiAqIFJldHVybnMgdGhlIGJhc2UgNjQgVkxRIGVuY29kZWQgdmFsdWUuXG4gKi9cbmV4cG9ydHMuZW5jb2RlID0gZnVuY3Rpb24gYmFzZTY0VkxRX2VuY29kZShhVmFsdWUpIHtcbiAgdmFyIGVuY29kZWQgPSBcIlwiO1xuICB2YXIgZGlnaXQ7XG5cbiAgdmFyIHZscSA9IHRvVkxRU2lnbmVkKGFWYWx1ZSk7XG5cbiAgZG8ge1xuICAgIGRpZ2l0ID0gdmxxICYgVkxRX0JBU0VfTUFTSztcbiAgICB2bHEgPj4+PSBWTFFfQkFTRV9TSElGVDtcbiAgICBpZiAodmxxID4gMCkge1xuICAgICAgLy8gVGhlcmUgYXJlIHN0aWxsIG1vcmUgZGlnaXRzIGluIHRoaXMgdmFsdWUsIHNvIHdlIG11c3QgbWFrZSBzdXJlIHRoZVxuICAgICAgLy8gY29udGludWF0aW9uIGJpdCBpcyBtYXJrZWQuXG4gICAgICBkaWdpdCB8PSBWTFFfQ09OVElOVUFUSU9OX0JJVDtcbiAgICB9XG4gICAgZW5jb2RlZCArPSBiYXNlNjQuZW5jb2RlKGRpZ2l0KTtcbiAgfSB3aGlsZSAodmxxID4gMCk7XG5cbiAgcmV0dXJuIGVuY29kZWQ7XG59O1xuXG4vKipcbiAqIERlY29kZXMgdGhlIG5leHQgYmFzZSA2NCBWTFEgdmFsdWUgZnJvbSB0aGUgZ2l2ZW4gc3RyaW5nIGFuZCByZXR1cm5zIHRoZVxuICogdmFsdWUgYW5kIHRoZSByZXN0IG9mIHRoZSBzdHJpbmcgdmlhIHRoZSBvdXQgcGFyYW1ldGVyLlxuICovXG5leHBvcnRzLmRlY29kZSA9IGZ1bmN0aW9uIGJhc2U2NFZMUV9kZWNvZGUoYVN0ciwgYUluZGV4LCBhT3V0UGFyYW0pIHtcbiAgdmFyIHN0ckxlbiA9IGFTdHIubGVuZ3RoO1xuICB2YXIgcmVzdWx0ID0gMDtcbiAgdmFyIHNoaWZ0ID0gMDtcbiAgdmFyIGNvbnRpbnVhdGlvbiwgZGlnaXQ7XG5cbiAgZG8ge1xuICAgIGlmIChhSW5kZXggPj0gc3RyTGVuKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJFeHBlY3RlZCBtb3JlIGRpZ2l0cyBpbiBiYXNlIDY0IFZMUSB2YWx1ZS5cIik7XG4gICAgfVxuXG4gICAgZGlnaXQgPSBiYXNlNjQuZGVjb2RlKGFTdHIuY2hhckNvZGVBdChhSW5kZXgrKykpO1xuICAgIGlmIChkaWdpdCA9PT0gLTEpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIkludmFsaWQgYmFzZTY0IGRpZ2l0OiBcIiArIGFTdHIuY2hhckF0KGFJbmRleCAtIDEpKTtcbiAgICB9XG5cbiAgICBjb250aW51YXRpb24gPSAhIShkaWdpdCAmIFZMUV9DT05USU5VQVRJT05fQklUKTtcbiAgICBkaWdpdCAmPSBWTFFfQkFTRV9NQVNLO1xuICAgIHJlc3VsdCA9IHJlc3VsdCArIChkaWdpdCA8PCBzaGlmdCk7XG4gICAgc2hpZnQgKz0gVkxRX0JBU0VfU0hJRlQ7XG4gIH0gd2hpbGUgKGNvbnRpbnVhdGlvbik7XG5cbiAgYU91dFBhcmFtLnZhbHVlID0gZnJvbVZMUVNpZ25lZChyZXN1bHQpO1xuICBhT3V0UGFyYW0ucmVzdCA9IGFJbmRleDtcbn07XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///582\n')},11642:(__unused_webpack_module,exports)=>{eval("/* -*- Mode: js; js-indent-level: 2; -*- */\n/*\n * Copyright 2011 Mozilla Foundation and contributors\n * Licensed under the New BSD license. See LICENSE or:\n * http://opensource.org/licenses/BSD-3-Clause\n */\n\nvar intToCharMap = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'.split('');\n\n/**\n * Encode an integer in the range of 0 to 63 to a single base 64 digit.\n */\nexports.encode = function (number) {\n  if (0 <= number && number < intToCharMap.length) {\n    return intToCharMap[number];\n  }\n  throw new TypeError(\"Must be between 0 and 63: \" + number);\n};\n\n/**\n * Decode a single base 64 character code digit to an integer. Returns -1 on\n * failure.\n */\nexports.decode = function (charCode) {\n  var bigA = 65;     // 'A'\n  var bigZ = 90;     // 'Z'\n\n  var littleA = 97;  // 'a'\n  var littleZ = 122; // 'z'\n\n  var zero = 48;     // '0'\n  var nine = 57;     // '9'\n\n  var plus = 43;     // '+'\n  var slash = 47;    // '/'\n\n  var littleOffset = 26;\n  var numberOffset = 52;\n\n  // 0 - 25: ABCDEFGHIJKLMNOPQRSTUVWXYZ\n  if (bigA <= charCode && charCode <= bigZ) {\n    return (charCode - bigA);\n  }\n\n  // 26 - 51: abcdefghijklmnopqrstuvwxyz\n  if (littleA <= charCode && charCode <= littleZ) {\n    return (charCode - littleA + littleOffset);\n  }\n\n  // 52 - 61: 0123456789\n  if (zero <= charCode && charCode <= nine) {\n    return (charCode - zero + numberOffset);\n  }\n\n  // 62: +\n  if (charCode == plus) {\n    return 62;\n  }\n\n  // 63: /\n  if (charCode == slash) {\n    return 63;\n  }\n\n  // Invalid base64 digit.\n  return -1;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTE2NDIuanMiLCJtYXBwaW5ncyI6IkFBQUEsaUJBQWlCLG9CQUFvQjtBQUNyQztBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLGNBQWM7QUFDZDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYztBQUNkLHFCQUFxQjtBQUNyQixxQkFBcUI7O0FBRXJCLHFCQUFxQjtBQUNyQixxQkFBcUI7O0FBRXJCLHFCQUFxQjtBQUNyQixxQkFBcUI7O0FBRXJCLHFCQUFxQjtBQUNyQixxQkFBcUI7O0FBRXJCO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYmxvY2tiaXRlLy4vbm9kZV9tb2R1bGVzL3NvdXJjZS1tYXAtanMvbGliL2Jhc2U2NC5qcz8wMmYzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qIC0qLSBNb2RlOiBqczsganMtaW5kZW50LWxldmVsOiAyOyAtKi0gKi9cbi8qXG4gKiBDb3B5cmlnaHQgMjAxMSBNb3ppbGxhIEZvdW5kYXRpb24gYW5kIGNvbnRyaWJ1dG9yc1xuICogTGljZW5zZWQgdW5kZXIgdGhlIE5ldyBCU0QgbGljZW5zZS4gU2VlIExJQ0VOU0Ugb3I6XG4gKiBodHRwOi8vb3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvQlNELTMtQ2xhdXNlXG4gKi9cblxudmFyIGludFRvQ2hhck1hcCA9ICdBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWmFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6MDEyMzQ1Njc4OSsvJy5zcGxpdCgnJyk7XG5cbi8qKlxuICogRW5jb2RlIGFuIGludGVnZXIgaW4gdGhlIHJhbmdlIG9mIDAgdG8gNjMgdG8gYSBzaW5nbGUgYmFzZSA2NCBkaWdpdC5cbiAqL1xuZXhwb3J0cy5lbmNvZGUgPSBmdW5jdGlvbiAobnVtYmVyKSB7XG4gIGlmICgwIDw9IG51bWJlciAmJiBudW1iZXIgPCBpbnRUb0NoYXJNYXAubGVuZ3RoKSB7XG4gICAgcmV0dXJuIGludFRvQ2hhck1hcFtudW1iZXJdO1xuICB9XG4gIHRocm93IG5ldyBUeXBlRXJyb3IoXCJNdXN0IGJlIGJldHdlZW4gMCBhbmQgNjM6IFwiICsgbnVtYmVyKTtcbn07XG5cbi8qKlxuICogRGVjb2RlIGEgc2luZ2xlIGJhc2UgNjQgY2hhcmFjdGVyIGNvZGUgZGlnaXQgdG8gYW4gaW50ZWdlci4gUmV0dXJucyAtMSBvblxuICogZmFpbHVyZS5cbiAqL1xuZXhwb3J0cy5kZWNvZGUgPSBmdW5jdGlvbiAoY2hhckNvZGUpIHtcbiAgdmFyIGJpZ0EgPSA2NTsgICAgIC8vICdBJ1xuICB2YXIgYmlnWiA9IDkwOyAgICAgLy8gJ1onXG5cbiAgdmFyIGxpdHRsZUEgPSA5NzsgIC8vICdhJ1xuICB2YXIgbGl0dGxlWiA9IDEyMjsgLy8gJ3onXG5cbiAgdmFyIHplcm8gPSA0ODsgICAgIC8vICcwJ1xuICB2YXIgbmluZSA9IDU3OyAgICAgLy8gJzknXG5cbiAgdmFyIHBsdXMgPSA0MzsgICAgIC8vICcrJ1xuICB2YXIgc2xhc2ggPSA0NzsgICAgLy8gJy8nXG5cbiAgdmFyIGxpdHRsZU9mZnNldCA9IDI2O1xuICB2YXIgbnVtYmVyT2Zmc2V0ID0gNTI7XG5cbiAgLy8gMCAtIDI1OiBBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWlxuICBpZiAoYmlnQSA8PSBjaGFyQ29kZSAmJiBjaGFyQ29kZSA8PSBiaWdaKSB7XG4gICAgcmV0dXJuIChjaGFyQ29kZSAtIGJpZ0EpO1xuICB9XG5cbiAgLy8gMjYgLSA1MTogYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXpcbiAgaWYgKGxpdHRsZUEgPD0gY2hhckNvZGUgJiYgY2hhckNvZGUgPD0gbGl0dGxlWikge1xuICAgIHJldHVybiAoY2hhckNvZGUgLSBsaXR0bGVBICsgbGl0dGxlT2Zmc2V0KTtcbiAgfVxuXG4gIC8vIDUyIC0gNjE6IDAxMjM0NTY3ODlcbiAgaWYgKHplcm8gPD0gY2hhckNvZGUgJiYgY2hhckNvZGUgPD0gbmluZSkge1xuICAgIHJldHVybiAoY2hhckNvZGUgLSB6ZXJvICsgbnVtYmVyT2Zmc2V0KTtcbiAgfVxuXG4gIC8vIDYyOiArXG4gIGlmIChjaGFyQ29kZSA9PSBwbHVzKSB7XG4gICAgcmV0dXJuIDYyO1xuICB9XG5cbiAgLy8gNjM6IC9cbiAgaWYgKGNoYXJDb2RlID09IHNsYXNoKSB7XG4gICAgcmV0dXJuIDYzO1xuICB9XG5cbiAgLy8gSW52YWxpZCBiYXNlNjQgZGlnaXQuXG4gIHJldHVybiAtMTtcbn07XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///11642\n")},66260:(__unused_webpack_module,exports,__webpack_require__)=>{eval("/* -*- Mode: js; js-indent-level: 2; -*- */\n/*\n * Copyright 2014 Mozilla Foundation and contributors\n * Licensed under the New BSD license. See LICENSE or:\n * http://opensource.org/licenses/BSD-3-Clause\n */\n\nvar util = __webpack_require__(48829);\n\n/**\n * Determine whether mappingB is after mappingA with respect to generated\n * position.\n */\nfunction generatedPositionAfter(mappingA, mappingB) {\n  // Optimized for most common case\n  var lineA = mappingA.generatedLine;\n  var lineB = mappingB.generatedLine;\n  var columnA = mappingA.generatedColumn;\n  var columnB = mappingB.generatedColumn;\n  return lineB > lineA || lineB == lineA && columnB >= columnA ||\n         util.compareByGeneratedPositionsInflated(mappingA, mappingB) <= 0;\n}\n\n/**\n * A data structure to provide a sorted view of accumulated mappings in a\n * performance conscious manner. It trades a neglibable overhead in general\n * case for a large speedup in case of mappings being added in order.\n */\nfunction MappingList() {\n  this._array = [];\n  this._sorted = true;\n  // Serves as infimum\n  this._last = {generatedLine: -1, generatedColumn: 0};\n}\n\n/**\n * Iterate through internal items. This method takes the same arguments that\n * `Array.prototype.forEach` takes.\n *\n * NOTE: The order of the mappings is NOT guaranteed.\n */\nMappingList.prototype.unsortedForEach =\n  function MappingList_forEach(aCallback, aThisArg) {\n    this._array.forEach(aCallback, aThisArg);\n  };\n\n/**\n * Add the given source mapping.\n *\n * @param Object aMapping\n */\nMappingList.prototype.add = function MappingList_add(aMapping) {\n  if (generatedPositionAfter(this._last, aMapping)) {\n    this._last = aMapping;\n    this._array.push(aMapping);\n  } else {\n    this._sorted = false;\n    this._array.push(aMapping);\n  }\n};\n\n/**\n * Returns the flat, sorted array of mappings. The mappings are sorted by\n * generated position.\n *\n * WARNING: This method returns internal data without copying, for\n * performance. The return value must NOT be mutated, and should be treated as\n * an immutable borrow. If you want to take ownership, you must make your own\n * copy.\n */\nMappingList.prototype.toArray = function MappingList_toArray() {\n  if (!this._sorted) {\n    this._array.sort(util.compareByGeneratedPositionsInflated);\n    this._sorted = true;\n  }\n  return this._array;\n};\n\nexports.P = MappingList;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNjYyNjAuanMiLCJtYXBwaW5ncyI6IkFBQUEsaUJBQWlCLG9CQUFvQjtBQUNyQztBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLFdBQVcsbUJBQU8sQ0FBQyxLQUFROztBQUUzQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0I7QUFDaEI7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLFNBQW1CIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYmxvY2tiaXRlLy4vbm9kZV9tb2R1bGVzL3NvdXJjZS1tYXAtanMvbGliL21hcHBpbmctbGlzdC5qcz9hMjdhIl0sInNvdXJjZXNDb250ZW50IjpbIi8qIC0qLSBNb2RlOiBqczsganMtaW5kZW50LWxldmVsOiAyOyAtKi0gKi9cbi8qXG4gKiBDb3B5cmlnaHQgMjAxNCBNb3ppbGxhIEZvdW5kYXRpb24gYW5kIGNvbnRyaWJ1dG9yc1xuICogTGljZW5zZWQgdW5kZXIgdGhlIE5ldyBCU0QgbGljZW5zZS4gU2VlIExJQ0VOU0Ugb3I6XG4gKiBodHRwOi8vb3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvQlNELTMtQ2xhdXNlXG4gKi9cblxudmFyIHV0aWwgPSByZXF1aXJlKCcuL3V0aWwnKTtcblxuLyoqXG4gKiBEZXRlcm1pbmUgd2hldGhlciBtYXBwaW5nQiBpcyBhZnRlciBtYXBwaW5nQSB3aXRoIHJlc3BlY3QgdG8gZ2VuZXJhdGVkXG4gKiBwb3NpdGlvbi5cbiAqL1xuZnVuY3Rpb24gZ2VuZXJhdGVkUG9zaXRpb25BZnRlcihtYXBwaW5nQSwgbWFwcGluZ0IpIHtcbiAgLy8gT3B0aW1pemVkIGZvciBtb3N0IGNvbW1vbiBjYXNlXG4gIHZhciBsaW5lQSA9IG1hcHBpbmdBLmdlbmVyYXRlZExpbmU7XG4gIHZhciBsaW5lQiA9IG1hcHBpbmdCLmdlbmVyYXRlZExpbmU7XG4gIHZhciBjb2x1bW5BID0gbWFwcGluZ0EuZ2VuZXJhdGVkQ29sdW1uO1xuICB2YXIgY29sdW1uQiA9IG1hcHBpbmdCLmdlbmVyYXRlZENvbHVtbjtcbiAgcmV0dXJuIGxpbmVCID4gbGluZUEgfHwgbGluZUIgPT0gbGluZUEgJiYgY29sdW1uQiA+PSBjb2x1bW5BIHx8XG4gICAgICAgICB1dGlsLmNvbXBhcmVCeUdlbmVyYXRlZFBvc2l0aW9uc0luZmxhdGVkKG1hcHBpbmdBLCBtYXBwaW5nQikgPD0gMDtcbn1cblxuLyoqXG4gKiBBIGRhdGEgc3RydWN0dXJlIHRvIHByb3ZpZGUgYSBzb3J0ZWQgdmlldyBvZiBhY2N1bXVsYXRlZCBtYXBwaW5ncyBpbiBhXG4gKiBwZXJmb3JtYW5jZSBjb25zY2lvdXMgbWFubmVyLiBJdCB0cmFkZXMgYSBuZWdsaWJhYmxlIG92ZXJoZWFkIGluIGdlbmVyYWxcbiAqIGNhc2UgZm9yIGEgbGFyZ2Ugc3BlZWR1cCBpbiBjYXNlIG9mIG1hcHBpbmdzIGJlaW5nIGFkZGVkIGluIG9yZGVyLlxuICovXG5mdW5jdGlvbiBNYXBwaW5nTGlzdCgpIHtcbiAgdGhpcy5fYXJyYXkgPSBbXTtcbiAgdGhpcy5fc29ydGVkID0gdHJ1ZTtcbiAgLy8gU2VydmVzIGFzIGluZmltdW1cbiAgdGhpcy5fbGFzdCA9IHtnZW5lcmF0ZWRMaW5lOiAtMSwgZ2VuZXJhdGVkQ29sdW1uOiAwfTtcbn1cblxuLyoqXG4gKiBJdGVyYXRlIHRocm91Z2ggaW50ZXJuYWwgaXRlbXMuIFRoaXMgbWV0aG9kIHRha2VzIHRoZSBzYW1lIGFyZ3VtZW50cyB0aGF0XG4gKiBgQXJyYXkucHJvdG90eXBlLmZvckVhY2hgIHRha2VzLlxuICpcbiAqIE5PVEU6IFRoZSBvcmRlciBvZiB0aGUgbWFwcGluZ3MgaXMgTk9UIGd1YXJhbnRlZWQuXG4gKi9cbk1hcHBpbmdMaXN0LnByb3RvdHlwZS51bnNvcnRlZEZvckVhY2ggPVxuICBmdW5jdGlvbiBNYXBwaW5nTGlzdF9mb3JFYWNoKGFDYWxsYmFjaywgYVRoaXNBcmcpIHtcbiAgICB0aGlzLl9hcnJheS5mb3JFYWNoKGFDYWxsYmFjaywgYVRoaXNBcmcpO1xuICB9O1xuXG4vKipcbiAqIEFkZCB0aGUgZ2l2ZW4gc291cmNlIG1hcHBpbmcuXG4gKlxuICogQHBhcmFtIE9iamVjdCBhTWFwcGluZ1xuICovXG5NYXBwaW5nTGlzdC5wcm90b3R5cGUuYWRkID0gZnVuY3Rpb24gTWFwcGluZ0xpc3RfYWRkKGFNYXBwaW5nKSB7XG4gIGlmIChnZW5lcmF0ZWRQb3NpdGlvbkFmdGVyKHRoaXMuX2xhc3QsIGFNYXBwaW5nKSkge1xuICAgIHRoaXMuX2xhc3QgPSBhTWFwcGluZztcbiAgICB0aGlzLl9hcnJheS5wdXNoKGFNYXBwaW5nKTtcbiAgfSBlbHNlIHtcbiAgICB0aGlzLl9zb3J0ZWQgPSBmYWxzZTtcbiAgICB0aGlzLl9hcnJheS5wdXNoKGFNYXBwaW5nKTtcbiAgfVxufTtcblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBmbGF0LCBzb3J0ZWQgYXJyYXkgb2YgbWFwcGluZ3MuIFRoZSBtYXBwaW5ncyBhcmUgc29ydGVkIGJ5XG4gKiBnZW5lcmF0ZWQgcG9zaXRpb24uXG4gKlxuICogV0FSTklORzogVGhpcyBtZXRob2QgcmV0dXJucyBpbnRlcm5hbCBkYXRhIHdpdGhvdXQgY29weWluZywgZm9yXG4gKiBwZXJmb3JtYW5jZS4gVGhlIHJldHVybiB2YWx1ZSBtdXN0IE5PVCBiZSBtdXRhdGVkLCBhbmQgc2hvdWxkIGJlIHRyZWF0ZWQgYXNcbiAqIGFuIGltbXV0YWJsZSBib3Jyb3cuIElmIHlvdSB3YW50IHRvIHRha2Ugb3duZXJzaGlwLCB5b3UgbXVzdCBtYWtlIHlvdXIgb3duXG4gKiBjb3B5LlxuICovXG5NYXBwaW5nTGlzdC5wcm90b3R5cGUudG9BcnJheSA9IGZ1bmN0aW9uIE1hcHBpbmdMaXN0X3RvQXJyYXkoKSB7XG4gIGlmICghdGhpcy5fc29ydGVkKSB7XG4gICAgdGhpcy5fYXJyYXkuc29ydCh1dGlsLmNvbXBhcmVCeUdlbmVyYXRlZFBvc2l0aW9uc0luZmxhdGVkKTtcbiAgICB0aGlzLl9zb3J0ZWQgPSB0cnVlO1xuICB9XG4gIHJldHVybiB0aGlzLl9hcnJheTtcbn07XG5cbmV4cG9ydHMuTWFwcGluZ0xpc3QgPSBNYXBwaW5nTGlzdDtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///66260\n")},61527:(__unused_webpack_module,exports,__webpack_require__)=>{eval("/* -*- Mode: js; js-indent-level: 2; -*- */\n/*\n * Copyright 2011 Mozilla Foundation and contributors\n * Licensed under the New BSD license. See LICENSE or:\n * http://opensource.org/licenses/BSD-3-Clause\n */\n\nvar base64VLQ = __webpack_require__(582);\nvar util = __webpack_require__(48829);\nvar ArraySet = (__webpack_require__(54361)/* .ArraySet */ .C);\nvar MappingList = (__webpack_require__(66260)/* .MappingList */ .P);\n\n/**\n * An instance of the SourceMapGenerator represents a source map which is\n * being built incrementally. You may pass an object with the following\n * properties:\n *\n *   - file: The filename of the generated source.\n *   - sourceRoot: A root for all relative URLs in this source map.\n */\nfunction SourceMapGenerator(aArgs) {\n  if (!aArgs) {\n    aArgs = {};\n  }\n  this._file = util.getArg(aArgs, 'file', null);\n  this._sourceRoot = util.getArg(aArgs, 'sourceRoot', null);\n  this._skipValidation = util.getArg(aArgs, 'skipValidation', false);\n  this._ignoreInvalidMapping = util.getArg(aArgs, 'ignoreInvalidMapping', false);\n  this._sources = new ArraySet();\n  this._names = new ArraySet();\n  this._mappings = new MappingList();\n  this._sourcesContents = null;\n}\n\nSourceMapGenerator.prototype._version = 3;\n\n/**\n * Creates a new SourceMapGenerator based on a SourceMapConsumer\n *\n * @param aSourceMapConsumer The SourceMap.\n */\nSourceMapGenerator.fromSourceMap =\n  function SourceMapGenerator_fromSourceMap(aSourceMapConsumer, generatorOps) {\n    var sourceRoot = aSourceMapConsumer.sourceRoot;\n    var generator = new SourceMapGenerator(Object.assign(generatorOps || {}, {\n      file: aSourceMapConsumer.file,\n      sourceRoot: sourceRoot\n    }));\n    aSourceMapConsumer.eachMapping(function (mapping) {\n      var newMapping = {\n        generated: {\n          line: mapping.generatedLine,\n          column: mapping.generatedColumn\n        }\n      };\n\n      if (mapping.source != null) {\n        newMapping.source = mapping.source;\n        if (sourceRoot != null) {\n          newMapping.source = util.relative(sourceRoot, newMapping.source);\n        }\n\n        newMapping.original = {\n          line: mapping.originalLine,\n          column: mapping.originalColumn\n        };\n\n        if (mapping.name != null) {\n          newMapping.name = mapping.name;\n        }\n      }\n\n      generator.addMapping(newMapping);\n    });\n    aSourceMapConsumer.sources.forEach(function (sourceFile) {\n      var sourceRelative = sourceFile;\n      if (sourceRoot !== null) {\n        sourceRelative = util.relative(sourceRoot, sourceFile);\n      }\n\n      if (!generator._sources.has(sourceRelative)) {\n        generator._sources.add(sourceRelative);\n      }\n\n      var content = aSourceMapConsumer.sourceContentFor(sourceFile);\n      if (content != null) {\n        generator.setSourceContent(sourceFile, content);\n      }\n    });\n    return generator;\n  };\n\n/**\n * Add a single mapping from original source line and column to the generated\n * source's line and column for this source map being created. The mapping\n * object should have the following properties:\n *\n *   - generated: An object with the generated line and column positions.\n *   - original: An object with the original line and column positions.\n *   - source: The original source file (relative to the sourceRoot).\n *   - name: An optional original token name for this mapping.\n */\nSourceMapGenerator.prototype.addMapping =\n  function SourceMapGenerator_addMapping(aArgs) {\n    var generated = util.getArg(aArgs, 'generated');\n    var original = util.getArg(aArgs, 'original', null);\n    var source = util.getArg(aArgs, 'source', null);\n    var name = util.getArg(aArgs, 'name', null);\n\n    if (!this._skipValidation) {\n      if (this._validateMapping(generated, original, source, name) === false) {\n        return;\n      }\n    }\n\n    if (source != null) {\n      source = String(source);\n      if (!this._sources.has(source)) {\n        this._sources.add(source);\n      }\n    }\n\n    if (name != null) {\n      name = String(name);\n      if (!this._names.has(name)) {\n        this._names.add(name);\n      }\n    }\n\n    this._mappings.add({\n      generatedLine: generated.line,\n      generatedColumn: generated.column,\n      originalLine: original != null && original.line,\n      originalColumn: original != null && original.column,\n      source: source,\n      name: name\n    });\n  };\n\n/**\n * Set the source content for a source file.\n */\nSourceMapGenerator.prototype.setSourceContent =\n  function SourceMapGenerator_setSourceContent(aSourceFile, aSourceContent) {\n    var source = aSourceFile;\n    if (this._sourceRoot != null) {\n      source = util.relative(this._sourceRoot, source);\n    }\n\n    if (aSourceContent != null) {\n      // Add the source content to the _sourcesContents map.\n      // Create a new _sourcesContents map if the property is null.\n      if (!this._sourcesContents) {\n        this._sourcesContents = Object.create(null);\n      }\n      this._sourcesContents[util.toSetString(source)] = aSourceContent;\n    } else if (this._sourcesContents) {\n      // Remove the source file from the _sourcesContents map.\n      // If the _sourcesContents map is empty, set the property to null.\n      delete this._sourcesContents[util.toSetString(source)];\n      if (Object.keys(this._sourcesContents).length === 0) {\n        this._sourcesContents = null;\n      }\n    }\n  };\n\n/**\n * Applies the mappings of a sub-source-map for a specific source file to the\n * source map being generated. Each mapping to the supplied source file is\n * rewritten using the supplied source map. Note: The resolution for the\n * resulting mappings is the minimium of this map and the supplied map.\n *\n * @param aSourceMapConsumer The source map to be applied.\n * @param aSourceFile Optional. The filename of the source file.\n *        If omitted, SourceMapConsumer's file property will be used.\n * @param aSourceMapPath Optional. The dirname of the path to the source map\n *        to be applied. If relative, it is relative to the SourceMapConsumer.\n *        This parameter is needed when the two source maps aren't in the same\n *        directory, and the source map to be applied contains relative source\n *        paths. If so, those relative source paths need to be rewritten\n *        relative to the SourceMapGenerator.\n */\nSourceMapGenerator.prototype.applySourceMap =\n  function SourceMapGenerator_applySourceMap(aSourceMapConsumer, aSourceFile, aSourceMapPath) {\n    var sourceFile = aSourceFile;\n    // If aSourceFile is omitted, we will use the file property of the SourceMap\n    if (aSourceFile == null) {\n      if (aSourceMapConsumer.file == null) {\n        throw new Error(\n          'SourceMapGenerator.prototype.applySourceMap requires either an explicit source file, ' +\n          'or the source map\\'s \"file\" property. Both were omitted.'\n        );\n      }\n      sourceFile = aSourceMapConsumer.file;\n    }\n    var sourceRoot = this._sourceRoot;\n    // Make \"sourceFile\" relative if an absolute Url is passed.\n    if (sourceRoot != null) {\n      sourceFile = util.relative(sourceRoot, sourceFile);\n    }\n    // Applying the SourceMap can add and remove items from the sources and\n    // the names array.\n    var newSources = new ArraySet();\n    var newNames = new ArraySet();\n\n    // Find mappings for the \"sourceFile\"\n    this._mappings.unsortedForEach(function (mapping) {\n      if (mapping.source === sourceFile && mapping.originalLine != null) {\n        // Check if it can be mapped by the source map, then update the mapping.\n        var original = aSourceMapConsumer.originalPositionFor({\n          line: mapping.originalLine,\n          column: mapping.originalColumn\n        });\n        if (original.source != null) {\n          // Copy mapping\n          mapping.source = original.source;\n          if (aSourceMapPath != null) {\n            mapping.source = util.join(aSourceMapPath, mapping.source)\n          }\n          if (sourceRoot != null) {\n            mapping.source = util.relative(sourceRoot, mapping.source);\n          }\n          mapping.originalLine = original.line;\n          mapping.originalColumn = original.column;\n          if (original.name != null) {\n            mapping.name = original.name;\n          }\n        }\n      }\n\n      var source = mapping.source;\n      if (source != null && !newSources.has(source)) {\n        newSources.add(source);\n      }\n\n      var name = mapping.name;\n      if (name != null && !newNames.has(name)) {\n        newNames.add(name);\n      }\n\n    }, this);\n    this._sources = newSources;\n    this._names = newNames;\n\n    // Copy sourcesContents of applied map.\n    aSourceMapConsumer.sources.forEach(function (sourceFile) {\n      var content = aSourceMapConsumer.sourceContentFor(sourceFile);\n      if (content != null) {\n        if (aSourceMapPath != null) {\n          sourceFile = util.join(aSourceMapPath, sourceFile);\n        }\n        if (sourceRoot != null) {\n          sourceFile = util.relative(sourceRoot, sourceFile);\n        }\n        this.setSourceContent(sourceFile, content);\n      }\n    }, this);\n  };\n\n/**\n * A mapping can have one of the three levels of data:\n *\n *   1. Just the generated position.\n *   2. The Generated position, original position, and original source.\n *   3. Generated and original position, original source, as well as a name\n *      token.\n *\n * To maintain consistency, we validate that any new mapping being added falls\n * in to one of these categories.\n */\nSourceMapGenerator.prototype._validateMapping =\n  function SourceMapGenerator_validateMapping(aGenerated, aOriginal, aSource,\n                                              aName) {\n    // When aOriginal is truthy but has empty values for .line and .column,\n    // it is most likely a programmer error. In this case we throw a very\n    // specific error message to try to guide them the right way.\n    // For example: https://github.com/Polymer/polymer-bundler/pull/519\n    if (aOriginal && typeof aOriginal.line !== 'number' && typeof aOriginal.column !== 'number') {\n      var message = 'original.line and original.column are not numbers -- you probably meant to omit ' +\n      'the original mapping entirely and only map the generated position. If so, pass ' +\n      'null for the original mapping instead of an object with empty or null values.'\n\n      if (this._ignoreInvalidMapping) {\n        if (typeof console !== 'undefined' && console.warn) {\n          console.warn(message);\n        }\n        return false;\n      } else {\n        throw new Error(message);\n      }\n    }\n\n    if (aGenerated && 'line' in aGenerated && 'column' in aGenerated\n        && aGenerated.line > 0 && aGenerated.column >= 0\n        && !aOriginal && !aSource && !aName) {\n      // Case 1.\n      return;\n    }\n    else if (aGenerated && 'line' in aGenerated && 'column' in aGenerated\n             && aOriginal && 'line' in aOriginal && 'column' in aOriginal\n             && aGenerated.line > 0 && aGenerated.column >= 0\n             && aOriginal.line > 0 && aOriginal.column >= 0\n             && aSource) {\n      // Cases 2 and 3.\n      return;\n    }\n    else {\n      var message = 'Invalid mapping: ' + JSON.stringify({\n        generated: aGenerated,\n        source: aSource,\n        original: aOriginal,\n        name: aName\n      });\n\n      if (this._ignoreInvalidMapping) {\n        if (typeof console !== 'undefined' && console.warn) {\n          console.warn(message);\n        }\n        return false;\n      } else {\n        throw new Error(message)\n      }\n    }\n  };\n\n/**\n * Serialize the accumulated mappings in to the stream of base 64 VLQs\n * specified by the source map format.\n */\nSourceMapGenerator.prototype._serializeMappings =\n  function SourceMapGenerator_serializeMappings() {\n    var previousGeneratedColumn = 0;\n    var previousGeneratedLine = 1;\n    var previousOriginalColumn = 0;\n    var previousOriginalLine = 0;\n    var previousName = 0;\n    var previousSource = 0;\n    var result = '';\n    var next;\n    var mapping;\n    var nameIdx;\n    var sourceIdx;\n\n    var mappings = this._mappings.toArray();\n    for (var i = 0, len = mappings.length; i < len; i++) {\n      mapping = mappings[i];\n      next = ''\n\n      if (mapping.generatedLine !== previousGeneratedLine) {\n        previousGeneratedColumn = 0;\n        while (mapping.generatedLine !== previousGeneratedLine) {\n          next += ';';\n          previousGeneratedLine++;\n        }\n      }\n      else {\n        if (i > 0) {\n          if (!util.compareByGeneratedPositionsInflated(mapping, mappings[i - 1])) {\n            continue;\n          }\n          next += ',';\n        }\n      }\n\n      next += base64VLQ.encode(mapping.generatedColumn\n                                 - previousGeneratedColumn);\n      previousGeneratedColumn = mapping.generatedColumn;\n\n      if (mapping.source != null) {\n        sourceIdx = this._sources.indexOf(mapping.source);\n        next += base64VLQ.encode(sourceIdx - previousSource);\n        previousSource = sourceIdx;\n\n        // lines are stored 0-based in SourceMap spec version 3\n        next += base64VLQ.encode(mapping.originalLine - 1\n                                   - previousOriginalLine);\n        previousOriginalLine = mapping.originalLine - 1;\n\n        next += base64VLQ.encode(mapping.originalColumn\n                                   - previousOriginalColumn);\n        previousOriginalColumn = mapping.originalColumn;\n\n        if (mapping.name != null) {\n          nameIdx = this._names.indexOf(mapping.name);\n          next += base64VLQ.encode(nameIdx - previousName);\n          previousName = nameIdx;\n        }\n      }\n\n      result += next;\n    }\n\n    return result;\n  };\n\nSourceMapGenerator.prototype._generateSourcesContent =\n  function SourceMapGenerator_generateSourcesContent(aSources, aSourceRoot) {\n    return aSources.map(function (source) {\n      if (!this._sourcesContents) {\n        return null;\n      }\n      if (aSourceRoot != null) {\n        source = util.relative(aSourceRoot, source);\n      }\n      var key = util.toSetString(source);\n      return Object.prototype.hasOwnProperty.call(this._sourcesContents, key)\n        ? this._sourcesContents[key]\n        : null;\n    }, this);\n  };\n\n/**\n * Externalize the source map.\n */\nSourceMapGenerator.prototype.toJSON =\n  function SourceMapGenerator_toJSON() {\n    var map = {\n      version: this._version,\n      sources: this._sources.toArray(),\n      names: this._names.toArray(),\n      mappings: this._serializeMappings()\n    };\n    if (this._file != null) {\n      map.file = this._file;\n    }\n    if (this._sourceRoot != null) {\n      map.sourceRoot = this._sourceRoot;\n    }\n    if (this._sourcesContents) {\n      map.sourcesContent = this._generateSourcesContent(map.sources, map.sourceRoot);\n    }\n\n    return map;\n  };\n\n/**\n * Render the source map being generated to a string.\n */\nSourceMapGenerator.prototype.toString =\n  function SourceMapGenerator_toString() {\n    return JSON.stringify(this.toJSON());\n  };\n\nexports.SourceMapGenerator = SourceMapGenerator;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///61527\n")},48829:(__unused_webpack_module,exports)=>{eval("/* -*- Mode: js; js-indent-level: 2; -*- */\n/*\n * Copyright 2011 Mozilla Foundation and contributors\n * Licensed under the New BSD license. See LICENSE or:\n * http://opensource.org/licenses/BSD-3-Clause\n */\n\n/**\n * This is a helper function for getting values from parameter/options\n * objects.\n *\n * @param args The object we are extracting values from\n * @param name The name of the property we are getting.\n * @param defaultValue An optional value to return if the property is missing\n * from the object. If this is not specified and the property is missing, an\n * error will be thrown.\n */\nfunction getArg(aArgs, aName, aDefaultValue) {\n  if (aName in aArgs) {\n    return aArgs[aName];\n  } else if (arguments.length === 3) {\n    return aDefaultValue;\n  } else {\n    throw new Error('\"' + aName + '\" is a required argument.');\n  }\n}\nexports.getArg = getArg;\n\nvar urlRegexp = /^(?:([\\w+\\-.]+):)?\\/\\/(?:(\\w+:\\w+)@)?([\\w.-]*)(?::(\\d+))?(.*)$/;\nvar dataUrlRegexp = /^data:.+\\,.+$/;\n\nfunction urlParse(aUrl) {\n  var match = aUrl.match(urlRegexp);\n  if (!match) {\n    return null;\n  }\n  return {\n    scheme: match[1],\n    auth: match[2],\n    host: match[3],\n    port: match[4],\n    path: match[5]\n  };\n}\nexports.urlParse = urlParse;\n\nfunction urlGenerate(aParsedUrl) {\n  var url = '';\n  if (aParsedUrl.scheme) {\n    url += aParsedUrl.scheme + ':';\n  }\n  url += '//';\n  if (aParsedUrl.auth) {\n    url += aParsedUrl.auth + '@';\n  }\n  if (aParsedUrl.host) {\n    url += aParsedUrl.host;\n  }\n  if (aParsedUrl.port) {\n    url += \":\" + aParsedUrl.port\n  }\n  if (aParsedUrl.path) {\n    url += aParsedUrl.path;\n  }\n  return url;\n}\nexports.urlGenerate = urlGenerate;\n\nvar MAX_CACHED_INPUTS = 32;\n\n/**\n * Takes some function `f(input) -> result` and returns a memoized version of\n * `f`.\n *\n * We keep at most `MAX_CACHED_INPUTS` memoized results of `f` alive. The\n * memoization is a dumb-simple, linear least-recently-used cache.\n */\nfunction lruMemoize(f) {\n  var cache = [];\n\n  return function(input) {\n    for (var i = 0; i < cache.length; i++) {\n      if (cache[i].input === input) {\n        var temp = cache[0];\n        cache[0] = cache[i];\n        cache[i] = temp;\n        return cache[0].result;\n      }\n    }\n\n    var result = f(input);\n\n    cache.unshift({\n      input,\n      result,\n    });\n\n    if (cache.length > MAX_CACHED_INPUTS) {\n      cache.pop();\n    }\n\n    return result;\n  };\n}\n\n/**\n * Normalizes a path, or the path portion of a URL:\n *\n * - Replaces consecutive slashes with one slash.\n * - Removes unnecessary '.' parts.\n * - Removes unnecessary '<dir>/..' parts.\n *\n * Based on code in the Node.js 'path' core module.\n *\n * @param aPath The path or url to normalize.\n */\nvar normalize = lruMemoize(function normalize(aPath) {\n  var path = aPath;\n  var url = urlParse(aPath);\n  if (url) {\n    if (!url.path) {\n      return aPath;\n    }\n    path = url.path;\n  }\n  var isAbsolute = exports.isAbsolute(path);\n  // Split the path into parts between `/` characters. This is much faster than\n  // using `.split(/\\/+/g)`.\n  var parts = [];\n  var start = 0;\n  var i = 0;\n  while (true) {\n    start = i;\n    i = path.indexOf(\"/\", start);\n    if (i === -1) {\n      parts.push(path.slice(start));\n      break;\n    } else {\n      parts.push(path.slice(start, i));\n      while (i < path.length && path[i] === \"/\") {\n        i++;\n      }\n    }\n  }\n\n  for (var part, up = 0, i = parts.length - 1; i >= 0; i--) {\n    part = parts[i];\n    if (part === '.') {\n      parts.splice(i, 1);\n    } else if (part === '..') {\n      up++;\n    } else if (up > 0) {\n      if (part === '') {\n        // The first part is blank if the path is absolute. Trying to go\n        // above the root is a no-op. Therefore we can remove all '..' parts\n        // directly after the root.\n        parts.splice(i + 1, up);\n        up = 0;\n      } else {\n        parts.splice(i, 2);\n        up--;\n      }\n    }\n  }\n  path = parts.join('/');\n\n  if (path === '') {\n    path = isAbsolute ? '/' : '.';\n  }\n\n  if (url) {\n    url.path = path;\n    return urlGenerate(url);\n  }\n  return path;\n});\nexports.normalize = normalize;\n\n/**\n * Joins two paths/URLs.\n *\n * @param aRoot The root path or URL.\n * @param aPath The path or URL to be joined with the root.\n *\n * - If aPath is a URL or a data URI, aPath is returned, unless aPath is a\n *   scheme-relative URL: Then the scheme of aRoot, if any, is prepended\n *   first.\n * - Otherwise aPath is a path. If aRoot is a URL, then its path portion\n *   is updated with the result and aRoot is returned. Otherwise the result\n *   is returned.\n *   - If aPath is absolute, the result is aPath.\n *   - Otherwise the two paths are joined with a slash.\n * - Joining for example 'http://' and 'www.example.com' is also supported.\n */\nfunction join(aRoot, aPath) {\n  if (aRoot === \"\") {\n    aRoot = \".\";\n  }\n  if (aPath === \"\") {\n    aPath = \".\";\n  }\n  var aPathUrl = urlParse(aPath);\n  var aRootUrl = urlParse(aRoot);\n  if (aRootUrl) {\n    aRoot = aRootUrl.path || '/';\n  }\n\n  // `join(foo, '//www.example.org')`\n  if (aPathUrl && !aPathUrl.scheme) {\n    if (aRootUrl) {\n      aPathUrl.scheme = aRootUrl.scheme;\n    }\n    return urlGenerate(aPathUrl);\n  }\n\n  if (aPathUrl || aPath.match(dataUrlRegexp)) {\n    return aPath;\n  }\n\n  // `join('http://', 'www.example.com')`\n  if (aRootUrl && !aRootUrl.host && !aRootUrl.path) {\n    aRootUrl.host = aPath;\n    return urlGenerate(aRootUrl);\n  }\n\n  var joined = aPath.charAt(0) === '/'\n    ? aPath\n    : normalize(aRoot.replace(/\\/+$/, '') + '/' + aPath);\n\n  if (aRootUrl) {\n    aRootUrl.path = joined;\n    return urlGenerate(aRootUrl);\n  }\n  return joined;\n}\nexports.join = join;\n\nexports.isAbsolute = function (aPath) {\n  return aPath.charAt(0) === '/' || urlRegexp.test(aPath);\n};\n\n/**\n * Make a path relative to a URL or another path.\n *\n * @param aRoot The root path or URL.\n * @param aPath The path or URL to be made relative to aRoot.\n */\nfunction relative(aRoot, aPath) {\n  if (aRoot === \"\") {\n    aRoot = \".\";\n  }\n\n  aRoot = aRoot.replace(/\\/$/, '');\n\n  // It is possible for the path to be above the root. In this case, simply\n  // checking whether the root is a prefix of the path won't work. Instead, we\n  // need to remove components from the root one by one, until either we find\n  // a prefix that fits, or we run out of components to remove.\n  var level = 0;\n  while (aPath.indexOf(aRoot + '/') !== 0) {\n    var index = aRoot.lastIndexOf(\"/\");\n    if (index < 0) {\n      return aPath;\n    }\n\n    // If the only part of the root that is left is the scheme (i.e. http://,\n    // file:///, etc.), one or more slashes (/), or simply nothing at all, we\n    // have exhausted all components, so the path is not relative to the root.\n    aRoot = aRoot.slice(0, index);\n    if (aRoot.match(/^([^\\/]+:\\/)?\\/*$/)) {\n      return aPath;\n    }\n\n    ++level;\n  }\n\n  // Make sure we add a \"../\" for each component we removed from the root.\n  return Array(level + 1).join(\"../\") + aPath.substr(aRoot.length + 1);\n}\nexports.relative = relative;\n\nvar supportsNullProto = (function () {\n  var obj = Object.create(null);\n  return !('__proto__' in obj);\n}());\n\nfunction identity (s) {\n  return s;\n}\n\n/**\n * Because behavior goes wacky when you set `__proto__` on objects, we\n * have to prefix all the strings in our set with an arbitrary character.\n *\n * See https://github.com/mozilla/source-map/pull/31 and\n * https://github.com/mozilla/source-map/issues/30\n *\n * @param String aStr\n */\nfunction toSetString(aStr) {\n  if (isProtoString(aStr)) {\n    return '$' + aStr;\n  }\n\n  return aStr;\n}\nexports.toSetString = supportsNullProto ? identity : toSetString;\n\nfunction fromSetString(aStr) {\n  if (isProtoString(aStr)) {\n    return aStr.slice(1);\n  }\n\n  return aStr;\n}\nexports.fromSetString = supportsNullProto ? identity : fromSetString;\n\nfunction isProtoString(s) {\n  if (!s) {\n    return false;\n  }\n\n  var length = s.length;\n\n  if (length < 9 /* \"__proto__\".length */) {\n    return false;\n  }\n\n  if (s.charCodeAt(length - 1) !== 95  /* '_' */ ||\n      s.charCodeAt(length - 2) !== 95  /* '_' */ ||\n      s.charCodeAt(length - 3) !== 111 /* 'o' */ ||\n      s.charCodeAt(length - 4) !== 116 /* 't' */ ||\n      s.charCodeAt(length - 5) !== 111 /* 'o' */ ||\n      s.charCodeAt(length - 6) !== 114 /* 'r' */ ||\n      s.charCodeAt(length - 7) !== 112 /* 'p' */ ||\n      s.charCodeAt(length - 8) !== 95  /* '_' */ ||\n      s.charCodeAt(length - 9) !== 95  /* '_' */) {\n    return false;\n  }\n\n  for (var i = length - 10; i >= 0; i--) {\n    if (s.charCodeAt(i) !== 36 /* '$' */) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\n/**\n * Comparator between two mappings where the original positions are compared.\n *\n * Optionally pass in `true` as `onlyCompareGenerated` to consider two\n * mappings with the same original source/line/column, but different generated\n * line and column the same. Useful when searching for a mapping with a\n * stubbed out mapping.\n */\nfunction compareByOriginalPositions(mappingA, mappingB, onlyCompareOriginal) {\n  var cmp = strcmp(mappingA.source, mappingB.source);\n  if (cmp !== 0) {\n    return cmp;\n  }\n\n  cmp = mappingA.originalLine - mappingB.originalLine;\n  if (cmp !== 0) {\n    return cmp;\n  }\n\n  cmp = mappingA.originalColumn - mappingB.originalColumn;\n  if (cmp !== 0 || onlyCompareOriginal) {\n    return cmp;\n  }\n\n  cmp = mappingA.generatedColumn - mappingB.generatedColumn;\n  if (cmp !== 0) {\n    return cmp;\n  }\n\n  cmp = mappingA.generatedLine - mappingB.generatedLine;\n  if (cmp !== 0) {\n    return cmp;\n  }\n\n  return strcmp(mappingA.name, mappingB.name);\n}\nexports.compareByOriginalPositions = compareByOriginalPositions;\n\nfunction compareByOriginalPositionsNoSource(mappingA, mappingB, onlyCompareOriginal) {\n  var cmp\n\n  cmp = mappingA.originalLine - mappingB.originalLine;\n  if (cmp !== 0) {\n    return cmp;\n  }\n\n  cmp = mappingA.originalColumn - mappingB.originalColumn;\n  if (cmp !== 0 || onlyCompareOriginal) {\n    return cmp;\n  }\n\n  cmp = mappingA.generatedColumn - mappingB.generatedColumn;\n  if (cmp !== 0) {\n    return cmp;\n  }\n\n  cmp = mappingA.generatedLine - mappingB.generatedLine;\n  if (cmp !== 0) {\n    return cmp;\n  }\n\n  return strcmp(mappingA.name, mappingB.name);\n}\nexports.compareByOriginalPositionsNoSource = compareByOriginalPositionsNoSource;\n\n/**\n * Comparator between two mappings with deflated source and name indices where\n * the generated positions are compared.\n *\n * Optionally pass in `true` as `onlyCompareGenerated` to consider two\n * mappings with the same generated line and column, but different\n * source/name/original line and column the same. Useful when searching for a\n * mapping with a stubbed out mapping.\n */\nfunction compareByGeneratedPositionsDeflated(mappingA, mappingB, onlyCompareGenerated) {\n  var cmp = mappingA.generatedLine - mappingB.generatedLine;\n  if (cmp !== 0) {\n    return cmp;\n  }\n\n  cmp = mappingA.generatedColumn - mappingB.generatedColumn;\n  if (cmp !== 0 || onlyCompareGenerated) {\n    return cmp;\n  }\n\n  cmp = strcmp(mappingA.source, mappingB.source);\n  if (cmp !== 0) {\n    return cmp;\n  }\n\n  cmp = mappingA.originalLine - mappingB.originalLine;\n  if (cmp !== 0) {\n    return cmp;\n  }\n\n  cmp = mappingA.originalColumn - mappingB.originalColumn;\n  if (cmp !== 0) {\n    return cmp;\n  }\n\n  return strcmp(mappingA.name, mappingB.name);\n}\nexports.compareByGeneratedPositionsDeflated = compareByGeneratedPositionsDeflated;\n\nfunction compareByGeneratedPositionsDeflatedNoLine(mappingA, mappingB, onlyCompareGenerated) {\n  var cmp = mappingA.generatedColumn - mappingB.generatedColumn;\n  if (cmp !== 0 || onlyCompareGenerated) {\n    return cmp;\n  }\n\n  cmp = strcmp(mappingA.source, mappingB.source);\n  if (cmp !== 0) {\n    return cmp;\n  }\n\n  cmp = mappingA.originalLine - mappingB.originalLine;\n  if (cmp !== 0) {\n    return cmp;\n  }\n\n  cmp = mappingA.originalColumn - mappingB.originalColumn;\n  if (cmp !== 0) {\n    return cmp;\n  }\n\n  return strcmp(mappingA.name, mappingB.name);\n}\nexports.compareByGeneratedPositionsDeflatedNoLine = compareByGeneratedPositionsDeflatedNoLine;\n\nfunction strcmp(aStr1, aStr2) {\n  if (aStr1 === aStr2) {\n    return 0;\n  }\n\n  if (aStr1 === null) {\n    return 1; // aStr2 !== null\n  }\n\n  if (aStr2 === null) {\n    return -1; // aStr1 !== null\n  }\n\n  if (aStr1 > aStr2) {\n    return 1;\n  }\n\n  return -1;\n}\n\n/**\n * Comparator between two mappings with inflated source and name strings where\n * the generated positions are compared.\n */\nfunction compareByGeneratedPositionsInflated(mappingA, mappingB) {\n  var cmp = mappingA.generatedLine - mappingB.generatedLine;\n  if (cmp !== 0) {\n    return cmp;\n  }\n\n  cmp = mappingA.generatedColumn - mappingB.generatedColumn;\n  if (cmp !== 0) {\n    return cmp;\n  }\n\n  cmp = strcmp(mappingA.source, mappingB.source);\n  if (cmp !== 0) {\n    return cmp;\n  }\n\n  cmp = mappingA.originalLine - mappingB.originalLine;\n  if (cmp !== 0) {\n    return cmp;\n  }\n\n  cmp = mappingA.originalColumn - mappingB.originalColumn;\n  if (cmp !== 0) {\n    return cmp;\n  }\n\n  return strcmp(mappingA.name, mappingB.name);\n}\nexports.compareByGeneratedPositionsInflated = compareByGeneratedPositionsInflated;\n\n/**\n * Strip any JSON XSSI avoidance prefix from the string (as documented\n * in the source maps specification), and then parse the string as\n * JSON.\n */\nfunction parseSourceMapInput(str) {\n  return JSON.parse(str.replace(/^\\)]}'[^\\n]*\\n/, ''));\n}\nexports.parseSourceMapInput = parseSourceMapInput;\n\n/**\n * Compute the URL of a source given the the source root, the source's\n * URL, and the source map's URL.\n */\nfunction computeSourceURL(sourceRoot, sourceURL, sourceMapURL) {\n  sourceURL = sourceURL || '';\n\n  if (sourceRoot) {\n    // This follows what Chrome does.\n    if (sourceRoot[sourceRoot.length - 1] !== '/' && sourceURL[0] !== '/') {\n      sourceRoot += '/';\n    }\n    // The spec says:\n    //   Line 4: An optional source root, useful for relocating source\n    //   files on a server or removing repeated values in the\n    //   “sources” entry.  This value is prepended to the individual\n    //   entries in the “source” field.\n    sourceURL = sourceRoot + sourceURL;\n  }\n\n  // Historically, SourceMapConsumer did not take the sourceMapURL as\n  // a parameter.  This mode is still somewhat supported, which is why\n  // this code block is conditional.  However, it's preferable to pass\n  // the source map URL to SourceMapConsumer, so that this function\n  // can implement the source URL resolution algorithm as outlined in\n  // the spec.  This block is basically the equivalent of:\n  //    new URL(sourceURL, sourceMapURL).toString()\n  // ... except it avoids using URL, which wasn't available in the\n  // older releases of node still supported by this library.\n  //\n  // The spec says:\n  //   If the sources are not absolute URLs after prepending of the\n  //   “sourceRoot”, the sources are resolved relative to the\n  //   SourceMap (like resolving script src in a html document).\n  if (sourceMapURL) {\n    var parsed = urlParse(sourceMapURL);\n    if (!parsed) {\n      throw new Error(\"sourceMapURL could not be parsed\");\n    }\n    if (parsed.path) {\n      // Strip the last path component, but keep the \"/\".\n      var index = parsed.path.lastIndexOf('/');\n      if (index >= 0) {\n        parsed.path = parsed.path.substring(0, index + 1);\n      }\n    }\n    sourceURL = join(urlGenerate(parsed), sourceURL);\n  }\n\n  return normalize(sourceURL);\n}\nexports.computeSourceURL = computeSourceURL;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///48829\n")},94643:(module,__unused_webpack_exports,__webpack_require__)=>{eval("\n/**\n * Module exports.\n */\n\nmodule.exports = deprecate;\n\n/**\n * Mark that a method should not be used.\n * Returns a modified function which warns once by default.\n *\n * If `localStorage.noDeprecation = true` is set, then it is a no-op.\n *\n * If `localStorage.throwDeprecation = true` is set, then deprecated functions\n * will throw an Error when invoked.\n *\n * If `localStorage.traceDeprecation = true` is set, then deprecated functions\n * will invoke `console.trace()` instead of `console.error()`.\n *\n * @param {Function} fn - the function to deprecate\n * @param {String} msg - the string to print to the console when `fn` is invoked\n * @returns {Function} a new \"deprecated\" version of `fn`\n * @api public\n */\n\nfunction deprecate (fn, msg) {\n  if (config('noDeprecation')) {\n    return fn;\n  }\n\n  var warned = false;\n  function deprecated() {\n    if (!warned) {\n      if (config('throwDeprecation')) {\n        throw new Error(msg);\n      } else if (config('traceDeprecation')) {\n        console.trace(msg);\n      } else {\n        console.warn(msg);\n      }\n      warned = true;\n    }\n    return fn.apply(this, arguments);\n  }\n\n  return deprecated;\n}\n\n/**\n * Checks `localStorage` for boolean values for the given `name`.\n *\n * @param {String} name\n * @returns {Boolean}\n * @api private\n */\n\nfunction config (name) {\n  // accessing global.localStorage can trigger a DOMException in sandboxed iframes\n  try {\n    if (!__webpack_require__.g.localStorage) return false;\n  } catch (_) {\n    return false;\n  }\n  var val = __webpack_require__.g.localStorage[name];\n  if (null == val) return false;\n  return String(val).toLowerCase() === 'true';\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOTQ2NDMuanMiLCJtYXBwaW5ncyI6IjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLFVBQVU7QUFDckIsV0FBVyxRQUFRO0FBQ25CLGFBQWEsVUFBVTtBQUN2QjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsV0FBVyxRQUFRO0FBQ25CLGFBQWE7QUFDYjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFNBQVMscUJBQU07QUFDZixJQUFJO0FBQ0o7QUFDQTtBQUNBLFlBQVkscUJBQU07QUFDbEI7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYmxvY2tiaXRlLy4vbm9kZV9tb2R1bGVzL3V0aWwtZGVwcmVjYXRlL2Jyb3dzZXIuanM/YjdkMSJdLCJzb3VyY2VzQ29udGVudCI6WyJcbi8qKlxuICogTW9kdWxlIGV4cG9ydHMuXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSBkZXByZWNhdGU7XG5cbi8qKlxuICogTWFyayB0aGF0IGEgbWV0aG9kIHNob3VsZCBub3QgYmUgdXNlZC5cbiAqIFJldHVybnMgYSBtb2RpZmllZCBmdW5jdGlvbiB3aGljaCB3YXJucyBvbmNlIGJ5IGRlZmF1bHQuXG4gKlxuICogSWYgYGxvY2FsU3RvcmFnZS5ub0RlcHJlY2F0aW9uID0gdHJ1ZWAgaXMgc2V0LCB0aGVuIGl0IGlzIGEgbm8tb3AuXG4gKlxuICogSWYgYGxvY2FsU3RvcmFnZS50aHJvd0RlcHJlY2F0aW9uID0gdHJ1ZWAgaXMgc2V0LCB0aGVuIGRlcHJlY2F0ZWQgZnVuY3Rpb25zXG4gKiB3aWxsIHRocm93IGFuIEVycm9yIHdoZW4gaW52b2tlZC5cbiAqXG4gKiBJZiBgbG9jYWxTdG9yYWdlLnRyYWNlRGVwcmVjYXRpb24gPSB0cnVlYCBpcyBzZXQsIHRoZW4gZGVwcmVjYXRlZCBmdW5jdGlvbnNcbiAqIHdpbGwgaW52b2tlIGBjb25zb2xlLnRyYWNlKClgIGluc3RlYWQgb2YgYGNvbnNvbGUuZXJyb3IoKWAuXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm4gLSB0aGUgZnVuY3Rpb24gdG8gZGVwcmVjYXRlXG4gKiBAcGFyYW0ge1N0cmluZ30gbXNnIC0gdGhlIHN0cmluZyB0byBwcmludCB0byB0aGUgY29uc29sZSB3aGVuIGBmbmAgaXMgaW52b2tlZFxuICogQHJldHVybnMge0Z1bmN0aW9ufSBhIG5ldyBcImRlcHJlY2F0ZWRcIiB2ZXJzaW9uIG9mIGBmbmBcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZnVuY3Rpb24gZGVwcmVjYXRlIChmbiwgbXNnKSB7XG4gIGlmIChjb25maWcoJ25vRGVwcmVjYXRpb24nKSkge1xuICAgIHJldHVybiBmbjtcbiAgfVxuXG4gIHZhciB3YXJuZWQgPSBmYWxzZTtcbiAgZnVuY3Rpb24gZGVwcmVjYXRlZCgpIHtcbiAgICBpZiAoIXdhcm5lZCkge1xuICAgICAgaWYgKGNvbmZpZygndGhyb3dEZXByZWNhdGlvbicpKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihtc2cpO1xuICAgICAgfSBlbHNlIGlmIChjb25maWcoJ3RyYWNlRGVwcmVjYXRpb24nKSkge1xuICAgICAgICBjb25zb2xlLnRyYWNlKG1zZyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb25zb2xlLndhcm4obXNnKTtcbiAgICAgIH1cbiAgICAgIHdhcm5lZCA9IHRydWU7XG4gICAgfVxuICAgIHJldHVybiBmbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICB9XG5cbiAgcmV0dXJuIGRlcHJlY2F0ZWQ7XG59XG5cbi8qKlxuICogQ2hlY2tzIGBsb2NhbFN0b3JhZ2VgIGZvciBib29sZWFuIHZhbHVlcyBmb3IgdGhlIGdpdmVuIGBuYW1lYC5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gbmFtZVxuICogQHJldHVybnMge0Jvb2xlYW59XG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBjb25maWcgKG5hbWUpIHtcbiAgLy8gYWNjZXNzaW5nIGdsb2JhbC5sb2NhbFN0b3JhZ2UgY2FuIHRyaWdnZXIgYSBET01FeGNlcHRpb24gaW4gc2FuZGJveGVkIGlmcmFtZXNcbiAgdHJ5IHtcbiAgICBpZiAoIWdsb2JhbC5sb2NhbFN0b3JhZ2UpIHJldHVybiBmYWxzZTtcbiAgfSBjYXRjaCAoXykge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICB2YXIgdmFsID0gZ2xvYmFsLmxvY2FsU3RvcmFnZVtuYW1lXTtcbiAgaWYgKG51bGwgPT0gdmFsKSByZXR1cm4gZmFsc2U7XG4gIHJldHVybiBTdHJpbmcodmFsKS50b0xvd2VyQ2FzZSgpID09PSAndHJ1ZSc7XG59XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///94643\n")},49746:()=>{},19977:()=>{},197:()=>{},21866:()=>{},52739:()=>{},89159:(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval("\n\nconst cssTree = __webpack_require__(22694);\nconst utils = __webpack_require__(48681);\n\nfunction cleanAtrule(node, item, list) {\n    if (node.block) {\n        // otherwise removed at-rule don't prevent @import for removal\n        if (this.stylesheet !== null) {\n            this.stylesheet.firstAtrulesAllowed = false;\n        }\n\n        if (utils.hasNoChildren(node.block)) {\n            list.remove(item);\n            return;\n        }\n    }\n\n    switch (node.name) {\n        case 'charset':\n            if (utils.hasNoChildren(node.prelude)) {\n                list.remove(item);\n                return;\n            }\n\n            // if there is any rule before @charset -> remove it\n            if (item.prev) {\n                list.remove(item);\n                return;\n            }\n\n            break;\n\n        case 'import':\n            if (this.stylesheet === null || !this.stylesheet.firstAtrulesAllowed) {\n                list.remove(item);\n                return;\n            }\n\n            // if there are some rules that not an @import or @charset before @import\n            // remove it\n            list.prevUntil(item.prev, function(rule) {\n                if (rule.type === 'Atrule') {\n                    if (rule.name === 'import' || rule.name === 'charset') {\n                        return;\n                    }\n                }\n\n                this.root.firstAtrulesAllowed = false;\n                list.remove(item);\n\n                return true;\n            }, this);\n\n            break;\n\n        default: {\n            const name = cssTree.keyword(node.name).basename;\n\n            if (name === 'keyframes' ||\n                name === 'media' ||\n                name === 'supports') {\n\n                // drop at-rule with no prelude\n                if (utils.hasNoChildren(node.prelude) || utils.hasNoChildren(node.block)) {\n                    list.remove(item);\n                }\n            }\n        }\n    }\n}\n\nmodule.exports = cleanAtrule;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiODkxNTkuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsZ0JBQWdCLG1CQUFPLENBQUMsS0FBVTtBQUNsQyxjQUFjLG1CQUFPLENBQUMsS0FBYTs7QUFFbkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQSxhQUFhOztBQUViOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ibG9ja2JpdGUvLi9ub2RlX21vZHVsZXMvY3Nzby9janMvY2xlYW4vQXRydWxlLmNqcz84NjM1Il0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuY29uc3QgY3NzVHJlZSA9IHJlcXVpcmUoJ2Nzcy10cmVlJyk7XG5jb25zdCB1dGlscyA9IHJlcXVpcmUoJy4vdXRpbHMuY2pzJyk7XG5cbmZ1bmN0aW9uIGNsZWFuQXRydWxlKG5vZGUsIGl0ZW0sIGxpc3QpIHtcbiAgICBpZiAobm9kZS5ibG9jaykge1xuICAgICAgICAvLyBvdGhlcndpc2UgcmVtb3ZlZCBhdC1ydWxlIGRvbid0IHByZXZlbnQgQGltcG9ydCBmb3IgcmVtb3ZhbFxuICAgICAgICBpZiAodGhpcy5zdHlsZXNoZWV0ICE9PSBudWxsKSB7XG4gICAgICAgICAgICB0aGlzLnN0eWxlc2hlZXQuZmlyc3RBdHJ1bGVzQWxsb3dlZCA9IGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHV0aWxzLmhhc05vQ2hpbGRyZW4obm9kZS5ibG9jaykpIHtcbiAgICAgICAgICAgIGxpc3QucmVtb3ZlKGl0ZW0pO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgc3dpdGNoIChub2RlLm5hbWUpIHtcbiAgICAgICAgY2FzZSAnY2hhcnNldCc6XG4gICAgICAgICAgICBpZiAodXRpbHMuaGFzTm9DaGlsZHJlbihub2RlLnByZWx1ZGUpKSB7XG4gICAgICAgICAgICAgICAgbGlzdC5yZW1vdmUoaXRlbSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBpZiB0aGVyZSBpcyBhbnkgcnVsZSBiZWZvcmUgQGNoYXJzZXQgLT4gcmVtb3ZlIGl0XG4gICAgICAgICAgICBpZiAoaXRlbS5wcmV2KSB7XG4gICAgICAgICAgICAgICAgbGlzdC5yZW1vdmUoaXRlbSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlICdpbXBvcnQnOlxuICAgICAgICAgICAgaWYgKHRoaXMuc3R5bGVzaGVldCA9PT0gbnVsbCB8fCAhdGhpcy5zdHlsZXNoZWV0LmZpcnN0QXRydWxlc0FsbG93ZWQpIHtcbiAgICAgICAgICAgICAgICBsaXN0LnJlbW92ZShpdGVtKTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIGlmIHRoZXJlIGFyZSBzb21lIHJ1bGVzIHRoYXQgbm90IGFuIEBpbXBvcnQgb3IgQGNoYXJzZXQgYmVmb3JlIEBpbXBvcnRcbiAgICAgICAgICAgIC8vIHJlbW92ZSBpdFxuICAgICAgICAgICAgbGlzdC5wcmV2VW50aWwoaXRlbS5wcmV2LCBmdW5jdGlvbihydWxlKSB7XG4gICAgICAgICAgICAgICAgaWYgKHJ1bGUudHlwZSA9PT0gJ0F0cnVsZScpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHJ1bGUubmFtZSA9PT0gJ2ltcG9ydCcgfHwgcnVsZS5uYW1lID09PSAnY2hhcnNldCcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHRoaXMucm9vdC5maXJzdEF0cnVsZXNBbGxvd2VkID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgbGlzdC5yZW1vdmUoaXRlbSk7XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIH0sIHRoaXMpO1xuXG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICBkZWZhdWx0OiB7XG4gICAgICAgICAgICBjb25zdCBuYW1lID0gY3NzVHJlZS5rZXl3b3JkKG5vZGUubmFtZSkuYmFzZW5hbWU7XG5cbiAgICAgICAgICAgIGlmIChuYW1lID09PSAna2V5ZnJhbWVzJyB8fFxuICAgICAgICAgICAgICAgIG5hbWUgPT09ICdtZWRpYScgfHxcbiAgICAgICAgICAgICAgICBuYW1lID09PSAnc3VwcG9ydHMnKSB7XG5cbiAgICAgICAgICAgICAgICAvLyBkcm9wIGF0LXJ1bGUgd2l0aCBubyBwcmVsdWRlXG4gICAgICAgICAgICAgICAgaWYgKHV0aWxzLmhhc05vQ2hpbGRyZW4obm9kZS5wcmVsdWRlKSB8fCB1dGlscy5oYXNOb0NoaWxkcmVuKG5vZGUuYmxvY2spKSB7XG4gICAgICAgICAgICAgICAgICAgIGxpc3QucmVtb3ZlKGl0ZW0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBjbGVhbkF0cnVsZTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///89159\n")},93777:module=>{"use strict";eval("\n\nfunction cleanComment(data, item, list) {\n    list.remove(item);\n}\n\nmodule.exports = cleanComment;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOTM3NzcuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWI7QUFDQTtBQUNBOztBQUVBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYmxvY2tiaXRlLy4vbm9kZV9tb2R1bGVzL2Nzc28vY2pzL2NsZWFuL0NvbW1lbnQuY2pzP2FkMjkiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5mdW5jdGlvbiBjbGVhbkNvbW1lbnQoZGF0YSwgaXRlbSwgbGlzdCkge1xuICAgIGxpc3QucmVtb3ZlKGl0ZW0pO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGNsZWFuQ29tbWVudDtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///93777\n")},86650:(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval("\n\nconst cssTree = __webpack_require__(22694);\n\nfunction cleanDeclartion(node, item, list) {\n    if (node.value.children && node.value.children.isEmpty) {\n        list.remove(item);\n        return;\n    }\n\n    if (cssTree.property(node.property).custom) {\n        if (/\\S/.test(node.value.value)) {\n            node.value.value = node.value.value.trim();\n        }\n    }\n}\n\nmodule.exports = cleanDeclartion;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiODY2NTAuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsZ0JBQWdCLG1CQUFPLENBQUMsS0FBVTs7QUFFbEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ibG9ja2JpdGUvLi9ub2RlX21vZHVsZXMvY3Nzby9janMvY2xlYW4vRGVjbGFyYXRpb24uY2pzP2UyYTUiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBjc3NUcmVlID0gcmVxdWlyZSgnY3NzLXRyZWUnKTtcblxuZnVuY3Rpb24gY2xlYW5EZWNsYXJ0aW9uKG5vZGUsIGl0ZW0sIGxpc3QpIHtcbiAgICBpZiAobm9kZS52YWx1ZS5jaGlsZHJlbiAmJiBub2RlLnZhbHVlLmNoaWxkcmVuLmlzRW1wdHkpIHtcbiAgICAgICAgbGlzdC5yZW1vdmUoaXRlbSk7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoY3NzVHJlZS5wcm9wZXJ0eShub2RlLnByb3BlcnR5KS5jdXN0b20pIHtcbiAgICAgICAgaWYgKC9cXFMvLnRlc3Qobm9kZS52YWx1ZS52YWx1ZSkpIHtcbiAgICAgICAgICAgIG5vZGUudmFsdWUudmFsdWUgPSBub2RlLnZhbHVlLnZhbHVlLnRyaW0oKTtcbiAgICAgICAgfVxuICAgIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBjbGVhbkRlY2xhcnRpb247XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///86650\n")},86160:(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval("\n\nconst utils = __webpack_require__(48681);\n\nfunction cleanRaw(node, item, list) {\n    // raw in stylesheet or block children\n    if (utils.isNodeChildrenList(this.stylesheet, list) ||\n        utils.isNodeChildrenList(this.block, list)) {\n        list.remove(item);\n    }\n}\n\nmodule.exports = cleanRaw;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiODYxNjAuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsY0FBYyxtQkFBTyxDQUFDLEtBQWE7O0FBRW5DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYmxvY2tiaXRlLy4vbm9kZV9tb2R1bGVzL2Nzc28vY2pzL2NsZWFuL1Jhdy5janM/MGY4MiJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmNvbnN0IHV0aWxzID0gcmVxdWlyZSgnLi91dGlscy5janMnKTtcblxuZnVuY3Rpb24gY2xlYW5SYXcobm9kZSwgaXRlbSwgbGlzdCkge1xuICAgIC8vIHJhdyBpbiBzdHlsZXNoZWV0IG9yIGJsb2NrIGNoaWxkcmVuXG4gICAgaWYgKHV0aWxzLmlzTm9kZUNoaWxkcmVuTGlzdCh0aGlzLnN0eWxlc2hlZXQsIGxpc3QpIHx8XG4gICAgICAgIHV0aWxzLmlzTm9kZUNoaWxkcmVuTGlzdCh0aGlzLmJsb2NrLCBsaXN0KSkge1xuICAgICAgICBsaXN0LnJlbW92ZShpdGVtKTtcbiAgICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gY2xlYW5SYXc7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///86160\n")},6208:(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval("\n\nconst cssTree = __webpack_require__(22694);\nconst utils = __webpack_require__(48681);\n\nconst { hasOwnProperty } = Object.prototype;\nconst skipUsageFilteringAtrule = new Set(['keyframes']);\n\nfunction cleanUnused(selectorList, usageData) {\n    selectorList.children.forEach((selector, item, list) => {\n        let shouldRemove = false;\n\n        cssTree.walk(selector, function(node) {\n            // ignore nodes in nested selectors\n            if (this.selector === null || this.selector === selectorList) {\n                switch (node.type) {\n                    case 'SelectorList':\n                        // TODO: remove toLowerCase when pseudo selectors will be normalized\n                        // ignore selectors inside :not()\n                        if (this.function === null || this.function.name.toLowerCase() !== 'not') {\n                            if (cleanUnused(node, usageData)) {\n                                shouldRemove = true;\n                            }\n                        }\n                        break;\n\n                    case 'ClassSelector':\n                        if (usageData.whitelist !== null &&\n                            usageData.whitelist.classes !== null &&\n                            !hasOwnProperty.call(usageData.whitelist.classes, node.name)) {\n                            shouldRemove = true;\n                        }\n                        if (usageData.blacklist !== null &&\n                            usageData.blacklist.classes !== null &&\n                            hasOwnProperty.call(usageData.blacklist.classes, node.name)) {\n                            shouldRemove = true;\n                        }\n                        break;\n\n                    case 'IdSelector':\n                        if (usageData.whitelist !== null &&\n                            usageData.whitelist.ids !== null &&\n                            !hasOwnProperty.call(usageData.whitelist.ids, node.name)) {\n                            shouldRemove = true;\n                        }\n                        if (usageData.blacklist !== null &&\n                            usageData.blacklist.ids !== null &&\n                            hasOwnProperty.call(usageData.blacklist.ids, node.name)) {\n                            shouldRemove = true;\n                        }\n                        break;\n\n                    case 'TypeSelector':\n                        // TODO: remove toLowerCase when type selectors will be normalized\n                        // ignore universal selectors\n                        if (node.name.charAt(node.name.length - 1) !== '*') {\n                            if (usageData.whitelist !== null &&\n                                usageData.whitelist.tags !== null &&\n                                !hasOwnProperty.call(usageData.whitelist.tags, node.name.toLowerCase())) {\n                                shouldRemove = true;\n                            }\n                            if (usageData.blacklist !== null &&\n                                usageData.blacklist.tags !== null &&\n                                hasOwnProperty.call(usageData.blacklist.tags, node.name.toLowerCase())) {\n                                shouldRemove = true;\n                            }\n                        }\n                        break;\n                }\n            }\n        });\n\n        if (shouldRemove) {\n            list.remove(item);\n        }\n    });\n\n    return selectorList.children.isEmpty;\n}\n\nfunction cleanRule(node, item, list, options) {\n    if (utils.hasNoChildren(node.prelude) || utils.hasNoChildren(node.block)) {\n        list.remove(item);\n        return;\n    }\n\n    // avoid usage filtering for some at-rules\n    if (this.atrule && skipUsageFilteringAtrule.has(cssTree.keyword(this.atrule.name).basename)) {\n        return;\n    }\n\n    const { usage } = options;\n\n    if (usage && (usage.whitelist !== null || usage.blacklist !== null)) {\n        cleanUnused(node.prelude, usage);\n\n        if (utils.hasNoChildren(node.prelude)) {\n            list.remove(item);\n            return;\n        }\n    }\n}\n\nmodule.exports = cleanRule;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNjIwOC5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYixnQkFBZ0IsbUJBQU8sQ0FBQyxLQUFVO0FBQ2xDLGNBQWMsbUJBQU8sQ0FBQyxLQUFhOztBQUVuQyxRQUFRLGlCQUFpQjtBQUN6Qjs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTOztBQUVUO0FBQ0E7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLFlBQVksUUFBUTs7QUFFcEI7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ibG9ja2JpdGUvLi9ub2RlX21vZHVsZXMvY3Nzby9janMvY2xlYW4vUnVsZS5janM/MTg0MSJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmNvbnN0IGNzc1RyZWUgPSByZXF1aXJlKCdjc3MtdHJlZScpO1xuY29uc3QgdXRpbHMgPSByZXF1aXJlKCcuL3V0aWxzLmNqcycpO1xuXG5jb25zdCB7IGhhc093blByb3BlcnR5IH0gPSBPYmplY3QucHJvdG90eXBlO1xuY29uc3Qgc2tpcFVzYWdlRmlsdGVyaW5nQXRydWxlID0gbmV3IFNldChbJ2tleWZyYW1lcyddKTtcblxuZnVuY3Rpb24gY2xlYW5VbnVzZWQoc2VsZWN0b3JMaXN0LCB1c2FnZURhdGEpIHtcbiAgICBzZWxlY3Rvckxpc3QuY2hpbGRyZW4uZm9yRWFjaCgoc2VsZWN0b3IsIGl0ZW0sIGxpc3QpID0+IHtcbiAgICAgICAgbGV0IHNob3VsZFJlbW92ZSA9IGZhbHNlO1xuXG4gICAgICAgIGNzc1RyZWUud2FsayhzZWxlY3RvciwgZnVuY3Rpb24obm9kZSkge1xuICAgICAgICAgICAgLy8gaWdub3JlIG5vZGVzIGluIG5lc3RlZCBzZWxlY3RvcnNcbiAgICAgICAgICAgIGlmICh0aGlzLnNlbGVjdG9yID09PSBudWxsIHx8IHRoaXMuc2VsZWN0b3IgPT09IHNlbGVjdG9yTGlzdCkge1xuICAgICAgICAgICAgICAgIHN3aXRjaCAobm9kZS50eXBlKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ1NlbGVjdG9yTGlzdCc6XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBUT0RPOiByZW1vdmUgdG9Mb3dlckNhc2Ugd2hlbiBwc2V1ZG8gc2VsZWN0b3JzIHdpbGwgYmUgbm9ybWFsaXplZFxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gaWdub3JlIHNlbGVjdG9ycyBpbnNpZGUgOm5vdCgpXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5mdW5jdGlvbiA9PT0gbnVsbCB8fCB0aGlzLmZ1bmN0aW9uLm5hbWUudG9Mb3dlckNhc2UoKSAhPT0gJ25vdCcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoY2xlYW5VbnVzZWQobm9kZSwgdXNhZ2VEYXRhKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaG91bGRSZW1vdmUgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ0NsYXNzU2VsZWN0b3InOlxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHVzYWdlRGF0YS53aGl0ZWxpc3QgIT09IG51bGwgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB1c2FnZURhdGEud2hpdGVsaXN0LmNsYXNzZXMgIT09IG51bGwgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAhaGFzT3duUHJvcGVydHkuY2FsbCh1c2FnZURhdGEud2hpdGVsaXN0LmNsYXNzZXMsIG5vZGUubmFtZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaG91bGRSZW1vdmUgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHVzYWdlRGF0YS5ibGFja2xpc3QgIT09IG51bGwgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB1c2FnZURhdGEuYmxhY2tsaXN0LmNsYXNzZXMgIT09IG51bGwgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBoYXNPd25Qcm9wZXJ0eS5jYWxsKHVzYWdlRGF0YS5ibGFja2xpc3QuY2xhc3Nlcywgbm9kZS5uYW1lKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNob3VsZFJlbW92ZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgICAgICBjYXNlICdJZFNlbGVjdG9yJzpcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh1c2FnZURhdGEud2hpdGVsaXN0ICE9PSBudWxsICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdXNhZ2VEYXRhLndoaXRlbGlzdC5pZHMgIT09IG51bGwgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAhaGFzT3duUHJvcGVydHkuY2FsbCh1c2FnZURhdGEud2hpdGVsaXN0Lmlkcywgbm9kZS5uYW1lKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNob3VsZFJlbW92ZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodXNhZ2VEYXRhLmJsYWNrbGlzdCAhPT0gbnVsbCAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVzYWdlRGF0YS5ibGFja2xpc3QuaWRzICE9PSBudWxsICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaGFzT3duUHJvcGVydHkuY2FsbCh1c2FnZURhdGEuYmxhY2tsaXN0Lmlkcywgbm9kZS5uYW1lKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNob3VsZFJlbW92ZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgICAgICBjYXNlICdUeXBlU2VsZWN0b3InOlxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gVE9ETzogcmVtb3ZlIHRvTG93ZXJDYXNlIHdoZW4gdHlwZSBzZWxlY3RvcnMgd2lsbCBiZSBub3JtYWxpemVkXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBpZ25vcmUgdW5pdmVyc2FsIHNlbGVjdG9yc1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG5vZGUubmFtZS5jaGFyQXQobm9kZS5uYW1lLmxlbmd0aCAtIDEpICE9PSAnKicpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodXNhZ2VEYXRhLndoaXRlbGlzdCAhPT0gbnVsbCAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1c2FnZURhdGEud2hpdGVsaXN0LnRhZ3MgIT09IG51bGwgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIWhhc093blByb3BlcnR5LmNhbGwodXNhZ2VEYXRhLndoaXRlbGlzdC50YWdzLCBub2RlLm5hbWUudG9Mb3dlckNhc2UoKSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2hvdWxkUmVtb3ZlID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHVzYWdlRGF0YS5ibGFja2xpc3QgIT09IG51bGwgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdXNhZ2VEYXRhLmJsYWNrbGlzdC50YWdzICE9PSBudWxsICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhhc093blByb3BlcnR5LmNhbGwodXNhZ2VEYXRhLmJsYWNrbGlzdC50YWdzLCBub2RlLm5hbWUudG9Mb3dlckNhc2UoKSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2hvdWxkUmVtb3ZlID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGlmIChzaG91bGRSZW1vdmUpIHtcbiAgICAgICAgICAgIGxpc3QucmVtb3ZlKGl0ZW0pO1xuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICByZXR1cm4gc2VsZWN0b3JMaXN0LmNoaWxkcmVuLmlzRW1wdHk7XG59XG5cbmZ1bmN0aW9uIGNsZWFuUnVsZShub2RlLCBpdGVtLCBsaXN0LCBvcHRpb25zKSB7XG4gICAgaWYgKHV0aWxzLmhhc05vQ2hpbGRyZW4obm9kZS5wcmVsdWRlKSB8fCB1dGlscy5oYXNOb0NoaWxkcmVuKG5vZGUuYmxvY2spKSB7XG4gICAgICAgIGxpc3QucmVtb3ZlKGl0ZW0pO1xuICAgICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLy8gYXZvaWQgdXNhZ2UgZmlsdGVyaW5nIGZvciBzb21lIGF0LXJ1bGVzXG4gICAgaWYgKHRoaXMuYXRydWxlICYmIHNraXBVc2FnZUZpbHRlcmluZ0F0cnVsZS5oYXMoY3NzVHJlZS5rZXl3b3JkKHRoaXMuYXRydWxlLm5hbWUpLmJhc2VuYW1lKSkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY29uc3QgeyB1c2FnZSB9ID0gb3B0aW9ucztcblxuICAgIGlmICh1c2FnZSAmJiAodXNhZ2Uud2hpdGVsaXN0ICE9PSBudWxsIHx8IHVzYWdlLmJsYWNrbGlzdCAhPT0gbnVsbCkpIHtcbiAgICAgICAgY2xlYW5VbnVzZWQobm9kZS5wcmVsdWRlLCB1c2FnZSk7XG5cbiAgICAgICAgaWYgKHV0aWxzLmhhc05vQ2hpbGRyZW4obm9kZS5wcmVsdWRlKSkge1xuICAgICAgICAgICAgbGlzdC5yZW1vdmUoaXRlbSk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gY2xlYW5SdWxlO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///6208\n")},79561:module=>{"use strict";eval("\n\n// remove useless universal selector\nfunction cleanTypeSelector(node, item, list) {\n    const name = item.data.name;\n\n    // check it's a non-namespaced universal selector\n    if (name !== '*') {\n        return;\n    }\n\n    // remove when universal selector before other selectors\n    const nextType = item.next && item.next.data.type;\n    if (nextType === 'IdSelector' ||\n        nextType === 'ClassSelector' ||\n        nextType === 'AttributeSelector' ||\n        nextType === 'PseudoClassSelector' ||\n        nextType === 'PseudoElementSelector') {\n        list.remove(item);\n    }\n}\n\nmodule.exports = cleanTypeSelector;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNzk1NjEuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWI7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYmxvY2tiaXRlLy4vbm9kZV9tb2R1bGVzL2Nzc28vY2pzL2NsZWFuL1R5cGVTZWxlY3Rvci5janM/ZGU0MyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbi8vIHJlbW92ZSB1c2VsZXNzIHVuaXZlcnNhbCBzZWxlY3RvclxuZnVuY3Rpb24gY2xlYW5UeXBlU2VsZWN0b3Iobm9kZSwgaXRlbSwgbGlzdCkge1xuICAgIGNvbnN0IG5hbWUgPSBpdGVtLmRhdGEubmFtZTtcblxuICAgIC8vIGNoZWNrIGl0J3MgYSBub24tbmFtZXNwYWNlZCB1bml2ZXJzYWwgc2VsZWN0b3JcbiAgICBpZiAobmFtZSAhPT0gJyonKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvLyByZW1vdmUgd2hlbiB1bml2ZXJzYWwgc2VsZWN0b3IgYmVmb3JlIG90aGVyIHNlbGVjdG9yc1xuICAgIGNvbnN0IG5leHRUeXBlID0gaXRlbS5uZXh0ICYmIGl0ZW0ubmV4dC5kYXRhLnR5cGU7XG4gICAgaWYgKG5leHRUeXBlID09PSAnSWRTZWxlY3RvcicgfHxcbiAgICAgICAgbmV4dFR5cGUgPT09ICdDbGFzc1NlbGVjdG9yJyB8fFxuICAgICAgICBuZXh0VHlwZSA9PT0gJ0F0dHJpYnV0ZVNlbGVjdG9yJyB8fFxuICAgICAgICBuZXh0VHlwZSA9PT0gJ1BzZXVkb0NsYXNzU2VsZWN0b3InIHx8XG4gICAgICAgIG5leHRUeXBlID09PSAnUHNldWRvRWxlbWVudFNlbGVjdG9yJykge1xuICAgICAgICBsaXN0LnJlbW92ZShpdGVtKTtcbiAgICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gY2xlYW5UeXBlU2VsZWN0b3I7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///79561\n")},33733:module=>{"use strict";eval("\n\nfunction cleanWhitespace(node, item, list) {\n    list.remove(item);\n}\n\nmodule.exports = cleanWhitespace;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzM3MzMuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWI7QUFDQTtBQUNBOztBQUVBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYmxvY2tiaXRlLy4vbm9kZV9tb2R1bGVzL2Nzc28vY2pzL2NsZWFuL1doaXRlU3BhY2UuY2pzP2E2YzAiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5mdW5jdGlvbiBjbGVhbldoaXRlc3BhY2Uobm9kZSwgaXRlbSwgbGlzdCkge1xuICAgIGxpc3QucmVtb3ZlKGl0ZW0pO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGNsZWFuV2hpdGVzcGFjZTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///33733\n")},38390:(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval("\n\nconst cssTree = __webpack_require__(22694);\nconst Atrule = __webpack_require__(89159);\nconst Comment = __webpack_require__(93777);\nconst Declaration = __webpack_require__(86650);\nconst Raw = __webpack_require__(86160);\nconst Rule = __webpack_require__(6208);\nconst TypeSelector = __webpack_require__(79561);\nconst WhiteSpace = __webpack_require__(33733);\n\nconst handlers = {\n    Atrule,\n    Comment,\n    Declaration,\n    Raw,\n    Rule,\n    TypeSelector,\n    WhiteSpace\n};\n\nfunction clean(ast, options) {\n    cssTree.walk(ast, {\n        leave(node, item, list) {\n            if (handlers.hasOwnProperty(node.type)) {\n                handlers[node.type].call(this, node, item, list, options);\n            }\n        }\n    });\n}\n\nmodule.exports = clean;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzgzOTAuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsZ0JBQWdCLG1CQUFPLENBQUMsS0FBVTtBQUNsQyxlQUFlLG1CQUFPLENBQUMsS0FBYztBQUNyQyxnQkFBZ0IsbUJBQU8sQ0FBQyxLQUFlO0FBQ3ZDLG9CQUFvQixtQkFBTyxDQUFDLEtBQW1CO0FBQy9DLFlBQVksbUJBQU8sQ0FBQyxLQUFXO0FBQy9CLGFBQWEsbUJBQU8sQ0FBQyxJQUFZO0FBQ2pDLHFCQUFxQixtQkFBTyxDQUFDLEtBQW9CO0FBQ2pELG1CQUFtQixtQkFBTyxDQUFDLEtBQWtCOztBQUU3QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7O0FBRUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ibG9ja2JpdGUvLi9ub2RlX21vZHVsZXMvY3Nzby9janMvY2xlYW4vaW5kZXguY2pzPzE3MmEiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBjc3NUcmVlID0gcmVxdWlyZSgnY3NzLXRyZWUnKTtcbmNvbnN0IEF0cnVsZSA9IHJlcXVpcmUoJy4vQXRydWxlLmNqcycpO1xuY29uc3QgQ29tbWVudCA9IHJlcXVpcmUoJy4vQ29tbWVudC5janMnKTtcbmNvbnN0IERlY2xhcmF0aW9uID0gcmVxdWlyZSgnLi9EZWNsYXJhdGlvbi5janMnKTtcbmNvbnN0IFJhdyA9IHJlcXVpcmUoJy4vUmF3LmNqcycpO1xuY29uc3QgUnVsZSA9IHJlcXVpcmUoJy4vUnVsZS5janMnKTtcbmNvbnN0IFR5cGVTZWxlY3RvciA9IHJlcXVpcmUoJy4vVHlwZVNlbGVjdG9yLmNqcycpO1xuY29uc3QgV2hpdGVTcGFjZSA9IHJlcXVpcmUoJy4vV2hpdGVTcGFjZS5janMnKTtcblxuY29uc3QgaGFuZGxlcnMgPSB7XG4gICAgQXRydWxlLFxuICAgIENvbW1lbnQsXG4gICAgRGVjbGFyYXRpb24sXG4gICAgUmF3LFxuICAgIFJ1bGUsXG4gICAgVHlwZVNlbGVjdG9yLFxuICAgIFdoaXRlU3BhY2Vcbn07XG5cbmZ1bmN0aW9uIGNsZWFuKGFzdCwgb3B0aW9ucykge1xuICAgIGNzc1RyZWUud2Fsayhhc3QsIHtcbiAgICAgICAgbGVhdmUobm9kZSwgaXRlbSwgbGlzdCkge1xuICAgICAgICAgICAgaWYgKGhhbmRsZXJzLmhhc093blByb3BlcnR5KG5vZGUudHlwZSkpIHtcbiAgICAgICAgICAgICAgICBoYW5kbGVyc1tub2RlLnR5cGVdLmNhbGwodGhpcywgbm9kZSwgaXRlbSwgbGlzdCwgb3B0aW9ucyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9KTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBjbGVhbjtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///38390\n")},48681:(__unused_webpack_module,exports)=>{"use strict";eval("\n\nfunction hasNoChildren(node) {\n    return !node || !node.children || node.children.isEmpty;\n}\n\nfunction isNodeChildrenList(node, list) {\n    return node !== null && node.children === list;\n}\n\nexports.hasNoChildren = hasNoChildren;\nexports.isNodeChildrenList = isNodeChildrenList;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDg2ODEuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWI7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQSxxQkFBcUI7QUFDckIsMEJBQTBCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYmxvY2tiaXRlLy4vbm9kZV9tb2R1bGVzL2Nzc28vY2pzL2NsZWFuL3V0aWxzLmNqcz9lMWY3Il0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuZnVuY3Rpb24gaGFzTm9DaGlsZHJlbihub2RlKSB7XG4gICAgcmV0dXJuICFub2RlIHx8ICFub2RlLmNoaWxkcmVuIHx8IG5vZGUuY2hpbGRyZW4uaXNFbXB0eTtcbn1cblxuZnVuY3Rpb24gaXNOb2RlQ2hpbGRyZW5MaXN0KG5vZGUsIGxpc3QpIHtcbiAgICByZXR1cm4gbm9kZSAhPT0gbnVsbCAmJiBub2RlLmNoaWxkcmVuID09PSBsaXN0O1xufVxuXG5leHBvcnRzLmhhc05vQ2hpbGRyZW4gPSBoYXNOb0NoaWxkcmVuO1xuZXhwb3J0cy5pc05vZGVDaGlsZHJlbkxpc3QgPSBpc05vZGVDaGlsZHJlbkxpc3Q7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///48681\n")},64040:(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval("\n\nconst cssTree = __webpack_require__(22694);\nconst usage = __webpack_require__(73969);\nconst index = __webpack_require__(38390);\nconst index$1 = __webpack_require__(48181);\nconst index$2 = __webpack_require__(30299);\n\nfunction readChunk(input, specialComments) {\n    const children = new cssTree.List();\n    let nonSpaceTokenInBuffer = false;\n    let protectedComment;\n\n    input.nextUntil(input.head, (node, item, list) => {\n        if (node.type === 'Comment') {\n            if (!specialComments || node.value.charAt(0) !== '!') {\n                list.remove(item);\n                return;\n            }\n\n            if (nonSpaceTokenInBuffer || protectedComment) {\n                return true;\n            }\n\n            list.remove(item);\n            protectedComment = node;\n\n            return;\n        }\n\n        if (node.type !== 'WhiteSpace') {\n            nonSpaceTokenInBuffer = true;\n        }\n\n        children.insert(list.remove(item));\n    });\n\n    return {\n        comment: protectedComment,\n        stylesheet: {\n            type: 'StyleSheet',\n            loc: null,\n            children\n        }\n    };\n}\n\nfunction compressChunk(ast, firstAtrulesAllowed, num, options) {\n    options.logger(`Compress block #${num}`, null, true);\n\n    let seed = 1;\n\n    if (ast.type === 'StyleSheet') {\n        ast.firstAtrulesAllowed = firstAtrulesAllowed;\n        ast.id = seed++;\n    }\n\n    cssTree.walk(ast, {\n        visit: 'Atrule',\n        enter(node) {\n            if (node.block !== null) {\n                node.block.id = seed++;\n            }\n        }\n    });\n    options.logger('init', ast);\n\n    // remove redundant\n    index(ast, options);\n    options.logger('clean', ast);\n\n    // replace nodes for shortened forms\n    index$1(ast);\n    options.logger('replace', ast);\n\n    // structure optimisations\n    if (options.restructuring) {\n        index$2(ast, options);\n    }\n\n    return ast;\n}\n\nfunction getCommentsOption(options) {\n    let comments = 'comments' in options ? options.comments : 'exclamation';\n\n    if (typeof comments === 'boolean') {\n        comments = comments ? 'exclamation' : false;\n    } else if (comments !== 'exclamation' && comments !== 'first-exclamation') {\n        comments = false;\n    }\n\n    return comments;\n}\n\nfunction getRestructureOption(options) {\n    if ('restructure' in options) {\n        return options.restructure;\n    }\n\n    return 'restructuring' in options ? options.restructuring : true;\n}\n\nfunction wrapBlock(block) {\n    return new cssTree.List().appendData({\n        type: 'Rule',\n        loc: null,\n        prelude: {\n            type: 'SelectorList',\n            loc: null,\n            children: new cssTree.List().appendData({\n                type: 'Selector',\n                loc: null,\n                children: new cssTree.List().appendData({\n                    type: 'TypeSelector',\n                    loc: null,\n                    name: 'x'\n                })\n            })\n        },\n        block\n    });\n}\n\nfunction compress(ast, options) {\n    ast = ast || { type: 'StyleSheet', loc: null, children: new cssTree.List() };\n    options = options || {};\n\n    const compressOptions = {\n        logger: typeof options.logger === 'function' ? options.logger : function() {},\n        restructuring: getRestructureOption(options),\n        forceMediaMerge: Boolean(options.forceMediaMerge),\n        usage: options.usage ? usage.buildIndex(options.usage) : false\n    };\n    const output = new cssTree.List();\n    let specialComments = getCommentsOption(options);\n    let firstAtrulesAllowed = true;\n    let input;\n    let chunk;\n    let chunkNum = 1;\n    let chunkChildren;\n\n    if (options.clone) {\n        ast = cssTree.clone(ast);\n    }\n\n    if (ast.type === 'StyleSheet') {\n        input = ast.children;\n        ast.children = output;\n    } else {\n        input = wrapBlock(ast);\n    }\n\n    do {\n        chunk = readChunk(input, Boolean(specialComments));\n        compressChunk(chunk.stylesheet, firstAtrulesAllowed, chunkNum++, compressOptions);\n        chunkChildren = chunk.stylesheet.children;\n\n        if (chunk.comment) {\n            // add \\n before comment if there is another content in output\n            if (!output.isEmpty) {\n                output.insert(cssTree.List.createItem({\n                    type: 'Raw',\n                    value: '\\n'\n                }));\n            }\n\n            output.insert(cssTree.List.createItem(chunk.comment));\n\n            // add \\n after comment if chunk is not empty\n            if (!chunkChildren.isEmpty) {\n                output.insert(cssTree.List.createItem({\n                    type: 'Raw',\n                    value: '\\n'\n                }));\n            }\n        }\n\n        if (firstAtrulesAllowed && !chunkChildren.isEmpty) {\n            const lastRule = chunkChildren.last;\n\n            if (lastRule.type !== 'Atrule' ||\n               (lastRule.name !== 'import' && lastRule.name !== 'charset')) {\n                firstAtrulesAllowed = false;\n            }\n        }\n\n        if (specialComments !== 'exclamation') {\n            specialComments = false;\n        }\n\n        output.appendList(chunkChildren);\n    } while (!input.isEmpty);\n\n    return {\n        ast\n    };\n}\n\nmodule.exports = compress;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///64040\n")},55360:(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";eval("\n\nconst version = __webpack_require__(45732);\nconst syntax = __webpack_require__(50053);\nconst utils = __webpack_require__(23739);\n\nconst { parse, generate, compress } = syntax;\n\nfunction debugOutput(name, options, startTime, data) {\n    if (options.debug) {\n        console.error(`## ${name} done in %d ms\\n`, Date.now() - startTime);\n    }\n\n    return data;\n}\n\nfunction createDefaultLogger(level) {\n    let lastDebug;\n\n    return function logger(title, ast) {\n        let line = title;\n\n        if (ast) {\n            line = `[${((Date.now() - lastDebug) / 1000).toFixed(3)}s] ${line}`;\n        }\n\n        if (level > 1 && ast) {\n            let css = generate(ast);\n\n            // when level 2, limit css to 256 symbols\n            if (level === 2 && css.length > 256) {\n                css = css.substr(0, 256) + '...';\n            }\n\n            line += `\\n  ${css}\\n`;\n        }\n\n        console.error(line);\n        lastDebug = Date.now();\n    };\n}\n\nfunction buildCompressOptions(options) {\n    options = { ...options };\n\n    if (typeof options.logger !== 'function' && options.debug) {\n        options.logger = createDefaultLogger(options.debug);\n    }\n\n    return options;\n}\n\nfunction runHandler(ast, options, handlers) {\n    if (!Array.isArray(handlers)) {\n        handlers = [handlers];\n    }\n\n    handlers.forEach(fn => fn(ast, options));\n}\n\nfunction minify(context, source, options) {\n    options = options || {};\n\n    const filename = options.filename || '<unknown>';\n    let result;\n\n    // parse\n    const ast = debugOutput('parsing', options, Date.now(),\n        parse(source, {\n            context,\n            filename,\n            positions: Boolean(options.sourceMap)\n        })\n    );\n\n    // before compress handlers\n    if (options.beforeCompress) {\n        debugOutput('beforeCompress', options, Date.now(),\n            runHandler(ast, options, options.beforeCompress)\n        );\n    }\n\n    // compress\n    const compressResult = debugOutput('compress', options, Date.now(),\n        compress(ast, buildCompressOptions(options))\n    );\n\n    // after compress handlers\n    if (options.afterCompress) {\n        debugOutput('afterCompress', options, Date.now(),\n            runHandler(compressResult, options, options.afterCompress)\n        );\n    }\n\n    // generate\n    if (options.sourceMap) {\n        result = debugOutput('generate(sourceMap: true)', options, Date.now(), (() => {\n            const tmp = generate(compressResult.ast, { sourceMap: true });\n\n            tmp.map._file = filename; // since other tools can relay on file in source map transform chain\n            tmp.map.setSourceContent(filename, source);\n\n            return tmp;\n        })());\n    } else {\n        result = debugOutput('generate', options, Date.now(), {\n            css: generate(compressResult.ast),\n            map: null\n        });\n    }\n\n    return result;\n}\n\nfunction minifyStylesheet(source, options) {\n    return minify('stylesheet', source, options);\n}\n\nfunction minifyBlock(source, options) {\n    return minify('declarationList', source, options);\n}\n\nexports.version = version.version;\nexports.syntax = syntax;\nexports.utils = utils;\nexports.minify = minifyStylesheet;\nexports.minifyBlock = minifyBlock;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNTUzNjAuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsZ0JBQWdCLG1CQUFPLENBQUMsS0FBZTtBQUN2QyxlQUFlLG1CQUFPLENBQUMsS0FBYztBQUNyQyxjQUFjLG1CQUFPLENBQUMsS0FBYTs7QUFFbkMsUUFBUSw0QkFBNEI7O0FBRXBDO0FBQ0E7QUFDQSw0QkFBNEIsTUFBTTtBQUNsQzs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBLHVCQUF1Qiw2Q0FBNkMsS0FBSyxLQUFLO0FBQzlFOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsMkJBQTJCLElBQUk7QUFDL0I7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxnQkFBZ0I7O0FBRWhCO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLHVEQUF1RCxpQkFBaUI7O0FBRXhFLHNDQUFzQztBQUN0Qzs7QUFFQTtBQUNBLFNBQVM7QUFDVCxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQSxlQUFlO0FBQ2YsY0FBYztBQUNkLGFBQWE7QUFDYixjQUFjO0FBQ2QsbUJBQW1CIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYmxvY2tiaXRlLy4vbm9kZV9tb2R1bGVzL2Nzc28vY2pzL2luZGV4LmNqcz8xMTM2Il0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuY29uc3QgdmVyc2lvbiA9IHJlcXVpcmUoJy4vdmVyc2lvbi5janMnKTtcbmNvbnN0IHN5bnRheCA9IHJlcXVpcmUoJy4vc3ludGF4LmNqcycpO1xuY29uc3QgdXRpbHMgPSByZXF1aXJlKCcuL3V0aWxzLmNqcycpO1xuXG5jb25zdCB7IHBhcnNlLCBnZW5lcmF0ZSwgY29tcHJlc3MgfSA9IHN5bnRheDtcblxuZnVuY3Rpb24gZGVidWdPdXRwdXQobmFtZSwgb3B0aW9ucywgc3RhcnRUaW1lLCBkYXRhKSB7XG4gICAgaWYgKG9wdGlvbnMuZGVidWcpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihgIyMgJHtuYW1lfSBkb25lIGluICVkIG1zXFxuYCwgRGF0ZS5ub3coKSAtIHN0YXJ0VGltZSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGRhdGE7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZURlZmF1bHRMb2dnZXIobGV2ZWwpIHtcbiAgICBsZXQgbGFzdERlYnVnO1xuXG4gICAgcmV0dXJuIGZ1bmN0aW9uIGxvZ2dlcih0aXRsZSwgYXN0KSB7XG4gICAgICAgIGxldCBsaW5lID0gdGl0bGU7XG5cbiAgICAgICAgaWYgKGFzdCkge1xuICAgICAgICAgICAgbGluZSA9IGBbJHsoKERhdGUubm93KCkgLSBsYXN0RGVidWcpIC8gMTAwMCkudG9GaXhlZCgzKX1zXSAke2xpbmV9YDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChsZXZlbCA+IDEgJiYgYXN0KSB7XG4gICAgICAgICAgICBsZXQgY3NzID0gZ2VuZXJhdGUoYXN0KTtcblxuICAgICAgICAgICAgLy8gd2hlbiBsZXZlbCAyLCBsaW1pdCBjc3MgdG8gMjU2IHN5bWJvbHNcbiAgICAgICAgICAgIGlmIChsZXZlbCA9PT0gMiAmJiBjc3MubGVuZ3RoID4gMjU2KSB7XG4gICAgICAgICAgICAgICAgY3NzID0gY3NzLnN1YnN0cigwLCAyNTYpICsgJy4uLic7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGxpbmUgKz0gYFxcbiAgJHtjc3N9XFxuYDtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnNvbGUuZXJyb3IobGluZSk7XG4gICAgICAgIGxhc3REZWJ1ZyA9IERhdGUubm93KCk7XG4gICAgfTtcbn1cblxuZnVuY3Rpb24gYnVpbGRDb21wcmVzc09wdGlvbnMob3B0aW9ucykge1xuICAgIG9wdGlvbnMgPSB7IC4uLm9wdGlvbnMgfTtcblxuICAgIGlmICh0eXBlb2Ygb3B0aW9ucy5sb2dnZXIgIT09ICdmdW5jdGlvbicgJiYgb3B0aW9ucy5kZWJ1Zykge1xuICAgICAgICBvcHRpb25zLmxvZ2dlciA9IGNyZWF0ZURlZmF1bHRMb2dnZXIob3B0aW9ucy5kZWJ1Zyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIG9wdGlvbnM7XG59XG5cbmZ1bmN0aW9uIHJ1bkhhbmRsZXIoYXN0LCBvcHRpb25zLCBoYW5kbGVycykge1xuICAgIGlmICghQXJyYXkuaXNBcnJheShoYW5kbGVycykpIHtcbiAgICAgICAgaGFuZGxlcnMgPSBbaGFuZGxlcnNdO1xuICAgIH1cblxuICAgIGhhbmRsZXJzLmZvckVhY2goZm4gPT4gZm4oYXN0LCBvcHRpb25zKSk7XG59XG5cbmZ1bmN0aW9uIG1pbmlmeShjb250ZXh0LCBzb3VyY2UsIG9wdGlvbnMpIHtcbiAgICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcblxuICAgIGNvbnN0IGZpbGVuYW1lID0gb3B0aW9ucy5maWxlbmFtZSB8fCAnPHVua25vd24+JztcbiAgICBsZXQgcmVzdWx0O1xuXG4gICAgLy8gcGFyc2VcbiAgICBjb25zdCBhc3QgPSBkZWJ1Z091dHB1dCgncGFyc2luZycsIG9wdGlvbnMsIERhdGUubm93KCksXG4gICAgICAgIHBhcnNlKHNvdXJjZSwge1xuICAgICAgICAgICAgY29udGV4dCxcbiAgICAgICAgICAgIGZpbGVuYW1lLFxuICAgICAgICAgICAgcG9zaXRpb25zOiBCb29sZWFuKG9wdGlvbnMuc291cmNlTWFwKVxuICAgICAgICB9KVxuICAgICk7XG5cbiAgICAvLyBiZWZvcmUgY29tcHJlc3MgaGFuZGxlcnNcbiAgICBpZiAob3B0aW9ucy5iZWZvcmVDb21wcmVzcykge1xuICAgICAgICBkZWJ1Z091dHB1dCgnYmVmb3JlQ29tcHJlc3MnLCBvcHRpb25zLCBEYXRlLm5vdygpLFxuICAgICAgICAgICAgcnVuSGFuZGxlcihhc3QsIG9wdGlvbnMsIG9wdGlvbnMuYmVmb3JlQ29tcHJlc3MpXG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgLy8gY29tcHJlc3NcbiAgICBjb25zdCBjb21wcmVzc1Jlc3VsdCA9IGRlYnVnT3V0cHV0KCdjb21wcmVzcycsIG9wdGlvbnMsIERhdGUubm93KCksXG4gICAgICAgIGNvbXByZXNzKGFzdCwgYnVpbGRDb21wcmVzc09wdGlvbnMob3B0aW9ucykpXG4gICAgKTtcblxuICAgIC8vIGFmdGVyIGNvbXByZXNzIGhhbmRsZXJzXG4gICAgaWYgKG9wdGlvbnMuYWZ0ZXJDb21wcmVzcykge1xuICAgICAgICBkZWJ1Z091dHB1dCgnYWZ0ZXJDb21wcmVzcycsIG9wdGlvbnMsIERhdGUubm93KCksXG4gICAgICAgICAgICBydW5IYW5kbGVyKGNvbXByZXNzUmVzdWx0LCBvcHRpb25zLCBvcHRpb25zLmFmdGVyQ29tcHJlc3MpXG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgLy8gZ2VuZXJhdGVcbiAgICBpZiAob3B0aW9ucy5zb3VyY2VNYXApIHtcbiAgICAgICAgcmVzdWx0ID0gZGVidWdPdXRwdXQoJ2dlbmVyYXRlKHNvdXJjZU1hcDogdHJ1ZSknLCBvcHRpb25zLCBEYXRlLm5vdygpLCAoKCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgdG1wID0gZ2VuZXJhdGUoY29tcHJlc3NSZXN1bHQuYXN0LCB7IHNvdXJjZU1hcDogdHJ1ZSB9KTtcblxuICAgICAgICAgICAgdG1wLm1hcC5fZmlsZSA9IGZpbGVuYW1lOyAvLyBzaW5jZSBvdGhlciB0b29scyBjYW4gcmVsYXkgb24gZmlsZSBpbiBzb3VyY2UgbWFwIHRyYW5zZm9ybSBjaGFpblxuICAgICAgICAgICAgdG1wLm1hcC5zZXRTb3VyY2VDb250ZW50KGZpbGVuYW1lLCBzb3VyY2UpO1xuXG4gICAgICAgICAgICByZXR1cm4gdG1wO1xuICAgICAgICB9KSgpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICByZXN1bHQgPSBkZWJ1Z091dHB1dCgnZ2VuZXJhdGUnLCBvcHRpb25zLCBEYXRlLm5vdygpLCB7XG4gICAgICAgICAgICBjc3M6IGdlbmVyYXRlKGNvbXByZXNzUmVzdWx0LmFzdCksXG4gICAgICAgICAgICBtYXA6IG51bGxcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZnVuY3Rpb24gbWluaWZ5U3R5bGVzaGVldChzb3VyY2UsIG9wdGlvbnMpIHtcbiAgICByZXR1cm4gbWluaWZ5KCdzdHlsZXNoZWV0Jywgc291cmNlLCBvcHRpb25zKTtcbn1cblxuZnVuY3Rpb24gbWluaWZ5QmxvY2soc291cmNlLCBvcHRpb25zKSB7XG4gICAgcmV0dXJuIG1pbmlmeSgnZGVjbGFyYXRpb25MaXN0Jywgc291cmNlLCBvcHRpb25zKTtcbn1cblxuZXhwb3J0cy52ZXJzaW9uID0gdmVyc2lvbi52ZXJzaW9uO1xuZXhwb3J0cy5zeW50YXggPSBzeW50YXg7XG5leHBvcnRzLnV0aWxzID0gdXRpbHM7XG5leHBvcnRzLm1pbmlmeSA9IG1pbmlmeVN0eWxlc2hlZXQ7XG5leHBvcnRzLm1pbmlmeUJsb2NrID0gbWluaWZ5QmxvY2s7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///55360\n")},64678:(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval("\n\nconst cssTree = __webpack_require__(22694);\nconst keyframes = __webpack_require__(16716);\n\nfunction Atrule(node) {\n    // compress @keyframe selectors\n    if (cssTree.keyword(node.name).basename === 'keyframes') {\n        keyframes(node);\n    }\n}\n\nmodule.exports = Atrule;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNjQ2NzguanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsZ0JBQWdCLG1CQUFPLENBQUMsS0FBVTtBQUNsQyxrQkFBa0IsbUJBQU8sQ0FBQyxLQUF3Qjs7QUFFbEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYmxvY2tiaXRlLy4vbm9kZV9tb2R1bGVzL2Nzc28vY2pzL3JlcGxhY2UvQXRydWxlLmNqcz84ZDQ5Il0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuY29uc3QgY3NzVHJlZSA9IHJlcXVpcmUoJ2Nzcy10cmVlJyk7XG5jb25zdCBrZXlmcmFtZXMgPSByZXF1aXJlKCcuL2F0cnVsZS9rZXlmcmFtZXMuY2pzJyk7XG5cbmZ1bmN0aW9uIEF0cnVsZShub2RlKSB7XG4gICAgLy8gY29tcHJlc3MgQGtleWZyYW1lIHNlbGVjdG9yc1xuICAgIGlmIChjc3NUcmVlLmtleXdvcmQobm9kZS5uYW1lKS5iYXNlbmFtZSA9PT0gJ2tleWZyYW1lcycpIHtcbiAgICAgICAga2V5ZnJhbWVzKG5vZGUpO1xuICAgIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBBdHJ1bGU7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///64678\n")},19182:module=>{"use strict";eval("\n\n// Can unquote attribute detection\n// Adopted implementation of Mathias Bynens\n// https://github.com/mathiasbynens/mothereff.in/blob/master/unquoted-attributes/eff.js\nconst blockUnquoteRx = /^(-?\\d|--)|[\\u0000-\\u002c\\u002e\\u002f\\u003A-\\u0040\\u005B-\\u005E\\u0060\\u007B-\\u009f]/;\n\nfunction canUnquote(value) {\n    if (value === '' || value === '-') {\n        return false;\n    }\n\n    return !blockUnquoteRx.test(value);\n}\n\nfunction AttributeSelector(node) {\n    const attrValue = node.value;\n\n    if (!attrValue || attrValue.type !== 'String') {\n        return;\n    }\n\n    if (canUnquote(attrValue.value)) {\n        node.value = {\n            type: 'Identifier',\n            loc: attrValue.loc,\n            name: attrValue.value\n        };\n    }\n}\n\nmodule.exports = AttributeSelector;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTkxODIuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWI7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYmxvY2tiaXRlLy4vbm9kZV9tb2R1bGVzL2Nzc28vY2pzL3JlcGxhY2UvQXR0cmlidXRlU2VsZWN0b3IuY2pzPzNiM2IiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG4vLyBDYW4gdW5xdW90ZSBhdHRyaWJ1dGUgZGV0ZWN0aW9uXG4vLyBBZG9wdGVkIGltcGxlbWVudGF0aW9uIG9mIE1hdGhpYXMgQnluZW5zXG4vLyBodHRwczovL2dpdGh1Yi5jb20vbWF0aGlhc2J5bmVucy9tb3RoZXJlZmYuaW4vYmxvYi9tYXN0ZXIvdW5xdW90ZWQtYXR0cmlidXRlcy9lZmYuanNcbmNvbnN0IGJsb2NrVW5xdW90ZVJ4ID0gL14oLT9cXGR8LS0pfFtcXHUwMDAwLVxcdTAwMmNcXHUwMDJlXFx1MDAyZlxcdTAwM0EtXFx1MDA0MFxcdTAwNUItXFx1MDA1RVxcdTAwNjBcXHUwMDdCLVxcdTAwOWZdLztcblxuZnVuY3Rpb24gY2FuVW5xdW90ZSh2YWx1ZSkge1xuICAgIGlmICh2YWx1ZSA9PT0gJycgfHwgdmFsdWUgPT09ICctJykge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgcmV0dXJuICFibG9ja1VucXVvdGVSeC50ZXN0KHZhbHVlKTtcbn1cblxuZnVuY3Rpb24gQXR0cmlidXRlU2VsZWN0b3Iobm9kZSkge1xuICAgIGNvbnN0IGF0dHJWYWx1ZSA9IG5vZGUudmFsdWU7XG5cbiAgICBpZiAoIWF0dHJWYWx1ZSB8fCBhdHRyVmFsdWUudHlwZSAhPT0gJ1N0cmluZycpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmIChjYW5VbnF1b3RlKGF0dHJWYWx1ZS52YWx1ZSkpIHtcbiAgICAgICAgbm9kZS52YWx1ZSA9IHtcbiAgICAgICAgICAgIHR5cGU6ICdJZGVudGlmaWVyJyxcbiAgICAgICAgICAgIGxvYzogYXR0clZhbHVlLmxvYyxcbiAgICAgICAgICAgIG5hbWU6IGF0dHJWYWx1ZS52YWx1ZVxuICAgICAgICB9O1xuICAgIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBBdHRyaWJ1dGVTZWxlY3RvcjtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///19182\n")},23733:(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval("\n\nconst _Number = __webpack_require__(276);\n\nconst MATH_FUNCTIONS = new Set([\n    'calc',\n    'min',\n    'max',\n    'clamp'\n]);\nconst LENGTH_UNIT = new Set([\n    // absolute length units\n    'px',\n    'mm',\n    'cm',\n    'in',\n    'pt',\n    'pc',\n\n    // relative length units\n    'em',\n    'ex',\n    'ch',\n    'rem',\n\n    // viewport-percentage lengths\n    'vh',\n    'vw',\n    'vmin',\n    'vmax',\n    'vm'\n]);\n\nfunction compressDimension(node, item) {\n    const value = _Number.packNumber(node.value);\n\n    node.value = value;\n\n    if (value === '0' && this.declaration !== null && this.atrulePrelude === null) {\n        const unit = node.unit.toLowerCase();\n\n        // only length values can be compressed\n        if (!LENGTH_UNIT.has(unit)) {\n            return;\n        }\n\n        // issue #362: shouldn't remove unit in -ms-flex since it breaks flex in IE10/11\n        // issue #200: shouldn't remove unit in flex since it breaks flex in IE10/11\n        if (this.declaration.property === '-ms-flex' ||\n            this.declaration.property === 'flex') {\n            return;\n        }\n\n        // issue #222: don't remove units inside calc\n        if (this.function && MATH_FUNCTIONS.has(this.function.name)) {\n            return;\n        }\n\n        item.data = {\n            type: 'Number',\n            loc: node.loc,\n            value\n        };\n    }\n}\n\nmodule.exports = compressDimension;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjM3MzMuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsZ0JBQWdCLG1CQUFPLENBQUMsR0FBYzs7QUFFdEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ibG9ja2JpdGUvLi9ub2RlX21vZHVsZXMvY3Nzby9janMvcmVwbGFjZS9EaW1lbnNpb24uY2pzPzNmOWQiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBfTnVtYmVyID0gcmVxdWlyZSgnLi9OdW1iZXIuY2pzJyk7XG5cbmNvbnN0IE1BVEhfRlVOQ1RJT05TID0gbmV3IFNldChbXG4gICAgJ2NhbGMnLFxuICAgICdtaW4nLFxuICAgICdtYXgnLFxuICAgICdjbGFtcCdcbl0pO1xuY29uc3QgTEVOR1RIX1VOSVQgPSBuZXcgU2V0KFtcbiAgICAvLyBhYnNvbHV0ZSBsZW5ndGggdW5pdHNcbiAgICAncHgnLFxuICAgICdtbScsXG4gICAgJ2NtJyxcbiAgICAnaW4nLFxuICAgICdwdCcsXG4gICAgJ3BjJyxcblxuICAgIC8vIHJlbGF0aXZlIGxlbmd0aCB1bml0c1xuICAgICdlbScsXG4gICAgJ2V4JyxcbiAgICAnY2gnLFxuICAgICdyZW0nLFxuXG4gICAgLy8gdmlld3BvcnQtcGVyY2VudGFnZSBsZW5ndGhzXG4gICAgJ3ZoJyxcbiAgICAndncnLFxuICAgICd2bWluJyxcbiAgICAndm1heCcsXG4gICAgJ3ZtJ1xuXSk7XG5cbmZ1bmN0aW9uIGNvbXByZXNzRGltZW5zaW9uKG5vZGUsIGl0ZW0pIHtcbiAgICBjb25zdCB2YWx1ZSA9IF9OdW1iZXIucGFja051bWJlcihub2RlLnZhbHVlKTtcblxuICAgIG5vZGUudmFsdWUgPSB2YWx1ZTtcblxuICAgIGlmICh2YWx1ZSA9PT0gJzAnICYmIHRoaXMuZGVjbGFyYXRpb24gIT09IG51bGwgJiYgdGhpcy5hdHJ1bGVQcmVsdWRlID09PSBudWxsKSB7XG4gICAgICAgIGNvbnN0IHVuaXQgPSBub2RlLnVuaXQudG9Mb3dlckNhc2UoKTtcblxuICAgICAgICAvLyBvbmx5IGxlbmd0aCB2YWx1ZXMgY2FuIGJlIGNvbXByZXNzZWRcbiAgICAgICAgaWYgKCFMRU5HVEhfVU5JVC5oYXModW5pdCkpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGlzc3VlICMzNjI6IHNob3VsZG4ndCByZW1vdmUgdW5pdCBpbiAtbXMtZmxleCBzaW5jZSBpdCBicmVha3MgZmxleCBpbiBJRTEwLzExXG4gICAgICAgIC8vIGlzc3VlICMyMDA6IHNob3VsZG4ndCByZW1vdmUgdW5pdCBpbiBmbGV4IHNpbmNlIGl0IGJyZWFrcyBmbGV4IGluIElFMTAvMTFcbiAgICAgICAgaWYgKHRoaXMuZGVjbGFyYXRpb24ucHJvcGVydHkgPT09ICctbXMtZmxleCcgfHxcbiAgICAgICAgICAgIHRoaXMuZGVjbGFyYXRpb24ucHJvcGVydHkgPT09ICdmbGV4Jykge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gaXNzdWUgIzIyMjogZG9uJ3QgcmVtb3ZlIHVuaXRzIGluc2lkZSBjYWxjXG4gICAgICAgIGlmICh0aGlzLmZ1bmN0aW9uICYmIE1BVEhfRlVOQ1RJT05TLmhhcyh0aGlzLmZ1bmN0aW9uLm5hbWUpKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBpdGVtLmRhdGEgPSB7XG4gICAgICAgICAgICB0eXBlOiAnTnVtYmVyJyxcbiAgICAgICAgICAgIGxvYzogbm9kZS5sb2MsXG4gICAgICAgICAgICB2YWx1ZVxuICAgICAgICB9O1xuICAgIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBjb21wcmVzc0RpbWVuc2lvbjtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///23733\n")},276:(__unused_webpack_module,exports)=>{"use strict";eval("\n\nconst OMIT_PLUSSIGN = /^(?:\\+|(-))?0*(\\d*)(?:\\.0*|(\\.\\d*?)0*)?$/;\nconst KEEP_PLUSSIGN = /^([\\+\\-])?0*(\\d*)(?:\\.0*|(\\.\\d*?)0*)?$/;\nconst unsafeToRemovePlusSignAfter = new Set([\n    'Dimension',\n    'Hash',\n    'Identifier',\n    'Number',\n    'Raw',\n    'UnicodeRange'\n]);\n\nfunction packNumber(value, item) {\n    // omit plus sign only if no prev or prev is safe type\n    const regexp = item && item.prev !== null && unsafeToRemovePlusSignAfter.has(item.prev.data.type)\n        ? KEEP_PLUSSIGN\n        : OMIT_PLUSSIGN;\n\n    // 100 -> '100'\n    // 00100 -> '100'\n    // +100 -> '100'\n    // -100 -> '-100'\n    // 0.123 -> '.123'\n    // 0.12300 -> '.123'\n    // 0.0 -> ''\n    // 0 -> ''\n    // -0 -> '-'\n    value = String(value).replace(regexp, '$1$2$3');\n\n    if (value === '' || value === '-') {\n        value = '0';\n    }\n    // FIXME: is it solution simplier?\n    // value = String(Number(value)).replace(/^(-?)0+\\./, '$1.');\n\n    return value;\n}\n\nfunction Number(node) {\n    node.value = packNumber(node.value);\n}\n\nexports.Number = Number;\nexports.packNumber = packNumber;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjc2LmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQSxjQUFjO0FBQ2Qsa0JBQWtCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYmxvY2tiaXRlLy4vbm9kZV9tb2R1bGVzL2Nzc28vY2pzL3JlcGxhY2UvTnVtYmVyLmNqcz9lNDIzIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuY29uc3QgT01JVF9QTFVTU0lHTiA9IC9eKD86XFwrfCgtKSk/MCooXFxkKikoPzpcXC4wKnwoXFwuXFxkKj8pMCopPyQvO1xuY29uc3QgS0VFUF9QTFVTU0lHTiA9IC9eKFtcXCtcXC1dKT8wKihcXGQqKSg/OlxcLjAqfChcXC5cXGQqPykwKik/JC87XG5jb25zdCB1bnNhZmVUb1JlbW92ZVBsdXNTaWduQWZ0ZXIgPSBuZXcgU2V0KFtcbiAgICAnRGltZW5zaW9uJyxcbiAgICAnSGFzaCcsXG4gICAgJ0lkZW50aWZpZXInLFxuICAgICdOdW1iZXInLFxuICAgICdSYXcnLFxuICAgICdVbmljb2RlUmFuZ2UnXG5dKTtcblxuZnVuY3Rpb24gcGFja051bWJlcih2YWx1ZSwgaXRlbSkge1xuICAgIC8vIG9taXQgcGx1cyBzaWduIG9ubHkgaWYgbm8gcHJldiBvciBwcmV2IGlzIHNhZmUgdHlwZVxuICAgIGNvbnN0IHJlZ2V4cCA9IGl0ZW0gJiYgaXRlbS5wcmV2ICE9PSBudWxsICYmIHVuc2FmZVRvUmVtb3ZlUGx1c1NpZ25BZnRlci5oYXMoaXRlbS5wcmV2LmRhdGEudHlwZSlcbiAgICAgICAgPyBLRUVQX1BMVVNTSUdOXG4gICAgICAgIDogT01JVF9QTFVTU0lHTjtcblxuICAgIC8vIDEwMCAtPiAnMTAwJ1xuICAgIC8vIDAwMTAwIC0+ICcxMDAnXG4gICAgLy8gKzEwMCAtPiAnMTAwJ1xuICAgIC8vIC0xMDAgLT4gJy0xMDAnXG4gICAgLy8gMC4xMjMgLT4gJy4xMjMnXG4gICAgLy8gMC4xMjMwMCAtPiAnLjEyMydcbiAgICAvLyAwLjAgLT4gJydcbiAgICAvLyAwIC0+ICcnXG4gICAgLy8gLTAgLT4gJy0nXG4gICAgdmFsdWUgPSBTdHJpbmcodmFsdWUpLnJlcGxhY2UocmVnZXhwLCAnJDEkMiQzJyk7XG5cbiAgICBpZiAodmFsdWUgPT09ICcnIHx8IHZhbHVlID09PSAnLScpIHtcbiAgICAgICAgdmFsdWUgPSAnMCc7XG4gICAgfVxuICAgIC8vIEZJWE1FOiBpcyBpdCBzb2x1dGlvbiBzaW1wbGllcj9cbiAgICAvLyB2YWx1ZSA9IFN0cmluZyhOdW1iZXIodmFsdWUpKS5yZXBsYWNlKC9eKC0/KTArXFwuLywgJyQxLicpO1xuXG4gICAgcmV0dXJuIHZhbHVlO1xufVxuXG5mdW5jdGlvbiBOdW1iZXIobm9kZSkge1xuICAgIG5vZGUudmFsdWUgPSBwYWNrTnVtYmVyKG5vZGUudmFsdWUpO1xufVxuXG5leHBvcnRzLk51bWJlciA9IE51bWJlcjtcbmV4cG9ydHMucGFja051bWJlciA9IHBhY2tOdW1iZXI7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///276\n")},45459:(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval("\n\nconst cssTree = __webpack_require__(22694);\nconst _Number = __webpack_require__(276);\n\nconst blacklist = new Set([\n    // see https://github.com/jakubpawlowicz/clean-css/issues/957\n    'width',\n    'min-width',\n    'max-width',\n    'height',\n    'min-height',\n    'max-height',\n\n    // issue #410: Don’t remove units in flex-basis value for (-ms-)flex shorthand\n    // issue #362: shouldn't remove unit in -ms-flex since it breaks flex in IE10/11\n    // issue #200: shouldn't remove unit in flex since it breaks flex in IE10/11\n    'flex',\n    '-ms-flex'\n]);\n\nfunction compressPercentage(node, item) {\n    node.value = _Number.packNumber(node.value);\n\n    if (node.value === '0' && this.declaration && !blacklist.has(this.declaration.property)) {\n        // try to convert a number\n        item.data = {\n            type: 'Number',\n            loc: node.loc,\n            value: node.value\n        };\n\n        // that's ok only when new value matches on length\n        if (!cssTree.lexer.matchDeclaration(this.declaration).isType(item.data, 'length')) {\n            // otherwise rollback changes\n            item.data = node;\n        }\n    }\n}\n\nmodule.exports = compressPercentage;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDU0NTkuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsZ0JBQWdCLG1CQUFPLENBQUMsS0FBVTtBQUNsQyxnQkFBZ0IsbUJBQU8sQ0FBQyxHQUFjOztBQUV0QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYmxvY2tiaXRlLy4vbm9kZV9tb2R1bGVzL2Nzc28vY2pzL3JlcGxhY2UvUGVyY2VudGFnZS5janM/MDc1ZCJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmNvbnN0IGNzc1RyZWUgPSByZXF1aXJlKCdjc3MtdHJlZScpO1xuY29uc3QgX051bWJlciA9IHJlcXVpcmUoJy4vTnVtYmVyLmNqcycpO1xuXG5jb25zdCBibGFja2xpc3QgPSBuZXcgU2V0KFtcbiAgICAvLyBzZWUgaHR0cHM6Ly9naXRodWIuY29tL2pha3VicGF3bG93aWN6L2NsZWFuLWNzcy9pc3N1ZXMvOTU3XG4gICAgJ3dpZHRoJyxcbiAgICAnbWluLXdpZHRoJyxcbiAgICAnbWF4LXdpZHRoJyxcbiAgICAnaGVpZ2h0JyxcbiAgICAnbWluLWhlaWdodCcsXG4gICAgJ21heC1oZWlnaHQnLFxuXG4gICAgLy8gaXNzdWUgIzQxMDogRG9u4oCZdCByZW1vdmUgdW5pdHMgaW4gZmxleC1iYXNpcyB2YWx1ZSBmb3IgKC1tcy0pZmxleCBzaG9ydGhhbmRcbiAgICAvLyBpc3N1ZSAjMzYyOiBzaG91bGRuJ3QgcmVtb3ZlIHVuaXQgaW4gLW1zLWZsZXggc2luY2UgaXQgYnJlYWtzIGZsZXggaW4gSUUxMC8xMVxuICAgIC8vIGlzc3VlICMyMDA6IHNob3VsZG4ndCByZW1vdmUgdW5pdCBpbiBmbGV4IHNpbmNlIGl0IGJyZWFrcyBmbGV4IGluIElFMTAvMTFcbiAgICAnZmxleCcsXG4gICAgJy1tcy1mbGV4J1xuXSk7XG5cbmZ1bmN0aW9uIGNvbXByZXNzUGVyY2VudGFnZShub2RlLCBpdGVtKSB7XG4gICAgbm9kZS52YWx1ZSA9IF9OdW1iZXIucGFja051bWJlcihub2RlLnZhbHVlKTtcblxuICAgIGlmIChub2RlLnZhbHVlID09PSAnMCcgJiYgdGhpcy5kZWNsYXJhdGlvbiAmJiAhYmxhY2tsaXN0Lmhhcyh0aGlzLmRlY2xhcmF0aW9uLnByb3BlcnR5KSkge1xuICAgICAgICAvLyB0cnkgdG8gY29udmVydCBhIG51bWJlclxuICAgICAgICBpdGVtLmRhdGEgPSB7XG4gICAgICAgICAgICB0eXBlOiAnTnVtYmVyJyxcbiAgICAgICAgICAgIGxvYzogbm9kZS5sb2MsXG4gICAgICAgICAgICB2YWx1ZTogbm9kZS52YWx1ZVxuICAgICAgICB9O1xuXG4gICAgICAgIC8vIHRoYXQncyBvayBvbmx5IHdoZW4gbmV3IHZhbHVlIG1hdGNoZXMgb24gbGVuZ3RoXG4gICAgICAgIGlmICghY3NzVHJlZS5sZXhlci5tYXRjaERlY2xhcmF0aW9uKHRoaXMuZGVjbGFyYXRpb24pLmlzVHlwZShpdGVtLmRhdGEsICdsZW5ndGgnKSkge1xuICAgICAgICAgICAgLy8gb3RoZXJ3aXNlIHJvbGxiYWNrIGNoYW5nZXNcbiAgICAgICAgICAgIGl0ZW0uZGF0YSA9IG5vZGU7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gY29tcHJlc3NQZXJjZW50YWdlO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///45459\n")},95558:module=>{"use strict";eval("\n\nfunction Url(node) {\n    // convert `\\\\` to `/`\n    node.value = node.value.replace(/\\\\/g, '/');\n}\n\nmodule.exports = Url;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOTU1NTguanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWI7QUFDQTtBQUNBO0FBQ0E7O0FBRUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ibG9ja2JpdGUvLi9ub2RlX21vZHVsZXMvY3Nzby9janMvcmVwbGFjZS9VcmwuY2pzP2UyMDYiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5mdW5jdGlvbiBVcmwobm9kZSkge1xuICAgIC8vIGNvbnZlcnQgYFxcXFxgIHRvIGAvYFxuICAgIG5vZGUudmFsdWUgPSBub2RlLnZhbHVlLnJlcGxhY2UoL1xcXFwvZywgJy8nKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBVcmw7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///95558\n")},32866:(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval("\n\nconst cssTree = __webpack_require__(22694);\nconst font = __webpack_require__(62924);\nconst fontWeight = __webpack_require__(16085);\nconst background = __webpack_require__(99147);\nconst border = __webpack_require__(80257);\n\nconst handlers = {\n    'font': font,\n    'font-weight': fontWeight,\n    'background': background,\n    'border': border,\n    'outline': border\n};\n\nfunction compressValue(node) {\n    if (!this.declaration) {\n        return;\n    }\n\n    const property = cssTree.property(this.declaration.property);\n\n    if (handlers.hasOwnProperty(property.basename)) {\n        handlers[property.basename](node);\n    }\n}\n\nmodule.exports = compressValue;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzI4NjYuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsZ0JBQWdCLG1CQUFPLENBQUMsS0FBVTtBQUNsQyxhQUFhLG1CQUFPLENBQUMsS0FBcUI7QUFDMUMsbUJBQW1CLG1CQUFPLENBQUMsS0FBNEI7QUFDdkQsbUJBQW1CLG1CQUFPLENBQUMsS0FBMkI7QUFDdEQsZUFBZSxtQkFBTyxDQUFDLEtBQXVCOztBQUU5QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSIsInNvdXJjZXMiOlsid2VicGFjazovL2Jsb2NrYml0ZS8uL25vZGVfbW9kdWxlcy9jc3NvL2Nqcy9yZXBsYWNlL1ZhbHVlLmNqcz9lNGI5Il0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuY29uc3QgY3NzVHJlZSA9IHJlcXVpcmUoJ2Nzcy10cmVlJyk7XG5jb25zdCBmb250ID0gcmVxdWlyZSgnLi9wcm9wZXJ0eS9mb250LmNqcycpO1xuY29uc3QgZm9udFdlaWdodCA9IHJlcXVpcmUoJy4vcHJvcGVydHkvZm9udC13ZWlnaHQuY2pzJyk7XG5jb25zdCBiYWNrZ3JvdW5kID0gcmVxdWlyZSgnLi9wcm9wZXJ0eS9iYWNrZ3JvdW5kLmNqcycpO1xuY29uc3QgYm9yZGVyID0gcmVxdWlyZSgnLi9wcm9wZXJ0eS9ib3JkZXIuY2pzJyk7XG5cbmNvbnN0IGhhbmRsZXJzID0ge1xuICAgICdmb250JzogZm9udCxcbiAgICAnZm9udC13ZWlnaHQnOiBmb250V2VpZ2h0LFxuICAgICdiYWNrZ3JvdW5kJzogYmFja2dyb3VuZCxcbiAgICAnYm9yZGVyJzogYm9yZGVyLFxuICAgICdvdXRsaW5lJzogYm9yZGVyXG59O1xuXG5mdW5jdGlvbiBjb21wcmVzc1ZhbHVlKG5vZGUpIHtcbiAgICBpZiAoIXRoaXMuZGVjbGFyYXRpb24pIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNvbnN0IHByb3BlcnR5ID0gY3NzVHJlZS5wcm9wZXJ0eSh0aGlzLmRlY2xhcmF0aW9uLnByb3BlcnR5KTtcblxuICAgIGlmIChoYW5kbGVycy5oYXNPd25Qcm9wZXJ0eShwcm9wZXJ0eS5iYXNlbmFtZSkpIHtcbiAgICAgICAgaGFuZGxlcnNbcHJvcGVydHkuYmFzZW5hbWVdKG5vZGUpO1xuICAgIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBjb21wcmVzc1ZhbHVlO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///32866\n")},16716:module=>{"use strict";eval("\n\nfunction compressKeyframes(node) {\n    node.block.children.forEach((rule) => {\n        rule.prelude.children.forEach((simpleselector) => {\n            simpleselector.children.forEach((data, item) => {\n                if (data.type === 'Percentage' && data.value === '100') {\n                    item.data = {\n                        type: 'TypeSelector',\n                        loc: data.loc,\n                        name: 'to'\n                    };\n                } else if (data.type === 'TypeSelector' && data.name === 'from') {\n                    item.data = {\n                        type: 'Percentage',\n                        loc: data.loc,\n                        value: '0'\n                    };\n                }\n            });\n        });\n    });\n}\n\nmodule.exports = compressKeyframes;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTY3MTYuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0I7QUFDbEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiLFNBQVM7QUFDVCxLQUFLO0FBQ0w7O0FBRUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ibG9ja2JpdGUvLi9ub2RlX21vZHVsZXMvY3Nzby9janMvcmVwbGFjZS9hdHJ1bGUva2V5ZnJhbWVzLmNqcz8yYTJhIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuZnVuY3Rpb24gY29tcHJlc3NLZXlmcmFtZXMobm9kZSkge1xuICAgIG5vZGUuYmxvY2suY2hpbGRyZW4uZm9yRWFjaCgocnVsZSkgPT4ge1xuICAgICAgICBydWxlLnByZWx1ZGUuY2hpbGRyZW4uZm9yRWFjaCgoc2ltcGxlc2VsZWN0b3IpID0+IHtcbiAgICAgICAgICAgIHNpbXBsZXNlbGVjdG9yLmNoaWxkcmVuLmZvckVhY2goKGRhdGEsIGl0ZW0pID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoZGF0YS50eXBlID09PSAnUGVyY2VudGFnZScgJiYgZGF0YS52YWx1ZSA9PT0gJzEwMCcpIHtcbiAgICAgICAgICAgICAgICAgICAgaXRlbS5kYXRhID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogJ1R5cGVTZWxlY3RvcicsXG4gICAgICAgICAgICAgICAgICAgICAgICBsb2M6IGRhdGEubG9jLFxuICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogJ3RvJ1xuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoZGF0YS50eXBlID09PSAnVHlwZVNlbGVjdG9yJyAmJiBkYXRhLm5hbWUgPT09ICdmcm9tJykge1xuICAgICAgICAgICAgICAgICAgICBpdGVtLmRhdGEgPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAnUGVyY2VudGFnZScsXG4gICAgICAgICAgICAgICAgICAgICAgICBsb2M6IGRhdGEubG9jLFxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6ICcwJ1xuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9KTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBjb21wcmVzc0tleWZyYW1lcztcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///16716\n")},24508:(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";eval("\n\nconst cssTree = __webpack_require__(22694);\nconst _Number = __webpack_require__(276);\n\n// http://www.w3.org/TR/css3-color/#svg-color\nconst NAME_TO_HEX = {\n    'aliceblue': 'f0f8ff',\n    'antiquewhite': 'faebd7',\n    'aqua': '0ff',\n    'aquamarine': '7fffd4',\n    'azure': 'f0ffff',\n    'beige': 'f5f5dc',\n    'bisque': 'ffe4c4',\n    'black': '000',\n    'blanchedalmond': 'ffebcd',\n    'blue': '00f',\n    'blueviolet': '8a2be2',\n    'brown': 'a52a2a',\n    'burlywood': 'deb887',\n    'cadetblue': '5f9ea0',\n    'chartreuse': '7fff00',\n    'chocolate': 'd2691e',\n    'coral': 'ff7f50',\n    'cornflowerblue': '6495ed',\n    'cornsilk': 'fff8dc',\n    'crimson': 'dc143c',\n    'cyan': '0ff',\n    'darkblue': '00008b',\n    'darkcyan': '008b8b',\n    'darkgoldenrod': 'b8860b',\n    'darkgray': 'a9a9a9',\n    'darkgrey': 'a9a9a9',\n    'darkgreen': '006400',\n    'darkkhaki': 'bdb76b',\n    'darkmagenta': '8b008b',\n    'darkolivegreen': '556b2f',\n    'darkorange': 'ff8c00',\n    'darkorchid': '9932cc',\n    'darkred': '8b0000',\n    'darksalmon': 'e9967a',\n    'darkseagreen': '8fbc8f',\n    'darkslateblue': '483d8b',\n    'darkslategray': '2f4f4f',\n    'darkslategrey': '2f4f4f',\n    'darkturquoise': '00ced1',\n    'darkviolet': '9400d3',\n    'deeppink': 'ff1493',\n    'deepskyblue': '00bfff',\n    'dimgray': '696969',\n    'dimgrey': '696969',\n    'dodgerblue': '1e90ff',\n    'firebrick': 'b22222',\n    'floralwhite': 'fffaf0',\n    'forestgreen': '228b22',\n    'fuchsia': 'f0f',\n    'gainsboro': 'dcdcdc',\n    'ghostwhite': 'f8f8ff',\n    'gold': 'ffd700',\n    'goldenrod': 'daa520',\n    'gray': '808080',\n    'grey': '808080',\n    'green': '008000',\n    'greenyellow': 'adff2f',\n    'honeydew': 'f0fff0',\n    'hotpink': 'ff69b4',\n    'indianred': 'cd5c5c',\n    'indigo': '4b0082',\n    'ivory': 'fffff0',\n    'khaki': 'f0e68c',\n    'lavender': 'e6e6fa',\n    'lavenderblush': 'fff0f5',\n    'lawngreen': '7cfc00',\n    'lemonchiffon': 'fffacd',\n    'lightblue': 'add8e6',\n    'lightcoral': 'f08080',\n    'lightcyan': 'e0ffff',\n    'lightgoldenrodyellow': 'fafad2',\n    'lightgray': 'd3d3d3',\n    'lightgrey': 'd3d3d3',\n    'lightgreen': '90ee90',\n    'lightpink': 'ffb6c1',\n    'lightsalmon': 'ffa07a',\n    'lightseagreen': '20b2aa',\n    'lightskyblue': '87cefa',\n    'lightslategray': '789',\n    'lightslategrey': '789',\n    'lightsteelblue': 'b0c4de',\n    'lightyellow': 'ffffe0',\n    'lime': '0f0',\n    'limegreen': '32cd32',\n    'linen': 'faf0e6',\n    'magenta': 'f0f',\n    'maroon': '800000',\n    'mediumaquamarine': '66cdaa',\n    'mediumblue': '0000cd',\n    'mediumorchid': 'ba55d3',\n    'mediumpurple': '9370db',\n    'mediumseagreen': '3cb371',\n    'mediumslateblue': '7b68ee',\n    'mediumspringgreen': '00fa9a',\n    'mediumturquoise': '48d1cc',\n    'mediumvioletred': 'c71585',\n    'midnightblue': '191970',\n    'mintcream': 'f5fffa',\n    'mistyrose': 'ffe4e1',\n    'moccasin': 'ffe4b5',\n    'navajowhite': 'ffdead',\n    'navy': '000080',\n    'oldlace': 'fdf5e6',\n    'olive': '808000',\n    'olivedrab': '6b8e23',\n    'orange': 'ffa500',\n    'orangered': 'ff4500',\n    'orchid': 'da70d6',\n    'palegoldenrod': 'eee8aa',\n    'palegreen': '98fb98',\n    'paleturquoise': 'afeeee',\n    'palevioletred': 'db7093',\n    'papayawhip': 'ffefd5',\n    'peachpuff': 'ffdab9',\n    'peru': 'cd853f',\n    'pink': 'ffc0cb',\n    'plum': 'dda0dd',\n    'powderblue': 'b0e0e6',\n    'purple': '800080',\n    'rebeccapurple': '639',\n    'red': 'f00',\n    'rosybrown': 'bc8f8f',\n    'royalblue': '4169e1',\n    'saddlebrown': '8b4513',\n    'salmon': 'fa8072',\n    'sandybrown': 'f4a460',\n    'seagreen': '2e8b57',\n    'seashell': 'fff5ee',\n    'sienna': 'a0522d',\n    'silver': 'c0c0c0',\n    'skyblue': '87ceeb',\n    'slateblue': '6a5acd',\n    'slategray': '708090',\n    'slategrey': '708090',\n    'snow': 'fffafa',\n    'springgreen': '00ff7f',\n    'steelblue': '4682b4',\n    'tan': 'd2b48c',\n    'teal': '008080',\n    'thistle': 'd8bfd8',\n    'tomato': 'ff6347',\n    'turquoise': '40e0d0',\n    'violet': 'ee82ee',\n    'wheat': 'f5deb3',\n    'white': 'fff',\n    'whitesmoke': 'f5f5f5',\n    'yellow': 'ff0',\n    'yellowgreen': '9acd32'\n};\n\nconst HEX_TO_NAME = {\n    '800000': 'maroon',\n    '800080': 'purple',\n    '808000': 'olive',\n    '808080': 'gray',\n    '00ffff': 'cyan',\n    'f0ffff': 'azure',\n    'f5f5dc': 'beige',\n    'ffe4c4': 'bisque',\n    '000000': 'black',\n    '0000ff': 'blue',\n    'a52a2a': 'brown',\n    'ff7f50': 'coral',\n    'ffd700': 'gold',\n    '008000': 'green',\n    '4b0082': 'indigo',\n    'fffff0': 'ivory',\n    'f0e68c': 'khaki',\n    '00ff00': 'lime',\n    'faf0e6': 'linen',\n    '000080': 'navy',\n    'ffa500': 'orange',\n    'da70d6': 'orchid',\n    'cd853f': 'peru',\n    'ffc0cb': 'pink',\n    'dda0dd': 'plum',\n    'f00': 'red',\n    'ff0000': 'red',\n    'fa8072': 'salmon',\n    'a0522d': 'sienna',\n    'c0c0c0': 'silver',\n    'fffafa': 'snow',\n    'd2b48c': 'tan',\n    '008080': 'teal',\n    'ff6347': 'tomato',\n    'ee82ee': 'violet',\n    'f5deb3': 'wheat',\n    'ffffff': 'white',\n    'ffff00': 'yellow'\n};\n\nfunction hueToRgb(p, q, t) {\n    if (t < 0) {\n        t += 1;\n    }\n    if (t > 1) {\n        t -= 1;\n    }\n    if (t < 1 / 6) {\n        return p + (q - p) * 6 * t;\n    }\n    if (t < 1 / 2) {\n        return q;\n    }\n    if (t < 2 / 3) {\n        return p + (q - p) * (2 / 3 - t) * 6;\n    }\n    return p;\n}\n\nfunction hslToRgb(h, s, l, a) {\n    let r;\n    let g;\n    let b;\n\n    if (s === 0) {\n        r = g = b = l; // achromatic\n    } else {\n        const q = l < 0.5 ? l * (1 + s) : l + s - l * s;\n        const p = 2 * l - q;\n\n        r = hueToRgb(p, q, h + 1 / 3);\n        g = hueToRgb(p, q, h);\n        b = hueToRgb(p, q, h - 1 / 3);\n    }\n\n    return [\n        Math.round(r * 255),\n        Math.round(g * 255),\n        Math.round(b * 255),\n        a\n    ];\n}\n\nfunction toHex(value) {\n    value = value.toString(16);\n\n    return value.length === 1 ? '0' + value : value;\n}\n\nfunction parseFunctionArgs(functionArgs, count, rgb) {\n    let cursor = functionArgs.head;\n    let args = [];\n    let wasValue = false;\n\n    while (cursor !== null) {\n        const { type, value } = cursor.data;\n\n        switch (type) {\n            case 'Number':\n            case 'Percentage':\n                if (wasValue) {\n                    return;\n                }\n\n                wasValue = true;\n                args.push({\n                    type,\n                    value: Number(value)\n                });\n\n                break;\n\n            case 'Operator':\n                if (value === ',') {\n                    if (!wasValue) {\n                        return;\n                    }\n                    wasValue = false;\n                } else if (wasValue || value !== '+') {\n                    return;\n                }\n\n                break;\n\n            default:\n                // something we couldn't understand\n                return;\n        }\n\n        cursor = cursor.next;\n    }\n\n    if (args.length !== count) {\n        // invalid arguments count\n        // TODO: remove those tokens\n        return;\n    }\n\n    if (args.length === 4) {\n        if (args[3].type !== 'Number') {\n            // 4th argument should be a number\n            // TODO: remove those tokens\n            return;\n        }\n\n        args[3].type = 'Alpha';\n    }\n\n    if (rgb) {\n        if (args[0].type !== args[1].type || args[0].type !== args[2].type) {\n            // invalid color, numbers and percentage shouldn't be mixed\n            // TODO: remove those tokens\n            return;\n        }\n    } else {\n        if (args[0].type !== 'Number' ||\n            args[1].type !== 'Percentage' ||\n            args[2].type !== 'Percentage') {\n            // invalid color, for hsl values should be: number, percentage, percentage\n            // TODO: remove those tokens\n            return;\n        }\n\n        args[0].type = 'Angle';\n    }\n\n    return args.map(function(arg) {\n        let value = Math.max(0, arg.value);\n\n        switch (arg.type) {\n            case 'Number':\n                // fit value to [0..255] range\n                value = Math.min(value, 255);\n                break;\n\n            case 'Percentage':\n                // convert 0..100% to value in [0..255] range\n                value = Math.min(value, 100) / 100;\n\n                if (!rgb) {\n                    return value;\n                }\n\n                value = 255 * value;\n                break;\n\n            case 'Angle':\n                // fit value to (-360..360) range\n                return (((value % 360) + 360) % 360) / 360;\n\n            case 'Alpha':\n                // fit value to [0..1] range\n                return Math.min(value, 1);\n        }\n\n        return Math.round(value);\n    });\n}\n\nfunction compressFunction(node, item) {\n    let functionName = node.name;\n    let args;\n\n    if (functionName === 'rgba' || functionName === 'hsla') {\n        args = parseFunctionArgs(node.children, 4, functionName === 'rgba');\n\n        if (!args) {\n            // something went wrong\n            return;\n        }\n\n        if (functionName === 'hsla') {\n            args = hslToRgb(...args);\n            node.name = 'rgba';\n        }\n\n        if (args[3] === 0) {\n            // try to replace `rgba(x, x, x, 0)` to `transparent`\n            // always replace `rgba(0, 0, 0, 0)` to `transparent`\n            // otherwise avoid replacement in gradients since it may break color transition\n            // http://stackoverflow.com/questions/11829410/css3-gradient-rendering-issues-from-transparent-to-white\n            const scopeFunctionName = this.function && this.function.name;\n\n            if ((args[0] === 0 && args[1] === 0 && args[2] === 0) ||\n                !/^(?:to|from|color-stop)$|gradient$/i.test(scopeFunctionName)) {\n\n                item.data = {\n                    type: 'Identifier',\n                    loc: node.loc,\n                    name: 'transparent'\n                };\n\n                return;\n            }\n        }\n\n        if (args[3] !== 1) {\n            // replace argument values for normalized/interpolated\n            node.children.forEach((node, item, list) => {\n                if (node.type === 'Operator') {\n                    if (node.value !== ',') {\n                        list.remove(item);\n                    }\n                    return;\n                }\n\n                item.data = {\n                    type: 'Number',\n                    loc: node.loc,\n                    value: _Number.packNumber(args.shift())\n                };\n            });\n\n            return;\n        }\n\n        // otherwise convert to rgb, i.e. rgba(255, 0, 0, 1) -> rgb(255, 0, 0)\n        functionName = 'rgb';\n    }\n\n    if (functionName === 'hsl') {\n        args = args || parseFunctionArgs(node.children, 3, false);\n\n        if (!args) {\n            // something went wrong\n            return;\n        }\n\n        // convert to rgb\n        args = hslToRgb(...args);\n        functionName = 'rgb';\n    }\n\n    if (functionName === 'rgb') {\n        args = args || parseFunctionArgs(node.children, 3, true);\n\n        if (!args) {\n            // something went wrong\n            return;\n        }\n\n        item.data = {\n            type: 'Hash',\n            loc: node.loc,\n            value: toHex(args[0]) + toHex(args[1]) + toHex(args[2])\n        };\n\n        compressHex(item.data, item);\n    }\n}\n\nfunction compressIdent(node, item) {\n    if (this.declaration === null) {\n        return;\n    }\n\n    let color = node.name.toLowerCase();\n\n    if (NAME_TO_HEX.hasOwnProperty(color) &&\n        cssTree.lexer.matchDeclaration(this.declaration).isType(node, 'color')) {\n        const hex = NAME_TO_HEX[color];\n\n        if (hex.length + 1 <= color.length) {\n            // replace for shorter hex value\n            item.data = {\n                type: 'Hash',\n                loc: node.loc,\n                value: hex\n            };\n        } else {\n            // special case for consistent colors\n            if (color === 'grey') {\n                color = 'gray';\n            }\n\n            // just replace value for lower cased name\n            node.name = color;\n        }\n    }\n}\n\nfunction compressHex(node, item) {\n    let color = node.value.toLowerCase();\n\n    // #112233 -> #123\n    if (color.length === 6 &&\n        color[0] === color[1] &&\n        color[2] === color[3] &&\n        color[4] === color[5]) {\n        color = color[0] + color[2] + color[4];\n    }\n\n    if (HEX_TO_NAME[color]) {\n        item.data = {\n            type: 'Identifier',\n            loc: node.loc,\n            name: HEX_TO_NAME[color]\n        };\n    } else {\n        node.value = color;\n    }\n}\n\nexports.compressFunction = compressFunction;\nexports.compressHex = compressHex;\nexports.compressIdent = compressIdent;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///24508\n")},48181:(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval("\n\nconst cssTree = __webpack_require__(22694);\nconst Atrule = __webpack_require__(64678);\nconst AttributeSelector = __webpack_require__(19182);\nconst Value = __webpack_require__(32866);\nconst Dimension = __webpack_require__(23733);\nconst Percentage = __webpack_require__(45459);\nconst _Number = __webpack_require__(276);\nconst Url = __webpack_require__(95558);\nconst color = __webpack_require__(24508);\n\nconst handlers = {\n    Atrule,\n    AttributeSelector,\n    Value,\n    Dimension,\n    Percentage,\n    Number: _Number.Number,\n    Url,\n    Hash: color.compressHex,\n    Identifier: color.compressIdent,\n    Function: color.compressFunction\n};\n\nfunction replace(ast) {\n    cssTree.walk(ast, {\n        leave(node, item, list) {\n            if (handlers.hasOwnProperty(node.type)) {\n                handlers[node.type].call(this, node, item, list);\n            }\n        }\n    });\n}\n\nmodule.exports = replace;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDgxODEuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsZ0JBQWdCLG1CQUFPLENBQUMsS0FBVTtBQUNsQyxlQUFlLG1CQUFPLENBQUMsS0FBYztBQUNyQywwQkFBMEIsbUJBQU8sQ0FBQyxLQUF5QjtBQUMzRCxjQUFjLG1CQUFPLENBQUMsS0FBYTtBQUNuQyxrQkFBa0IsbUJBQU8sQ0FBQyxLQUFpQjtBQUMzQyxtQkFBbUIsbUJBQU8sQ0FBQyxLQUFrQjtBQUM3QyxnQkFBZ0IsbUJBQU8sQ0FBQyxHQUFjO0FBQ3RDLFlBQVksbUJBQU8sQ0FBQyxLQUFXO0FBQy9CLGNBQWMsbUJBQU8sQ0FBQyxLQUFhOztBQUVuQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7O0FBRUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ibG9ja2JpdGUvLi9ub2RlX21vZHVsZXMvY3Nzby9janMvcmVwbGFjZS9pbmRleC5janM/OWVkYiJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmNvbnN0IGNzc1RyZWUgPSByZXF1aXJlKCdjc3MtdHJlZScpO1xuY29uc3QgQXRydWxlID0gcmVxdWlyZSgnLi9BdHJ1bGUuY2pzJyk7XG5jb25zdCBBdHRyaWJ1dGVTZWxlY3RvciA9IHJlcXVpcmUoJy4vQXR0cmlidXRlU2VsZWN0b3IuY2pzJyk7XG5jb25zdCBWYWx1ZSA9IHJlcXVpcmUoJy4vVmFsdWUuY2pzJyk7XG5jb25zdCBEaW1lbnNpb24gPSByZXF1aXJlKCcuL0RpbWVuc2lvbi5janMnKTtcbmNvbnN0IFBlcmNlbnRhZ2UgPSByZXF1aXJlKCcuL1BlcmNlbnRhZ2UuY2pzJyk7XG5jb25zdCBfTnVtYmVyID0gcmVxdWlyZSgnLi9OdW1iZXIuY2pzJyk7XG5jb25zdCBVcmwgPSByZXF1aXJlKCcuL1VybC5janMnKTtcbmNvbnN0IGNvbG9yID0gcmVxdWlyZSgnLi9jb2xvci5janMnKTtcblxuY29uc3QgaGFuZGxlcnMgPSB7XG4gICAgQXRydWxlLFxuICAgIEF0dHJpYnV0ZVNlbGVjdG9yLFxuICAgIFZhbHVlLFxuICAgIERpbWVuc2lvbixcbiAgICBQZXJjZW50YWdlLFxuICAgIE51bWJlcjogX051bWJlci5OdW1iZXIsXG4gICAgVXJsLFxuICAgIEhhc2g6IGNvbG9yLmNvbXByZXNzSGV4LFxuICAgIElkZW50aWZpZXI6IGNvbG9yLmNvbXByZXNzSWRlbnQsXG4gICAgRnVuY3Rpb246IGNvbG9yLmNvbXByZXNzRnVuY3Rpb25cbn07XG5cbmZ1bmN0aW9uIHJlcGxhY2UoYXN0KSB7XG4gICAgY3NzVHJlZS53YWxrKGFzdCwge1xuICAgICAgICBsZWF2ZShub2RlLCBpdGVtLCBsaXN0KSB7XG4gICAgICAgICAgICBpZiAoaGFuZGxlcnMuaGFzT3duUHJvcGVydHkobm9kZS50eXBlKSkge1xuICAgICAgICAgICAgICAgIGhhbmRsZXJzW25vZGUudHlwZV0uY2FsbCh0aGlzLCBub2RlLCBpdGVtLCBsaXN0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0pO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHJlcGxhY2U7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///48181\n")},99147:(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval("\n\nconst cssTree = __webpack_require__(22694);\n\nfunction compressBackground(node) {\n    function flush() {\n        if (!buffer.length) {\n            buffer.unshift(\n                {\n                    type: 'Number',\n                    loc: null,\n                    value: '0'\n                },\n                {\n                    type: 'Number',\n                    loc: null,\n                    value: '0'\n                }\n            );\n        }\n\n        newValue.push.apply(newValue, buffer);\n\n        buffer = [];\n    }\n\n    let newValue = [];\n    let buffer = [];\n\n    node.children.forEach((node) => {\n        if (node.type === 'Operator' && node.value === ',') {\n            flush();\n            newValue.push(node);\n            return;\n        }\n\n        // remove defaults\n        if (node.type === 'Identifier') {\n            if (node.name === 'transparent' ||\n                node.name === 'none' ||\n                node.name === 'repeat' ||\n                node.name === 'scroll') {\n                return;\n            }\n        }\n\n        buffer.push(node);\n    });\n\n    flush();\n    node.children = new cssTree.List().fromArray(newValue);\n}\n\nmodule.exports = compressBackground;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOTkxNDcuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsZ0JBQWdCLG1CQUFPLENBQUMsS0FBVTs7QUFFbEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBOztBQUVBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYmxvY2tiaXRlLy4vbm9kZV9tb2R1bGVzL2Nzc28vY2pzL3JlcGxhY2UvcHJvcGVydHkvYmFja2dyb3VuZC5janM/NzJiYSJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmNvbnN0IGNzc1RyZWUgPSByZXF1aXJlKCdjc3MtdHJlZScpO1xuXG5mdW5jdGlvbiBjb21wcmVzc0JhY2tncm91bmQobm9kZSkge1xuICAgIGZ1bmN0aW9uIGZsdXNoKCkge1xuICAgICAgICBpZiAoIWJ1ZmZlci5sZW5ndGgpIHtcbiAgICAgICAgICAgIGJ1ZmZlci51bnNoaWZ0KFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogJ051bWJlcicsXG4gICAgICAgICAgICAgICAgICAgIGxvYzogbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgdmFsdWU6ICcwJ1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICB0eXBlOiAnTnVtYmVyJyxcbiAgICAgICAgICAgICAgICAgICAgbG9jOiBudWxsLFxuICAgICAgICAgICAgICAgICAgICB2YWx1ZTogJzAnXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuXG4gICAgICAgIG5ld1ZhbHVlLnB1c2guYXBwbHkobmV3VmFsdWUsIGJ1ZmZlcik7XG5cbiAgICAgICAgYnVmZmVyID0gW107XG4gICAgfVxuXG4gICAgbGV0IG5ld1ZhbHVlID0gW107XG4gICAgbGV0IGJ1ZmZlciA9IFtdO1xuXG4gICAgbm9kZS5jaGlsZHJlbi5mb3JFYWNoKChub2RlKSA9PiB7XG4gICAgICAgIGlmIChub2RlLnR5cGUgPT09ICdPcGVyYXRvcicgJiYgbm9kZS52YWx1ZSA9PT0gJywnKSB7XG4gICAgICAgICAgICBmbHVzaCgpO1xuICAgICAgICAgICAgbmV3VmFsdWUucHVzaChub2RlKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIHJlbW92ZSBkZWZhdWx0c1xuICAgICAgICBpZiAobm9kZS50eXBlID09PSAnSWRlbnRpZmllcicpIHtcbiAgICAgICAgICAgIGlmIChub2RlLm5hbWUgPT09ICd0cmFuc3BhcmVudCcgfHxcbiAgICAgICAgICAgICAgICBub2RlLm5hbWUgPT09ICdub25lJyB8fFxuICAgICAgICAgICAgICAgIG5vZGUubmFtZSA9PT0gJ3JlcGVhdCcgfHxcbiAgICAgICAgICAgICAgICBub2RlLm5hbWUgPT09ICdzY3JvbGwnKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgYnVmZmVyLnB1c2gobm9kZSk7XG4gICAgfSk7XG5cbiAgICBmbHVzaCgpO1xuICAgIG5vZGUuY2hpbGRyZW4gPSBuZXcgY3NzVHJlZS5MaXN0KCkuZnJvbUFycmF5KG5ld1ZhbHVlKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBjb21wcmVzc0JhY2tncm91bmQ7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///99147\n")},80257:module=>{"use strict";eval("\n\nfunction compressBorder(node) {\n    node.children.forEach((node, item, list) => {\n        if (node.type === 'Identifier' && node.name.toLowerCase() === 'none') {\n            if (list.head === list.tail) {\n                // replace `none` for zero when `none` is a single term\n                item.data = {\n                    type: 'Number',\n                    loc: node.loc,\n                    value: '0'\n                };\n            } else {\n                list.remove(item);\n            }\n        }\n    });\n}\n\nmodule.exports = compressBorder;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiODAyNTcuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjO0FBQ2Q7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMOztBQUVBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYmxvY2tiaXRlLy4vbm9kZV9tb2R1bGVzL2Nzc28vY2pzL3JlcGxhY2UvcHJvcGVydHkvYm9yZGVyLmNqcz8zNDAwIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuZnVuY3Rpb24gY29tcHJlc3NCb3JkZXIobm9kZSkge1xuICAgIG5vZGUuY2hpbGRyZW4uZm9yRWFjaCgobm9kZSwgaXRlbSwgbGlzdCkgPT4ge1xuICAgICAgICBpZiAobm9kZS50eXBlID09PSAnSWRlbnRpZmllcicgJiYgbm9kZS5uYW1lLnRvTG93ZXJDYXNlKCkgPT09ICdub25lJykge1xuICAgICAgICAgICAgaWYgKGxpc3QuaGVhZCA9PT0gbGlzdC50YWlsKSB7XG4gICAgICAgICAgICAgICAgLy8gcmVwbGFjZSBgbm9uZWAgZm9yIHplcm8gd2hlbiBgbm9uZWAgaXMgYSBzaW5nbGUgdGVybVxuICAgICAgICAgICAgICAgIGl0ZW0uZGF0YSA9IHtcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogJ051bWJlcicsXG4gICAgICAgICAgICAgICAgICAgIGxvYzogbm9kZS5sb2MsXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlOiAnMCdcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBsaXN0LnJlbW92ZShpdGVtKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0pO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGNvbXByZXNzQm9yZGVyO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///80257\n")},16085:module=>{"use strict";eval("\n\nfunction compressFontWeight(node) {\n    const value = node.children.head.data;\n\n    if (value.type === 'Identifier') {\n        switch (value.name) {\n            case 'normal':\n                node.children.head.data = {\n                    type: 'Number',\n                    loc: value.loc,\n                    value: '400'\n                };\n                break;\n            case 'bold':\n                node.children.head.data = {\n                    type: 'Number',\n                    loc: value.loc,\n                    value: '700'\n                };\n                break;\n        }\n    }\n}\n\nmodule.exports = compressFontWeight;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTYwODUuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWI7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSIsInNvdXJjZXMiOlsid2VicGFjazovL2Jsb2NrYml0ZS8uL25vZGVfbW9kdWxlcy9jc3NvL2Nqcy9yZXBsYWNlL3Byb3BlcnR5L2ZvbnQtd2VpZ2h0LmNqcz8wOWE5Il0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuZnVuY3Rpb24gY29tcHJlc3NGb250V2VpZ2h0KG5vZGUpIHtcbiAgICBjb25zdCB2YWx1ZSA9IG5vZGUuY2hpbGRyZW4uaGVhZC5kYXRhO1xuXG4gICAgaWYgKHZhbHVlLnR5cGUgPT09ICdJZGVudGlmaWVyJykge1xuICAgICAgICBzd2l0Y2ggKHZhbHVlLm5hbWUpIHtcbiAgICAgICAgICAgIGNhc2UgJ25vcm1hbCc6XG4gICAgICAgICAgICAgICAgbm9kZS5jaGlsZHJlbi5oZWFkLmRhdGEgPSB7XG4gICAgICAgICAgICAgICAgICAgIHR5cGU6ICdOdW1iZXInLFxuICAgICAgICAgICAgICAgICAgICBsb2M6IHZhbHVlLmxvYyxcbiAgICAgICAgICAgICAgICAgICAgdmFsdWU6ICc0MDAnXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ2JvbGQnOlxuICAgICAgICAgICAgICAgIG5vZGUuY2hpbGRyZW4uaGVhZC5kYXRhID0ge1xuICAgICAgICAgICAgICAgICAgICB0eXBlOiAnTnVtYmVyJyxcbiAgICAgICAgICAgICAgICAgICAgbG9jOiB2YWx1ZS5sb2MsXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlOiAnNzAwJ1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gY29tcHJlc3NGb250V2VpZ2h0O1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///16085\n")},62924:module=>{"use strict";eval("\n\nfunction compressFont(node) {\n    const list = node.children;\n\n    list.forEachRight(function(node, item) {\n        if (node.type === 'Identifier') {\n            if (node.name === 'bold') {\n                item.data = {\n                    type: 'Number',\n                    loc: node.loc,\n                    value: '700'\n                };\n            } else if (node.name === 'normal') {\n                const prev = item.prev;\n\n                if (prev && prev.data.type === 'Operator' && prev.data.value === '/') {\n                    this.remove(prev);\n                }\n\n                this.remove(item);\n            }\n        }\n    });\n\n    if (list.isEmpty) {\n        list.insert(list.createItem({\n            type: 'Identifier',\n            name: 'normal'\n        }));\n    }\n}\n\nmodule.exports = compressFont;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNjI5MjQuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWI7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYztBQUNkOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7O0FBRUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ibG9ja2JpdGUvLi9ub2RlX21vZHVsZXMvY3Nzby9janMvcmVwbGFjZS9wcm9wZXJ0eS9mb250LmNqcz85ZGFkIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuZnVuY3Rpb24gY29tcHJlc3NGb250KG5vZGUpIHtcbiAgICBjb25zdCBsaXN0ID0gbm9kZS5jaGlsZHJlbjtcblxuICAgIGxpc3QuZm9yRWFjaFJpZ2h0KGZ1bmN0aW9uKG5vZGUsIGl0ZW0pIHtcbiAgICAgICAgaWYgKG5vZGUudHlwZSA9PT0gJ0lkZW50aWZpZXInKSB7XG4gICAgICAgICAgICBpZiAobm9kZS5uYW1lID09PSAnYm9sZCcpIHtcbiAgICAgICAgICAgICAgICBpdGVtLmRhdGEgPSB7XG4gICAgICAgICAgICAgICAgICAgIHR5cGU6ICdOdW1iZXInLFxuICAgICAgICAgICAgICAgICAgICBsb2M6IG5vZGUubG9jLFxuICAgICAgICAgICAgICAgICAgICB2YWx1ZTogJzcwMCdcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfSBlbHNlIGlmIChub2RlLm5hbWUgPT09ICdub3JtYWwnKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgcHJldiA9IGl0ZW0ucHJldjtcblxuICAgICAgICAgICAgICAgIGlmIChwcmV2ICYmIHByZXYuZGF0YS50eXBlID09PSAnT3BlcmF0b3InICYmIHByZXYuZGF0YS52YWx1ZSA9PT0gJy8nKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucmVtb3ZlKHByZXYpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHRoaXMucmVtb3ZlKGl0ZW0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICBpZiAobGlzdC5pc0VtcHR5KSB7XG4gICAgICAgIGxpc3QuaW5zZXJ0KGxpc3QuY3JlYXRlSXRlbSh7XG4gICAgICAgICAgICB0eXBlOiAnSWRlbnRpZmllcicsXG4gICAgICAgICAgICBuYW1lOiAnbm9ybWFsJ1xuICAgICAgICB9KSk7XG4gICAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGNvbXByZXNzRm9udDtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///62924\n")},25248:(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval("\n\nconst cssTree = __webpack_require__(22694);\n\nconst { hasOwnProperty } = Object.prototype;\n\nfunction addRuleToMap(map, item, list, single) {\n    const node = item.data;\n    const name = cssTree.keyword(node.name).basename;\n    const id = node.name.toLowerCase() + '/' + (node.prelude ? node.prelude.id : null);\n\n    if (!hasOwnProperty.call(map, name)) {\n        map[name] = Object.create(null);\n    }\n\n    if (single) {\n        delete map[name][id];\n    }\n\n    if (!hasOwnProperty.call(map[name], id)) {\n        map[name][id] = new cssTree.List();\n    }\n\n    map[name][id].append(list.remove(item));\n}\n\nfunction relocateAtrules(ast, options) {\n    const collected = Object.create(null);\n    let topInjectPoint = null;\n\n    ast.children.forEach(function(node, item, list) {\n        if (node.type === 'Atrule') {\n            const name = cssTree.keyword(node.name).basename;\n\n            switch (name) {\n                case 'keyframes':\n                    addRuleToMap(collected, item, list, true);\n                    return;\n\n                case 'media':\n                    if (options.forceMediaMerge) {\n                        addRuleToMap(collected, item, list, false);\n                        return;\n                    }\n                    break;\n            }\n\n            if (topInjectPoint === null &&\n                name !== 'charset' &&\n                name !== 'import') {\n                topInjectPoint = item;\n            }\n        } else {\n            if (topInjectPoint === null) {\n                topInjectPoint = item;\n            }\n        }\n    });\n\n    for (const atrule in collected) {\n        for (const id in collected[atrule]) {\n            ast.children.insertList(\n                collected[atrule][id],\n                atrule === 'media' ? null : topInjectPoint\n            );\n        }\n    }\n}\nfunction isMediaRule(node) {\n    return node.type === 'Atrule' && node.name === 'media';\n}\n\nfunction processAtrule(node, item, list) {\n    if (!isMediaRule(node)) {\n        return;\n    }\n\n    const prev = item.prev && item.prev.data;\n\n    if (!prev || !isMediaRule(prev)) {\n        return;\n    }\n\n    // merge @media with same query\n    if (node.prelude &&\n        prev.prelude &&\n        node.prelude.id === prev.prelude.id) {\n        prev.block.children.appendList(node.block.children);\n        list.remove(item);\n\n        // TODO: use it when we can refer to several points in source\n        // prev.loc = {\n        //     primary: prev.loc,\n        //     merged: node.loc\n        // };\n    }\n}\n\nfunction rejoinAtrule(ast, options) {\n    relocateAtrules(ast, options);\n\n    cssTree.walk(ast, {\n        visit: 'Atrule',\n        reverse: true,\n        enter: processAtrule\n    });\n}\n\nmodule.exports = rejoinAtrule;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjUyNDguanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsZ0JBQWdCLG1CQUFPLENBQUMsS0FBVTs7QUFFbEMsUUFBUSxpQkFBaUI7O0FBRXpCO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMOztBQUVBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYmxvY2tiaXRlLy4vbm9kZV9tb2R1bGVzL2Nzc28vY2pzL3Jlc3RydWN0dXJlLzEtbWVyZ2VBdHJ1bGUuY2pzPzkyZjIiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBjc3NUcmVlID0gcmVxdWlyZSgnY3NzLXRyZWUnKTtcblxuY29uc3QgeyBoYXNPd25Qcm9wZXJ0eSB9ID0gT2JqZWN0LnByb3RvdHlwZTtcblxuZnVuY3Rpb24gYWRkUnVsZVRvTWFwKG1hcCwgaXRlbSwgbGlzdCwgc2luZ2xlKSB7XG4gICAgY29uc3Qgbm9kZSA9IGl0ZW0uZGF0YTtcbiAgICBjb25zdCBuYW1lID0gY3NzVHJlZS5rZXl3b3JkKG5vZGUubmFtZSkuYmFzZW5hbWU7XG4gICAgY29uc3QgaWQgPSBub2RlLm5hbWUudG9Mb3dlckNhc2UoKSArICcvJyArIChub2RlLnByZWx1ZGUgPyBub2RlLnByZWx1ZGUuaWQgOiBudWxsKTtcblxuICAgIGlmICghaGFzT3duUHJvcGVydHkuY2FsbChtYXAsIG5hbWUpKSB7XG4gICAgICAgIG1hcFtuYW1lXSA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgfVxuXG4gICAgaWYgKHNpbmdsZSkge1xuICAgICAgICBkZWxldGUgbWFwW25hbWVdW2lkXTtcbiAgICB9XG5cbiAgICBpZiAoIWhhc093blByb3BlcnR5LmNhbGwobWFwW25hbWVdLCBpZCkpIHtcbiAgICAgICAgbWFwW25hbWVdW2lkXSA9IG5ldyBjc3NUcmVlLkxpc3QoKTtcbiAgICB9XG5cbiAgICBtYXBbbmFtZV1baWRdLmFwcGVuZChsaXN0LnJlbW92ZShpdGVtKSk7XG59XG5cbmZ1bmN0aW9uIHJlbG9jYXRlQXRydWxlcyhhc3QsIG9wdGlvbnMpIHtcbiAgICBjb25zdCBjb2xsZWN0ZWQgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgIGxldCB0b3BJbmplY3RQb2ludCA9IG51bGw7XG5cbiAgICBhc3QuY2hpbGRyZW4uZm9yRWFjaChmdW5jdGlvbihub2RlLCBpdGVtLCBsaXN0KSB7XG4gICAgICAgIGlmIChub2RlLnR5cGUgPT09ICdBdHJ1bGUnKSB7XG4gICAgICAgICAgICBjb25zdCBuYW1lID0gY3NzVHJlZS5rZXl3b3JkKG5vZGUubmFtZSkuYmFzZW5hbWU7XG5cbiAgICAgICAgICAgIHN3aXRjaCAobmFtZSkge1xuICAgICAgICAgICAgICAgIGNhc2UgJ2tleWZyYW1lcyc6XG4gICAgICAgICAgICAgICAgICAgIGFkZFJ1bGVUb01hcChjb2xsZWN0ZWQsIGl0ZW0sIGxpc3QsIHRydWUpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG5cbiAgICAgICAgICAgICAgICBjYXNlICdtZWRpYSc6XG4gICAgICAgICAgICAgICAgICAgIGlmIChvcHRpb25zLmZvcmNlTWVkaWFNZXJnZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgYWRkUnVsZVRvTWFwKGNvbGxlY3RlZCwgaXRlbSwgbGlzdCwgZmFsc2UpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAodG9wSW5qZWN0UG9pbnQgPT09IG51bGwgJiZcbiAgICAgICAgICAgICAgICBuYW1lICE9PSAnY2hhcnNldCcgJiZcbiAgICAgICAgICAgICAgICBuYW1lICE9PSAnaW1wb3J0Jykge1xuICAgICAgICAgICAgICAgIHRvcEluamVjdFBvaW50ID0gaXRlbTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmICh0b3BJbmplY3RQb2ludCA9PT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHRvcEluamVjdFBvaW50ID0gaXRlbTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgZm9yIChjb25zdCBhdHJ1bGUgaW4gY29sbGVjdGVkKSB7XG4gICAgICAgIGZvciAoY29uc3QgaWQgaW4gY29sbGVjdGVkW2F0cnVsZV0pIHtcbiAgICAgICAgICAgIGFzdC5jaGlsZHJlbi5pbnNlcnRMaXN0KFxuICAgICAgICAgICAgICAgIGNvbGxlY3RlZFthdHJ1bGVdW2lkXSxcbiAgICAgICAgICAgICAgICBhdHJ1bGUgPT09ICdtZWRpYScgPyBudWxsIDogdG9wSW5qZWN0UG9pbnRcbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICB9XG59XG5mdW5jdGlvbiBpc01lZGlhUnVsZShub2RlKSB7XG4gICAgcmV0dXJuIG5vZGUudHlwZSA9PT0gJ0F0cnVsZScgJiYgbm9kZS5uYW1lID09PSAnbWVkaWEnO1xufVxuXG5mdW5jdGlvbiBwcm9jZXNzQXRydWxlKG5vZGUsIGl0ZW0sIGxpc3QpIHtcbiAgICBpZiAoIWlzTWVkaWFSdWxlKG5vZGUpKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjb25zdCBwcmV2ID0gaXRlbS5wcmV2ICYmIGl0ZW0ucHJldi5kYXRhO1xuXG4gICAgaWYgKCFwcmV2IHx8ICFpc01lZGlhUnVsZShwcmV2KSkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLy8gbWVyZ2UgQG1lZGlhIHdpdGggc2FtZSBxdWVyeVxuICAgIGlmIChub2RlLnByZWx1ZGUgJiZcbiAgICAgICAgcHJldi5wcmVsdWRlICYmXG4gICAgICAgIG5vZGUucHJlbHVkZS5pZCA9PT0gcHJldi5wcmVsdWRlLmlkKSB7XG4gICAgICAgIHByZXYuYmxvY2suY2hpbGRyZW4uYXBwZW5kTGlzdChub2RlLmJsb2NrLmNoaWxkcmVuKTtcbiAgICAgICAgbGlzdC5yZW1vdmUoaXRlbSk7XG5cbiAgICAgICAgLy8gVE9ETzogdXNlIGl0IHdoZW4gd2UgY2FuIHJlZmVyIHRvIHNldmVyYWwgcG9pbnRzIGluIHNvdXJjZVxuICAgICAgICAvLyBwcmV2LmxvYyA9IHtcbiAgICAgICAgLy8gICAgIHByaW1hcnk6IHByZXYubG9jLFxuICAgICAgICAvLyAgICAgbWVyZ2VkOiBub2RlLmxvY1xuICAgICAgICAvLyB9O1xuICAgIH1cbn1cblxuZnVuY3Rpb24gcmVqb2luQXRydWxlKGFzdCwgb3B0aW9ucykge1xuICAgIHJlbG9jYXRlQXRydWxlcyhhc3QsIG9wdGlvbnMpO1xuXG4gICAgY3NzVHJlZS53YWxrKGFzdCwge1xuICAgICAgICB2aXNpdDogJ0F0cnVsZScsXG4gICAgICAgIHJldmVyc2U6IHRydWUsXG4gICAgICAgIGVudGVyOiBwcm9jZXNzQXRydWxlXG4gICAgfSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gcmVqb2luQXRydWxlO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///25248\n")},92984:(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval("\n\nconst cssTree = __webpack_require__(22694);\nconst utils = __webpack_require__(66804);\n\nfunction processRule(node, item, list) {\n    const selectors = node.prelude.children;\n    const declarations = node.block.children;\n\n    list.prevUntil(item.prev, function(prev) {\n        // skip non-ruleset node if safe\n        if (prev.type !== 'Rule') {\n            return utils.unsafeToSkipNode.call(selectors, prev);\n        }\n\n        const prevSelectors = prev.prelude.children;\n        const prevDeclarations = prev.block.children;\n\n        // try to join rulesets with equal pseudo signature\n        if (node.pseudoSignature === prev.pseudoSignature) {\n            // try to join by selectors\n            if (utils.isEqualSelectors(prevSelectors, selectors)) {\n                prevDeclarations.appendList(declarations);\n                list.remove(item);\n                return true;\n            }\n\n            // try to join by declarations\n            if (utils.isEqualDeclarations(declarations, prevDeclarations)) {\n                utils.addSelectors(prevSelectors, selectors);\n                list.remove(item);\n                return true;\n            }\n        }\n\n        // go to prev ruleset if has no selector similarities\n        return utils.hasSimilarSelectors(selectors, prevSelectors);\n    });\n}\n\n// NOTE: direction should be left to right, since rulesets merge to left\n// ruleset. When direction right to left unmerged rulesets may prevent lookup\n// TODO: remove initial merge\nfunction initialMergeRule(ast) {\n    cssTree.walk(ast, {\n        visit: 'Rule',\n        enter: processRule\n    });\n}\n\nmodule.exports = initialMergeRule;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOTI5ODQuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsZ0JBQWdCLG1CQUFPLENBQUMsS0FBVTtBQUNsQyxjQUFjLG1CQUFPLENBQUMsS0FBYTs7QUFFbkM7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7O0FBRUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ibG9ja2JpdGUvLi9ub2RlX21vZHVsZXMvY3Nzby9janMvcmVzdHJ1Y3R1cmUvMi1pbml0aWFsTWVyZ2VSdWxlc2V0LmNqcz82ZTBmIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuY29uc3QgY3NzVHJlZSA9IHJlcXVpcmUoJ2Nzcy10cmVlJyk7XG5jb25zdCB1dGlscyA9IHJlcXVpcmUoJy4vdXRpbHMuY2pzJyk7XG5cbmZ1bmN0aW9uIHByb2Nlc3NSdWxlKG5vZGUsIGl0ZW0sIGxpc3QpIHtcbiAgICBjb25zdCBzZWxlY3RvcnMgPSBub2RlLnByZWx1ZGUuY2hpbGRyZW47XG4gICAgY29uc3QgZGVjbGFyYXRpb25zID0gbm9kZS5ibG9jay5jaGlsZHJlbjtcblxuICAgIGxpc3QucHJldlVudGlsKGl0ZW0ucHJldiwgZnVuY3Rpb24ocHJldikge1xuICAgICAgICAvLyBza2lwIG5vbi1ydWxlc2V0IG5vZGUgaWYgc2FmZVxuICAgICAgICBpZiAocHJldi50eXBlICE9PSAnUnVsZScpIHtcbiAgICAgICAgICAgIHJldHVybiB1dGlscy51bnNhZmVUb1NraXBOb2RlLmNhbGwoc2VsZWN0b3JzLCBwcmV2KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IHByZXZTZWxlY3RvcnMgPSBwcmV2LnByZWx1ZGUuY2hpbGRyZW47XG4gICAgICAgIGNvbnN0IHByZXZEZWNsYXJhdGlvbnMgPSBwcmV2LmJsb2NrLmNoaWxkcmVuO1xuXG4gICAgICAgIC8vIHRyeSB0byBqb2luIHJ1bGVzZXRzIHdpdGggZXF1YWwgcHNldWRvIHNpZ25hdHVyZVxuICAgICAgICBpZiAobm9kZS5wc2V1ZG9TaWduYXR1cmUgPT09IHByZXYucHNldWRvU2lnbmF0dXJlKSB7XG4gICAgICAgICAgICAvLyB0cnkgdG8gam9pbiBieSBzZWxlY3RvcnNcbiAgICAgICAgICAgIGlmICh1dGlscy5pc0VxdWFsU2VsZWN0b3JzKHByZXZTZWxlY3RvcnMsIHNlbGVjdG9ycykpIHtcbiAgICAgICAgICAgICAgICBwcmV2RGVjbGFyYXRpb25zLmFwcGVuZExpc3QoZGVjbGFyYXRpb25zKTtcbiAgICAgICAgICAgICAgICBsaXN0LnJlbW92ZShpdGVtKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gdHJ5IHRvIGpvaW4gYnkgZGVjbGFyYXRpb25zXG4gICAgICAgICAgICBpZiAodXRpbHMuaXNFcXVhbERlY2xhcmF0aW9ucyhkZWNsYXJhdGlvbnMsIHByZXZEZWNsYXJhdGlvbnMpKSB7XG4gICAgICAgICAgICAgICAgdXRpbHMuYWRkU2VsZWN0b3JzKHByZXZTZWxlY3RvcnMsIHNlbGVjdG9ycyk7XG4gICAgICAgICAgICAgICAgbGlzdC5yZW1vdmUoaXRlbSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyBnbyB0byBwcmV2IHJ1bGVzZXQgaWYgaGFzIG5vIHNlbGVjdG9yIHNpbWlsYXJpdGllc1xuICAgICAgICByZXR1cm4gdXRpbHMuaGFzU2ltaWxhclNlbGVjdG9ycyhzZWxlY3RvcnMsIHByZXZTZWxlY3RvcnMpO1xuICAgIH0pO1xufVxuXG4vLyBOT1RFOiBkaXJlY3Rpb24gc2hvdWxkIGJlIGxlZnQgdG8gcmlnaHQsIHNpbmNlIHJ1bGVzZXRzIG1lcmdlIHRvIGxlZnRcbi8vIHJ1bGVzZXQuIFdoZW4gZGlyZWN0aW9uIHJpZ2h0IHRvIGxlZnQgdW5tZXJnZWQgcnVsZXNldHMgbWF5IHByZXZlbnQgbG9va3VwXG4vLyBUT0RPOiByZW1vdmUgaW5pdGlhbCBtZXJnZVxuZnVuY3Rpb24gaW5pdGlhbE1lcmdlUnVsZShhc3QpIHtcbiAgICBjc3NUcmVlLndhbGsoYXN0LCB7XG4gICAgICAgIHZpc2l0OiAnUnVsZScsXG4gICAgICAgIGVudGVyOiBwcm9jZXNzUnVsZVxuICAgIH0pO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGluaXRpYWxNZXJnZVJ1bGU7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///92984\n")},9691:(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval("\n\nconst cssTree = __webpack_require__(22694);\n\nfunction processRule(node, item, list) {\n    const selectors = node.prelude.children;\n\n    // generate new rule sets:\n    // .a, .b { color: red; }\n    // ->\n    // .a { color: red; }\n    // .b { color: red; }\n\n    // while there are more than 1 simple selector split for rulesets\n    while (selectors.head !== selectors.tail) {\n        const newSelectors = new cssTree.List();\n\n        newSelectors.insert(selectors.remove(selectors.head));\n\n        list.insert(list.createItem({\n            type: 'Rule',\n            loc: node.loc,\n            prelude: {\n                type: 'SelectorList',\n                loc: node.prelude.loc,\n                children: newSelectors\n            },\n            block: {\n                type: 'Block',\n                loc: node.block.loc,\n                children: node.block.children.copy()\n            },\n            pseudoSignature: node.pseudoSignature\n        }), item);\n    }\n}\n\nfunction disjoinRule(ast) {\n    cssTree.walk(ast, {\n        visit: 'Rule',\n        reverse: true,\n        enter: processRule\n    });\n}\n\nmodule.exports = disjoinRule;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOTY5MS5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYixnQkFBZ0IsbUJBQU8sQ0FBQyxLQUFVOztBQUVsQztBQUNBOztBQUVBO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0EsWUFBWTtBQUNaLFlBQVk7O0FBRVo7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0EsU0FBUztBQUNUO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDs7QUFFQSIsInNvdXJjZXMiOlsid2VicGFjazovL2Jsb2NrYml0ZS8uL25vZGVfbW9kdWxlcy9jc3NvL2Nqcy9yZXN0cnVjdHVyZS8zLWRpc2pvaW5SdWxlc2V0LmNqcz9mNzgwIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuY29uc3QgY3NzVHJlZSA9IHJlcXVpcmUoJ2Nzcy10cmVlJyk7XG5cbmZ1bmN0aW9uIHByb2Nlc3NSdWxlKG5vZGUsIGl0ZW0sIGxpc3QpIHtcbiAgICBjb25zdCBzZWxlY3RvcnMgPSBub2RlLnByZWx1ZGUuY2hpbGRyZW47XG5cbiAgICAvLyBnZW5lcmF0ZSBuZXcgcnVsZSBzZXRzOlxuICAgIC8vIC5hLCAuYiB7IGNvbG9yOiByZWQ7IH1cbiAgICAvLyAtPlxuICAgIC8vIC5hIHsgY29sb3I6IHJlZDsgfVxuICAgIC8vIC5iIHsgY29sb3I6IHJlZDsgfVxuXG4gICAgLy8gd2hpbGUgdGhlcmUgYXJlIG1vcmUgdGhhbiAxIHNpbXBsZSBzZWxlY3RvciBzcGxpdCBmb3IgcnVsZXNldHNcbiAgICB3aGlsZSAoc2VsZWN0b3JzLmhlYWQgIT09IHNlbGVjdG9ycy50YWlsKSB7XG4gICAgICAgIGNvbnN0IG5ld1NlbGVjdG9ycyA9IG5ldyBjc3NUcmVlLkxpc3QoKTtcblxuICAgICAgICBuZXdTZWxlY3RvcnMuaW5zZXJ0KHNlbGVjdG9ycy5yZW1vdmUoc2VsZWN0b3JzLmhlYWQpKTtcblxuICAgICAgICBsaXN0Lmluc2VydChsaXN0LmNyZWF0ZUl0ZW0oe1xuICAgICAgICAgICAgdHlwZTogJ1J1bGUnLFxuICAgICAgICAgICAgbG9jOiBub2RlLmxvYyxcbiAgICAgICAgICAgIHByZWx1ZGU6IHtcbiAgICAgICAgICAgICAgICB0eXBlOiAnU2VsZWN0b3JMaXN0JyxcbiAgICAgICAgICAgICAgICBsb2M6IG5vZGUucHJlbHVkZS5sb2MsXG4gICAgICAgICAgICAgICAgY2hpbGRyZW46IG5ld1NlbGVjdG9yc1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGJsb2NrOiB7XG4gICAgICAgICAgICAgICAgdHlwZTogJ0Jsb2NrJyxcbiAgICAgICAgICAgICAgICBsb2M6IG5vZGUuYmxvY2subG9jLFxuICAgICAgICAgICAgICAgIGNoaWxkcmVuOiBub2RlLmJsb2NrLmNoaWxkcmVuLmNvcHkoKVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHBzZXVkb1NpZ25hdHVyZTogbm9kZS5wc2V1ZG9TaWduYXR1cmVcbiAgICAgICAgfSksIGl0ZW0pO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gZGlzam9pblJ1bGUoYXN0KSB7XG4gICAgY3NzVHJlZS53YWxrKGFzdCwge1xuICAgICAgICB2aXNpdDogJ1J1bGUnLFxuICAgICAgICByZXZlcnNlOiB0cnVlLFxuICAgICAgICBlbnRlcjogcHJvY2Vzc1J1bGVcbiAgICB9KTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBkaXNqb2luUnVsZTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///9691\n")},33409:(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval("\n\nconst cssTree = __webpack_require__(22694);\n\nconst REPLACE = 1;\nconst REMOVE = 2;\nconst TOP = 0;\nconst RIGHT = 1;\nconst BOTTOM = 2;\nconst LEFT = 3;\nconst SIDES = ['top', 'right', 'bottom', 'left'];\nconst SIDE = {\n    'margin-top': 'top',\n    'margin-right': 'right',\n    'margin-bottom': 'bottom',\n    'margin-left': 'left',\n\n    'padding-top': 'top',\n    'padding-right': 'right',\n    'padding-bottom': 'bottom',\n    'padding-left': 'left',\n\n    'border-top-color': 'top',\n    'border-right-color': 'right',\n    'border-bottom-color': 'bottom',\n    'border-left-color': 'left',\n    'border-top-width': 'top',\n    'border-right-width': 'right',\n    'border-bottom-width': 'bottom',\n    'border-left-width': 'left',\n    'border-top-style': 'top',\n    'border-right-style': 'right',\n    'border-bottom-style': 'bottom',\n    'border-left-style': 'left'\n};\nconst MAIN_PROPERTY = {\n    'margin': 'margin',\n    'margin-top': 'margin',\n    'margin-right': 'margin',\n    'margin-bottom': 'margin',\n    'margin-left': 'margin',\n\n    'padding': 'padding',\n    'padding-top': 'padding',\n    'padding-right': 'padding',\n    'padding-bottom': 'padding',\n    'padding-left': 'padding',\n\n    'border-color': 'border-color',\n    'border-top-color': 'border-color',\n    'border-right-color': 'border-color',\n    'border-bottom-color': 'border-color',\n    'border-left-color': 'border-color',\n    'border-width': 'border-width',\n    'border-top-width': 'border-width',\n    'border-right-width': 'border-width',\n    'border-bottom-width': 'border-width',\n    'border-left-width': 'border-width',\n    'border-style': 'border-style',\n    'border-top-style': 'border-style',\n    'border-right-style': 'border-style',\n    'border-bottom-style': 'border-style',\n    'border-left-style': 'border-style'\n};\n\nclass TRBL {\n    constructor(name) {\n        this.name = name;\n        this.loc = null;\n        this.iehack = undefined;\n        this.sides = {\n            'top': null,\n            'right': null,\n            'bottom': null,\n            'left': null\n        };\n    }\n\n    getValueSequence(declaration, count) {\n        const values = [];\n        let iehack = '';\n        const hasBadValues = declaration.value.type !== 'Value' || declaration.value.children.some(function(child) {\n            let special = false;\n\n            switch (child.type) {\n                case 'Identifier':\n                    switch (child.name) {\n                        case '\\\\0':\n                        case '\\\\9':\n                            iehack = child.name;\n                            return;\n\n                        case 'inherit':\n                        case 'initial':\n                        case 'unset':\n                        case 'revert':\n                            special = child.name;\n                            break;\n                    }\n                    break;\n\n                case 'Dimension':\n                    switch (child.unit) {\n                        // is not supported until IE11\n                        case 'rem':\n\n                        // v* units is too buggy across browsers and better\n                        // don't merge values with those units\n                        case 'vw':\n                        case 'vh':\n                        case 'vmin':\n                        case 'vmax':\n                        case 'vm': // IE9 supporting \"vm\" instead of \"vmin\".\n                            special = child.unit;\n                            break;\n                    }\n                    break;\n\n                case 'Hash': // color\n                case 'Number':\n                case 'Percentage':\n                    break;\n\n                case 'Function':\n                    if (child.name === 'var') {\n                        return true;\n                    }\n\n                    special = child.name;\n                    break;\n\n                default:\n                    return true;  // bad value\n            }\n\n            values.push({\n                node: child,\n                special,\n                important: declaration.important\n            });\n        });\n\n        if (hasBadValues || values.length > count) {\n            return false;\n        }\n\n        if (typeof this.iehack === 'string' && this.iehack !== iehack) {\n            return false;\n        }\n\n        this.iehack = iehack; // move outside\n\n        return values;\n    }\n\n    canOverride(side, value) {\n        const currentValue = this.sides[side];\n\n        return !currentValue || (value.important && !currentValue.important);\n    }\n\n    add(name, declaration) {\n        function attemptToAdd() {\n            const sides = this.sides;\n            const side = SIDE[name];\n\n            if (side) {\n                if (side in sides === false) {\n                    return false;\n                }\n\n                const values = this.getValueSequence(declaration, 1);\n\n                if (!values || !values.length) {\n                    return false;\n                }\n\n                // can mix only if specials are equal\n                for (const key in sides) {\n                    if (sides[key] !== null && sides[key].special !== values[0].special) {\n                        return false;\n                    }\n                }\n\n                if (!this.canOverride(side, values[0])) {\n                    return true;\n                }\n\n                sides[side] = values[0];\n\n                return true;\n            } else if (name === this.name) {\n                const values = this.getValueSequence(declaration, 4);\n\n                if (!values || !values.length) {\n                    return false;\n                }\n\n                switch (values.length) {\n                    case 1:\n                        values[RIGHT] = values[TOP];\n                        values[BOTTOM] = values[TOP];\n                        values[LEFT] = values[TOP];\n                        break;\n\n                    case 2:\n                        values[BOTTOM] = values[TOP];\n                        values[LEFT] = values[RIGHT];\n                        break;\n\n                    case 3:\n                        values[LEFT] = values[RIGHT];\n                        break;\n                }\n\n                // can mix only if specials are equal\n                for (let i = 0; i < 4; i++) {\n                    for (const key in sides) {\n                        if (sides[key] !== null && sides[key].special !== values[i].special) {\n                            return false;\n                        }\n                    }\n                }\n\n                for (let i = 0; i < 4; i++) {\n                    if (this.canOverride(SIDES[i], values[i])) {\n                        sides[SIDES[i]] = values[i];\n                    }\n                }\n\n                return true;\n            }\n        }\n\n        if (!attemptToAdd.call(this)) {\n            return false;\n        }\n\n        // TODO: use it when we can refer to several points in source\n        // if (this.loc) {\n        //     this.loc = {\n        //         primary: this.loc,\n        //         merged: declaration.loc\n        //     };\n        // } else {\n        //     this.loc = declaration.loc;\n        // }\n        if (!this.loc) {\n            this.loc = declaration.loc;\n        }\n\n        return true;\n    }\n\n    isOkToMinimize() {\n        const top = this.sides.top;\n        const right = this.sides.right;\n        const bottom = this.sides.bottom;\n        const left = this.sides.left;\n\n        if (top && right && bottom && left) {\n            const important =\n                top.important +\n                right.important +\n                bottom.important +\n                left.important;\n\n            return important === 0 || important === 4;\n        }\n\n        return false;\n    }\n\n    getValue() {\n        const result = new cssTree.List();\n        const sides = this.sides;\n        const values = [\n            sides.top,\n            sides.right,\n            sides.bottom,\n            sides.left\n        ];\n        const stringValues = [\n            cssTree.generate(sides.top.node),\n            cssTree.generate(sides.right.node),\n            cssTree.generate(sides.bottom.node),\n            cssTree.generate(sides.left.node)\n        ];\n\n        if (stringValues[LEFT] === stringValues[RIGHT]) {\n            values.pop();\n            if (stringValues[BOTTOM] === stringValues[TOP]) {\n                values.pop();\n                if (stringValues[RIGHT] === stringValues[TOP]) {\n                    values.pop();\n                }\n            }\n        }\n\n        for (let i = 0; i < values.length; i++) {\n            result.appendData(values[i].node);\n        }\n\n        if (this.iehack) {\n            result.appendData({\n                type: 'Identifier',\n                loc: null,\n                name: this.iehack\n            });\n        }\n\n        return {\n            type: 'Value',\n            loc: null,\n            children: result\n        };\n    }\n\n    getDeclaration() {\n        return {\n            type: 'Declaration',\n            loc: this.loc,\n            important: this.sides.top.important,\n            property: this.name,\n            value: this.getValue()\n        };\n    }\n}\n\nfunction processRule(rule, shorts, shortDeclarations, lastShortSelector) {\n    const declarations = rule.block.children;\n    const selector = rule.prelude.children.first.id;\n\n    rule.block.children.forEachRight(function(declaration, item) {\n        const property = declaration.property;\n\n        if (!MAIN_PROPERTY.hasOwnProperty(property)) {\n            return;\n        }\n\n        const key = MAIN_PROPERTY[property];\n        let shorthand;\n        let operation;\n\n        if (!lastShortSelector || selector === lastShortSelector) {\n            if (key in shorts) {\n                operation = REMOVE;\n                shorthand = shorts[key];\n            }\n        }\n\n        if (!shorthand || !shorthand.add(property, declaration)) {\n            operation = REPLACE;\n            shorthand = new TRBL(key);\n\n            // if can't parse value ignore it and break shorthand children\n            if (!shorthand.add(property, declaration)) {\n                lastShortSelector = null;\n                return;\n            }\n        }\n\n        shorts[key] = shorthand;\n        shortDeclarations.push({\n            operation,\n            block: declarations,\n            item,\n            shorthand\n        });\n\n        lastShortSelector = selector;\n    });\n\n    return lastShortSelector;\n}\n\nfunction processShorthands(shortDeclarations, markDeclaration) {\n    shortDeclarations.forEach(function(item) {\n        const shorthand = item.shorthand;\n\n        if (!shorthand.isOkToMinimize()) {\n            return;\n        }\n\n        if (item.operation === REPLACE) {\n            item.item.data = markDeclaration(shorthand.getDeclaration());\n        } else {\n            item.block.remove(item.item);\n        }\n    });\n}\n\nfunction restructBlock(ast, indexer) {\n    const stylesheetMap = {};\n    const shortDeclarations = [];\n\n    cssTree.walk(ast, {\n        visit: 'Rule',\n        reverse: true,\n        enter(node) {\n            const stylesheet = this.block || this.stylesheet;\n            const ruleId = (node.pseudoSignature || '') + '|' + node.prelude.children.first.id;\n            let ruleMap;\n            let shorts;\n\n            if (!stylesheetMap.hasOwnProperty(stylesheet.id)) {\n                ruleMap = {\n                    lastShortSelector: null\n                };\n                stylesheetMap[stylesheet.id] = ruleMap;\n            } else {\n                ruleMap = stylesheetMap[stylesheet.id];\n            }\n\n            if (ruleMap.hasOwnProperty(ruleId)) {\n                shorts = ruleMap[ruleId];\n            } else {\n                shorts = {};\n                ruleMap[ruleId] = shorts;\n            }\n\n            ruleMap.lastShortSelector = processRule.call(this, node, shorts, shortDeclarations, ruleMap.lastShortSelector);\n        }\n    });\n\n    processShorthands(shortDeclarations, indexer.declaration);\n}\n\nmodule.exports = restructBlock;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///33409\n")},99445:(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval("\n\nconst cssTree = __webpack_require__(22694);\n\nlet fingerprintId = 1;\nconst dontRestructure = new Set([\n    'src' // https://github.com/afelix/csso/issues/50\n]);\n\nconst DONT_MIX_VALUE = {\n    // https://developer.mozilla.org/en-US/docs/Web/CSS/display#Browser_compatibility\n    'display': /table|ruby|flex|-(flex)?box$|grid|contents|run-in/i,\n    // https://developer.mozilla.org/en/docs/Web/CSS/text-align\n    'text-align': /^(start|end|match-parent|justify-all)$/i\n};\n\nconst SAFE_VALUES = {\n    cursor: [\n        'auto', 'crosshair', 'default', 'move', 'text', 'wait', 'help',\n        'n-resize', 'e-resize', 's-resize', 'w-resize',\n        'ne-resize', 'nw-resize', 'se-resize', 'sw-resize',\n        'pointer', 'progress', 'not-allowed', 'no-drop', 'vertical-text', 'all-scroll',\n        'col-resize', 'row-resize'\n    ],\n    overflow: [\n        'hidden', 'visible', 'scroll', 'auto'\n    ],\n    position: [\n        'static', 'relative', 'absolute', 'fixed'\n    ]\n};\n\nconst NEEDLESS_TABLE = {\n    'border-width': ['border'],\n    'border-style': ['border'],\n    'border-color': ['border'],\n    'border-top': ['border'],\n    'border-right': ['border'],\n    'border-bottom': ['border'],\n    'border-left': ['border'],\n    'border-top-width': ['border-top', 'border-width', 'border'],\n    'border-right-width': ['border-right', 'border-width', 'border'],\n    'border-bottom-width': ['border-bottom', 'border-width', 'border'],\n    'border-left-width': ['border-left', 'border-width', 'border'],\n    'border-top-style': ['border-top', 'border-style', 'border'],\n    'border-right-style': ['border-right', 'border-style', 'border'],\n    'border-bottom-style': ['border-bottom', 'border-style', 'border'],\n    'border-left-style': ['border-left', 'border-style', 'border'],\n    'border-top-color': ['border-top', 'border-color', 'border'],\n    'border-right-color': ['border-right', 'border-color', 'border'],\n    'border-bottom-color': ['border-bottom', 'border-color', 'border'],\n    'border-left-color': ['border-left', 'border-color', 'border'],\n    'margin-top': ['margin'],\n    'margin-right': ['margin'],\n    'margin-bottom': ['margin'],\n    'margin-left': ['margin'],\n    'padding-top': ['padding'],\n    'padding-right': ['padding'],\n    'padding-bottom': ['padding'],\n    'padding-left': ['padding'],\n    'font-style': ['font'],\n    'font-variant': ['font'],\n    'font-weight': ['font'],\n    'font-size': ['font'],\n    'font-family': ['font'],\n    'list-style-type': ['list-style'],\n    'list-style-position': ['list-style'],\n    'list-style-image': ['list-style']\n};\n\nfunction getPropertyFingerprint(propertyName, declaration, fingerprints) {\n    const realName = cssTree.property(propertyName).basename;\n\n    if (realName === 'background') {\n        return propertyName + ':' + cssTree.generate(declaration.value);\n    }\n\n    const declarationId = declaration.id;\n    let fingerprint = fingerprints[declarationId];\n\n    if (!fingerprint) {\n        switch (declaration.value.type) {\n            case 'Value':\n                const special = {};\n                let vendorId = '';\n                let iehack = '';\n                let raw = false;\n\n                declaration.value.children.forEach(function walk(node) {\n                    switch (node.type) {\n                        case 'Value':\n                        case 'Brackets':\n                        case 'Parentheses':\n                            node.children.forEach(walk);\n                            break;\n\n                        case 'Raw':\n                            raw = true;\n                            break;\n\n                        case 'Identifier': {\n                            const { name } = node;\n\n                            if (!vendorId) {\n                                vendorId = cssTree.keyword(name).vendor;\n                            }\n\n                            if (/\\\\[09]/.test(name)) {\n                                iehack = RegExp.lastMatch;\n                            }\n\n                            if (SAFE_VALUES.hasOwnProperty(realName)) {\n                                if (SAFE_VALUES[realName].indexOf(name) === -1) {\n                                    special[name] = true;\n                                }\n                            } else if (DONT_MIX_VALUE.hasOwnProperty(realName)) {\n                                if (DONT_MIX_VALUE[realName].test(name)) {\n                                    special[name] = true;\n                                }\n                            }\n\n                            break;\n                        }\n\n                        case 'Function': {\n                            let { name } = node;\n\n                            if (!vendorId) {\n                                vendorId = cssTree.keyword(name).vendor;\n                            }\n\n                            if (name === 'rect') {\n                                // there are 2 forms of rect:\n                                //   rect(<top>, <right>, <bottom>, <left>) - standart\n                                //   rect(<top> <right> <bottom> <left>) – backwards compatible syntax\n                                // only the same form values can be merged\n                                const hasComma = node.children.some((node) =>\n                                    node.type === 'Operator' && node.value === ','\n                                );\n\n                                if (!hasComma) {\n                                    name = 'rect-backward';\n                                }\n                            }\n\n                            special[name + '()'] = true;\n\n                            // check nested tokens too\n                            node.children.forEach(walk);\n\n                            break;\n                        }\n\n                        case 'Dimension': {\n                            const { unit } = node;\n\n                            if (/\\\\[09]/.test(unit)) {\n                                iehack = RegExp.lastMatch;\n                            }\n\n                            switch (unit) {\n                                // is not supported until IE11\n                                case 'rem':\n\n                                // v* units is too buggy across browsers and better\n                                // don't merge values with those units\n                                case 'vw':\n                                case 'vh':\n                                case 'vmin':\n                                case 'vmax':\n                                case 'vm': // IE9 supporting \"vm\" instead of \"vmin\".\n                                    special[unit] = true;\n                                    break;\n                            }\n\n                            break;\n                        }\n                    }\n                });\n\n                fingerprint = raw\n                    ? '!' + fingerprintId++\n                    : '!' + Object.keys(special).sort() + '|' + iehack + vendorId;\n                break;\n\n            case 'Raw':\n                fingerprint = '!' + declaration.value.value;\n                break;\n\n            default:\n                fingerprint = cssTree.generate(declaration.value);\n        }\n\n        fingerprints[declarationId] = fingerprint;\n    }\n\n    return propertyName + fingerprint;\n}\n\nfunction needless(props, declaration, fingerprints) {\n    const property = cssTree.property(declaration.property);\n\n    if (NEEDLESS_TABLE.hasOwnProperty(property.basename)) {\n        const table = NEEDLESS_TABLE[property.basename];\n\n        for (const entry of table) {\n            const ppre = getPropertyFingerprint(property.prefix + entry, declaration, fingerprints);\n            const prev = props.hasOwnProperty(ppre) ? props[ppre] : null;\n\n            if (prev && (!declaration.important || prev.item.data.important)) {\n                return prev;\n            }\n        }\n    }\n}\n\nfunction processRule(rule, item, list, props, fingerprints) {\n    const declarations = rule.block.children;\n\n    declarations.forEachRight(function(declaration, declarationItem) {\n        const { property } = declaration;\n        const fingerprint = getPropertyFingerprint(property, declaration, fingerprints);\n        const prev = props[fingerprint];\n\n        if (prev && !dontRestructure.has(property)) {\n            if (declaration.important && !prev.item.data.important) {\n                props[fingerprint] = {\n                    block: declarations,\n                    item: declarationItem\n                };\n\n                prev.block.remove(prev.item);\n\n                // TODO: use it when we can refer to several points in source\n                // declaration.loc = {\n                //     primary: declaration.loc,\n                //     merged: prev.item.data.loc\n                // };\n            } else {\n                declarations.remove(declarationItem);\n\n                // TODO: use it when we can refer to several points in source\n                // prev.item.data.loc = {\n                //     primary: prev.item.data.loc,\n                //     merged: declaration.loc\n                // };\n            }\n        } else {\n            const prev = needless(props, declaration, fingerprints);\n\n            if (prev) {\n                declarations.remove(declarationItem);\n\n                // TODO: use it when we can refer to several points in source\n                // prev.item.data.loc = {\n                //     primary: prev.item.data.loc,\n                //     merged: declaration.loc\n                // };\n            } else {\n                declaration.fingerprint = fingerprint;\n\n                props[fingerprint] = {\n                    block: declarations,\n                    item: declarationItem\n                };\n            }\n        }\n    });\n\n    if (declarations.isEmpty) {\n        list.remove(item);\n    }\n}\n\nfunction restructBlock(ast) {\n    const stylesheetMap = {};\n    const fingerprints = Object.create(null);\n\n    cssTree.walk(ast, {\n        visit: 'Rule',\n        reverse: true,\n        enter(node, item, list) {\n            const stylesheet = this.block || this.stylesheet;\n            const ruleId = (node.pseudoSignature || '') + '|' + node.prelude.children.first.id;\n            let ruleMap;\n            let props;\n\n            if (!stylesheetMap.hasOwnProperty(stylesheet.id)) {\n                ruleMap = {};\n                stylesheetMap[stylesheet.id] = ruleMap;\n            } else {\n                ruleMap = stylesheetMap[stylesheet.id];\n            }\n\n            if (ruleMap.hasOwnProperty(ruleId)) {\n                props = ruleMap[ruleId];\n            } else {\n                props = {};\n                ruleMap[ruleId] = props;\n            }\n\n            processRule.call(this, node, item, list, props, fingerprints);\n        }\n    });\n}\n\nmodule.exports = restructBlock;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOTk0NDUuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsZ0JBQWdCLG1CQUFPLENBQUMsS0FBVTs7QUFFbEM7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLG9DQUFvQyxPQUFPOztBQUUzQztBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOEJBQThCO0FBQzlCO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQSxrQ0FBa0MsT0FBTzs7QUFFekM7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0Esb0NBQW9DLE9BQU87O0FBRTNDO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCOztBQUVqQjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0EsZ0JBQWdCLFdBQVc7QUFDM0I7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWM7QUFDZDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYztBQUNkOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLGNBQWM7QUFDZDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLEtBQUs7QUFDTDs7QUFFQSIsInNvdXJjZXMiOlsid2VicGFjazovL2Jsb2NrYml0ZS8uL25vZGVfbW9kdWxlcy9jc3NvL2Nqcy9yZXN0cnVjdHVyZS82LXJlc3RydWN0QmxvY2suY2pzP2RmMmQiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBjc3NUcmVlID0gcmVxdWlyZSgnY3NzLXRyZWUnKTtcblxubGV0IGZpbmdlcnByaW50SWQgPSAxO1xuY29uc3QgZG9udFJlc3RydWN0dXJlID0gbmV3IFNldChbXG4gICAgJ3NyYycgLy8gaHR0cHM6Ly9naXRodWIuY29tL2FmZWxpeC9jc3NvL2lzc3Vlcy81MFxuXSk7XG5cbmNvbnN0IERPTlRfTUlYX1ZBTFVFID0ge1xuICAgIC8vIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0NTUy9kaXNwbGF5I0Jyb3dzZXJfY29tcGF0aWJpbGl0eVxuICAgICdkaXNwbGF5JzogL3RhYmxlfHJ1Ynl8ZmxleHwtKGZsZXgpP2JveCR8Z3JpZHxjb250ZW50c3xydW4taW4vaSxcbiAgICAvLyBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi9kb2NzL1dlYi9DU1MvdGV4dC1hbGlnblxuICAgICd0ZXh0LWFsaWduJzogL14oc3RhcnR8ZW5kfG1hdGNoLXBhcmVudHxqdXN0aWZ5LWFsbCkkL2lcbn07XG5cbmNvbnN0IFNBRkVfVkFMVUVTID0ge1xuICAgIGN1cnNvcjogW1xuICAgICAgICAnYXV0bycsICdjcm9zc2hhaXInLCAnZGVmYXVsdCcsICdtb3ZlJywgJ3RleHQnLCAnd2FpdCcsICdoZWxwJyxcbiAgICAgICAgJ24tcmVzaXplJywgJ2UtcmVzaXplJywgJ3MtcmVzaXplJywgJ3ctcmVzaXplJyxcbiAgICAgICAgJ25lLXJlc2l6ZScsICdudy1yZXNpemUnLCAnc2UtcmVzaXplJywgJ3N3LXJlc2l6ZScsXG4gICAgICAgICdwb2ludGVyJywgJ3Byb2dyZXNzJywgJ25vdC1hbGxvd2VkJywgJ25vLWRyb3AnLCAndmVydGljYWwtdGV4dCcsICdhbGwtc2Nyb2xsJyxcbiAgICAgICAgJ2NvbC1yZXNpemUnLCAncm93LXJlc2l6ZSdcbiAgICBdLFxuICAgIG92ZXJmbG93OiBbXG4gICAgICAgICdoaWRkZW4nLCAndmlzaWJsZScsICdzY3JvbGwnLCAnYXV0bydcbiAgICBdLFxuICAgIHBvc2l0aW9uOiBbXG4gICAgICAgICdzdGF0aWMnLCAncmVsYXRpdmUnLCAnYWJzb2x1dGUnLCAnZml4ZWQnXG4gICAgXVxufTtcblxuY29uc3QgTkVFRExFU1NfVEFCTEUgPSB7XG4gICAgJ2JvcmRlci13aWR0aCc6IFsnYm9yZGVyJ10sXG4gICAgJ2JvcmRlci1zdHlsZSc6IFsnYm9yZGVyJ10sXG4gICAgJ2JvcmRlci1jb2xvcic6IFsnYm9yZGVyJ10sXG4gICAgJ2JvcmRlci10b3AnOiBbJ2JvcmRlciddLFxuICAgICdib3JkZXItcmlnaHQnOiBbJ2JvcmRlciddLFxuICAgICdib3JkZXItYm90dG9tJzogWydib3JkZXInXSxcbiAgICAnYm9yZGVyLWxlZnQnOiBbJ2JvcmRlciddLFxuICAgICdib3JkZXItdG9wLXdpZHRoJzogWydib3JkZXItdG9wJywgJ2JvcmRlci13aWR0aCcsICdib3JkZXInXSxcbiAgICAnYm9yZGVyLXJpZ2h0LXdpZHRoJzogWydib3JkZXItcmlnaHQnLCAnYm9yZGVyLXdpZHRoJywgJ2JvcmRlciddLFxuICAgICdib3JkZXItYm90dG9tLXdpZHRoJzogWydib3JkZXItYm90dG9tJywgJ2JvcmRlci13aWR0aCcsICdib3JkZXInXSxcbiAgICAnYm9yZGVyLWxlZnQtd2lkdGgnOiBbJ2JvcmRlci1sZWZ0JywgJ2JvcmRlci13aWR0aCcsICdib3JkZXInXSxcbiAgICAnYm9yZGVyLXRvcC1zdHlsZSc6IFsnYm9yZGVyLXRvcCcsICdib3JkZXItc3R5bGUnLCAnYm9yZGVyJ10sXG4gICAgJ2JvcmRlci1yaWdodC1zdHlsZSc6IFsnYm9yZGVyLXJpZ2h0JywgJ2JvcmRlci1zdHlsZScsICdib3JkZXInXSxcbiAgICAnYm9yZGVyLWJvdHRvbS1zdHlsZSc6IFsnYm9yZGVyLWJvdHRvbScsICdib3JkZXItc3R5bGUnLCAnYm9yZGVyJ10sXG4gICAgJ2JvcmRlci1sZWZ0LXN0eWxlJzogWydib3JkZXItbGVmdCcsICdib3JkZXItc3R5bGUnLCAnYm9yZGVyJ10sXG4gICAgJ2JvcmRlci10b3AtY29sb3InOiBbJ2JvcmRlci10b3AnLCAnYm9yZGVyLWNvbG9yJywgJ2JvcmRlciddLFxuICAgICdib3JkZXItcmlnaHQtY29sb3InOiBbJ2JvcmRlci1yaWdodCcsICdib3JkZXItY29sb3InLCAnYm9yZGVyJ10sXG4gICAgJ2JvcmRlci1ib3R0b20tY29sb3InOiBbJ2JvcmRlci1ib3R0b20nLCAnYm9yZGVyLWNvbG9yJywgJ2JvcmRlciddLFxuICAgICdib3JkZXItbGVmdC1jb2xvcic6IFsnYm9yZGVyLWxlZnQnLCAnYm9yZGVyLWNvbG9yJywgJ2JvcmRlciddLFxuICAgICdtYXJnaW4tdG9wJzogWydtYXJnaW4nXSxcbiAgICAnbWFyZ2luLXJpZ2h0JzogWydtYXJnaW4nXSxcbiAgICAnbWFyZ2luLWJvdHRvbSc6IFsnbWFyZ2luJ10sXG4gICAgJ21hcmdpbi1sZWZ0JzogWydtYXJnaW4nXSxcbiAgICAncGFkZGluZy10b3AnOiBbJ3BhZGRpbmcnXSxcbiAgICAncGFkZGluZy1yaWdodCc6IFsncGFkZGluZyddLFxuICAgICdwYWRkaW5nLWJvdHRvbSc6IFsncGFkZGluZyddLFxuICAgICdwYWRkaW5nLWxlZnQnOiBbJ3BhZGRpbmcnXSxcbiAgICAnZm9udC1zdHlsZSc6IFsnZm9udCddLFxuICAgICdmb250LXZhcmlhbnQnOiBbJ2ZvbnQnXSxcbiAgICAnZm9udC13ZWlnaHQnOiBbJ2ZvbnQnXSxcbiAgICAnZm9udC1zaXplJzogWydmb250J10sXG4gICAgJ2ZvbnQtZmFtaWx5JzogWydmb250J10sXG4gICAgJ2xpc3Qtc3R5bGUtdHlwZSc6IFsnbGlzdC1zdHlsZSddLFxuICAgICdsaXN0LXN0eWxlLXBvc2l0aW9uJzogWydsaXN0LXN0eWxlJ10sXG4gICAgJ2xpc3Qtc3R5bGUtaW1hZ2UnOiBbJ2xpc3Qtc3R5bGUnXVxufTtcblxuZnVuY3Rpb24gZ2V0UHJvcGVydHlGaW5nZXJwcmludChwcm9wZXJ0eU5hbWUsIGRlY2xhcmF0aW9uLCBmaW5nZXJwcmludHMpIHtcbiAgICBjb25zdCByZWFsTmFtZSA9IGNzc1RyZWUucHJvcGVydHkocHJvcGVydHlOYW1lKS5iYXNlbmFtZTtcblxuICAgIGlmIChyZWFsTmFtZSA9PT0gJ2JhY2tncm91bmQnKSB7XG4gICAgICAgIHJldHVybiBwcm9wZXJ0eU5hbWUgKyAnOicgKyBjc3NUcmVlLmdlbmVyYXRlKGRlY2xhcmF0aW9uLnZhbHVlKTtcbiAgICB9XG5cbiAgICBjb25zdCBkZWNsYXJhdGlvbklkID0gZGVjbGFyYXRpb24uaWQ7XG4gICAgbGV0IGZpbmdlcnByaW50ID0gZmluZ2VycHJpbnRzW2RlY2xhcmF0aW9uSWRdO1xuXG4gICAgaWYgKCFmaW5nZXJwcmludCkge1xuICAgICAgICBzd2l0Y2ggKGRlY2xhcmF0aW9uLnZhbHVlLnR5cGUpIHtcbiAgICAgICAgICAgIGNhc2UgJ1ZhbHVlJzpcbiAgICAgICAgICAgICAgICBjb25zdCBzcGVjaWFsID0ge307XG4gICAgICAgICAgICAgICAgbGV0IHZlbmRvcklkID0gJyc7XG4gICAgICAgICAgICAgICAgbGV0IGllaGFjayA9ICcnO1xuICAgICAgICAgICAgICAgIGxldCByYXcgPSBmYWxzZTtcblxuICAgICAgICAgICAgICAgIGRlY2xhcmF0aW9uLnZhbHVlLmNoaWxkcmVuLmZvckVhY2goZnVuY3Rpb24gd2Fsayhub2RlKSB7XG4gICAgICAgICAgICAgICAgICAgIHN3aXRjaCAobm9kZS50eXBlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdWYWx1ZSc6XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdCcmFja2V0cyc6XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdQYXJlbnRoZXNlcyc6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbm9kZS5jaGlsZHJlbi5mb3JFYWNoKHdhbGspO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdSYXcnOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJhdyA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ0lkZW50aWZpZXInOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgeyBuYW1lIH0gPSBub2RlO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCF2ZW5kb3JJZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2ZW5kb3JJZCA9IGNzc1RyZWUua2V5d29yZChuYW1lKS52ZW5kb3I7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKC9cXFxcWzA5XS8udGVzdChuYW1lKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZWhhY2sgPSBSZWdFeHAubGFzdE1hdGNoO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChTQUZFX1ZBTFVFUy5oYXNPd25Qcm9wZXJ0eShyZWFsTmFtZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKFNBRkVfVkFMVUVTW3JlYWxOYW1lXS5pbmRleE9mKG5hbWUpID09PSAtMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3BlY2lhbFtuYW1lXSA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKERPTlRfTUlYX1ZBTFVFLmhhc093blByb3BlcnR5KHJlYWxOYW1lKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoRE9OVF9NSVhfVkFMVUVbcmVhbE5hbWVdLnRlc3QobmFtZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNwZWNpYWxbbmFtZV0gPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ0Z1bmN0aW9uJzoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCB7IG5hbWUgfSA9IG5vZGU7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXZlbmRvcklkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZlbmRvcklkID0gY3NzVHJlZS5rZXl3b3JkKG5hbWUpLnZlbmRvcjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobmFtZSA9PT0gJ3JlY3QnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHRoZXJlIGFyZSAyIGZvcm1zIG9mIHJlY3Q6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vICAgcmVjdCg8dG9wPiwgPHJpZ2h0PiwgPGJvdHRvbT4sIDxsZWZ0PikgLSBzdGFuZGFydFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyAgIHJlY3QoPHRvcD4gPHJpZ2h0PiA8Ym90dG9tPiA8bGVmdD4pIOKAkyBiYWNrd2FyZHMgY29tcGF0aWJsZSBzeW50YXhcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gb25seSB0aGUgc2FtZSBmb3JtIHZhbHVlcyBjYW4gYmUgbWVyZ2VkXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGhhc0NvbW1hID0gbm9kZS5jaGlsZHJlbi5zb21lKChub2RlKSA9PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbm9kZS50eXBlID09PSAnT3BlcmF0b3InICYmIG5vZGUudmFsdWUgPT09ICcsJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghaGFzQ29tbWEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWUgPSAncmVjdC1iYWNrd2FyZCc7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzcGVjaWFsW25hbWUgKyAnKCknXSA9IHRydWU7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBjaGVjayBuZXN0ZWQgdG9rZW5zIHRvb1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5vZGUuY2hpbGRyZW4uZm9yRWFjaCh3YWxrKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdEaW1lbnNpb24nOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgeyB1bml0IH0gPSBub2RlO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKC9cXFxcWzA5XS8udGVzdCh1bml0KSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZWhhY2sgPSBSZWdFeHAubGFzdE1hdGNoO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN3aXRjaCAodW5pdCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBpcyBub3Qgc3VwcG9ydGVkIHVudGlsIElFMTFcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAncmVtJzpcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyB2KiB1bml0cyBpcyB0b28gYnVnZ3kgYWNyb3NzIGJyb3dzZXJzIGFuZCBiZXR0ZXJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gZG9uJ3QgbWVyZ2UgdmFsdWVzIHdpdGggdGhvc2UgdW5pdHNcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAndncnOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlICd2aCc6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ3ZtaW4nOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlICd2bWF4JzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAndm0nOiAvLyBJRTkgc3VwcG9ydGluZyBcInZtXCIgaW5zdGVhZCBvZiBcInZtaW5cIi5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNwZWNpYWxbdW5pdF0gPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIGZpbmdlcnByaW50ID0gcmF3XG4gICAgICAgICAgICAgICAgICAgID8gJyEnICsgZmluZ2VycHJpbnRJZCsrXG4gICAgICAgICAgICAgICAgICAgIDogJyEnICsgT2JqZWN0LmtleXMoc3BlY2lhbCkuc29ydCgpICsgJ3wnICsgaWVoYWNrICsgdmVuZG9ySWQ7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgIGNhc2UgJ1Jhdyc6XG4gICAgICAgICAgICAgICAgZmluZ2VycHJpbnQgPSAnIScgKyBkZWNsYXJhdGlvbi52YWx1ZS52YWx1ZTtcbiAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICBmaW5nZXJwcmludCA9IGNzc1RyZWUuZ2VuZXJhdGUoZGVjbGFyYXRpb24udmFsdWUpO1xuICAgICAgICB9XG5cbiAgICAgICAgZmluZ2VycHJpbnRzW2RlY2xhcmF0aW9uSWRdID0gZmluZ2VycHJpbnQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIHByb3BlcnR5TmFtZSArIGZpbmdlcnByaW50O1xufVxuXG5mdW5jdGlvbiBuZWVkbGVzcyhwcm9wcywgZGVjbGFyYXRpb24sIGZpbmdlcnByaW50cykge1xuICAgIGNvbnN0IHByb3BlcnR5ID0gY3NzVHJlZS5wcm9wZXJ0eShkZWNsYXJhdGlvbi5wcm9wZXJ0eSk7XG5cbiAgICBpZiAoTkVFRExFU1NfVEFCTEUuaGFzT3duUHJvcGVydHkocHJvcGVydHkuYmFzZW5hbWUpKSB7XG4gICAgICAgIGNvbnN0IHRhYmxlID0gTkVFRExFU1NfVEFCTEVbcHJvcGVydHkuYmFzZW5hbWVdO1xuXG4gICAgICAgIGZvciAoY29uc3QgZW50cnkgb2YgdGFibGUpIHtcbiAgICAgICAgICAgIGNvbnN0IHBwcmUgPSBnZXRQcm9wZXJ0eUZpbmdlcnByaW50KHByb3BlcnR5LnByZWZpeCArIGVudHJ5LCBkZWNsYXJhdGlvbiwgZmluZ2VycHJpbnRzKTtcbiAgICAgICAgICAgIGNvbnN0IHByZXYgPSBwcm9wcy5oYXNPd25Qcm9wZXJ0eShwcHJlKSA/IHByb3BzW3BwcmVdIDogbnVsbDtcblxuICAgICAgICAgICAgaWYgKHByZXYgJiYgKCFkZWNsYXJhdGlvbi5pbXBvcnRhbnQgfHwgcHJldi5pdGVtLmRhdGEuaW1wb3J0YW50KSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBwcmV2O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxufVxuXG5mdW5jdGlvbiBwcm9jZXNzUnVsZShydWxlLCBpdGVtLCBsaXN0LCBwcm9wcywgZmluZ2VycHJpbnRzKSB7XG4gICAgY29uc3QgZGVjbGFyYXRpb25zID0gcnVsZS5ibG9jay5jaGlsZHJlbjtcblxuICAgIGRlY2xhcmF0aW9ucy5mb3JFYWNoUmlnaHQoZnVuY3Rpb24oZGVjbGFyYXRpb24sIGRlY2xhcmF0aW9uSXRlbSkge1xuICAgICAgICBjb25zdCB7IHByb3BlcnR5IH0gPSBkZWNsYXJhdGlvbjtcbiAgICAgICAgY29uc3QgZmluZ2VycHJpbnQgPSBnZXRQcm9wZXJ0eUZpbmdlcnByaW50KHByb3BlcnR5LCBkZWNsYXJhdGlvbiwgZmluZ2VycHJpbnRzKTtcbiAgICAgICAgY29uc3QgcHJldiA9IHByb3BzW2ZpbmdlcnByaW50XTtcblxuICAgICAgICBpZiAocHJldiAmJiAhZG9udFJlc3RydWN0dXJlLmhhcyhwcm9wZXJ0eSkpIHtcbiAgICAgICAgICAgIGlmIChkZWNsYXJhdGlvbi5pbXBvcnRhbnQgJiYgIXByZXYuaXRlbS5kYXRhLmltcG9ydGFudCkge1xuICAgICAgICAgICAgICAgIHByb3BzW2ZpbmdlcnByaW50XSA9IHtcbiAgICAgICAgICAgICAgICAgICAgYmxvY2s6IGRlY2xhcmF0aW9ucyxcbiAgICAgICAgICAgICAgICAgICAgaXRlbTogZGVjbGFyYXRpb25JdGVtXG4gICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgIHByZXYuYmxvY2sucmVtb3ZlKHByZXYuaXRlbSk7XG5cbiAgICAgICAgICAgICAgICAvLyBUT0RPOiB1c2UgaXQgd2hlbiB3ZSBjYW4gcmVmZXIgdG8gc2V2ZXJhbCBwb2ludHMgaW4gc291cmNlXG4gICAgICAgICAgICAgICAgLy8gZGVjbGFyYXRpb24ubG9jID0ge1xuICAgICAgICAgICAgICAgIC8vICAgICBwcmltYXJ5OiBkZWNsYXJhdGlvbi5sb2MsXG4gICAgICAgICAgICAgICAgLy8gICAgIG1lcmdlZDogcHJldi5pdGVtLmRhdGEubG9jXG4gICAgICAgICAgICAgICAgLy8gfTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgZGVjbGFyYXRpb25zLnJlbW92ZShkZWNsYXJhdGlvbkl0ZW0pO1xuXG4gICAgICAgICAgICAgICAgLy8gVE9ETzogdXNlIGl0IHdoZW4gd2UgY2FuIHJlZmVyIHRvIHNldmVyYWwgcG9pbnRzIGluIHNvdXJjZVxuICAgICAgICAgICAgICAgIC8vIHByZXYuaXRlbS5kYXRhLmxvYyA9IHtcbiAgICAgICAgICAgICAgICAvLyAgICAgcHJpbWFyeTogcHJldi5pdGVtLmRhdGEubG9jLFxuICAgICAgICAgICAgICAgIC8vICAgICBtZXJnZWQ6IGRlY2xhcmF0aW9uLmxvY1xuICAgICAgICAgICAgICAgIC8vIH07XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjb25zdCBwcmV2ID0gbmVlZGxlc3MocHJvcHMsIGRlY2xhcmF0aW9uLCBmaW5nZXJwcmludHMpO1xuXG4gICAgICAgICAgICBpZiAocHJldikge1xuICAgICAgICAgICAgICAgIGRlY2xhcmF0aW9ucy5yZW1vdmUoZGVjbGFyYXRpb25JdGVtKTtcblxuICAgICAgICAgICAgICAgIC8vIFRPRE86IHVzZSBpdCB3aGVuIHdlIGNhbiByZWZlciB0byBzZXZlcmFsIHBvaW50cyBpbiBzb3VyY2VcbiAgICAgICAgICAgICAgICAvLyBwcmV2Lml0ZW0uZGF0YS5sb2MgPSB7XG4gICAgICAgICAgICAgICAgLy8gICAgIHByaW1hcnk6IHByZXYuaXRlbS5kYXRhLmxvYyxcbiAgICAgICAgICAgICAgICAvLyAgICAgbWVyZ2VkOiBkZWNsYXJhdGlvbi5sb2NcbiAgICAgICAgICAgICAgICAvLyB9O1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBkZWNsYXJhdGlvbi5maW5nZXJwcmludCA9IGZpbmdlcnByaW50O1xuXG4gICAgICAgICAgICAgICAgcHJvcHNbZmluZ2VycHJpbnRdID0ge1xuICAgICAgICAgICAgICAgICAgICBibG9jazogZGVjbGFyYXRpb25zLFxuICAgICAgICAgICAgICAgICAgICBpdGVtOiBkZWNsYXJhdGlvbkl0ZW1cbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICBpZiAoZGVjbGFyYXRpb25zLmlzRW1wdHkpIHtcbiAgICAgICAgbGlzdC5yZW1vdmUoaXRlbSk7XG4gICAgfVxufVxuXG5mdW5jdGlvbiByZXN0cnVjdEJsb2NrKGFzdCkge1xuICAgIGNvbnN0IHN0eWxlc2hlZXRNYXAgPSB7fTtcbiAgICBjb25zdCBmaW5nZXJwcmludHMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuXG4gICAgY3NzVHJlZS53YWxrKGFzdCwge1xuICAgICAgICB2aXNpdDogJ1J1bGUnLFxuICAgICAgICByZXZlcnNlOiB0cnVlLFxuICAgICAgICBlbnRlcihub2RlLCBpdGVtLCBsaXN0KSB7XG4gICAgICAgICAgICBjb25zdCBzdHlsZXNoZWV0ID0gdGhpcy5ibG9jayB8fCB0aGlzLnN0eWxlc2hlZXQ7XG4gICAgICAgICAgICBjb25zdCBydWxlSWQgPSAobm9kZS5wc2V1ZG9TaWduYXR1cmUgfHwgJycpICsgJ3wnICsgbm9kZS5wcmVsdWRlLmNoaWxkcmVuLmZpcnN0LmlkO1xuICAgICAgICAgICAgbGV0IHJ1bGVNYXA7XG4gICAgICAgICAgICBsZXQgcHJvcHM7XG5cbiAgICAgICAgICAgIGlmICghc3R5bGVzaGVldE1hcC5oYXNPd25Qcm9wZXJ0eShzdHlsZXNoZWV0LmlkKSkge1xuICAgICAgICAgICAgICAgIHJ1bGVNYXAgPSB7fTtcbiAgICAgICAgICAgICAgICBzdHlsZXNoZWV0TWFwW3N0eWxlc2hlZXQuaWRdID0gcnVsZU1hcDtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcnVsZU1hcCA9IHN0eWxlc2hlZXRNYXBbc3R5bGVzaGVldC5pZF07XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChydWxlTWFwLmhhc093blByb3BlcnR5KHJ1bGVJZCkpIHtcbiAgICAgICAgICAgICAgICBwcm9wcyA9IHJ1bGVNYXBbcnVsZUlkXTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcHJvcHMgPSB7fTtcbiAgICAgICAgICAgICAgICBydWxlTWFwW3J1bGVJZF0gPSBwcm9wcztcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcHJvY2Vzc1J1bGUuY2FsbCh0aGlzLCBub2RlLCBpdGVtLCBsaXN0LCBwcm9wcywgZmluZ2VycHJpbnRzKTtcbiAgICAgICAgfVxuICAgIH0pO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHJlc3RydWN0QmxvY2s7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///99445\n")},55119:(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval("\n\nconst cssTree = __webpack_require__(22694);\nconst utils = __webpack_require__(66804);\n\n/*\n    At this step all rules has single simple selector. We try to join by equal\n    declaration blocks to first rule, e.g.\n\n    .a { color: red }\n    b { ... }\n    .b { color: red }\n    ->\n    .a, .b { color: red }\n    b { ... }\n*/\n\nfunction processRule(node, item, list) {\n    const selectors = node.prelude.children;\n    const declarations = node.block.children;\n    const nodeCompareMarker = selectors.first.compareMarker;\n    const skippedCompareMarkers = {};\n\n    list.nextUntil(item.next, function(next, nextItem) {\n        // skip non-ruleset node if safe\n        if (next.type !== 'Rule') {\n            return utils.unsafeToSkipNode.call(selectors, next);\n        }\n\n        if (node.pseudoSignature !== next.pseudoSignature) {\n            return true;\n        }\n\n        const nextFirstSelector = next.prelude.children.head;\n        const nextDeclarations = next.block.children;\n        const nextCompareMarker = nextFirstSelector.data.compareMarker;\n\n        // if next ruleset has same marked as one of skipped then stop joining\n        if (nextCompareMarker in skippedCompareMarkers) {\n            return true;\n        }\n\n        // try to join by selectors\n        if (selectors.head === selectors.tail) {\n            if (selectors.first.id === nextFirstSelector.data.id) {\n                declarations.appendList(nextDeclarations);\n                list.remove(nextItem);\n                return;\n            }\n        }\n\n        // try to join by properties\n        if (utils.isEqualDeclarations(declarations, nextDeclarations)) {\n            const nextStr = nextFirstSelector.data.id;\n\n            selectors.some((data, item) => {\n                const curStr = data.id;\n\n                if (nextStr < curStr) {\n                    selectors.insert(nextFirstSelector, item);\n                    return true;\n                }\n\n                if (!item.next) {\n                    selectors.insert(nextFirstSelector);\n                    return true;\n                }\n            });\n\n            list.remove(nextItem);\n            return;\n        }\n\n        // go to next ruleset if current one can be skipped (has no equal specificity nor element selector)\n        if (nextCompareMarker === nodeCompareMarker) {\n            return true;\n        }\n\n        skippedCompareMarkers[nextCompareMarker] = true;\n    });\n}\n\nfunction mergeRule(ast) {\n    cssTree.walk(ast, {\n        visit: 'Rule',\n        enter: processRule\n    });\n}\n\nmodule.exports = mergeRule;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNTUxMTkuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsZ0JBQWdCLG1CQUFPLENBQUMsS0FBVTtBQUNsQyxjQUFjLG1CQUFPLENBQUMsS0FBYTs7QUFFbkM7QUFDQTtBQUNBOztBQUVBLFNBQVM7QUFDVCxRQUFRO0FBQ1IsU0FBUztBQUNUO0FBQ0EsYUFBYTtBQUNiLFFBQVE7QUFDUjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTs7QUFFYjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxLQUFLO0FBQ0w7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7O0FBRUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ibG9ja2JpdGUvLi9ub2RlX21vZHVsZXMvY3Nzby9janMvcmVzdHJ1Y3R1cmUvNy1tZXJnZVJ1bGVzZXQuY2pzP2U4NjAiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBjc3NUcmVlID0gcmVxdWlyZSgnY3NzLXRyZWUnKTtcbmNvbnN0IHV0aWxzID0gcmVxdWlyZSgnLi91dGlscy5janMnKTtcblxuLypcbiAgICBBdCB0aGlzIHN0ZXAgYWxsIHJ1bGVzIGhhcyBzaW5nbGUgc2ltcGxlIHNlbGVjdG9yLiBXZSB0cnkgdG8gam9pbiBieSBlcXVhbFxuICAgIGRlY2xhcmF0aW9uIGJsb2NrcyB0byBmaXJzdCBydWxlLCBlLmcuXG5cbiAgICAuYSB7IGNvbG9yOiByZWQgfVxuICAgIGIgeyAuLi4gfVxuICAgIC5iIHsgY29sb3I6IHJlZCB9XG4gICAgLT5cbiAgICAuYSwgLmIgeyBjb2xvcjogcmVkIH1cbiAgICBiIHsgLi4uIH1cbiovXG5cbmZ1bmN0aW9uIHByb2Nlc3NSdWxlKG5vZGUsIGl0ZW0sIGxpc3QpIHtcbiAgICBjb25zdCBzZWxlY3RvcnMgPSBub2RlLnByZWx1ZGUuY2hpbGRyZW47XG4gICAgY29uc3QgZGVjbGFyYXRpb25zID0gbm9kZS5ibG9jay5jaGlsZHJlbjtcbiAgICBjb25zdCBub2RlQ29tcGFyZU1hcmtlciA9IHNlbGVjdG9ycy5maXJzdC5jb21wYXJlTWFya2VyO1xuICAgIGNvbnN0IHNraXBwZWRDb21wYXJlTWFya2VycyA9IHt9O1xuXG4gICAgbGlzdC5uZXh0VW50aWwoaXRlbS5uZXh0LCBmdW5jdGlvbihuZXh0LCBuZXh0SXRlbSkge1xuICAgICAgICAvLyBza2lwIG5vbi1ydWxlc2V0IG5vZGUgaWYgc2FmZVxuICAgICAgICBpZiAobmV4dC50eXBlICE9PSAnUnVsZScpIHtcbiAgICAgICAgICAgIHJldHVybiB1dGlscy51bnNhZmVUb1NraXBOb2RlLmNhbGwoc2VsZWN0b3JzLCBuZXh0KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChub2RlLnBzZXVkb1NpZ25hdHVyZSAhPT0gbmV4dC5wc2V1ZG9TaWduYXR1cmUpIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgbmV4dEZpcnN0U2VsZWN0b3IgPSBuZXh0LnByZWx1ZGUuY2hpbGRyZW4uaGVhZDtcbiAgICAgICAgY29uc3QgbmV4dERlY2xhcmF0aW9ucyA9IG5leHQuYmxvY2suY2hpbGRyZW47XG4gICAgICAgIGNvbnN0IG5leHRDb21wYXJlTWFya2VyID0gbmV4dEZpcnN0U2VsZWN0b3IuZGF0YS5jb21wYXJlTWFya2VyO1xuXG4gICAgICAgIC8vIGlmIG5leHQgcnVsZXNldCBoYXMgc2FtZSBtYXJrZWQgYXMgb25lIG9mIHNraXBwZWQgdGhlbiBzdG9wIGpvaW5pbmdcbiAgICAgICAgaWYgKG5leHRDb21wYXJlTWFya2VyIGluIHNraXBwZWRDb21wYXJlTWFya2Vycykge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cblxuICAgICAgICAvLyB0cnkgdG8gam9pbiBieSBzZWxlY3RvcnNcbiAgICAgICAgaWYgKHNlbGVjdG9ycy5oZWFkID09PSBzZWxlY3RvcnMudGFpbCkge1xuICAgICAgICAgICAgaWYgKHNlbGVjdG9ycy5maXJzdC5pZCA9PT0gbmV4dEZpcnN0U2VsZWN0b3IuZGF0YS5pZCkge1xuICAgICAgICAgICAgICAgIGRlY2xhcmF0aW9ucy5hcHBlbmRMaXN0KG5leHREZWNsYXJhdGlvbnMpO1xuICAgICAgICAgICAgICAgIGxpc3QucmVtb3ZlKG5leHRJdGVtKTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyB0cnkgdG8gam9pbiBieSBwcm9wZXJ0aWVzXG4gICAgICAgIGlmICh1dGlscy5pc0VxdWFsRGVjbGFyYXRpb25zKGRlY2xhcmF0aW9ucywgbmV4dERlY2xhcmF0aW9ucykpIHtcbiAgICAgICAgICAgIGNvbnN0IG5leHRTdHIgPSBuZXh0Rmlyc3RTZWxlY3Rvci5kYXRhLmlkO1xuXG4gICAgICAgICAgICBzZWxlY3RvcnMuc29tZSgoZGF0YSwgaXRlbSkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IGN1clN0ciA9IGRhdGEuaWQ7XG5cbiAgICAgICAgICAgICAgICBpZiAobmV4dFN0ciA8IGN1clN0cikge1xuICAgICAgICAgICAgICAgICAgICBzZWxlY3RvcnMuaW5zZXJ0KG5leHRGaXJzdFNlbGVjdG9yLCBpdGVtKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYgKCFpdGVtLm5leHQpIHtcbiAgICAgICAgICAgICAgICAgICAgc2VsZWN0b3JzLmluc2VydChuZXh0Rmlyc3RTZWxlY3Rvcik7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBsaXN0LnJlbW92ZShuZXh0SXRlbSk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICAvLyBnbyB0byBuZXh0IHJ1bGVzZXQgaWYgY3VycmVudCBvbmUgY2FuIGJlIHNraXBwZWQgKGhhcyBubyBlcXVhbCBzcGVjaWZpY2l0eSBub3IgZWxlbWVudCBzZWxlY3RvcilcbiAgICAgICAgaWYgKG5leHRDb21wYXJlTWFya2VyID09PSBub2RlQ29tcGFyZU1hcmtlcikge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cblxuICAgICAgICBza2lwcGVkQ29tcGFyZU1hcmtlcnNbbmV4dENvbXBhcmVNYXJrZXJdID0gdHJ1ZTtcbiAgICB9KTtcbn1cblxuZnVuY3Rpb24gbWVyZ2VSdWxlKGFzdCkge1xuICAgIGNzc1RyZWUud2Fsayhhc3QsIHtcbiAgICAgICAgdmlzaXQ6ICdSdWxlJyxcbiAgICAgICAgZW50ZXI6IHByb2Nlc3NSdWxlXG4gICAgfSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gbWVyZ2VSdWxlO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///55119\n")},13834:(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval("\n\nconst cssTree = __webpack_require__(22694);\nconst utils = __webpack_require__(66804);\n\nfunction calcSelectorLength(list) {\n    return list.reduce((res, data) => res + data.id.length + 1, 0) - 1;\n}\n\nfunction calcDeclarationsLength(tokens) {\n    let length = 0;\n\n    for (const token of tokens) {\n        length += token.length;\n    }\n\n    return (\n        length +          // declarations\n        tokens.length - 1 // delimeters\n    );\n}\n\nfunction processRule(node, item, list) {\n    const avoidRulesMerge = this.block !== null ? this.block.avoidRulesMerge : false;\n    const selectors = node.prelude.children;\n    const block = node.block;\n    const disallowDownMarkers = Object.create(null);\n    let allowMergeUp = true;\n    let allowMergeDown = true;\n\n    list.prevUntil(item.prev, function(prev, prevItem) {\n        const prevBlock = prev.block;\n        const prevType = prev.type;\n\n        if (prevType !== 'Rule') {\n            const unsafe = utils.unsafeToSkipNode.call(selectors, prev);\n\n            if (!unsafe && prevType === 'Atrule' && prevBlock) {\n                cssTree.walk(prevBlock, {\n                    visit: 'Rule',\n                    enter(node) {\n                        node.prelude.children.forEach((data) => {\n                            disallowDownMarkers[data.compareMarker] = true;\n                        });\n                    }\n                });\n            }\n\n            return unsafe;\n        }\n\n        if (node.pseudoSignature !== prev.pseudoSignature) {\n            return true;\n        }\n\n        const prevSelectors = prev.prelude.children;\n\n        allowMergeDown = !prevSelectors.some((selector) =>\n            selector.compareMarker in disallowDownMarkers\n        );\n\n        // try prev ruleset if simpleselectors has no equal specifity and element selector\n        if (!allowMergeDown && !allowMergeUp) {\n            return true;\n        }\n\n        // try to join by selectors\n        if (allowMergeUp && utils.isEqualSelectors(prevSelectors, selectors)) {\n            prevBlock.children.appendList(block.children);\n            list.remove(item);\n\n            return true;\n        }\n\n        // try to join by properties\n        const diff = utils.compareDeclarations(block.children, prevBlock.children);\n\n        // console.log(diff.eq, diff.ne1, diff.ne2);\n\n        if (diff.eq.length) {\n            if (!diff.ne1.length && !diff.ne2.length) {\n                // equal blocks\n                if (allowMergeDown) {\n                    utils.addSelectors(selectors, prevSelectors);\n                    list.remove(prevItem);\n                }\n\n                return true;\n            } else if (!avoidRulesMerge) { /* probably we don't need to prevent those merges for @keyframes\n                                              TODO: need to be checked */\n\n                if (diff.ne1.length && !diff.ne2.length) {\n                    // prevBlock is subset block\n                    const selectorLength = calcSelectorLength(selectors);\n                    const blockLength = calcDeclarationsLength(diff.eq); // declarations length\n\n                    if (allowMergeUp && selectorLength < blockLength) {\n                        utils.addSelectors(prevSelectors, selectors);\n                        block.children.fromArray(diff.ne1);\n                    }\n                } else if (!diff.ne1.length && diff.ne2.length) {\n                    // node is subset of prevBlock\n                    const selectorLength = calcSelectorLength(prevSelectors);\n                    const blockLength = calcDeclarationsLength(diff.eq); // declarations length\n\n                    if (allowMergeDown && selectorLength < blockLength) {\n                        utils.addSelectors(selectors, prevSelectors);\n                        prevBlock.children.fromArray(diff.ne2);\n                    }\n                } else {\n                    // diff.ne1.length && diff.ne2.length\n                    // extract equal block\n                    const newSelector = {\n                        type: 'SelectorList',\n                        loc: null,\n                        children: utils.addSelectors(prevSelectors.copy(), selectors)\n                    };\n                    const newBlockLength = calcSelectorLength(newSelector.children) + 2; // selectors length + curly braces length\n                    const blockLength = calcDeclarationsLength(diff.eq); // declarations length\n\n                    // create new ruleset if declarations length greater than\n                    // ruleset description overhead\n                    if (blockLength >= newBlockLength) {\n                        const newItem = list.createItem({\n                            type: 'Rule',\n                            loc: null,\n                            prelude: newSelector,\n                            block: {\n                                type: 'Block',\n                                loc: null,\n                                children: new cssTree.List().fromArray(diff.eq)\n                            },\n                            pseudoSignature: node.pseudoSignature\n                        });\n\n                        block.children.fromArray(diff.ne1);\n                        prevBlock.children.fromArray(diff.ne2overrided);\n\n                        if (allowMergeUp) {\n                            list.insert(newItem, prevItem);\n                        } else {\n                            list.insert(newItem, item);\n                        }\n\n                        return true;\n                    }\n                }\n            }\n        }\n\n        if (allowMergeUp) {\n            // TODO: disallow up merge only if any property interception only (i.e. diff.ne2overrided.length > 0);\n            // await property families to find property interception correctly\n            allowMergeUp = !prevSelectors.some((prevSelector) =>\n                selectors.some((selector) =>\n                    selector.compareMarker === prevSelector.compareMarker\n                )\n            );\n        }\n\n        prevSelectors.forEach((data) => {\n            disallowDownMarkers[data.compareMarker] = true;\n        });\n    });\n}\n\nfunction restructRule(ast) {\n    cssTree.walk(ast, {\n        visit: 'Rule',\n        reverse: true,\n        enter: processRule\n    });\n}\n\nmodule.exports = restructRule;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///13834\n")},30299:(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval("\n\nconst index = __webpack_require__(62787);\nconst _1MergeAtrule = __webpack_require__(25248);\nconst _2InitialMergeRuleset = __webpack_require__(92984);\nconst _3DisjoinRuleset = __webpack_require__(9691);\nconst _4RestructShorthand = __webpack_require__(33409);\nconst _6RestructBlock = __webpack_require__(99445);\nconst _7MergeRuleset = __webpack_require__(55119);\nconst _8RestructRuleset = __webpack_require__(13834);\n\nfunction restructure(ast, options) {\n    // prepare ast for restructing\n    const indexer = index(ast, options);\n    options.logger('prepare', ast);\n\n    _1MergeAtrule(ast, options);\n    options.logger('mergeAtrule', ast);\n\n    _2InitialMergeRuleset(ast);\n    options.logger('initialMergeRuleset', ast);\n\n    _3DisjoinRuleset(ast);\n    options.logger('disjoinRuleset', ast);\n\n    _4RestructShorthand(ast, indexer);\n    options.logger('restructShorthand', ast);\n\n    _6RestructBlock(ast);\n    options.logger('restructBlock', ast);\n\n    _7MergeRuleset(ast);\n    options.logger('mergeRuleset', ast);\n\n    _8RestructRuleset(ast);\n    options.logger('restructRuleset', ast);\n}\n\nmodule.exports = restructure;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzAyOTkuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsY0FBYyxtQkFBTyxDQUFDLEtBQXFCO0FBQzNDLHNCQUFzQixtQkFBTyxDQUFDLEtBQXFCO0FBQ25ELDhCQUE4QixtQkFBTyxDQUFDLEtBQTZCO0FBQ25FLHlCQUF5QixtQkFBTyxDQUFDLElBQXdCO0FBQ3pELDRCQUE0QixtQkFBTyxDQUFDLEtBQTJCO0FBQy9ELHdCQUF3QixtQkFBTyxDQUFDLEtBQXVCO0FBQ3ZELHVCQUF1QixtQkFBTyxDQUFDLEtBQXNCO0FBQ3JELDBCQUEwQixtQkFBTyxDQUFDLEtBQXlCOztBQUUzRDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ibG9ja2JpdGUvLi9ub2RlX21vZHVsZXMvY3Nzby9janMvcmVzdHJ1Y3R1cmUvaW5kZXguY2pzP2I3NGMiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBpbmRleCA9IHJlcXVpcmUoJy4vcHJlcGFyZS9pbmRleC5janMnKTtcbmNvbnN0IF8xTWVyZ2VBdHJ1bGUgPSByZXF1aXJlKCcuLzEtbWVyZ2VBdHJ1bGUuY2pzJyk7XG5jb25zdCBfMkluaXRpYWxNZXJnZVJ1bGVzZXQgPSByZXF1aXJlKCcuLzItaW5pdGlhbE1lcmdlUnVsZXNldC5janMnKTtcbmNvbnN0IF8zRGlzam9pblJ1bGVzZXQgPSByZXF1aXJlKCcuLzMtZGlzam9pblJ1bGVzZXQuY2pzJyk7XG5jb25zdCBfNFJlc3RydWN0U2hvcnRoYW5kID0gcmVxdWlyZSgnLi80LXJlc3RydWN0U2hvcnRoYW5kLmNqcycpO1xuY29uc3QgXzZSZXN0cnVjdEJsb2NrID0gcmVxdWlyZSgnLi82LXJlc3RydWN0QmxvY2suY2pzJyk7XG5jb25zdCBfN01lcmdlUnVsZXNldCA9IHJlcXVpcmUoJy4vNy1tZXJnZVJ1bGVzZXQuY2pzJyk7XG5jb25zdCBfOFJlc3RydWN0UnVsZXNldCA9IHJlcXVpcmUoJy4vOC1yZXN0cnVjdFJ1bGVzZXQuY2pzJyk7XG5cbmZ1bmN0aW9uIHJlc3RydWN0dXJlKGFzdCwgb3B0aW9ucykge1xuICAgIC8vIHByZXBhcmUgYXN0IGZvciByZXN0cnVjdGluZ1xuICAgIGNvbnN0IGluZGV4ZXIgPSBpbmRleChhc3QsIG9wdGlvbnMpO1xuICAgIG9wdGlvbnMubG9nZ2VyKCdwcmVwYXJlJywgYXN0KTtcblxuICAgIF8xTWVyZ2VBdHJ1bGUoYXN0LCBvcHRpb25zKTtcbiAgICBvcHRpb25zLmxvZ2dlcignbWVyZ2VBdHJ1bGUnLCBhc3QpO1xuXG4gICAgXzJJbml0aWFsTWVyZ2VSdWxlc2V0KGFzdCk7XG4gICAgb3B0aW9ucy5sb2dnZXIoJ2luaXRpYWxNZXJnZVJ1bGVzZXQnLCBhc3QpO1xuXG4gICAgXzNEaXNqb2luUnVsZXNldChhc3QpO1xuICAgIG9wdGlvbnMubG9nZ2VyKCdkaXNqb2luUnVsZXNldCcsIGFzdCk7XG5cbiAgICBfNFJlc3RydWN0U2hvcnRoYW5kKGFzdCwgaW5kZXhlcik7XG4gICAgb3B0aW9ucy5sb2dnZXIoJ3Jlc3RydWN0U2hvcnRoYW5kJywgYXN0KTtcblxuICAgIF82UmVzdHJ1Y3RCbG9jayhhc3QpO1xuICAgIG9wdGlvbnMubG9nZ2VyKCdyZXN0cnVjdEJsb2NrJywgYXN0KTtcblxuICAgIF83TWVyZ2VSdWxlc2V0KGFzdCk7XG4gICAgb3B0aW9ucy5sb2dnZXIoJ21lcmdlUnVsZXNldCcsIGFzdCk7XG5cbiAgICBfOFJlc3RydWN0UnVsZXNldChhc3QpO1xuICAgIG9wdGlvbnMubG9nZ2VyKCdyZXN0cnVjdFJ1bGVzZXQnLCBhc3QpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHJlc3RydWN0dXJlO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///30299\n")},31160:(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval("\n\nconst cssTree = __webpack_require__(22694);\n\nclass Index {\n    constructor() {\n        this.map = new Map();\n    }\n    resolve(str) {\n        let index = this.map.get(str);\n\n        if (index === undefined) {\n            index = this.map.size + 1;\n            this.map.set(str, index);\n        }\n\n        return index;\n    }\n}\nfunction createDeclarationIndexer() {\n    const ids = new Index();\n\n    return function markDeclaration(node) {\n        const id = cssTree.generate(node);\n\n        node.id = ids.resolve(id);\n        node.length = id.length;\n        node.fingerprint = null;\n\n        return node;\n    };\n}\n\nmodule.exports = createDeclarationIndexer;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzExNjAuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsZ0JBQWdCLG1CQUFPLENBQUMsS0FBVTs7QUFFbEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYmxvY2tiaXRlLy4vbm9kZV9tb2R1bGVzL2Nzc28vY2pzL3Jlc3RydWN0dXJlL3ByZXBhcmUvY3JlYXRlRGVjbGFyYXRpb25JbmRleGVyLmNqcz9lM2M5Il0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuY29uc3QgY3NzVHJlZSA9IHJlcXVpcmUoJ2Nzcy10cmVlJyk7XG5cbmNsYXNzIEluZGV4IHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgdGhpcy5tYXAgPSBuZXcgTWFwKCk7XG4gICAgfVxuICAgIHJlc29sdmUoc3RyKSB7XG4gICAgICAgIGxldCBpbmRleCA9IHRoaXMubWFwLmdldChzdHIpO1xuXG4gICAgICAgIGlmIChpbmRleCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBpbmRleCA9IHRoaXMubWFwLnNpemUgKyAxO1xuICAgICAgICAgICAgdGhpcy5tYXAuc2V0KHN0ciwgaW5kZXgpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGluZGV4O1xuICAgIH1cbn1cbmZ1bmN0aW9uIGNyZWF0ZURlY2xhcmF0aW9uSW5kZXhlcigpIHtcbiAgICBjb25zdCBpZHMgPSBuZXcgSW5kZXgoKTtcblxuICAgIHJldHVybiBmdW5jdGlvbiBtYXJrRGVjbGFyYXRpb24obm9kZSkge1xuICAgICAgICBjb25zdCBpZCA9IGNzc1RyZWUuZ2VuZXJhdGUobm9kZSk7XG5cbiAgICAgICAgbm9kZS5pZCA9IGlkcy5yZXNvbHZlKGlkKTtcbiAgICAgICAgbm9kZS5sZW5ndGggPSBpZC5sZW5ndGg7XG4gICAgICAgIG5vZGUuZmluZ2VycHJpbnQgPSBudWxsO1xuXG4gICAgICAgIHJldHVybiBub2RlO1xuICAgIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gY3JlYXRlRGVjbGFyYXRpb25JbmRleGVyO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///31160\n")},62787:(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval("\n\nconst cssTree = __webpack_require__(22694);\nconst createDeclarationIndexer = __webpack_require__(31160);\nconst processSelector = __webpack_require__(9111);\n\nfunction prepare(ast, options) {\n    const markDeclaration = createDeclarationIndexer();\n\n    cssTree.walk(ast, {\n        visit: 'Rule',\n        enter(node) {\n            node.block.children.forEach(markDeclaration);\n            processSelector(node, options.usage);\n        }\n    });\n\n    cssTree.walk(ast, {\n        visit: 'Atrule',\n        enter(node) {\n            if (node.prelude) {\n                node.prelude.id = null; // pre-init property to avoid multiple hidden class for generate\n                node.prelude.id = cssTree.generate(node.prelude);\n            }\n\n            // compare keyframe selectors by its values\n            // NOTE: still no clarification about problems with keyframes selector grouping (issue #197)\n            if (cssTree.keyword(node.name).basename === 'keyframes') {\n                node.block.avoidRulesMerge = true;  /* probably we don't need to prevent those merges for @keyframes\n                                                       TODO: need to be checked */\n                node.block.children.forEach(function(rule) {\n                    rule.prelude.children.forEach(function(simpleselector) {\n                        simpleselector.compareMarker = simpleselector.id;\n                    });\n                });\n            }\n        }\n    });\n\n    return {\n        declaration: markDeclaration\n    };\n}\n\nmodule.exports = prepare;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNjI3ODcuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsZ0JBQWdCLG1CQUFPLENBQUMsS0FBVTtBQUNsQyxpQ0FBaUMsbUJBQU8sQ0FBQyxLQUFnQztBQUN6RSx3QkFBd0IsbUJBQU8sQ0FBQyxJQUF1Qjs7QUFFdkQ7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0NBQXdDO0FBQ3hDO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0Esb0RBQW9EO0FBQ3BEO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCO0FBQ3JCLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQTs7QUFFQSIsInNvdXJjZXMiOlsid2VicGFjazovL2Jsb2NrYml0ZS8uL25vZGVfbW9kdWxlcy9jc3NvL2Nqcy9yZXN0cnVjdHVyZS9wcmVwYXJlL2luZGV4LmNqcz9iNzJkIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuY29uc3QgY3NzVHJlZSA9IHJlcXVpcmUoJ2Nzcy10cmVlJyk7XG5jb25zdCBjcmVhdGVEZWNsYXJhdGlvbkluZGV4ZXIgPSByZXF1aXJlKCcuL2NyZWF0ZURlY2xhcmF0aW9uSW5kZXhlci5janMnKTtcbmNvbnN0IHByb2Nlc3NTZWxlY3RvciA9IHJlcXVpcmUoJy4vcHJvY2Vzc1NlbGVjdG9yLmNqcycpO1xuXG5mdW5jdGlvbiBwcmVwYXJlKGFzdCwgb3B0aW9ucykge1xuICAgIGNvbnN0IG1hcmtEZWNsYXJhdGlvbiA9IGNyZWF0ZURlY2xhcmF0aW9uSW5kZXhlcigpO1xuXG4gICAgY3NzVHJlZS53YWxrKGFzdCwge1xuICAgICAgICB2aXNpdDogJ1J1bGUnLFxuICAgICAgICBlbnRlcihub2RlKSB7XG4gICAgICAgICAgICBub2RlLmJsb2NrLmNoaWxkcmVuLmZvckVhY2gobWFya0RlY2xhcmF0aW9uKTtcbiAgICAgICAgICAgIHByb2Nlc3NTZWxlY3Rvcihub2RlLCBvcHRpb25zLnVzYWdlKTtcbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgY3NzVHJlZS53YWxrKGFzdCwge1xuICAgICAgICB2aXNpdDogJ0F0cnVsZScsXG4gICAgICAgIGVudGVyKG5vZGUpIHtcbiAgICAgICAgICAgIGlmIChub2RlLnByZWx1ZGUpIHtcbiAgICAgICAgICAgICAgICBub2RlLnByZWx1ZGUuaWQgPSBudWxsOyAvLyBwcmUtaW5pdCBwcm9wZXJ0eSB0byBhdm9pZCBtdWx0aXBsZSBoaWRkZW4gY2xhc3MgZm9yIGdlbmVyYXRlXG4gICAgICAgICAgICAgICAgbm9kZS5wcmVsdWRlLmlkID0gY3NzVHJlZS5nZW5lcmF0ZShub2RlLnByZWx1ZGUpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBjb21wYXJlIGtleWZyYW1lIHNlbGVjdG9ycyBieSBpdHMgdmFsdWVzXG4gICAgICAgICAgICAvLyBOT1RFOiBzdGlsbCBubyBjbGFyaWZpY2F0aW9uIGFib3V0IHByb2JsZW1zIHdpdGgga2V5ZnJhbWVzIHNlbGVjdG9yIGdyb3VwaW5nIChpc3N1ZSAjMTk3KVxuICAgICAgICAgICAgaWYgKGNzc1RyZWUua2V5d29yZChub2RlLm5hbWUpLmJhc2VuYW1lID09PSAna2V5ZnJhbWVzJykge1xuICAgICAgICAgICAgICAgIG5vZGUuYmxvY2suYXZvaWRSdWxlc01lcmdlID0gdHJ1ZTsgIC8qIHByb2JhYmx5IHdlIGRvbid0IG5lZWQgdG8gcHJldmVudCB0aG9zZSBtZXJnZXMgZm9yIEBrZXlmcmFtZXNcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBUT0RPOiBuZWVkIHRvIGJlIGNoZWNrZWQgKi9cbiAgICAgICAgICAgICAgICBub2RlLmJsb2NrLmNoaWxkcmVuLmZvckVhY2goZnVuY3Rpb24ocnVsZSkge1xuICAgICAgICAgICAgICAgICAgICBydWxlLnByZWx1ZGUuY2hpbGRyZW4uZm9yRWFjaChmdW5jdGlvbihzaW1wbGVzZWxlY3Rvcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgc2ltcGxlc2VsZWN0b3IuY29tcGFyZU1hcmtlciA9IHNpbXBsZXNlbGVjdG9yLmlkO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIHtcbiAgICAgICAgZGVjbGFyYXRpb246IG1hcmtEZWNsYXJhdGlvblxuICAgIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gcHJlcGFyZTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///62787\n")},9111:(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval("\n\nconst cssTree = __webpack_require__(22694);\nconst specificity = __webpack_require__(56723);\n\nconst nonFreezePseudoElements = new Set([\n    'first-letter',\n    'first-line',\n    'after',\n    'before'\n]);\nconst nonFreezePseudoClasses = new Set([\n    'link',\n    'visited',\n    'hover',\n    'active',\n    'first-letter',\n    'first-line',\n    'after',\n    'before'\n]);\n\nfunction processSelector(node, usageData) {\n    const pseudos = new Set();\n\n    node.prelude.children.forEach(function(simpleSelector) {\n        let tagName = '*';\n        let scope = 0;\n\n        simpleSelector.children.forEach(function(node) {\n            switch (node.type) {\n                case 'ClassSelector':\n                    if (usageData && usageData.scopes) {\n                        const classScope = usageData.scopes[node.name] || 0;\n\n                        if (scope !== 0 && classScope !== scope) {\n                            throw new Error('Selector can\\'t has classes from different scopes: ' + cssTree.generate(simpleSelector));\n                        }\n\n                        scope = classScope;\n                    }\n\n                    break;\n\n                case 'PseudoClassSelector': {\n                    const name = node.name.toLowerCase();\n\n                    if (!nonFreezePseudoClasses.has(name)) {\n                        pseudos.add(`:${name}`);\n                    }\n\n                    break;\n                }\n\n                case 'PseudoElementSelector': {\n                    const name = node.name.toLowerCase();\n\n                    if (!nonFreezePseudoElements.has(name)) {\n                        pseudos.add(`::${name}`);\n                    }\n\n                    break;\n                }\n\n                case 'TypeSelector':\n                    tagName = node.name.toLowerCase();\n                    break;\n\n                case 'AttributeSelector':\n                    if (node.flags) {\n                        pseudos.add(`[${node.flags.toLowerCase()}]`);\n                    }\n\n                    break;\n\n                case 'Combinator':\n                    tagName = '*';\n                    break;\n            }\n        });\n\n        simpleSelector.compareMarker = specificity(simpleSelector).toString();\n        simpleSelector.id = null; // pre-init property to avoid multiple hidden class\n        simpleSelector.id = cssTree.generate(simpleSelector);\n\n        if (scope) {\n            simpleSelector.compareMarker += ':' + scope;\n        }\n\n        if (tagName !== '*') {\n            simpleSelector.compareMarker += ',' + tagName;\n        }\n    });\n\n    // add property to all rule nodes to avoid multiple hidden class\n    node.pseudoSignature = pseudos.size > 0\n        ? [...pseudos].sort().join(',')\n        : false;\n}\n\nmodule.exports = processSelector;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOTExMS5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYixnQkFBZ0IsbUJBQU8sQ0FBQyxLQUFVO0FBQ2xDLG9CQUFvQixtQkFBTyxDQUFDLEtBQW1COztBQUUvQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQSx3Q0FBd0MsS0FBSztBQUM3Qzs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQSx5Q0FBeUMsS0FBSztBQUM5Qzs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0Esd0NBQXdDLHlCQUF5QjtBQUNqRTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7O0FBRVQ7QUFDQSxrQ0FBa0M7QUFDbEM7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSIsInNvdXJjZXMiOlsid2VicGFjazovL2Jsb2NrYml0ZS8uL25vZGVfbW9kdWxlcy9jc3NvL2Nqcy9yZXN0cnVjdHVyZS9wcmVwYXJlL3Byb2Nlc3NTZWxlY3Rvci5janM/NTllOCJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmNvbnN0IGNzc1RyZWUgPSByZXF1aXJlKCdjc3MtdHJlZScpO1xuY29uc3Qgc3BlY2lmaWNpdHkgPSByZXF1aXJlKCcuL3NwZWNpZmljaXR5LmNqcycpO1xuXG5jb25zdCBub25GcmVlemVQc2V1ZG9FbGVtZW50cyA9IG5ldyBTZXQoW1xuICAgICdmaXJzdC1sZXR0ZXInLFxuICAgICdmaXJzdC1saW5lJyxcbiAgICAnYWZ0ZXInLFxuICAgICdiZWZvcmUnXG5dKTtcbmNvbnN0IG5vbkZyZWV6ZVBzZXVkb0NsYXNzZXMgPSBuZXcgU2V0KFtcbiAgICAnbGluaycsXG4gICAgJ3Zpc2l0ZWQnLFxuICAgICdob3ZlcicsXG4gICAgJ2FjdGl2ZScsXG4gICAgJ2ZpcnN0LWxldHRlcicsXG4gICAgJ2ZpcnN0LWxpbmUnLFxuICAgICdhZnRlcicsXG4gICAgJ2JlZm9yZSdcbl0pO1xuXG5mdW5jdGlvbiBwcm9jZXNzU2VsZWN0b3Iobm9kZSwgdXNhZ2VEYXRhKSB7XG4gICAgY29uc3QgcHNldWRvcyA9IG5ldyBTZXQoKTtcblxuICAgIG5vZGUucHJlbHVkZS5jaGlsZHJlbi5mb3JFYWNoKGZ1bmN0aW9uKHNpbXBsZVNlbGVjdG9yKSB7XG4gICAgICAgIGxldCB0YWdOYW1lID0gJyonO1xuICAgICAgICBsZXQgc2NvcGUgPSAwO1xuXG4gICAgICAgIHNpbXBsZVNlbGVjdG9yLmNoaWxkcmVuLmZvckVhY2goZnVuY3Rpb24obm9kZSkge1xuICAgICAgICAgICAgc3dpdGNoIChub2RlLnR5cGUpIHtcbiAgICAgICAgICAgICAgICBjYXNlICdDbGFzc1NlbGVjdG9yJzpcbiAgICAgICAgICAgICAgICAgICAgaWYgKHVzYWdlRGF0YSAmJiB1c2FnZURhdGEuc2NvcGVzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBjbGFzc1Njb3BlID0gdXNhZ2VEYXRhLnNjb3Blc1tub2RlLm5hbWVdIHx8IDA7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzY29wZSAhPT0gMCAmJiBjbGFzc1Njb3BlICE9PSBzY29wZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignU2VsZWN0b3IgY2FuXFwndCBoYXMgY2xhc3NlcyBmcm9tIGRpZmZlcmVudCBzY29wZXM6ICcgKyBjc3NUcmVlLmdlbmVyYXRlKHNpbXBsZVNlbGVjdG9yKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHNjb3BlID0gY2xhc3NTY29wZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgY2FzZSAnUHNldWRvQ2xhc3NTZWxlY3Rvcic6IHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgbmFtZSA9IG5vZGUubmFtZS50b0xvd2VyQ2FzZSgpO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmICghbm9uRnJlZXplUHNldWRvQ2xhc3Nlcy5oYXMobmFtZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHBzZXVkb3MuYWRkKGA6JHtuYW1lfWApO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgY2FzZSAnUHNldWRvRWxlbWVudFNlbGVjdG9yJzoge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBuYW1lID0gbm9kZS5uYW1lLnRvTG93ZXJDYXNlKCk7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKCFub25GcmVlemVQc2V1ZG9FbGVtZW50cy5oYXMobmFtZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHBzZXVkb3MuYWRkKGA6OiR7bmFtZX1gKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGNhc2UgJ1R5cGVTZWxlY3Rvcic6XG4gICAgICAgICAgICAgICAgICAgIHRhZ05hbWUgPSBub2RlLm5hbWUudG9Mb3dlckNhc2UoKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICBjYXNlICdBdHRyaWJ1dGVTZWxlY3Rvcic6XG4gICAgICAgICAgICAgICAgICAgIGlmIChub2RlLmZsYWdzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBwc2V1ZG9zLmFkZChgWyR7bm9kZS5mbGFncy50b0xvd2VyQ2FzZSgpfV1gKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgY2FzZSAnQ29tYmluYXRvcic6XG4gICAgICAgICAgICAgICAgICAgIHRhZ05hbWUgPSAnKic7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICBzaW1wbGVTZWxlY3Rvci5jb21wYXJlTWFya2VyID0gc3BlY2lmaWNpdHkoc2ltcGxlU2VsZWN0b3IpLnRvU3RyaW5nKCk7XG4gICAgICAgIHNpbXBsZVNlbGVjdG9yLmlkID0gbnVsbDsgLy8gcHJlLWluaXQgcHJvcGVydHkgdG8gYXZvaWQgbXVsdGlwbGUgaGlkZGVuIGNsYXNzXG4gICAgICAgIHNpbXBsZVNlbGVjdG9yLmlkID0gY3NzVHJlZS5nZW5lcmF0ZShzaW1wbGVTZWxlY3Rvcik7XG5cbiAgICAgICAgaWYgKHNjb3BlKSB7XG4gICAgICAgICAgICBzaW1wbGVTZWxlY3Rvci5jb21wYXJlTWFya2VyICs9ICc6JyArIHNjb3BlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRhZ05hbWUgIT09ICcqJykge1xuICAgICAgICAgICAgc2ltcGxlU2VsZWN0b3IuY29tcGFyZU1hcmtlciArPSAnLCcgKyB0YWdOYW1lO1xuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICAvLyBhZGQgcHJvcGVydHkgdG8gYWxsIHJ1bGUgbm9kZXMgdG8gYXZvaWQgbXVsdGlwbGUgaGlkZGVuIGNsYXNzXG4gICAgbm9kZS5wc2V1ZG9TaWduYXR1cmUgPSBwc2V1ZG9zLnNpemUgPiAwXG4gICAgICAgID8gWy4uLnBzZXVkb3NdLnNvcnQoKS5qb2luKCcsJylcbiAgICAgICAgOiBmYWxzZTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBwcm9jZXNzU2VsZWN0b3I7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///9111\n")},56723:(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval("\n\nconst cssTree = __webpack_require__(22694);\n\nfunction ensureSelectorList(node) {\n    if (node.type === 'Raw') {\n        return cssTree.parse(node.value, { context: 'selectorList' });\n    }\n\n    return node;\n}\n\nfunction maxSpecificity(a, b) {\n    for (let i = 0; i < 3; i++) {\n        if (a[i] !== b[i]) {\n            return a[i] > b[i] ? a : b;\n        }\n    }\n\n    return a;\n}\n\nfunction maxSelectorListSpecificity(selectorList) {\n    return ensureSelectorList(selectorList).children.reduce(\n        (result, node) => maxSpecificity(specificity(node), result),\n        [0, 0, 0]\n    );\n}\n\n// §16. Calculating a selector’s specificity\n// https://www.w3.org/TR/selectors-4/#specificity-rules\nfunction specificity(simpleSelector) {\n    let A = 0;\n    let B = 0;\n    let C = 0;\n\n    // A selector’s specificity is calculated for a given element as follows:\n    simpleSelector.children.forEach((node) => {\n        switch (node.type) {\n            // count the number of ID selectors in the selector (= A)\n            case 'IdSelector':\n                A++;\n                break;\n\n            // count the number of class selectors, attributes selectors, ...\n            case 'ClassSelector':\n            case 'AttributeSelector':\n                B++;\n                break;\n\n            // ... and pseudo-classes in the selector (= B)\n            case 'PseudoClassSelector':\n                switch (node.name.toLowerCase()) {\n                    // The specificity of an :is(), :not(), or :has() pseudo-class is replaced\n                    // by the specificity of the most specific complex selector in its selector list argument.\n                    case 'not':\n                    case 'has':\n                    case 'is':\n                    // :matches() is used before it was renamed to :is()\n                    // https://github.com/w3c/csswg-drafts/issues/3258\n                    case 'matches':\n                    // Older browsers support :is() functionality as prefixed pseudo-class :any()\n                    // https://developer.mozilla.org/en-US/docs/Web/CSS/:is\n                    case '-webkit-any':\n                    case '-moz-any': {\n                        const [a, b, c] = maxSelectorListSpecificity(node.children.first);\n\n                        A += a;\n                        B += b;\n                        C += c;\n\n                        break;\n                    }\n\n                    // Analogously, the specificity of an :nth-child() or :nth-last-child() selector\n                    // is the specificity of the pseudo class itself (counting as one pseudo-class selector)\n                    // plus the specificity of the most specific complex selector in its selector list argument (if any).\n                    case 'nth-child':\n                    case 'nth-last-child': {\n                        const arg = node.children.first;\n\n                        if (arg.type === 'Nth' && arg.selector) {\n                            const [a, b, c] = maxSelectorListSpecificity(arg.selector);\n\n                            A += a;\n                            B += b + 1;\n                            C += c;\n                        } else {\n                            B++;\n                        }\n\n                        break;\n                    }\n\n                    // The specificity of a :where() pseudo-class is replaced by zero.\n                    case 'where':\n                        break;\n\n                    // The four Level 2 pseudo-elements (::before, ::after, ::first-line, and ::first-letter) may,\n                    // for legacy reasons, be represented using the <pseudo-class-selector> grammar,\n                    // with only a single \":\" character at their start.\n                    // https://www.w3.org/TR/selectors-4/#single-colon-pseudos\n                    case 'before':\n                    case 'after':\n                    case 'first-line':\n                    case 'first-letter':\n                        C++;\n                        break;\n\n                    default:\n                        B++;\n                }\n                break;\n\n            // count the number of type selectors ...\n            case 'TypeSelector':\n                // ignore the universal selector\n                if (!node.name.endsWith('*')) {\n                    C++;\n                }\n                break;\n\n            // ... and pseudo-elements in the selector (= C)\n            case 'PseudoElementSelector':\n                C++;\n                break;\n        }\n    });\n\n    return [A, B, C];\n}\n\nmodule.exports = specificity;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNTY3MjMuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsZ0JBQWdCLG1CQUFPLENBQUMsS0FBVTs7QUFFbEM7QUFDQTtBQUNBLDJDQUEyQyx5QkFBeUI7QUFDcEU7O0FBRUE7QUFDQTs7QUFFQTtBQUNBLG9CQUFvQixPQUFPO0FBQzNCO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLDBCQUEwQjtBQUMxQjtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7O0FBRUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ibG9ja2JpdGUvLi9ub2RlX21vZHVsZXMvY3Nzby9janMvcmVzdHJ1Y3R1cmUvcHJlcGFyZS9zcGVjaWZpY2l0eS5janM/NGZlMCJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmNvbnN0IGNzc1RyZWUgPSByZXF1aXJlKCdjc3MtdHJlZScpO1xuXG5mdW5jdGlvbiBlbnN1cmVTZWxlY3Rvckxpc3Qobm9kZSkge1xuICAgIGlmIChub2RlLnR5cGUgPT09ICdSYXcnKSB7XG4gICAgICAgIHJldHVybiBjc3NUcmVlLnBhcnNlKG5vZGUudmFsdWUsIHsgY29udGV4dDogJ3NlbGVjdG9yTGlzdCcgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIG5vZGU7XG59XG5cbmZ1bmN0aW9uIG1heFNwZWNpZmljaXR5KGEsIGIpIHtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IDM7IGkrKykge1xuICAgICAgICBpZiAoYVtpXSAhPT0gYltpXSkge1xuICAgICAgICAgICAgcmV0dXJuIGFbaV0gPiBiW2ldID8gYSA6IGI7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gYTtcbn1cblxuZnVuY3Rpb24gbWF4U2VsZWN0b3JMaXN0U3BlY2lmaWNpdHkoc2VsZWN0b3JMaXN0KSB7XG4gICAgcmV0dXJuIGVuc3VyZVNlbGVjdG9yTGlzdChzZWxlY3Rvckxpc3QpLmNoaWxkcmVuLnJlZHVjZShcbiAgICAgICAgKHJlc3VsdCwgbm9kZSkgPT4gbWF4U3BlY2lmaWNpdHkoc3BlY2lmaWNpdHkobm9kZSksIHJlc3VsdCksXG4gICAgICAgIFswLCAwLCAwXVxuICAgICk7XG59XG5cbi8vIMKnMTYuIENhbGN1bGF0aW5nIGEgc2VsZWN0b3LigJlzIHNwZWNpZmljaXR5XG4vLyBodHRwczovL3d3dy53My5vcmcvVFIvc2VsZWN0b3JzLTQvI3NwZWNpZmljaXR5LXJ1bGVzXG5mdW5jdGlvbiBzcGVjaWZpY2l0eShzaW1wbGVTZWxlY3Rvcikge1xuICAgIGxldCBBID0gMDtcbiAgICBsZXQgQiA9IDA7XG4gICAgbGV0IEMgPSAwO1xuXG4gICAgLy8gQSBzZWxlY3RvcuKAmXMgc3BlY2lmaWNpdHkgaXMgY2FsY3VsYXRlZCBmb3IgYSBnaXZlbiBlbGVtZW50IGFzIGZvbGxvd3M6XG4gICAgc2ltcGxlU2VsZWN0b3IuY2hpbGRyZW4uZm9yRWFjaCgobm9kZSkgPT4ge1xuICAgICAgICBzd2l0Y2ggKG5vZGUudHlwZSkge1xuICAgICAgICAgICAgLy8gY291bnQgdGhlIG51bWJlciBvZiBJRCBzZWxlY3RvcnMgaW4gdGhlIHNlbGVjdG9yICg9IEEpXG4gICAgICAgICAgICBjYXNlICdJZFNlbGVjdG9yJzpcbiAgICAgICAgICAgICAgICBBKys7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgIC8vIGNvdW50IHRoZSBudW1iZXIgb2YgY2xhc3Mgc2VsZWN0b3JzLCBhdHRyaWJ1dGVzIHNlbGVjdG9ycywgLi4uXG4gICAgICAgICAgICBjYXNlICdDbGFzc1NlbGVjdG9yJzpcbiAgICAgICAgICAgIGNhc2UgJ0F0dHJpYnV0ZVNlbGVjdG9yJzpcbiAgICAgICAgICAgICAgICBCKys7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgIC8vIC4uLiBhbmQgcHNldWRvLWNsYXNzZXMgaW4gdGhlIHNlbGVjdG9yICg9IEIpXG4gICAgICAgICAgICBjYXNlICdQc2V1ZG9DbGFzc1NlbGVjdG9yJzpcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKG5vZGUubmFtZS50b0xvd2VyQ2FzZSgpKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIFRoZSBzcGVjaWZpY2l0eSBvZiBhbiA6aXMoKSwgOm5vdCgpLCBvciA6aGFzKCkgcHNldWRvLWNsYXNzIGlzIHJlcGxhY2VkXG4gICAgICAgICAgICAgICAgICAgIC8vIGJ5IHRoZSBzcGVjaWZpY2l0eSBvZiB0aGUgbW9zdCBzcGVjaWZpYyBjb21wbGV4IHNlbGVjdG9yIGluIGl0cyBzZWxlY3RvciBsaXN0IGFyZ3VtZW50LlxuICAgICAgICAgICAgICAgICAgICBjYXNlICdub3QnOlxuICAgICAgICAgICAgICAgICAgICBjYXNlICdoYXMnOlxuICAgICAgICAgICAgICAgICAgICBjYXNlICdpcyc6XG4gICAgICAgICAgICAgICAgICAgIC8vIDptYXRjaGVzKCkgaXMgdXNlZCBiZWZvcmUgaXQgd2FzIHJlbmFtZWQgdG8gOmlzKClcbiAgICAgICAgICAgICAgICAgICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL3czYy9jc3N3Zy1kcmFmdHMvaXNzdWVzLzMyNThcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnbWF0Y2hlcyc6XG4gICAgICAgICAgICAgICAgICAgIC8vIE9sZGVyIGJyb3dzZXJzIHN1cHBvcnQgOmlzKCkgZnVuY3Rpb25hbGl0eSBhcyBwcmVmaXhlZCBwc2V1ZG8tY2xhc3MgOmFueSgpXG4gICAgICAgICAgICAgICAgICAgIC8vIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0NTUy86aXNcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnLXdlYmtpdC1hbnknOlxuICAgICAgICAgICAgICAgICAgICBjYXNlICctbW96LWFueSc6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IFthLCBiLCBjXSA9IG1heFNlbGVjdG9yTGlzdFNwZWNpZmljaXR5KG5vZGUuY2hpbGRyZW4uZmlyc3QpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBBICs9IGE7XG4gICAgICAgICAgICAgICAgICAgICAgICBCICs9IGI7XG4gICAgICAgICAgICAgICAgICAgICAgICBDICs9IGM7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gQW5hbG9nb3VzbHksIHRoZSBzcGVjaWZpY2l0eSBvZiBhbiA6bnRoLWNoaWxkKCkgb3IgOm50aC1sYXN0LWNoaWxkKCkgc2VsZWN0b3JcbiAgICAgICAgICAgICAgICAgICAgLy8gaXMgdGhlIHNwZWNpZmljaXR5IG9mIHRoZSBwc2V1ZG8gY2xhc3MgaXRzZWxmIChjb3VudGluZyBhcyBvbmUgcHNldWRvLWNsYXNzIHNlbGVjdG9yKVxuICAgICAgICAgICAgICAgICAgICAvLyBwbHVzIHRoZSBzcGVjaWZpY2l0eSBvZiB0aGUgbW9zdCBzcGVjaWZpYyBjb21wbGV4IHNlbGVjdG9yIGluIGl0cyBzZWxlY3RvciBsaXN0IGFyZ3VtZW50IChpZiBhbnkpLlxuICAgICAgICAgICAgICAgICAgICBjYXNlICdudGgtY2hpbGQnOlxuICAgICAgICAgICAgICAgICAgICBjYXNlICdudGgtbGFzdC1jaGlsZCc6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGFyZyA9IG5vZGUuY2hpbGRyZW4uZmlyc3Q7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhcmcudHlwZSA9PT0gJ050aCcgJiYgYXJnLnNlbGVjdG9yKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgW2EsIGIsIGNdID0gbWF4U2VsZWN0b3JMaXN0U3BlY2lmaWNpdHkoYXJnLnNlbGVjdG9yKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIEEgKz0gYTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBCICs9IGIgKyAxO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIEMgKz0gYztcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgQisrO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIC8vIFRoZSBzcGVjaWZpY2l0eSBvZiBhIDp3aGVyZSgpIHBzZXVkby1jbGFzcyBpcyByZXBsYWNlZCBieSB6ZXJvLlxuICAgICAgICAgICAgICAgICAgICBjYXNlICd3aGVyZSc6XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgICAgICAvLyBUaGUgZm91ciBMZXZlbCAyIHBzZXVkby1lbGVtZW50cyAoOjpiZWZvcmUsIDo6YWZ0ZXIsIDo6Zmlyc3QtbGluZSwgYW5kIDo6Zmlyc3QtbGV0dGVyKSBtYXksXG4gICAgICAgICAgICAgICAgICAgIC8vIGZvciBsZWdhY3kgcmVhc29ucywgYmUgcmVwcmVzZW50ZWQgdXNpbmcgdGhlIDxwc2V1ZG8tY2xhc3Mtc2VsZWN0b3I+IGdyYW1tYXIsXG4gICAgICAgICAgICAgICAgICAgIC8vIHdpdGggb25seSBhIHNpbmdsZSBcIjpcIiBjaGFyYWN0ZXIgYXQgdGhlaXIgc3RhcnQuXG4gICAgICAgICAgICAgICAgICAgIC8vIGh0dHBzOi8vd3d3LnczLm9yZy9UUi9zZWxlY3RvcnMtNC8jc2luZ2xlLWNvbG9uLXBzZXVkb3NcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnYmVmb3JlJzpcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnYWZ0ZXInOlxuICAgICAgICAgICAgICAgICAgICBjYXNlICdmaXJzdC1saW5lJzpcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnZmlyc3QtbGV0dGVyJzpcbiAgICAgICAgICAgICAgICAgICAgICAgIEMrKztcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgICAgICBCKys7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAvLyBjb3VudCB0aGUgbnVtYmVyIG9mIHR5cGUgc2VsZWN0b3JzIC4uLlxuICAgICAgICAgICAgY2FzZSAnVHlwZVNlbGVjdG9yJzpcbiAgICAgICAgICAgICAgICAvLyBpZ25vcmUgdGhlIHVuaXZlcnNhbCBzZWxlY3RvclxuICAgICAgICAgICAgICAgIGlmICghbm9kZS5uYW1lLmVuZHNXaXRoKCcqJykpIHtcbiAgICAgICAgICAgICAgICAgICAgQysrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgLy8gLi4uIGFuZCBwc2V1ZG8tZWxlbWVudHMgaW4gdGhlIHNlbGVjdG9yICg9IEMpXG4gICAgICAgICAgICBjYXNlICdQc2V1ZG9FbGVtZW50U2VsZWN0b3InOlxuICAgICAgICAgICAgICAgIEMrKztcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIFtBLCBCLCBDXTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzcGVjaWZpY2l0eTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///56723\n")},66804:(__unused_webpack_module,exports)=>{"use strict";eval("\n\nconst { hasOwnProperty } = Object.prototype;\n\nfunction isEqualSelectors(a, b) {\n    let cursor1 = a.head;\n    let cursor2 = b.head;\n\n    while (cursor1 !== null && cursor2 !== null && cursor1.data.id === cursor2.data.id) {\n        cursor1 = cursor1.next;\n        cursor2 = cursor2.next;\n    }\n\n    return cursor1 === null && cursor2 === null;\n}\n\nfunction isEqualDeclarations(a, b) {\n    let cursor1 = a.head;\n    let cursor2 = b.head;\n\n    while (cursor1 !== null && cursor2 !== null && cursor1.data.id === cursor2.data.id) {\n        cursor1 = cursor1.next;\n        cursor2 = cursor2.next;\n    }\n\n    return cursor1 === null && cursor2 === null;\n}\n\nfunction compareDeclarations(declarations1, declarations2) {\n    const result = {\n        eq: [],\n        ne1: [],\n        ne2: [],\n        ne2overrided: []\n    };\n\n    const fingerprints = Object.create(null);\n    const declarations2hash = Object.create(null);\n\n    for (let cursor = declarations2.head; cursor; cursor = cursor.next)  {\n        declarations2hash[cursor.data.id] = true;\n    }\n\n    for (let cursor = declarations1.head; cursor; cursor = cursor.next)  {\n        const data = cursor.data;\n\n        if (data.fingerprint) {\n            fingerprints[data.fingerprint] = data.important;\n        }\n\n        if (declarations2hash[data.id]) {\n            declarations2hash[data.id] = false;\n            result.eq.push(data);\n        } else {\n            result.ne1.push(data);\n        }\n    }\n\n    for (let cursor = declarations2.head; cursor; cursor = cursor.next)  {\n        const data = cursor.data;\n\n        if (declarations2hash[data.id]) {\n            // when declarations1 has an overriding declaration, this is not a difference\n            // unless no !important is used on prev and !important is used on the following\n            if (!hasOwnProperty.call(fingerprints, data.fingerprint) ||\n                (!fingerprints[data.fingerprint] && data.important)) {\n                result.ne2.push(data);\n            }\n\n            result.ne2overrided.push(data);\n        }\n    }\n\n    return result;\n}\n\nfunction addSelectors(dest, source) {\n    source.forEach((sourceData) => {\n        const newStr = sourceData.id;\n        let cursor = dest.head;\n\n        while (cursor) {\n            const nextStr = cursor.data.id;\n\n            if (nextStr === newStr) {\n                return;\n            }\n\n            if (nextStr > newStr) {\n                break;\n            }\n\n            cursor = cursor.next;\n        }\n\n        dest.insert(dest.createItem(sourceData), cursor);\n    });\n\n    return dest;\n}\n\n// check if simpleselectors has no equal specificity and element selector\nfunction hasSimilarSelectors(selectors1, selectors2) {\n    let cursor1 = selectors1.head;\n\n    while (cursor1 !== null) {\n        let cursor2 = selectors2.head;\n\n        while (cursor2 !== null) {\n            if (cursor1.data.compareMarker === cursor2.data.compareMarker) {\n                return true;\n            }\n\n            cursor2 = cursor2.next;\n        }\n\n        cursor1 = cursor1.next;\n    }\n\n    return false;\n}\n\n// test node can't to be skipped\nfunction unsafeToSkipNode(node) {\n    switch (node.type) {\n        case 'Rule':\n            // unsafe skip ruleset with selector similarities\n            return hasSimilarSelectors(node.prelude.children, this);\n\n        case 'Atrule':\n            // can skip at-rules with blocks\n            if (node.block) {\n                // unsafe skip at-rule if block contains something unsafe to skip\n                return node.block.children.some(unsafeToSkipNode, this);\n            }\n            break;\n\n        case 'Declaration':\n            return false;\n    }\n\n    // unsafe by default\n    return true;\n}\n\nexports.addSelectors = addSelectors;\nexports.compareDeclarations = compareDeclarations;\nexports.hasSimilarSelectors = hasSimilarSelectors;\nexports.isEqualDeclarations = isEqualDeclarations;\nexports.isEqualSelectors = isEqualSelectors;\nexports.unsafeToSkipNode = unsafeToSkipNode;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNjY4MDQuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsUUFBUSxpQkFBaUI7O0FBRXpCO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUEsMENBQTBDLFFBQVE7QUFDbEQ7QUFDQTs7QUFFQSwwQ0FBMEMsUUFBUTtBQUNsRDs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTs7QUFFQSwwQ0FBMEMsUUFBUTtBQUNsRDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQSxvQkFBb0I7QUFDcEIsMkJBQTJCO0FBQzNCLDJCQUEyQjtBQUMzQiwyQkFBMkI7QUFDM0Isd0JBQXdCO0FBQ3hCLHdCQUF3QiIsInNvdXJjZXMiOlsid2VicGFjazovL2Jsb2NrYml0ZS8uL25vZGVfbW9kdWxlcy9jc3NvL2Nqcy9yZXN0cnVjdHVyZS91dGlscy5janM/MGVkYyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmNvbnN0IHsgaGFzT3duUHJvcGVydHkgfSA9IE9iamVjdC5wcm90b3R5cGU7XG5cbmZ1bmN0aW9uIGlzRXF1YWxTZWxlY3RvcnMoYSwgYikge1xuICAgIGxldCBjdXJzb3IxID0gYS5oZWFkO1xuICAgIGxldCBjdXJzb3IyID0gYi5oZWFkO1xuXG4gICAgd2hpbGUgKGN1cnNvcjEgIT09IG51bGwgJiYgY3Vyc29yMiAhPT0gbnVsbCAmJiBjdXJzb3IxLmRhdGEuaWQgPT09IGN1cnNvcjIuZGF0YS5pZCkge1xuICAgICAgICBjdXJzb3IxID0gY3Vyc29yMS5uZXh0O1xuICAgICAgICBjdXJzb3IyID0gY3Vyc29yMi5uZXh0O1xuICAgIH1cblxuICAgIHJldHVybiBjdXJzb3IxID09PSBudWxsICYmIGN1cnNvcjIgPT09IG51bGw7XG59XG5cbmZ1bmN0aW9uIGlzRXF1YWxEZWNsYXJhdGlvbnMoYSwgYikge1xuICAgIGxldCBjdXJzb3IxID0gYS5oZWFkO1xuICAgIGxldCBjdXJzb3IyID0gYi5oZWFkO1xuXG4gICAgd2hpbGUgKGN1cnNvcjEgIT09IG51bGwgJiYgY3Vyc29yMiAhPT0gbnVsbCAmJiBjdXJzb3IxLmRhdGEuaWQgPT09IGN1cnNvcjIuZGF0YS5pZCkge1xuICAgICAgICBjdXJzb3IxID0gY3Vyc29yMS5uZXh0O1xuICAgICAgICBjdXJzb3IyID0gY3Vyc29yMi5uZXh0O1xuICAgIH1cblxuICAgIHJldHVybiBjdXJzb3IxID09PSBudWxsICYmIGN1cnNvcjIgPT09IG51bGw7XG59XG5cbmZ1bmN0aW9uIGNvbXBhcmVEZWNsYXJhdGlvbnMoZGVjbGFyYXRpb25zMSwgZGVjbGFyYXRpb25zMikge1xuICAgIGNvbnN0IHJlc3VsdCA9IHtcbiAgICAgICAgZXE6IFtdLFxuICAgICAgICBuZTE6IFtdLFxuICAgICAgICBuZTI6IFtdLFxuICAgICAgICBuZTJvdmVycmlkZWQ6IFtdXG4gICAgfTtcblxuICAgIGNvbnN0IGZpbmdlcnByaW50cyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgY29uc3QgZGVjbGFyYXRpb25zMmhhc2ggPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuXG4gICAgZm9yIChsZXQgY3Vyc29yID0gZGVjbGFyYXRpb25zMi5oZWFkOyBjdXJzb3I7IGN1cnNvciA9IGN1cnNvci5uZXh0KSAge1xuICAgICAgICBkZWNsYXJhdGlvbnMyaGFzaFtjdXJzb3IuZGF0YS5pZF0gPSB0cnVlO1xuICAgIH1cblxuICAgIGZvciAobGV0IGN1cnNvciA9IGRlY2xhcmF0aW9uczEuaGVhZDsgY3Vyc29yOyBjdXJzb3IgPSBjdXJzb3IubmV4dCkgIHtcbiAgICAgICAgY29uc3QgZGF0YSA9IGN1cnNvci5kYXRhO1xuXG4gICAgICAgIGlmIChkYXRhLmZpbmdlcnByaW50KSB7XG4gICAgICAgICAgICBmaW5nZXJwcmludHNbZGF0YS5maW5nZXJwcmludF0gPSBkYXRhLmltcG9ydGFudDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChkZWNsYXJhdGlvbnMyaGFzaFtkYXRhLmlkXSkge1xuICAgICAgICAgICAgZGVjbGFyYXRpb25zMmhhc2hbZGF0YS5pZF0gPSBmYWxzZTtcbiAgICAgICAgICAgIHJlc3VsdC5lcS5wdXNoKGRhdGEpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmVzdWx0Lm5lMS5wdXNoKGRhdGEpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZm9yIChsZXQgY3Vyc29yID0gZGVjbGFyYXRpb25zMi5oZWFkOyBjdXJzb3I7IGN1cnNvciA9IGN1cnNvci5uZXh0KSAge1xuICAgICAgICBjb25zdCBkYXRhID0gY3Vyc29yLmRhdGE7XG5cbiAgICAgICAgaWYgKGRlY2xhcmF0aW9uczJoYXNoW2RhdGEuaWRdKSB7XG4gICAgICAgICAgICAvLyB3aGVuIGRlY2xhcmF0aW9uczEgaGFzIGFuIG92ZXJyaWRpbmcgZGVjbGFyYXRpb24sIHRoaXMgaXMgbm90IGEgZGlmZmVyZW5jZVxuICAgICAgICAgICAgLy8gdW5sZXNzIG5vICFpbXBvcnRhbnQgaXMgdXNlZCBvbiBwcmV2IGFuZCAhaW1wb3J0YW50IGlzIHVzZWQgb24gdGhlIGZvbGxvd2luZ1xuICAgICAgICAgICAgaWYgKCFoYXNPd25Qcm9wZXJ0eS5jYWxsKGZpbmdlcnByaW50cywgZGF0YS5maW5nZXJwcmludCkgfHxcbiAgICAgICAgICAgICAgICAoIWZpbmdlcnByaW50c1tkYXRhLmZpbmdlcnByaW50XSAmJiBkYXRhLmltcG9ydGFudCkpIHtcbiAgICAgICAgICAgICAgICByZXN1bHQubmUyLnB1c2goZGF0YSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJlc3VsdC5uZTJvdmVycmlkZWQucHVzaChkYXRhKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiByZXN1bHQ7XG59XG5cbmZ1bmN0aW9uIGFkZFNlbGVjdG9ycyhkZXN0LCBzb3VyY2UpIHtcbiAgICBzb3VyY2UuZm9yRWFjaCgoc291cmNlRGF0YSkgPT4ge1xuICAgICAgICBjb25zdCBuZXdTdHIgPSBzb3VyY2VEYXRhLmlkO1xuICAgICAgICBsZXQgY3Vyc29yID0gZGVzdC5oZWFkO1xuXG4gICAgICAgIHdoaWxlIChjdXJzb3IpIHtcbiAgICAgICAgICAgIGNvbnN0IG5leHRTdHIgPSBjdXJzb3IuZGF0YS5pZDtcblxuICAgICAgICAgICAgaWYgKG5leHRTdHIgPT09IG5ld1N0cikge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKG5leHRTdHIgPiBuZXdTdHIpIHtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY3Vyc29yID0gY3Vyc29yLm5leHQ7XG4gICAgICAgIH1cblxuICAgICAgICBkZXN0Lmluc2VydChkZXN0LmNyZWF0ZUl0ZW0oc291cmNlRGF0YSksIGN1cnNvcik7XG4gICAgfSk7XG5cbiAgICByZXR1cm4gZGVzdDtcbn1cblxuLy8gY2hlY2sgaWYgc2ltcGxlc2VsZWN0b3JzIGhhcyBubyBlcXVhbCBzcGVjaWZpY2l0eSBhbmQgZWxlbWVudCBzZWxlY3RvclxuZnVuY3Rpb24gaGFzU2ltaWxhclNlbGVjdG9ycyhzZWxlY3RvcnMxLCBzZWxlY3RvcnMyKSB7XG4gICAgbGV0IGN1cnNvcjEgPSBzZWxlY3RvcnMxLmhlYWQ7XG5cbiAgICB3aGlsZSAoY3Vyc29yMSAhPT0gbnVsbCkge1xuICAgICAgICBsZXQgY3Vyc29yMiA9IHNlbGVjdG9yczIuaGVhZDtcblxuICAgICAgICB3aGlsZSAoY3Vyc29yMiAhPT0gbnVsbCkge1xuICAgICAgICAgICAgaWYgKGN1cnNvcjEuZGF0YS5jb21wYXJlTWFya2VyID09PSBjdXJzb3IyLmRhdGEuY29tcGFyZU1hcmtlcikge1xuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBjdXJzb3IyID0gY3Vyc29yMi5uZXh0O1xuICAgICAgICB9XG5cbiAgICAgICAgY3Vyc29yMSA9IGN1cnNvcjEubmV4dDtcbiAgICB9XG5cbiAgICByZXR1cm4gZmFsc2U7XG59XG5cbi8vIHRlc3Qgbm9kZSBjYW4ndCB0byBiZSBza2lwcGVkXG5mdW5jdGlvbiB1bnNhZmVUb1NraXBOb2RlKG5vZGUpIHtcbiAgICBzd2l0Y2ggKG5vZGUudHlwZSkge1xuICAgICAgICBjYXNlICdSdWxlJzpcbiAgICAgICAgICAgIC8vIHVuc2FmZSBza2lwIHJ1bGVzZXQgd2l0aCBzZWxlY3RvciBzaW1pbGFyaXRpZXNcbiAgICAgICAgICAgIHJldHVybiBoYXNTaW1pbGFyU2VsZWN0b3JzKG5vZGUucHJlbHVkZS5jaGlsZHJlbiwgdGhpcyk7XG5cbiAgICAgICAgY2FzZSAnQXRydWxlJzpcbiAgICAgICAgICAgIC8vIGNhbiBza2lwIGF0LXJ1bGVzIHdpdGggYmxvY2tzXG4gICAgICAgICAgICBpZiAobm9kZS5ibG9jaykge1xuICAgICAgICAgICAgICAgIC8vIHVuc2FmZSBza2lwIGF0LXJ1bGUgaWYgYmxvY2sgY29udGFpbnMgc29tZXRoaW5nIHVuc2FmZSB0byBza2lwXG4gICAgICAgICAgICAgICAgcmV0dXJuIG5vZGUuYmxvY2suY2hpbGRyZW4uc29tZSh1bnNhZmVUb1NraXBOb2RlLCB0aGlzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgJ0RlY2xhcmF0aW9uJzpcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICAvLyB1bnNhZmUgYnkgZGVmYXVsdFxuICAgIHJldHVybiB0cnVlO1xufVxuXG5leHBvcnRzLmFkZFNlbGVjdG9ycyA9IGFkZFNlbGVjdG9ycztcbmV4cG9ydHMuY29tcGFyZURlY2xhcmF0aW9ucyA9IGNvbXBhcmVEZWNsYXJhdGlvbnM7XG5leHBvcnRzLmhhc1NpbWlsYXJTZWxlY3RvcnMgPSBoYXNTaW1pbGFyU2VsZWN0b3JzO1xuZXhwb3J0cy5pc0VxdWFsRGVjbGFyYXRpb25zID0gaXNFcXVhbERlY2xhcmF0aW9ucztcbmV4cG9ydHMuaXNFcXVhbFNlbGVjdG9ycyA9IGlzRXF1YWxTZWxlY3RvcnM7XG5leHBvcnRzLnVuc2FmZVRvU2tpcE5vZGUgPSB1bnNhZmVUb1NraXBOb2RlO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///66804\n")},50053:(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";eval("\n\nconst cssTree = __webpack_require__(22694);\nconst compress = __webpack_require__(64040);\nconst specificity = __webpack_require__(56723);\n\nfunction encodeString(value) {\n    const stringApostrophe = cssTree.string.encode(value, true);\n    const stringQuote = cssTree.string.encode(value);\n\n    return stringApostrophe.length < stringQuote.length\n        ? stringApostrophe\n        : stringQuote;\n}\n\nconst {\n    lexer,\n    tokenize,\n    parse,\n    generate,\n    walk,\n    find,\n    findLast,\n    findAll,\n    fromPlainObject,\n    toPlainObject\n} = cssTree.fork({\n    node: {\n        String: {\n            generate(node) {\n                this.token(cssTree.tokenTypes.String, encodeString(node.value));\n            }\n        },\n        Url: {\n            generate(node) {\n                const encodedUrl = cssTree.url.encode(node.value);\n                const string = encodeString(node.value);\n\n                this.token(cssTree.tokenTypes.Url,\n                    encodedUrl.length <= string.length + 5 /* \"url()\".length */\n                        ? encodedUrl\n                        : 'url(' + string + ')'\n                );\n            }\n        }\n    }\n});\n\nexports.compress = compress;\nexports.specificity = specificity;\nexports.find = find;\nexports.findAll = findAll;\nexports.findLast = findLast;\nexports.fromPlainObject = fromPlainObject;\nexports.generate = generate;\nexports.lexer = lexer;\nexports.parse = parse;\nexports.toPlainObject = toPlainObject;\nexports.tokenize = tokenize;\nexports.walk = walk;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNTAwNTMuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsZ0JBQWdCLG1CQUFPLENBQUMsS0FBVTtBQUNsQyxpQkFBaUIsbUJBQU8sQ0FBQyxLQUFnQjtBQUN6QyxvQkFBb0IsbUJBQU8sQ0FBQyxLQUF1Qzs7QUFFbkU7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxFQUFFO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQzs7QUFFRCxnQkFBZ0I7QUFDaEIsbUJBQW1CO0FBQ25CLFlBQVk7QUFDWixlQUFlO0FBQ2YsZ0JBQWdCO0FBQ2hCLHVCQUF1QjtBQUN2QixnQkFBZ0I7QUFDaEIsYUFBYTtBQUNiLGFBQWE7QUFDYixxQkFBcUI7QUFDckIsZ0JBQWdCO0FBQ2hCLFlBQVkiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ibG9ja2JpdGUvLi9ub2RlX21vZHVsZXMvY3Nzby9janMvc3ludGF4LmNqcz85NWIyIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuY29uc3QgY3NzVHJlZSA9IHJlcXVpcmUoJ2Nzcy10cmVlJyk7XG5jb25zdCBjb21wcmVzcyA9IHJlcXVpcmUoJy4vY29tcHJlc3MuY2pzJyk7XG5jb25zdCBzcGVjaWZpY2l0eSA9IHJlcXVpcmUoJy4vcmVzdHJ1Y3R1cmUvcHJlcGFyZS9zcGVjaWZpY2l0eS5janMnKTtcblxuZnVuY3Rpb24gZW5jb2RlU3RyaW5nKHZhbHVlKSB7XG4gICAgY29uc3Qgc3RyaW5nQXBvc3Ryb3BoZSA9IGNzc1RyZWUuc3RyaW5nLmVuY29kZSh2YWx1ZSwgdHJ1ZSk7XG4gICAgY29uc3Qgc3RyaW5nUXVvdGUgPSBjc3NUcmVlLnN0cmluZy5lbmNvZGUodmFsdWUpO1xuXG4gICAgcmV0dXJuIHN0cmluZ0Fwb3N0cm9waGUubGVuZ3RoIDwgc3RyaW5nUXVvdGUubGVuZ3RoXG4gICAgICAgID8gc3RyaW5nQXBvc3Ryb3BoZVxuICAgICAgICA6IHN0cmluZ1F1b3RlO1xufVxuXG5jb25zdCB7XG4gICAgbGV4ZXIsXG4gICAgdG9rZW5pemUsXG4gICAgcGFyc2UsXG4gICAgZ2VuZXJhdGUsXG4gICAgd2FsayxcbiAgICBmaW5kLFxuICAgIGZpbmRMYXN0LFxuICAgIGZpbmRBbGwsXG4gICAgZnJvbVBsYWluT2JqZWN0LFxuICAgIHRvUGxhaW5PYmplY3Rcbn0gPSBjc3NUcmVlLmZvcmsoe1xuICAgIG5vZGU6IHtcbiAgICAgICAgU3RyaW5nOiB7XG4gICAgICAgICAgICBnZW5lcmF0ZShub2RlKSB7XG4gICAgICAgICAgICAgICAgdGhpcy50b2tlbihjc3NUcmVlLnRva2VuVHlwZXMuU3RyaW5nLCBlbmNvZGVTdHJpbmcobm9kZS52YWx1ZSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBVcmw6IHtcbiAgICAgICAgICAgIGdlbmVyYXRlKG5vZGUpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBlbmNvZGVkVXJsID0gY3NzVHJlZS51cmwuZW5jb2RlKG5vZGUudmFsdWUpO1xuICAgICAgICAgICAgICAgIGNvbnN0IHN0cmluZyA9IGVuY29kZVN0cmluZyhub2RlLnZhbHVlKTtcblxuICAgICAgICAgICAgICAgIHRoaXMudG9rZW4oY3NzVHJlZS50b2tlblR5cGVzLlVybCxcbiAgICAgICAgICAgICAgICAgICAgZW5jb2RlZFVybC5sZW5ndGggPD0gc3RyaW5nLmxlbmd0aCArIDUgLyogXCJ1cmwoKVwiLmxlbmd0aCAqL1xuICAgICAgICAgICAgICAgICAgICAgICAgPyBlbmNvZGVkVXJsXG4gICAgICAgICAgICAgICAgICAgICAgICA6ICd1cmwoJyArIHN0cmluZyArICcpJ1xuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG59KTtcblxuZXhwb3J0cy5jb21wcmVzcyA9IGNvbXByZXNzO1xuZXhwb3J0cy5zcGVjaWZpY2l0eSA9IHNwZWNpZmljaXR5O1xuZXhwb3J0cy5maW5kID0gZmluZDtcbmV4cG9ydHMuZmluZEFsbCA9IGZpbmRBbGw7XG5leHBvcnRzLmZpbmRMYXN0ID0gZmluZExhc3Q7XG5leHBvcnRzLmZyb21QbGFpbk9iamVjdCA9IGZyb21QbGFpbk9iamVjdDtcbmV4cG9ydHMuZ2VuZXJhdGUgPSBnZW5lcmF0ZTtcbmV4cG9ydHMubGV4ZXIgPSBsZXhlcjtcbmV4cG9ydHMucGFyc2UgPSBwYXJzZTtcbmV4cG9ydHMudG9QbGFpbk9iamVjdCA9IHRvUGxhaW5PYmplY3Q7XG5leHBvcnRzLnRva2VuaXplID0gdG9rZW5pemU7XG5leHBvcnRzLndhbGsgPSB3YWxrO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///50053\n")},73969:(__unused_webpack_module,exports)=>{"use strict";eval("\n\nconst { hasOwnProperty } = Object.prototype;\n\nfunction buildMap(list, caseInsensitive) {\n    const map = Object.create(null);\n\n    if (!Array.isArray(list)) {\n        return null;\n    }\n\n    for (let name of list) {\n        if (caseInsensitive) {\n            name = name.toLowerCase();\n        }\n\n        map[name] = true;\n    }\n\n    return map;\n}\n\nfunction buildList(data) {\n    if (!data) {\n        return null;\n    }\n\n    const tags = buildMap(data.tags, true);\n    const ids = buildMap(data.ids);\n    const classes = buildMap(data.classes);\n\n    if (tags === null &&\n        ids === null &&\n        classes === null) {\n        return null;\n    }\n\n    return {\n        tags,\n        ids,\n        classes\n    };\n}\n\nfunction buildIndex(data) {\n    let scopes = false;\n\n    if (data.scopes && Array.isArray(data.scopes)) {\n        scopes = Object.create(null);\n\n        for (let i = 0; i < data.scopes.length; i++) {\n            const list = data.scopes[i];\n\n            if (!list || !Array.isArray(list)) {\n                throw new Error('Wrong usage format');\n            }\n\n            for (const name of list) {\n                if (hasOwnProperty.call(scopes, name)) {\n                    throw new Error(`Class can't be used for several scopes: ${name}`);\n                }\n\n                scopes[name] = i + 1;\n            }\n        }\n    }\n\n    return {\n        whitelist: buildList(data),\n        blacklist: buildList(data.blacklist),\n        scopes\n    };\n}\n\nexports.buildIndex = buildIndex;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNzM5NjkuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsUUFBUSxpQkFBaUI7O0FBRXpCO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBLHdCQUF3Qix3QkFBd0I7QUFDaEQ7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSwrRUFBK0UsS0FBSztBQUNwRjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsa0JBQWtCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYmxvY2tiaXRlLy4vbm9kZV9tb2R1bGVzL2Nzc28vY2pzL3VzYWdlLmNqcz8yZTk3Il0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuY29uc3QgeyBoYXNPd25Qcm9wZXJ0eSB9ID0gT2JqZWN0LnByb3RvdHlwZTtcblxuZnVuY3Rpb24gYnVpbGRNYXAobGlzdCwgY2FzZUluc2Vuc2l0aXZlKSB7XG4gICAgY29uc3QgbWFwID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcblxuICAgIGlmICghQXJyYXkuaXNBcnJheShsaXN0KSkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICBmb3IgKGxldCBuYW1lIG9mIGxpc3QpIHtcbiAgICAgICAgaWYgKGNhc2VJbnNlbnNpdGl2ZSkge1xuICAgICAgICAgICAgbmFtZSA9IG5hbWUudG9Mb3dlckNhc2UoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIG1hcFtuYW1lXSA9IHRydWU7XG4gICAgfVxuXG4gICAgcmV0dXJuIG1hcDtcbn1cblxuZnVuY3Rpb24gYnVpbGRMaXN0KGRhdGEpIHtcbiAgICBpZiAoIWRhdGEpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgY29uc3QgdGFncyA9IGJ1aWxkTWFwKGRhdGEudGFncywgdHJ1ZSk7XG4gICAgY29uc3QgaWRzID0gYnVpbGRNYXAoZGF0YS5pZHMpO1xuICAgIGNvbnN0IGNsYXNzZXMgPSBidWlsZE1hcChkYXRhLmNsYXNzZXMpO1xuXG4gICAgaWYgKHRhZ3MgPT09IG51bGwgJiZcbiAgICAgICAgaWRzID09PSBudWxsICYmXG4gICAgICAgIGNsYXNzZXMgPT09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgICAgdGFncyxcbiAgICAgICAgaWRzLFxuICAgICAgICBjbGFzc2VzXG4gICAgfTtcbn1cblxuZnVuY3Rpb24gYnVpbGRJbmRleChkYXRhKSB7XG4gICAgbGV0IHNjb3BlcyA9IGZhbHNlO1xuXG4gICAgaWYgKGRhdGEuc2NvcGVzICYmIEFycmF5LmlzQXJyYXkoZGF0YS5zY29wZXMpKSB7XG4gICAgICAgIHNjb3BlcyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG5cbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBkYXRhLnNjb3Blcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgY29uc3QgbGlzdCA9IGRhdGEuc2NvcGVzW2ldO1xuXG4gICAgICAgICAgICBpZiAoIWxpc3QgfHwgIUFycmF5LmlzQXJyYXkobGlzdCkpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1dyb25nIHVzYWdlIGZvcm1hdCcpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBmb3IgKGNvbnN0IG5hbWUgb2YgbGlzdCkge1xuICAgICAgICAgICAgICAgIGlmIChoYXNPd25Qcm9wZXJ0eS5jYWxsKHNjb3BlcywgbmFtZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBDbGFzcyBjYW4ndCBiZSB1c2VkIGZvciBzZXZlcmFsIHNjb3BlczogJHtuYW1lfWApO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHNjb3Blc1tuYW1lXSA9IGkgKyAxO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgICAgd2hpdGVsaXN0OiBidWlsZExpc3QoZGF0YSksXG4gICAgICAgIGJsYWNrbGlzdDogYnVpbGRMaXN0KGRhdGEuYmxhY2tsaXN0KSxcbiAgICAgICAgc2NvcGVzXG4gICAgfTtcbn1cblxuZXhwb3J0cy5idWlsZEluZGV4ID0gYnVpbGRJbmRleDtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///73969\n")},23739:(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";eval("\n\nconst processSelector = __webpack_require__(9111);\nconst utils$1 = __webpack_require__(66804);\n\n\n\nexports.processSelector = processSelector;\nexports.addSelectors = utils$1.addSelectors;\nexports.compareDeclarations = utils$1.compareDeclarations;\nexports.hasSimilarSelectors = utils$1.hasSimilarSelectors;\nexports.isEqualDeclarations = utils$1.isEqualDeclarations;\nexports.isEqualSelectors = utils$1.isEqualSelectors;\nexports.unsafeToSkipNode = utils$1.unsafeToSkipNode;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjM3MzkuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsd0JBQXdCLG1CQUFPLENBQUMsSUFBMkM7QUFDM0UsZ0JBQWdCLG1CQUFPLENBQUMsS0FBeUI7Ozs7QUFJakQsdUJBQXVCO0FBQ3ZCLG9CQUFvQjtBQUNwQiwyQkFBMkI7QUFDM0IsMkJBQTJCO0FBQzNCLDJCQUEyQjtBQUMzQix3QkFBd0I7QUFDeEIsd0JBQXdCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYmxvY2tiaXRlLy4vbm9kZV9tb2R1bGVzL2Nzc28vY2pzL3V0aWxzLmNqcz82MTI1Il0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuY29uc3QgcHJvY2Vzc1NlbGVjdG9yID0gcmVxdWlyZSgnLi9yZXN0cnVjdHVyZS9wcmVwYXJlL3Byb2Nlc3NTZWxlY3Rvci5janMnKTtcbmNvbnN0IHV0aWxzJDEgPSByZXF1aXJlKCcuL3Jlc3RydWN0dXJlL3V0aWxzLmNqcycpO1xuXG5cblxuZXhwb3J0cy5wcm9jZXNzU2VsZWN0b3IgPSBwcm9jZXNzU2VsZWN0b3I7XG5leHBvcnRzLmFkZFNlbGVjdG9ycyA9IHV0aWxzJDEuYWRkU2VsZWN0b3JzO1xuZXhwb3J0cy5jb21wYXJlRGVjbGFyYXRpb25zID0gdXRpbHMkMS5jb21wYXJlRGVjbGFyYXRpb25zO1xuZXhwb3J0cy5oYXNTaW1pbGFyU2VsZWN0b3JzID0gdXRpbHMkMS5oYXNTaW1pbGFyU2VsZWN0b3JzO1xuZXhwb3J0cy5pc0VxdWFsRGVjbGFyYXRpb25zID0gdXRpbHMkMS5pc0VxdWFsRGVjbGFyYXRpb25zO1xuZXhwb3J0cy5pc0VxdWFsU2VsZWN0b3JzID0gdXRpbHMkMS5pc0VxdWFsU2VsZWN0b3JzO1xuZXhwb3J0cy51bnNhZmVUb1NraXBOb2RlID0gdXRpbHMkMS51bnNhZmVUb1NraXBOb2RlO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///23739\n")},45732:module=>{eval('module.exports = "5.0.5";//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDU3MzIuanMiLCJtYXBwaW5ncyI6IkFBQUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ibG9ja2JpdGUvLi9ub2RlX21vZHVsZXMvY3Nzby9kaXN0L3ZlcnNpb24uY2pzPzA3NmYiXSwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSBcIjUuMC41XCI7Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///45732\n')},29515:(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";eval("\n\nconst List = __webpack_require__(28572);\n\nfunction createConvertor(walk) {\n    return {\n        fromPlainObject(ast) {\n            walk(ast, {\n                enter(node) {\n                    if (node.children && node.children instanceof List.List === false) {\n                        node.children = new List.List().fromArray(node.children);\n                    }\n                }\n            });\n\n            return ast;\n        },\n        toPlainObject(ast) {\n            walk(ast, {\n                leave(node) {\n                    if (node.children && node.children instanceof List.List) {\n                        node.children = node.children.toArray();\n                    }\n                }\n            });\n\n            return ast;\n        }\n    };\n}\n\nexports.createConvertor = createConvertor;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjk1MTUuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsYUFBYSxtQkFBTyxDQUFDLEtBQW1COztBQUV4QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhOztBQUViO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTs7QUFFYjtBQUNBO0FBQ0E7QUFDQTs7QUFFQSx1QkFBdUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ibG9ja2JpdGUvLi9ub2RlX21vZHVsZXMvY3Nzby9ub2RlX21vZHVsZXMvY3NzLXRyZWUvY2pzL2NvbnZlcnRvci9jcmVhdGUuY2pzP2UwZDYiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBMaXN0ID0gcmVxdWlyZSgnLi4vdXRpbHMvTGlzdC5janMnKTtcblxuZnVuY3Rpb24gY3JlYXRlQ29udmVydG9yKHdhbGspIHtcbiAgICByZXR1cm4ge1xuICAgICAgICBmcm9tUGxhaW5PYmplY3QoYXN0KSB7XG4gICAgICAgICAgICB3YWxrKGFzdCwge1xuICAgICAgICAgICAgICAgIGVudGVyKG5vZGUpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG5vZGUuY2hpbGRyZW4gJiYgbm9kZS5jaGlsZHJlbiBpbnN0YW5jZW9mIExpc3QuTGlzdCA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5vZGUuY2hpbGRyZW4gPSBuZXcgTGlzdC5MaXN0KCkuZnJvbUFycmF5KG5vZGUuY2hpbGRyZW4pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIHJldHVybiBhc3Q7XG4gICAgICAgIH0sXG4gICAgICAgIHRvUGxhaW5PYmplY3QoYXN0KSB7XG4gICAgICAgICAgICB3YWxrKGFzdCwge1xuICAgICAgICAgICAgICAgIGxlYXZlKG5vZGUpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG5vZGUuY2hpbGRyZW4gJiYgbm9kZS5jaGlsZHJlbiBpbnN0YW5jZW9mIExpc3QuTGlzdCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgbm9kZS5jaGlsZHJlbiA9IG5vZGUuY2hpbGRyZW4udG9BcnJheSgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIHJldHVybiBhc3Q7XG4gICAgICAgIH1cbiAgICB9O1xufVxuXG5leHBvcnRzLmNyZWF0ZUNvbnZlcnRvciA9IGNyZWF0ZUNvbnZlcnRvcjtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///29515\n")},68843:(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";eval("\n\nconst createCustomError = __webpack_require__(79161);\n\nfunction SyntaxError(message, input, offset) {\n    return Object.assign(createCustomError.createCustomError('SyntaxError', message), {\n        input,\n        offset,\n        rawMessage: message,\n        message: message + '\\n' +\n            '  ' + input + '\\n' +\n            '--' + new Array((offset || input.length) + 1).join('-') + '^'\n    });\n}\n\nexports.SyntaxError = SyntaxError;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNjg4NDMuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsMEJBQTBCLG1CQUFPLENBQUMsS0FBa0M7O0FBRXBFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7O0FBRUEsbUJBQW1CIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYmxvY2tiaXRlLy4vbm9kZV9tb2R1bGVzL2Nzc28vbm9kZV9tb2R1bGVzL2Nzcy10cmVlL2Nqcy9kZWZpbml0aW9uLXN5bnRheC9TeW50YXhFcnJvci5janM/NDM1MiJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmNvbnN0IGNyZWF0ZUN1c3RvbUVycm9yID0gcmVxdWlyZSgnLi4vdXRpbHMvY3JlYXRlLWN1c3RvbS1lcnJvci5janMnKTtcblxuZnVuY3Rpb24gU3ludGF4RXJyb3IobWVzc2FnZSwgaW5wdXQsIG9mZnNldCkge1xuICAgIHJldHVybiBPYmplY3QuYXNzaWduKGNyZWF0ZUN1c3RvbUVycm9yLmNyZWF0ZUN1c3RvbUVycm9yKCdTeW50YXhFcnJvcicsIG1lc3NhZ2UpLCB7XG4gICAgICAgIGlucHV0LFxuICAgICAgICBvZmZzZXQsXG4gICAgICAgIHJhd01lc3NhZ2U6IG1lc3NhZ2UsXG4gICAgICAgIG1lc3NhZ2U6IG1lc3NhZ2UgKyAnXFxuJyArXG4gICAgICAgICAgICAnICAnICsgaW5wdXQgKyAnXFxuJyArXG4gICAgICAgICAgICAnLS0nICsgbmV3IEFycmF5KChvZmZzZXQgfHwgaW5wdXQubGVuZ3RoKSArIDEpLmpvaW4oJy0nKSArICdeJ1xuICAgIH0pO1xufVxuXG5leHBvcnRzLlN5bnRheEVycm9yID0gU3ludGF4RXJyb3I7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///68843\n")},22599:(__unused_webpack_module,exports)=>{"use strict";eval("\n\nfunction noop(value) {\n    return value;\n}\n\nfunction generateMultiplier(multiplier) {\n    const { min, max, comma } = multiplier;\n\n    if (min === 0 && max === 0) {\n        return comma ? '#?' : '*';\n    }\n\n    if (min === 0 && max === 1) {\n        return '?';\n    }\n\n    if (min === 1 && max === 0) {\n        return comma ? '#' : '+';\n    }\n\n    if (min === 1 && max === 1) {\n        return '';\n    }\n\n    return (\n        (comma ? '#' : '') +\n        (min === max\n            ? '{' + min + '}'\n            : '{' + min + ',' + (max !== 0 ? max : '') + '}'\n        )\n    );\n}\n\nfunction generateTypeOpts(node) {\n    switch (node.type) {\n        case 'Range':\n            return (\n                ' [' +\n                (node.min === null ? '-∞' : node.min) +\n                ',' +\n                (node.max === null ? '∞' : node.max) +\n                ']'\n            );\n\n        default:\n            throw new Error('Unknown node type `' + node.type + '`');\n    }\n}\n\nfunction generateSequence(node, decorate, forceBraces, compact) {\n    const combinator = node.combinator === ' ' || compact ? node.combinator : ' ' + node.combinator + ' ';\n    const result = node.terms\n        .map(term => internalGenerate(term, decorate, forceBraces, compact))\n        .join(combinator);\n\n    if (node.explicit || forceBraces) {\n        return (compact || result[0] === ',' ? '[' : '[ ') + result + (compact ? ']' : ' ]');\n    }\n\n    return result;\n}\n\nfunction internalGenerate(node, decorate, forceBraces, compact) {\n    let result;\n\n    switch (node.type) {\n        case 'Group':\n            result =\n                generateSequence(node, decorate, forceBraces, compact) +\n                (node.disallowEmpty ? '!' : '');\n            break;\n\n        case 'Multiplier':\n            // return since node is a composition\n            return (\n                internalGenerate(node.term, decorate, forceBraces, compact) +\n                decorate(generateMultiplier(node), node)\n            );\n\n        case 'Type':\n            result = '<' + node.name + (node.opts ? decorate(generateTypeOpts(node.opts), node.opts) : '') + '>';\n            break;\n\n        case 'Property':\n            result = '<\\'' + node.name + '\\'>';\n            break;\n\n        case 'Keyword':\n            result = node.name;\n            break;\n\n        case 'AtKeyword':\n            result = '@' + node.name;\n            break;\n\n        case 'Function':\n            result = node.name + '(';\n            break;\n\n        case 'String':\n        case 'Token':\n            result = node.value;\n            break;\n\n        case 'Comma':\n            result = ',';\n            break;\n\n        default:\n            throw new Error('Unknown node type `' + node.type + '`');\n    }\n\n    return decorate(result, node);\n}\n\nfunction generate(node, options) {\n    let decorate = noop;\n    let forceBraces = false;\n    let compact = false;\n\n    if (typeof options === 'function') {\n        decorate = options;\n    } else if (options) {\n        forceBraces = Boolean(options.forceBraces);\n        compact = Boolean(options.compact);\n        if (typeof options.decorate === 'function') {\n            decorate = options.decorate;\n        }\n    }\n\n    return internalGenerate(node, decorate, forceBraces, compact);\n}\n\nexports.generate = generate;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjI1OTkuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWI7QUFDQTtBQUNBOztBQUVBO0FBQ0EsWUFBWSxrQkFBa0I7O0FBRTlCO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0IsWUFBWTtBQUM1QixnQkFBZ0IsMkNBQTJDO0FBQzNEO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBLGdCQUFnQiIsInNvdXJjZXMiOlsid2VicGFjazovL2Jsb2NrYml0ZS8uL25vZGVfbW9kdWxlcy9jc3NvL25vZGVfbW9kdWxlcy9jc3MtdHJlZS9janMvZGVmaW5pdGlvbi1zeW50YXgvZ2VuZXJhdGUuY2pzP2Q1NzgiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5mdW5jdGlvbiBub29wKHZhbHVlKSB7XG4gICAgcmV0dXJuIHZhbHVlO1xufVxuXG5mdW5jdGlvbiBnZW5lcmF0ZU11bHRpcGxpZXIobXVsdGlwbGllcikge1xuICAgIGNvbnN0IHsgbWluLCBtYXgsIGNvbW1hIH0gPSBtdWx0aXBsaWVyO1xuXG4gICAgaWYgKG1pbiA9PT0gMCAmJiBtYXggPT09IDApIHtcbiAgICAgICAgcmV0dXJuIGNvbW1hID8gJyM/JyA6ICcqJztcbiAgICB9XG5cbiAgICBpZiAobWluID09PSAwICYmIG1heCA9PT0gMSkge1xuICAgICAgICByZXR1cm4gJz8nO1xuICAgIH1cblxuICAgIGlmIChtaW4gPT09IDEgJiYgbWF4ID09PSAwKSB7XG4gICAgICAgIHJldHVybiBjb21tYSA/ICcjJyA6ICcrJztcbiAgICB9XG5cbiAgICBpZiAobWluID09PSAxICYmIG1heCA9PT0gMSkge1xuICAgICAgICByZXR1cm4gJyc7XG4gICAgfVxuXG4gICAgcmV0dXJuIChcbiAgICAgICAgKGNvbW1hID8gJyMnIDogJycpICtcbiAgICAgICAgKG1pbiA9PT0gbWF4XG4gICAgICAgICAgICA/ICd7JyArIG1pbiArICd9J1xuICAgICAgICAgICAgOiAneycgKyBtaW4gKyAnLCcgKyAobWF4ICE9PSAwID8gbWF4IDogJycpICsgJ30nXG4gICAgICAgIClcbiAgICApO1xufVxuXG5mdW5jdGlvbiBnZW5lcmF0ZVR5cGVPcHRzKG5vZGUpIHtcbiAgICBzd2l0Y2ggKG5vZGUudHlwZSkge1xuICAgICAgICBjYXNlICdSYW5nZSc6XG4gICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICAgICcgWycgK1xuICAgICAgICAgICAgICAgIChub2RlLm1pbiA9PT0gbnVsbCA/ICct4oieJyA6IG5vZGUubWluKSArXG4gICAgICAgICAgICAgICAgJywnICtcbiAgICAgICAgICAgICAgICAobm9kZS5tYXggPT09IG51bGwgPyAn4oieJyA6IG5vZGUubWF4KSArXG4gICAgICAgICAgICAgICAgJ10nXG4gICAgICAgICAgICApO1xuXG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1Vua25vd24gbm9kZSB0eXBlIGAnICsgbm9kZS50eXBlICsgJ2AnKTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIGdlbmVyYXRlU2VxdWVuY2Uobm9kZSwgZGVjb3JhdGUsIGZvcmNlQnJhY2VzLCBjb21wYWN0KSB7XG4gICAgY29uc3QgY29tYmluYXRvciA9IG5vZGUuY29tYmluYXRvciA9PT0gJyAnIHx8IGNvbXBhY3QgPyBub2RlLmNvbWJpbmF0b3IgOiAnICcgKyBub2RlLmNvbWJpbmF0b3IgKyAnICc7XG4gICAgY29uc3QgcmVzdWx0ID0gbm9kZS50ZXJtc1xuICAgICAgICAubWFwKHRlcm0gPT4gaW50ZXJuYWxHZW5lcmF0ZSh0ZXJtLCBkZWNvcmF0ZSwgZm9yY2VCcmFjZXMsIGNvbXBhY3QpKVxuICAgICAgICAuam9pbihjb21iaW5hdG9yKTtcblxuICAgIGlmIChub2RlLmV4cGxpY2l0IHx8IGZvcmNlQnJhY2VzKSB7XG4gICAgICAgIHJldHVybiAoY29tcGFjdCB8fCByZXN1bHRbMF0gPT09ICcsJyA/ICdbJyA6ICdbICcpICsgcmVzdWx0ICsgKGNvbXBhY3QgPyAnXScgOiAnIF0nKTtcbiAgICB9XG5cbiAgICByZXR1cm4gcmVzdWx0O1xufVxuXG5mdW5jdGlvbiBpbnRlcm5hbEdlbmVyYXRlKG5vZGUsIGRlY29yYXRlLCBmb3JjZUJyYWNlcywgY29tcGFjdCkge1xuICAgIGxldCByZXN1bHQ7XG5cbiAgICBzd2l0Y2ggKG5vZGUudHlwZSkge1xuICAgICAgICBjYXNlICdHcm91cCc6XG4gICAgICAgICAgICByZXN1bHQgPVxuICAgICAgICAgICAgICAgIGdlbmVyYXRlU2VxdWVuY2Uobm9kZSwgZGVjb3JhdGUsIGZvcmNlQnJhY2VzLCBjb21wYWN0KSArXG4gICAgICAgICAgICAgICAgKG5vZGUuZGlzYWxsb3dFbXB0eSA/ICchJyA6ICcnKTtcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgJ011bHRpcGxpZXInOlxuICAgICAgICAgICAgLy8gcmV0dXJuIHNpbmNlIG5vZGUgaXMgYSBjb21wb3NpdGlvblxuICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgICBpbnRlcm5hbEdlbmVyYXRlKG5vZGUudGVybSwgZGVjb3JhdGUsIGZvcmNlQnJhY2VzLCBjb21wYWN0KSArXG4gICAgICAgICAgICAgICAgZGVjb3JhdGUoZ2VuZXJhdGVNdWx0aXBsaWVyKG5vZGUpLCBub2RlKVxuICAgICAgICAgICAgKTtcblxuICAgICAgICBjYXNlICdUeXBlJzpcbiAgICAgICAgICAgIHJlc3VsdCA9ICc8JyArIG5vZGUubmFtZSArIChub2RlLm9wdHMgPyBkZWNvcmF0ZShnZW5lcmF0ZVR5cGVPcHRzKG5vZGUub3B0cyksIG5vZGUub3B0cykgOiAnJykgKyAnPic7XG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlICdQcm9wZXJ0eSc6XG4gICAgICAgICAgICByZXN1bHQgPSAnPFxcJycgKyBub2RlLm5hbWUgKyAnXFwnPic7XG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlICdLZXl3b3JkJzpcbiAgICAgICAgICAgIHJlc3VsdCA9IG5vZGUubmFtZTtcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgJ0F0S2V5d29yZCc6XG4gICAgICAgICAgICByZXN1bHQgPSAnQCcgKyBub2RlLm5hbWU7XG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlICdGdW5jdGlvbic6XG4gICAgICAgICAgICByZXN1bHQgPSBub2RlLm5hbWUgKyAnKCc7XG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlICdTdHJpbmcnOlxuICAgICAgICBjYXNlICdUb2tlbic6XG4gICAgICAgICAgICByZXN1bHQgPSBub2RlLnZhbHVlO1xuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSAnQ29tbWEnOlxuICAgICAgICAgICAgcmVzdWx0ID0gJywnO1xuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignVW5rbm93biBub2RlIHR5cGUgYCcgKyBub2RlLnR5cGUgKyAnYCcpO1xuICAgIH1cblxuICAgIHJldHVybiBkZWNvcmF0ZShyZXN1bHQsIG5vZGUpO1xufVxuXG5mdW5jdGlvbiBnZW5lcmF0ZShub2RlLCBvcHRpb25zKSB7XG4gICAgbGV0IGRlY29yYXRlID0gbm9vcDtcbiAgICBsZXQgZm9yY2VCcmFjZXMgPSBmYWxzZTtcbiAgICBsZXQgY29tcGFjdCA9IGZhbHNlO1xuXG4gICAgaWYgKHR5cGVvZiBvcHRpb25zID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIGRlY29yYXRlID0gb3B0aW9ucztcbiAgICB9IGVsc2UgaWYgKG9wdGlvbnMpIHtcbiAgICAgICAgZm9yY2VCcmFjZXMgPSBCb29sZWFuKG9wdGlvbnMuZm9yY2VCcmFjZXMpO1xuICAgICAgICBjb21wYWN0ID0gQm9vbGVhbihvcHRpb25zLmNvbXBhY3QpO1xuICAgICAgICBpZiAodHlwZW9mIG9wdGlvbnMuZGVjb3JhdGUgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIGRlY29yYXRlID0gb3B0aW9ucy5kZWNvcmF0ZTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBpbnRlcm5hbEdlbmVyYXRlKG5vZGUsIGRlY29yYXRlLCBmb3JjZUJyYWNlcywgY29tcGFjdCk7XG59XG5cbmV4cG9ydHMuZ2VuZXJhdGUgPSBnZW5lcmF0ZTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///22599\n")},60154:(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";eval("\n\nconst SyntaxError = __webpack_require__(68843);\nconst generate = __webpack_require__(22599);\nconst parse = __webpack_require__(66087);\nconst walk = __webpack_require__(77465);\n\n\n\nexports.SyntaxError = SyntaxError.SyntaxError;\nexports.generate = generate.generate;\nexports.parse = parse.parse;\nexports.walk = walk.walk;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNjAxNTQuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsb0JBQW9CLG1CQUFPLENBQUMsS0FBbUI7QUFDL0MsaUJBQWlCLG1CQUFPLENBQUMsS0FBZ0I7QUFDekMsY0FBYyxtQkFBTyxDQUFDLEtBQWE7QUFDbkMsYUFBYSxtQkFBTyxDQUFDLEtBQVk7Ozs7QUFJakMsbUJBQW1CO0FBQ25CLGdCQUFnQjtBQUNoQixhQUFhO0FBQ2IsWUFBWSIsInNvdXJjZXMiOlsid2VicGFjazovL2Jsb2NrYml0ZS8uL25vZGVfbW9kdWxlcy9jc3NvL25vZGVfbW9kdWxlcy9jc3MtdHJlZS9janMvZGVmaW5pdGlvbi1zeW50YXgvaW5kZXguY2pzP2Y5ZTciXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBTeW50YXhFcnJvciA9IHJlcXVpcmUoJy4vU3ludGF4RXJyb3IuY2pzJyk7XG5jb25zdCBnZW5lcmF0ZSA9IHJlcXVpcmUoJy4vZ2VuZXJhdGUuY2pzJyk7XG5jb25zdCBwYXJzZSA9IHJlcXVpcmUoJy4vcGFyc2UuY2pzJyk7XG5jb25zdCB3YWxrID0gcmVxdWlyZSgnLi93YWxrLmNqcycpO1xuXG5cblxuZXhwb3J0cy5TeW50YXhFcnJvciA9IFN5bnRheEVycm9yLlN5bnRheEVycm9yO1xuZXhwb3J0cy5nZW5lcmF0ZSA9IGdlbmVyYXRlLmdlbmVyYXRlO1xuZXhwb3J0cy5wYXJzZSA9IHBhcnNlLnBhcnNlO1xuZXhwb3J0cy53YWxrID0gd2Fsay53YWxrO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///60154\n")},66087:(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";eval("\n\nconst tokenizer = __webpack_require__(38357);\n\nconst TAB = 9;\nconst N = 10;\nconst F = 12;\nconst R = 13;\nconst SPACE = 32;\nconst EXCLAMATIONMARK = 33;    // !\nconst NUMBERSIGN = 35;         // #\nconst AMPERSAND = 38;          // &\nconst APOSTROPHE = 39;         // '\nconst LEFTPARENTHESIS = 40;    // (\nconst RIGHTPARENTHESIS = 41;   // )\nconst ASTERISK = 42;           // *\nconst PLUSSIGN = 43;           // +\nconst COMMA = 44;              // ,\nconst HYPERMINUS = 45;         // -\nconst LESSTHANSIGN = 60;       // <\nconst GREATERTHANSIGN = 62;    // >\nconst QUESTIONMARK = 63;       // ?\nconst COMMERCIALAT = 64;       // @\nconst LEFTSQUAREBRACKET = 91;  // [\nconst RIGHTSQUAREBRACKET = 93; // ]\nconst LEFTCURLYBRACKET = 123;  // {\nconst VERTICALLINE = 124;      // |\nconst RIGHTCURLYBRACKET = 125; // }\nconst INFINITY = 8734;         // ∞\nconst NAME_CHAR = new Uint8Array(128).map((_, idx) =>\n    /[a-zA-Z0-9\\-]/.test(String.fromCharCode(idx)) ? 1 : 0\n);\nconst COMBINATOR_PRECEDENCE = {\n    ' ': 1,\n    '&&': 2,\n    '||': 3,\n    '|': 4\n};\n\nfunction scanSpaces(tokenizer) {\n    return tokenizer.substringToPos(\n        tokenizer.findWsEnd(tokenizer.pos)\n    );\n}\n\nfunction scanWord(tokenizer) {\n    let end = tokenizer.pos;\n\n    for (; end < tokenizer.str.length; end++) {\n        const code = tokenizer.str.charCodeAt(end);\n        if (code >= 128 || NAME_CHAR[code] === 0) {\n            break;\n        }\n    }\n\n    if (tokenizer.pos === end) {\n        tokenizer.error('Expect a keyword');\n    }\n\n    return tokenizer.substringToPos(end);\n}\n\nfunction scanNumber(tokenizer) {\n    let end = tokenizer.pos;\n\n    for (; end < tokenizer.str.length; end++) {\n        const code = tokenizer.str.charCodeAt(end);\n        if (code < 48 || code > 57) {\n            break;\n        }\n    }\n\n    if (tokenizer.pos === end) {\n        tokenizer.error('Expect a number');\n    }\n\n    return tokenizer.substringToPos(end);\n}\n\nfunction scanString(tokenizer) {\n    const end = tokenizer.str.indexOf('\\'', tokenizer.pos + 1);\n\n    if (end === -1) {\n        tokenizer.pos = tokenizer.str.length;\n        tokenizer.error('Expect an apostrophe');\n    }\n\n    return tokenizer.substringToPos(end + 1);\n}\n\nfunction readMultiplierRange(tokenizer) {\n    let min = null;\n    let max = null;\n\n    tokenizer.eat(LEFTCURLYBRACKET);\n\n    min = scanNumber(tokenizer);\n\n    if (tokenizer.charCode() === COMMA) {\n        tokenizer.pos++;\n        if (tokenizer.charCode() !== RIGHTCURLYBRACKET) {\n            max = scanNumber(tokenizer);\n        }\n    } else {\n        max = min;\n    }\n\n    tokenizer.eat(RIGHTCURLYBRACKET);\n\n    return {\n        min: Number(min),\n        max: max ? Number(max) : 0\n    };\n}\n\nfunction readMultiplier(tokenizer) {\n    let range = null;\n    let comma = false;\n\n    switch (tokenizer.charCode()) {\n        case ASTERISK:\n            tokenizer.pos++;\n\n            range = {\n                min: 0,\n                max: 0\n            };\n\n            break;\n\n        case PLUSSIGN:\n            tokenizer.pos++;\n\n            range = {\n                min: 1,\n                max: 0\n            };\n\n            break;\n\n        case QUESTIONMARK:\n            tokenizer.pos++;\n\n            range = {\n                min: 0,\n                max: 1\n            };\n\n            break;\n\n        case NUMBERSIGN:\n            tokenizer.pos++;\n\n            comma = true;\n\n            if (tokenizer.charCode() === LEFTCURLYBRACKET) {\n                range = readMultiplierRange(tokenizer);\n            } else if (tokenizer.charCode() === QUESTIONMARK) {\n                // https://www.w3.org/TR/css-values-4/#component-multipliers\n                // > the # and ? multipliers may be stacked as #?\n                // In this case just treat \"#?\" as a single multiplier\n                // { min: 0, max: 0, comma: true }\n                tokenizer.pos++;\n                range = {\n                    min: 0,\n                    max: 0\n                };\n            } else {\n                range = {\n                    min: 1,\n                    max: 0\n                };\n            }\n\n            break;\n\n        case LEFTCURLYBRACKET:\n            range = readMultiplierRange(tokenizer);\n            break;\n\n        default:\n            return null;\n    }\n\n    return {\n        type: 'Multiplier',\n        comma,\n        min: range.min,\n        max: range.max,\n        term: null\n    };\n}\n\nfunction maybeMultiplied(tokenizer, node) {\n    const multiplier = readMultiplier(tokenizer);\n\n    if (multiplier !== null) {\n        multiplier.term = node;\n\n        // https://www.w3.org/TR/css-values-4/#component-multipliers\n        // > The + and # multipliers may be stacked as +#;\n        // Represent \"+#\" as nested multipliers:\n        // { ...<multiplier #>,\n        //   term: {\n        //     ...<multipler +>,\n        //     term: node\n        //   }\n        // }\n        if (tokenizer.charCode() === NUMBERSIGN &&\n            tokenizer.charCodeAt(tokenizer.pos - 1) === PLUSSIGN) {\n            return maybeMultiplied(tokenizer, multiplier);\n        }\n\n        return multiplier;\n    }\n\n    return node;\n}\n\nfunction maybeToken(tokenizer) {\n    const ch = tokenizer.peek();\n\n    if (ch === '') {\n        return null;\n    }\n\n    return {\n        type: 'Token',\n        value: ch\n    };\n}\n\nfunction readProperty(tokenizer) {\n    let name;\n\n    tokenizer.eat(LESSTHANSIGN);\n    tokenizer.eat(APOSTROPHE);\n\n    name = scanWord(tokenizer);\n\n    tokenizer.eat(APOSTROPHE);\n    tokenizer.eat(GREATERTHANSIGN);\n\n    return maybeMultiplied(tokenizer, {\n        type: 'Property',\n        name\n    });\n}\n\n// https://drafts.csswg.org/css-values-3/#numeric-ranges\n// 4.1. Range Restrictions and Range Definition Notation\n//\n// Range restrictions can be annotated in the numeric type notation using CSS bracketed\n// range notation—[min,max]—within the angle brackets, after the identifying keyword,\n// indicating a closed range between (and including) min and max.\n// For example, <integer [0, 10]> indicates an integer between 0 and 10, inclusive.\nfunction readTypeRange(tokenizer) {\n    // use null for Infinity to make AST format JSON serializable/deserializable\n    let min = null; // -Infinity\n    let max = null; // Infinity\n    let sign = 1;\n\n    tokenizer.eat(LEFTSQUAREBRACKET);\n\n    if (tokenizer.charCode() === HYPERMINUS) {\n        tokenizer.peek();\n        sign = -1;\n    }\n\n    if (sign == -1 && tokenizer.charCode() === INFINITY) {\n        tokenizer.peek();\n    } else {\n        min = sign * Number(scanNumber(tokenizer));\n\n        if (NAME_CHAR[tokenizer.charCode()] !== 0) {\n            min += scanWord(tokenizer);\n        }\n    }\n\n    scanSpaces(tokenizer);\n    tokenizer.eat(COMMA);\n    scanSpaces(tokenizer);\n\n    if (tokenizer.charCode() === INFINITY) {\n        tokenizer.peek();\n    } else {\n        sign = 1;\n\n        if (tokenizer.charCode() === HYPERMINUS) {\n            tokenizer.peek();\n            sign = -1;\n        }\n\n        max = sign * Number(scanNumber(tokenizer));\n\n        if (NAME_CHAR[tokenizer.charCode()] !== 0) {\n            max += scanWord(tokenizer);\n        }\n    }\n\n    tokenizer.eat(RIGHTSQUAREBRACKET);\n\n    return {\n        type: 'Range',\n        min,\n        max\n    };\n}\n\nfunction readType(tokenizer) {\n    let name;\n    let opts = null;\n\n    tokenizer.eat(LESSTHANSIGN);\n    name = scanWord(tokenizer);\n\n    if (tokenizer.charCode() === LEFTPARENTHESIS &&\n        tokenizer.nextCharCode() === RIGHTPARENTHESIS) {\n        tokenizer.pos += 2;\n        name += '()';\n    }\n\n    if (tokenizer.charCodeAt(tokenizer.findWsEnd(tokenizer.pos)) === LEFTSQUAREBRACKET) {\n        scanSpaces(tokenizer);\n        opts = readTypeRange(tokenizer);\n    }\n\n    tokenizer.eat(GREATERTHANSIGN);\n\n    return maybeMultiplied(tokenizer, {\n        type: 'Type',\n        name,\n        opts\n    });\n}\n\nfunction readKeywordOrFunction(tokenizer) {\n    const name = scanWord(tokenizer);\n\n    if (tokenizer.charCode() === LEFTPARENTHESIS) {\n        tokenizer.pos++;\n\n        return {\n            type: 'Function',\n            name\n        };\n    }\n\n    return maybeMultiplied(tokenizer, {\n        type: 'Keyword',\n        name\n    });\n}\n\nfunction regroupTerms(terms, combinators) {\n    function createGroup(terms, combinator) {\n        return {\n            type: 'Group',\n            terms,\n            combinator,\n            disallowEmpty: false,\n            explicit: false\n        };\n    }\n\n    let combinator;\n\n    combinators = Object.keys(combinators)\n        .sort((a, b) => COMBINATOR_PRECEDENCE[a] - COMBINATOR_PRECEDENCE[b]);\n\n    while (combinators.length > 0) {\n        combinator = combinators.shift();\n\n        let i = 0;\n        let subgroupStart = 0;\n\n        for (; i < terms.length; i++) {\n            const term = terms[i];\n\n            if (term.type === 'Combinator') {\n                if (term.value === combinator) {\n                    if (subgroupStart === -1) {\n                        subgroupStart = i - 1;\n                    }\n                    terms.splice(i, 1);\n                    i--;\n                } else {\n                    if (subgroupStart !== -1 && i - subgroupStart > 1) {\n                        terms.splice(\n                            subgroupStart,\n                            i - subgroupStart,\n                            createGroup(terms.slice(subgroupStart, i), combinator)\n                        );\n                        i = subgroupStart + 1;\n                    }\n                    subgroupStart = -1;\n                }\n            }\n        }\n\n        if (subgroupStart !== -1 && combinators.length) {\n            terms.splice(\n                subgroupStart,\n                i - subgroupStart,\n                createGroup(terms.slice(subgroupStart, i), combinator)\n            );\n        }\n    }\n\n    return combinator;\n}\n\nfunction readImplicitGroup(tokenizer) {\n    const terms = [];\n    const combinators = {};\n    let token;\n    let prevToken = null;\n    let prevTokenPos = tokenizer.pos;\n\n    while (token = peek(tokenizer)) {\n        if (token.type !== 'Spaces') {\n            if (token.type === 'Combinator') {\n                // check for combinator in group beginning and double combinator sequence\n                if (prevToken === null || prevToken.type === 'Combinator') {\n                    tokenizer.pos = prevTokenPos;\n                    tokenizer.error('Unexpected combinator');\n                }\n\n                combinators[token.value] = true;\n            } else if (prevToken !== null && prevToken.type !== 'Combinator') {\n                combinators[' '] = true;  // a b\n                terms.push({\n                    type: 'Combinator',\n                    value: ' '\n                });\n            }\n\n            terms.push(token);\n            prevToken = token;\n            prevTokenPos = tokenizer.pos;\n        }\n    }\n\n    // check for combinator in group ending\n    if (prevToken !== null && prevToken.type === 'Combinator') {\n        tokenizer.pos -= prevTokenPos;\n        tokenizer.error('Unexpected combinator');\n    }\n\n    return {\n        type: 'Group',\n        terms,\n        combinator: regroupTerms(terms, combinators) || ' ',\n        disallowEmpty: false,\n        explicit: false\n    };\n}\n\nfunction readGroup(tokenizer) {\n    let result;\n\n    tokenizer.eat(LEFTSQUAREBRACKET);\n    result = readImplicitGroup(tokenizer);\n    tokenizer.eat(RIGHTSQUAREBRACKET);\n\n    result.explicit = true;\n\n    if (tokenizer.charCode() === EXCLAMATIONMARK) {\n        tokenizer.pos++;\n        result.disallowEmpty = true;\n    }\n\n    return result;\n}\n\nfunction peek(tokenizer) {\n    let code = tokenizer.charCode();\n\n    if (code < 128 && NAME_CHAR[code] === 1) {\n        return readKeywordOrFunction(tokenizer);\n    }\n\n    switch (code) {\n        case RIGHTSQUAREBRACKET:\n            // don't eat, stop scan a group\n            break;\n\n        case LEFTSQUAREBRACKET:\n            return maybeMultiplied(tokenizer, readGroup(tokenizer));\n\n        case LESSTHANSIGN:\n            return tokenizer.nextCharCode() === APOSTROPHE\n                ? readProperty(tokenizer)\n                : readType(tokenizer);\n\n        case VERTICALLINE:\n            return {\n                type: 'Combinator',\n                value: tokenizer.substringToPos(\n                    tokenizer.pos + (tokenizer.nextCharCode() === VERTICALLINE ? 2 : 1)\n                )\n            };\n\n        case AMPERSAND:\n            tokenizer.pos++;\n            tokenizer.eat(AMPERSAND);\n\n            return {\n                type: 'Combinator',\n                value: '&&'\n            };\n\n        case COMMA:\n            tokenizer.pos++;\n            return {\n                type: 'Comma'\n            };\n\n        case APOSTROPHE:\n            return maybeMultiplied(tokenizer, {\n                type: 'String',\n                value: scanString(tokenizer)\n            });\n\n        case SPACE:\n        case TAB:\n        case N:\n        case R:\n        case F:\n            return {\n                type: 'Spaces',\n                value: scanSpaces(tokenizer)\n            };\n\n        case COMMERCIALAT:\n            code = tokenizer.nextCharCode();\n\n            if (code < 128 && NAME_CHAR[code] === 1) {\n                tokenizer.pos++;\n                return {\n                    type: 'AtKeyword',\n                    name: scanWord(tokenizer)\n                };\n            }\n\n            return maybeToken(tokenizer);\n\n        case ASTERISK:\n        case PLUSSIGN:\n        case QUESTIONMARK:\n        case NUMBERSIGN:\n        case EXCLAMATIONMARK:\n            // prohibited tokens (used as a multiplier start)\n            break;\n\n        case LEFTCURLYBRACKET:\n            // LEFTCURLYBRACKET is allowed since mdn/data uses it w/o quoting\n            // check next char isn't a number, because it's likely a disjoined multiplier\n            code = tokenizer.nextCharCode();\n\n            if (code < 48 || code > 57) {\n                return maybeToken(tokenizer);\n            }\n\n            break;\n\n        default:\n            return maybeToken(tokenizer);\n    }\n}\n\nfunction parse(source) {\n    const tokenizer$1 = new tokenizer.Tokenizer(source);\n    const result = readImplicitGroup(tokenizer$1);\n\n    if (tokenizer$1.pos !== source.length) {\n        tokenizer$1.error('Unexpected input');\n    }\n\n    // reduce redundant groups with single group term\n    if (result.terms.length === 1 && result.terms[0].type === 'Group') {\n        return result.terms[0];\n    }\n\n    return result;\n}\n\nexports.parse = parse;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///66087\n")},38357:(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";eval("\n\nconst SyntaxError = __webpack_require__(68843);\n\nconst TAB = 9;\nconst N = 10;\nconst F = 12;\nconst R = 13;\nconst SPACE = 32;\n\nclass Tokenizer {\n    constructor(str) {\n        this.str = str;\n        this.pos = 0;\n    }\n    charCodeAt(pos) {\n        return pos < this.str.length ? this.str.charCodeAt(pos) : 0;\n    }\n    charCode() {\n        return this.charCodeAt(this.pos);\n    }\n    nextCharCode() {\n        return this.charCodeAt(this.pos + 1);\n    }\n    nextNonWsCode(pos) {\n        return this.charCodeAt(this.findWsEnd(pos));\n    }\n    findWsEnd(pos) {\n        for (; pos < this.str.length; pos++) {\n            const code = this.str.charCodeAt(pos);\n            if (code !== R && code !== N && code !== F && code !== SPACE && code !== TAB) {\n                break;\n            }\n        }\n\n        return pos;\n    }\n    substringToPos(end) {\n        return this.str.substring(this.pos, this.pos = end);\n    }\n    eat(code) {\n        if (this.charCode() !== code) {\n            this.error('Expect `' + String.fromCharCode(code) + '`');\n        }\n\n        this.pos++;\n    }\n    peek() {\n        return this.pos < this.str.length ? this.str.charAt(this.pos++) : '';\n    }\n    error(message) {\n        throw new SyntaxError.SyntaxError(message, this.str, this.pos);\n    }\n}\n\nexports.Tokenizer = Tokenizer;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzgzNTcuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsb0JBQW9CLG1CQUFPLENBQUMsS0FBbUI7O0FBRS9DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSx1QkFBdUI7QUFDdEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLGlCQUFpQiIsInNvdXJjZXMiOlsid2VicGFjazovL2Jsb2NrYml0ZS8uL25vZGVfbW9kdWxlcy9jc3NvL25vZGVfbW9kdWxlcy9jc3MtdHJlZS9janMvZGVmaW5pdGlvbi1zeW50YXgvdG9rZW5pemVyLmNqcz9hYmUzIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuY29uc3QgU3ludGF4RXJyb3IgPSByZXF1aXJlKCcuL1N5bnRheEVycm9yLmNqcycpO1xuXG5jb25zdCBUQUIgPSA5O1xuY29uc3QgTiA9IDEwO1xuY29uc3QgRiA9IDEyO1xuY29uc3QgUiA9IDEzO1xuY29uc3QgU1BBQ0UgPSAzMjtcblxuY2xhc3MgVG9rZW5pemVyIHtcbiAgICBjb25zdHJ1Y3RvcihzdHIpIHtcbiAgICAgICAgdGhpcy5zdHIgPSBzdHI7XG4gICAgICAgIHRoaXMucG9zID0gMDtcbiAgICB9XG4gICAgY2hhckNvZGVBdChwb3MpIHtcbiAgICAgICAgcmV0dXJuIHBvcyA8IHRoaXMuc3RyLmxlbmd0aCA/IHRoaXMuc3RyLmNoYXJDb2RlQXQocG9zKSA6IDA7XG4gICAgfVxuICAgIGNoYXJDb2RlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5jaGFyQ29kZUF0KHRoaXMucG9zKTtcbiAgICB9XG4gICAgbmV4dENoYXJDb2RlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5jaGFyQ29kZUF0KHRoaXMucG9zICsgMSk7XG4gICAgfVxuICAgIG5leHROb25Xc0NvZGUocG9zKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNoYXJDb2RlQXQodGhpcy5maW5kV3NFbmQocG9zKSk7XG4gICAgfVxuICAgIGZpbmRXc0VuZChwb3MpIHtcbiAgICAgICAgZm9yICg7IHBvcyA8IHRoaXMuc3RyLmxlbmd0aDsgcG9zKyspIHtcbiAgICAgICAgICAgIGNvbnN0IGNvZGUgPSB0aGlzLnN0ci5jaGFyQ29kZUF0KHBvcyk7XG4gICAgICAgICAgICBpZiAoY29kZSAhPT0gUiAmJiBjb2RlICE9PSBOICYmIGNvZGUgIT09IEYgJiYgY29kZSAhPT0gU1BBQ0UgJiYgY29kZSAhPT0gVEFCKSB7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gcG9zO1xuICAgIH1cbiAgICBzdWJzdHJpbmdUb1BvcyhlbmQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc3RyLnN1YnN0cmluZyh0aGlzLnBvcywgdGhpcy5wb3MgPSBlbmQpO1xuICAgIH1cbiAgICBlYXQoY29kZSkge1xuICAgICAgICBpZiAodGhpcy5jaGFyQ29kZSgpICE9PSBjb2RlKSB7XG4gICAgICAgICAgICB0aGlzLmVycm9yKCdFeHBlY3QgYCcgKyBTdHJpbmcuZnJvbUNoYXJDb2RlKGNvZGUpICsgJ2AnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMucG9zKys7XG4gICAgfVxuICAgIHBlZWsoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnBvcyA8IHRoaXMuc3RyLmxlbmd0aCA/IHRoaXMuc3RyLmNoYXJBdCh0aGlzLnBvcysrKSA6ICcnO1xuICAgIH1cbiAgICBlcnJvcihtZXNzYWdlKSB7XG4gICAgICAgIHRocm93IG5ldyBTeW50YXhFcnJvci5TeW50YXhFcnJvcihtZXNzYWdlLCB0aGlzLnN0ciwgdGhpcy5wb3MpO1xuICAgIH1cbn1cblxuZXhwb3J0cy5Ub2tlbml6ZXIgPSBUb2tlbml6ZXI7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///38357\n")},77465:(__unused_webpack_module,exports)=>{"use strict";eval("\n\nconst noop = function() {};\n\nfunction ensureFunction(value) {\n    return typeof value === 'function' ? value : noop;\n}\n\nfunction walk(node, options, context) {\n    function walk(node) {\n        enter.call(context, node);\n\n        switch (node.type) {\n            case 'Group':\n                node.terms.forEach(walk);\n                break;\n\n            case 'Multiplier':\n                walk(node.term);\n                break;\n\n            case 'Type':\n            case 'Property':\n            case 'Keyword':\n            case 'AtKeyword':\n            case 'Function':\n            case 'String':\n            case 'Token':\n            case 'Comma':\n                break;\n\n            default:\n                throw new Error('Unknown type: ' + node.type);\n        }\n\n        leave.call(context, node);\n    }\n\n    let enter = noop;\n    let leave = noop;\n\n    if (typeof options === 'function') {\n        enter = options;\n    } else if (options) {\n        enter = ensureFunction(options.enter);\n        leave = ensureFunction(options.leave);\n    }\n\n    if (enter === noop && leave === noop) {\n        throw new Error('Neither `enter` nor `leave` walker handler is set or both aren\\'t a function');\n    }\n\n    walk(node);\n}\n\nexports.walk = walk;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNzc0NjUuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWI7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUEsWUFBWSIsInNvdXJjZXMiOlsid2VicGFjazovL2Jsb2NrYml0ZS8uL25vZGVfbW9kdWxlcy9jc3NvL25vZGVfbW9kdWxlcy9jc3MtdHJlZS9janMvZGVmaW5pdGlvbi1zeW50YXgvd2Fsay5janM/YmFiNiJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmNvbnN0IG5vb3AgPSBmdW5jdGlvbigpIHt9O1xuXG5mdW5jdGlvbiBlbnN1cmVGdW5jdGlvbih2YWx1ZSkge1xuICAgIHJldHVybiB0eXBlb2YgdmFsdWUgPT09ICdmdW5jdGlvbicgPyB2YWx1ZSA6IG5vb3A7XG59XG5cbmZ1bmN0aW9uIHdhbGsobm9kZSwgb3B0aW9ucywgY29udGV4dCkge1xuICAgIGZ1bmN0aW9uIHdhbGsobm9kZSkge1xuICAgICAgICBlbnRlci5jYWxsKGNvbnRleHQsIG5vZGUpO1xuXG4gICAgICAgIHN3aXRjaCAobm9kZS50eXBlKSB7XG4gICAgICAgICAgICBjYXNlICdHcm91cCc6XG4gICAgICAgICAgICAgICAgbm9kZS50ZXJtcy5mb3JFYWNoKHdhbGspO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICBjYXNlICdNdWx0aXBsaWVyJzpcbiAgICAgICAgICAgICAgICB3YWxrKG5vZGUudGVybSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgIGNhc2UgJ1R5cGUnOlxuICAgICAgICAgICAgY2FzZSAnUHJvcGVydHknOlxuICAgICAgICAgICAgY2FzZSAnS2V5d29yZCc6XG4gICAgICAgICAgICBjYXNlICdBdEtleXdvcmQnOlxuICAgICAgICAgICAgY2FzZSAnRnVuY3Rpb24nOlxuICAgICAgICAgICAgY2FzZSAnU3RyaW5nJzpcbiAgICAgICAgICAgIGNhc2UgJ1Rva2VuJzpcbiAgICAgICAgICAgIGNhc2UgJ0NvbW1hJzpcbiAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1Vua25vd24gdHlwZTogJyArIG5vZGUudHlwZSk7XG4gICAgICAgIH1cblxuICAgICAgICBsZWF2ZS5jYWxsKGNvbnRleHQsIG5vZGUpO1xuICAgIH1cblxuICAgIGxldCBlbnRlciA9IG5vb3A7XG4gICAgbGV0IGxlYXZlID0gbm9vcDtcblxuICAgIGlmICh0eXBlb2Ygb3B0aW9ucyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICBlbnRlciA9IG9wdGlvbnM7XG4gICAgfSBlbHNlIGlmIChvcHRpb25zKSB7XG4gICAgICAgIGVudGVyID0gZW5zdXJlRnVuY3Rpb24ob3B0aW9ucy5lbnRlcik7XG4gICAgICAgIGxlYXZlID0gZW5zdXJlRnVuY3Rpb24ob3B0aW9ucy5sZWF2ZSk7XG4gICAgfVxuXG4gICAgaWYgKGVudGVyID09PSBub29wICYmIGxlYXZlID09PSBub29wKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignTmVpdGhlciBgZW50ZXJgIG5vciBgbGVhdmVgIHdhbGtlciBoYW5kbGVyIGlzIHNldCBvciBib3RoIGFyZW5cXCd0IGEgZnVuY3Rpb24nKTtcbiAgICB9XG5cbiAgICB3YWxrKG5vZGUpO1xufVxuXG5leHBvcnRzLndhbGsgPSB3YWxrO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///77465\n")},83176:(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";eval("\n\nconst index = __webpack_require__(68328);\nconst sourceMap = __webpack_require__(31215);\nconst tokenBefore = __webpack_require__(92413);\nconst types = __webpack_require__(78783);\n\nconst REVERSESOLIDUS = 0x005c; // U+005C REVERSE SOLIDUS (\\)\n\nfunction processChildren(node, delimeter) {\n    if (typeof delimeter === 'function') {\n        let prev = null;\n\n        node.children.forEach(node => {\n            if (prev !== null) {\n                delimeter.call(this, prev);\n            }\n\n            this.node(node);\n            prev = node;\n        });\n\n        return;\n    }\n\n    node.children.forEach(this.node, this);\n}\n\nfunction processChunk(chunk) {\n    index.tokenize(chunk, (type, start, end) => {\n        this.token(type, chunk.slice(start, end));\n    });\n}\n\nfunction createGenerator(config) {\n    const types$1 = new Map();\n\n    for (let name in config.node) {\n        const item = config.node[name];\n        const fn = item.generate || item;\n\n        if (typeof fn === 'function') {\n            types$1.set(name, item.generate || item);\n        }\n    }\n\n    return function(node, options) {\n        let buffer = '';\n        let prevCode = 0;\n        let handlers = {\n            node(node) {\n                if (types$1.has(node.type)) {\n                    types$1.get(node.type).call(publicApi, node);\n                } else {\n                    throw new Error('Unknown node type: ' + node.type);\n                }\n            },\n            tokenBefore: tokenBefore.safe,\n            token(type, value) {\n                prevCode = this.tokenBefore(prevCode, type, value);\n\n                this.emit(value, type, false);\n\n                if (type === types.Delim && value.charCodeAt(0) === REVERSESOLIDUS) {\n                    this.emit('\\n', types.WhiteSpace, true);\n                }\n            },\n            emit(value) {\n                buffer += value;\n            },\n            result() {\n                return buffer;\n            }\n        };\n\n        if (options) {\n            if (typeof options.decorator === 'function') {\n                handlers = options.decorator(handlers);\n            }\n\n            if (options.sourceMap) {\n                handlers = sourceMap.generateSourceMap(handlers);\n            }\n\n            if (options.mode in tokenBefore) {\n                handlers.tokenBefore = tokenBefore[options.mode];\n            }\n        }\n\n        const publicApi = {\n            node: (node) => handlers.node(node),\n            children: processChildren,\n            token: (type, value) => handlers.token(type, value),\n            tokenize: processChunk\n        };\n\n        handlers.node(node);\n\n        return handlers.result();\n    };\n}\n\nexports.createGenerator = createGenerator;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiODMxNzYuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsY0FBYyxtQkFBTyxDQUFDLEtBQXdCO0FBQzlDLGtCQUFrQixtQkFBTyxDQUFDLEtBQWlCO0FBQzNDLG9CQUFvQixtQkFBTyxDQUFDLEtBQW9CO0FBQ2hELGNBQWMsbUJBQU8sQ0FBQyxLQUF3Qjs7QUFFOUMsK0JBQStCOztBQUUvQjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLFNBQVM7O0FBRVQ7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQjtBQUNsQjtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQSx1QkFBdUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ibG9ja2JpdGUvLi9ub2RlX21vZHVsZXMvY3Nzby9ub2RlX21vZHVsZXMvY3NzLXRyZWUvY2pzL2dlbmVyYXRvci9jcmVhdGUuY2pzP2ZkM2YiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBpbmRleCA9IHJlcXVpcmUoJy4uL3Rva2VuaXplci9pbmRleC5janMnKTtcbmNvbnN0IHNvdXJjZU1hcCA9IHJlcXVpcmUoJy4vc291cmNlTWFwLmNqcycpO1xuY29uc3QgdG9rZW5CZWZvcmUgPSByZXF1aXJlKCcuL3Rva2VuLWJlZm9yZS5janMnKTtcbmNvbnN0IHR5cGVzID0gcmVxdWlyZSgnLi4vdG9rZW5pemVyL3R5cGVzLmNqcycpO1xuXG5jb25zdCBSRVZFUlNFU09MSURVUyA9IDB4MDA1YzsgLy8gVSswMDVDIFJFVkVSU0UgU09MSURVUyAoXFwpXG5cbmZ1bmN0aW9uIHByb2Nlc3NDaGlsZHJlbihub2RlLCBkZWxpbWV0ZXIpIHtcbiAgICBpZiAodHlwZW9mIGRlbGltZXRlciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICBsZXQgcHJldiA9IG51bGw7XG5cbiAgICAgICAgbm9kZS5jaGlsZHJlbi5mb3JFYWNoKG5vZGUgPT4ge1xuICAgICAgICAgICAgaWYgKHByZXYgIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICBkZWxpbWV0ZXIuY2FsbCh0aGlzLCBwcmV2KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdGhpcy5ub2RlKG5vZGUpO1xuICAgICAgICAgICAgcHJldiA9IG5vZGU7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBub2RlLmNoaWxkcmVuLmZvckVhY2godGhpcy5ub2RlLCB0aGlzKTtcbn1cblxuZnVuY3Rpb24gcHJvY2Vzc0NodW5rKGNodW5rKSB7XG4gICAgaW5kZXgudG9rZW5pemUoY2h1bmssICh0eXBlLCBzdGFydCwgZW5kKSA9PiB7XG4gICAgICAgIHRoaXMudG9rZW4odHlwZSwgY2h1bmsuc2xpY2Uoc3RhcnQsIGVuZCkpO1xuICAgIH0pO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVHZW5lcmF0b3IoY29uZmlnKSB7XG4gICAgY29uc3QgdHlwZXMkMSA9IG5ldyBNYXAoKTtcblxuICAgIGZvciAobGV0IG5hbWUgaW4gY29uZmlnLm5vZGUpIHtcbiAgICAgICAgY29uc3QgaXRlbSA9IGNvbmZpZy5ub2RlW25hbWVdO1xuICAgICAgICBjb25zdCBmbiA9IGl0ZW0uZ2VuZXJhdGUgfHwgaXRlbTtcblxuICAgICAgICBpZiAodHlwZW9mIGZuID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICB0eXBlcyQxLnNldChuYW1lLCBpdGVtLmdlbmVyYXRlIHx8IGl0ZW0pO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGZ1bmN0aW9uKG5vZGUsIG9wdGlvbnMpIHtcbiAgICAgICAgbGV0IGJ1ZmZlciA9ICcnO1xuICAgICAgICBsZXQgcHJldkNvZGUgPSAwO1xuICAgICAgICBsZXQgaGFuZGxlcnMgPSB7XG4gICAgICAgICAgICBub2RlKG5vZGUpIHtcbiAgICAgICAgICAgICAgICBpZiAodHlwZXMkMS5oYXMobm9kZS50eXBlKSkge1xuICAgICAgICAgICAgICAgICAgICB0eXBlcyQxLmdldChub2RlLnR5cGUpLmNhbGwocHVibGljQXBpLCBub2RlKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1Vua25vd24gbm9kZSB0eXBlOiAnICsgbm9kZS50eXBlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgdG9rZW5CZWZvcmU6IHRva2VuQmVmb3JlLnNhZmUsXG4gICAgICAgICAgICB0b2tlbih0eXBlLCB2YWx1ZSkge1xuICAgICAgICAgICAgICAgIHByZXZDb2RlID0gdGhpcy50b2tlbkJlZm9yZShwcmV2Q29kZSwgdHlwZSwgdmFsdWUpO1xuXG4gICAgICAgICAgICAgICAgdGhpcy5lbWl0KHZhbHVlLCB0eXBlLCBmYWxzZSk7XG5cbiAgICAgICAgICAgICAgICBpZiAodHlwZSA9PT0gdHlwZXMuRGVsaW0gJiYgdmFsdWUuY2hhckNvZGVBdCgwKSA9PT0gUkVWRVJTRVNPTElEVVMpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5lbWl0KCdcXG4nLCB0eXBlcy5XaGl0ZVNwYWNlLCB0cnVlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZW1pdCh2YWx1ZSkge1xuICAgICAgICAgICAgICAgIGJ1ZmZlciArPSB2YWx1ZTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICByZXN1bHQoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGJ1ZmZlcjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICBpZiAob3B0aW9ucykge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBvcHRpb25zLmRlY29yYXRvciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICAgIGhhbmRsZXJzID0gb3B0aW9ucy5kZWNvcmF0b3IoaGFuZGxlcnMpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAob3B0aW9ucy5zb3VyY2VNYXApIHtcbiAgICAgICAgICAgICAgICBoYW5kbGVycyA9IHNvdXJjZU1hcC5nZW5lcmF0ZVNvdXJjZU1hcChoYW5kbGVycyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChvcHRpb25zLm1vZGUgaW4gdG9rZW5CZWZvcmUpIHtcbiAgICAgICAgICAgICAgICBoYW5kbGVycy50b2tlbkJlZm9yZSA9IHRva2VuQmVmb3JlW29wdGlvbnMubW9kZV07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBwdWJsaWNBcGkgPSB7XG4gICAgICAgICAgICBub2RlOiAobm9kZSkgPT4gaGFuZGxlcnMubm9kZShub2RlKSxcbiAgICAgICAgICAgIGNoaWxkcmVuOiBwcm9jZXNzQ2hpbGRyZW4sXG4gICAgICAgICAgICB0b2tlbjogKHR5cGUsIHZhbHVlKSA9PiBoYW5kbGVycy50b2tlbih0eXBlLCB2YWx1ZSksXG4gICAgICAgICAgICB0b2tlbml6ZTogcHJvY2Vzc0NodW5rXG4gICAgICAgIH07XG5cbiAgICAgICAgaGFuZGxlcnMubm9kZShub2RlKTtcblxuICAgICAgICByZXR1cm4gaGFuZGxlcnMucmVzdWx0KCk7XG4gICAgfTtcbn1cblxuZXhwb3J0cy5jcmVhdGVHZW5lcmF0b3IgPSBjcmVhdGVHZW5lcmF0b3I7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///83176\n")},31215:(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";eval("\n\nconst sourceMapGenerator_js = __webpack_require__(61527);\n\nconst trackNodes = new Set(['Atrule', 'Selector', 'Declaration']);\n\nfunction generateSourceMap(handlers) {\n    const map = new sourceMapGenerator_js.SourceMapGenerator();\n    const generated = {\n        line: 1,\n        column: 0\n    };\n    const original = {\n        line: 0, // should be zero to add first mapping\n        column: 0\n    };\n    const activatedGenerated = {\n        line: 1,\n        column: 0\n    };\n    const activatedMapping = {\n        generated: activatedGenerated\n    };\n    let line = 1;\n    let column = 0;\n    let sourceMappingActive = false;\n\n    const origHandlersNode = handlers.node;\n    handlers.node = function(node) {\n        if (node.loc && node.loc.start && trackNodes.has(node.type)) {\n            const nodeLine = node.loc.start.line;\n            const nodeColumn = node.loc.start.column - 1;\n\n            if (original.line !== nodeLine ||\n                original.column !== nodeColumn) {\n                original.line = nodeLine;\n                original.column = nodeColumn;\n\n                generated.line = line;\n                generated.column = column;\n\n                if (sourceMappingActive) {\n                    sourceMappingActive = false;\n                    if (generated.line !== activatedGenerated.line ||\n                        generated.column !== activatedGenerated.column) {\n                        map.addMapping(activatedMapping);\n                    }\n                }\n\n                sourceMappingActive = true;\n                map.addMapping({\n                    source: node.loc.source,\n                    original,\n                    generated\n                });\n            }\n        }\n\n        origHandlersNode.call(this, node);\n\n        if (sourceMappingActive && trackNodes.has(node.type)) {\n            activatedGenerated.line = line;\n            activatedGenerated.column = column;\n        }\n    };\n\n    const origHandlersEmit = handlers.emit;\n    handlers.emit = function(value, type, auto) {\n        for (let i = 0; i < value.length; i++) {\n            if (value.charCodeAt(i) === 10) { // \\n\n                line++;\n                column = 0;\n            } else {\n                column++;\n            }\n        }\n\n        origHandlersEmit(value, type, auto);\n    };\n\n    const origHandlersResult = handlers.result;\n    handlers.result = function() {\n        if (sourceMappingActive) {\n            map.addMapping(activatedMapping);\n        }\n\n        return {\n            css: origHandlersResult(),\n            map\n        };\n    };\n\n    return handlers;\n}\n\nexports.generateSourceMap = generateSourceMap;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzEyMTUuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsOEJBQThCLG1CQUFPLENBQUMsS0FBMkM7O0FBRWpGOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSx3QkFBd0Isa0JBQWtCO0FBQzFDLDhDQUE4QztBQUM5QztBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBLHlCQUF5QiIsInNvdXJjZXMiOlsid2VicGFjazovL2Jsb2NrYml0ZS8uL25vZGVfbW9kdWxlcy9jc3NvL25vZGVfbW9kdWxlcy9jc3MtdHJlZS9janMvZ2VuZXJhdG9yL3NvdXJjZU1hcC5janM/ZjQzMSJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmNvbnN0IHNvdXJjZU1hcEdlbmVyYXRvcl9qcyA9IHJlcXVpcmUoJ3NvdXJjZS1tYXAtanMvbGliL3NvdXJjZS1tYXAtZ2VuZXJhdG9yLmpzJyk7XG5cbmNvbnN0IHRyYWNrTm9kZXMgPSBuZXcgU2V0KFsnQXRydWxlJywgJ1NlbGVjdG9yJywgJ0RlY2xhcmF0aW9uJ10pO1xuXG5mdW5jdGlvbiBnZW5lcmF0ZVNvdXJjZU1hcChoYW5kbGVycykge1xuICAgIGNvbnN0IG1hcCA9IG5ldyBzb3VyY2VNYXBHZW5lcmF0b3JfanMuU291cmNlTWFwR2VuZXJhdG9yKCk7XG4gICAgY29uc3QgZ2VuZXJhdGVkID0ge1xuICAgICAgICBsaW5lOiAxLFxuICAgICAgICBjb2x1bW46IDBcbiAgICB9O1xuICAgIGNvbnN0IG9yaWdpbmFsID0ge1xuICAgICAgICBsaW5lOiAwLCAvLyBzaG91bGQgYmUgemVybyB0byBhZGQgZmlyc3QgbWFwcGluZ1xuICAgICAgICBjb2x1bW46IDBcbiAgICB9O1xuICAgIGNvbnN0IGFjdGl2YXRlZEdlbmVyYXRlZCA9IHtcbiAgICAgICAgbGluZTogMSxcbiAgICAgICAgY29sdW1uOiAwXG4gICAgfTtcbiAgICBjb25zdCBhY3RpdmF0ZWRNYXBwaW5nID0ge1xuICAgICAgICBnZW5lcmF0ZWQ6IGFjdGl2YXRlZEdlbmVyYXRlZFxuICAgIH07XG4gICAgbGV0IGxpbmUgPSAxO1xuICAgIGxldCBjb2x1bW4gPSAwO1xuICAgIGxldCBzb3VyY2VNYXBwaW5nQWN0aXZlID0gZmFsc2U7XG5cbiAgICBjb25zdCBvcmlnSGFuZGxlcnNOb2RlID0gaGFuZGxlcnMubm9kZTtcbiAgICBoYW5kbGVycy5ub2RlID0gZnVuY3Rpb24obm9kZSkge1xuICAgICAgICBpZiAobm9kZS5sb2MgJiYgbm9kZS5sb2Muc3RhcnQgJiYgdHJhY2tOb2Rlcy5oYXMobm9kZS50eXBlKSkge1xuICAgICAgICAgICAgY29uc3Qgbm9kZUxpbmUgPSBub2RlLmxvYy5zdGFydC5saW5lO1xuICAgICAgICAgICAgY29uc3Qgbm9kZUNvbHVtbiA9IG5vZGUubG9jLnN0YXJ0LmNvbHVtbiAtIDE7XG5cbiAgICAgICAgICAgIGlmIChvcmlnaW5hbC5saW5lICE9PSBub2RlTGluZSB8fFxuICAgICAgICAgICAgICAgIG9yaWdpbmFsLmNvbHVtbiAhPT0gbm9kZUNvbHVtbikge1xuICAgICAgICAgICAgICAgIG9yaWdpbmFsLmxpbmUgPSBub2RlTGluZTtcbiAgICAgICAgICAgICAgICBvcmlnaW5hbC5jb2x1bW4gPSBub2RlQ29sdW1uO1xuXG4gICAgICAgICAgICAgICAgZ2VuZXJhdGVkLmxpbmUgPSBsaW5lO1xuICAgICAgICAgICAgICAgIGdlbmVyYXRlZC5jb2x1bW4gPSBjb2x1bW47XG5cbiAgICAgICAgICAgICAgICBpZiAoc291cmNlTWFwcGluZ0FjdGl2ZSkge1xuICAgICAgICAgICAgICAgICAgICBzb3VyY2VNYXBwaW5nQWN0aXZlID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIGlmIChnZW5lcmF0ZWQubGluZSAhPT0gYWN0aXZhdGVkR2VuZXJhdGVkLmxpbmUgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgIGdlbmVyYXRlZC5jb2x1bW4gIT09IGFjdGl2YXRlZEdlbmVyYXRlZC5jb2x1bW4pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG1hcC5hZGRNYXBwaW5nKGFjdGl2YXRlZE1hcHBpbmcpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgc291cmNlTWFwcGluZ0FjdGl2ZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgbWFwLmFkZE1hcHBpbmcoe1xuICAgICAgICAgICAgICAgICAgICBzb3VyY2U6IG5vZGUubG9jLnNvdXJjZSxcbiAgICAgICAgICAgICAgICAgICAgb3JpZ2luYWwsXG4gICAgICAgICAgICAgICAgICAgIGdlbmVyYXRlZFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgb3JpZ0hhbmRsZXJzTm9kZS5jYWxsKHRoaXMsIG5vZGUpO1xuXG4gICAgICAgIGlmIChzb3VyY2VNYXBwaW5nQWN0aXZlICYmIHRyYWNrTm9kZXMuaGFzKG5vZGUudHlwZSkpIHtcbiAgICAgICAgICAgIGFjdGl2YXRlZEdlbmVyYXRlZC5saW5lID0gbGluZTtcbiAgICAgICAgICAgIGFjdGl2YXRlZEdlbmVyYXRlZC5jb2x1bW4gPSBjb2x1bW47XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgY29uc3Qgb3JpZ0hhbmRsZXJzRW1pdCA9IGhhbmRsZXJzLmVtaXQ7XG4gICAgaGFuZGxlcnMuZW1pdCA9IGZ1bmN0aW9uKHZhbHVlLCB0eXBlLCBhdXRvKSB7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdmFsdWUubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGlmICh2YWx1ZS5jaGFyQ29kZUF0KGkpID09PSAxMCkgeyAvLyBcXG5cbiAgICAgICAgICAgICAgICBsaW5lKys7XG4gICAgICAgICAgICAgICAgY29sdW1uID0gMDtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgY29sdW1uKys7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBvcmlnSGFuZGxlcnNFbWl0KHZhbHVlLCB0eXBlLCBhdXRvKTtcbiAgICB9O1xuXG4gICAgY29uc3Qgb3JpZ0hhbmRsZXJzUmVzdWx0ID0gaGFuZGxlcnMucmVzdWx0O1xuICAgIGhhbmRsZXJzLnJlc3VsdCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICBpZiAoc291cmNlTWFwcGluZ0FjdGl2ZSkge1xuICAgICAgICAgICAgbWFwLmFkZE1hcHBpbmcoYWN0aXZhdGVkTWFwcGluZyk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgY3NzOiBvcmlnSGFuZGxlcnNSZXN1bHQoKSxcbiAgICAgICAgICAgIG1hcFxuICAgICAgICB9O1xuICAgIH07XG5cbiAgICByZXR1cm4gaGFuZGxlcnM7XG59XG5cbmV4cG9ydHMuZ2VuZXJhdGVTb3VyY2VNYXAgPSBnZW5lcmF0ZVNvdXJjZU1hcDtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///31215\n")},92413:(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";eval("\n\nconst types = __webpack_require__(78783);\n\nconst PLUSSIGN = 0x002B;    // U+002B PLUS SIGN (+)\nconst HYPHENMINUS = 0x002D; // U+002D HYPHEN-MINUS (-)\n\nconst code = (type, value) => {\n    if (type === types.Delim) {\n        type = value;\n    }\n\n    if (typeof type === 'string') {\n        const charCode = type.charCodeAt(0);\n        return charCode > 0x7F ? 0x8000 : charCode << 8;\n    }\n\n    return type;\n};\n\n// https://www.w3.org/TR/css-syntax-3/#serialization\n// The only requirement for serialization is that it must \"round-trip\" with parsing,\n// that is, parsing the stylesheet must produce the same data structures as parsing,\n// serializing, and parsing again, except for consecutive <whitespace-token>s,\n// which may be collapsed into a single token.\n\nconst specPairs = [\n    [types.Ident, types.Ident],\n    [types.Ident, types.Function],\n    [types.Ident, types.Url],\n    [types.Ident, types.BadUrl],\n    [types.Ident, '-'],\n    [types.Ident, types.Number],\n    [types.Ident, types.Percentage],\n    [types.Ident, types.Dimension],\n    [types.Ident, types.CDC],\n    [types.Ident, types.LeftParenthesis],\n\n    [types.AtKeyword, types.Ident],\n    [types.AtKeyword, types.Function],\n    [types.AtKeyword, types.Url],\n    [types.AtKeyword, types.BadUrl],\n    [types.AtKeyword, '-'],\n    [types.AtKeyword, types.Number],\n    [types.AtKeyword, types.Percentage],\n    [types.AtKeyword, types.Dimension],\n    [types.AtKeyword, types.CDC],\n\n    [types.Hash, types.Ident],\n    [types.Hash, types.Function],\n    [types.Hash, types.Url],\n    [types.Hash, types.BadUrl],\n    [types.Hash, '-'],\n    [types.Hash, types.Number],\n    [types.Hash, types.Percentage],\n    [types.Hash, types.Dimension],\n    [types.Hash, types.CDC],\n\n    [types.Dimension, types.Ident],\n    [types.Dimension, types.Function],\n    [types.Dimension, types.Url],\n    [types.Dimension, types.BadUrl],\n    [types.Dimension, '-'],\n    [types.Dimension, types.Number],\n    [types.Dimension, types.Percentage],\n    [types.Dimension, types.Dimension],\n    [types.Dimension, types.CDC],\n\n    ['#', types.Ident],\n    ['#', types.Function],\n    ['#', types.Url],\n    ['#', types.BadUrl],\n    ['#', '-'],\n    ['#', types.Number],\n    ['#', types.Percentage],\n    ['#', types.Dimension],\n    ['#', types.CDC], // https://github.com/w3c/csswg-drafts/pull/6874\n\n    ['-', types.Ident],\n    ['-', types.Function],\n    ['-', types.Url],\n    ['-', types.BadUrl],\n    ['-', '-'],\n    ['-', types.Number],\n    ['-', types.Percentage],\n    ['-', types.Dimension],\n    ['-', types.CDC], // https://github.com/w3c/csswg-drafts/pull/6874\n\n    [types.Number, types.Ident],\n    [types.Number, types.Function],\n    [types.Number, types.Url],\n    [types.Number, types.BadUrl],\n    [types.Number, types.Number],\n    [types.Number, types.Percentage],\n    [types.Number, types.Dimension],\n    [types.Number, '%'],\n    [types.Number, types.CDC], // https://github.com/w3c/csswg-drafts/pull/6874\n\n    ['@', types.Ident],\n    ['@', types.Function],\n    ['@', types.Url],\n    ['@', types.BadUrl],\n    ['@', '-'],\n    ['@', types.CDC], // https://github.com/w3c/csswg-drafts/pull/6874\n\n    ['.', types.Number],\n    ['.', types.Percentage],\n    ['.', types.Dimension],\n\n    ['+', types.Number],\n    ['+', types.Percentage],\n    ['+', types.Dimension],\n\n    ['/', '*']\n];\n// validate with scripts/generate-safe\nconst safePairs = specPairs.concat([\n    [types.Ident, types.Hash],\n\n    [types.Dimension, types.Hash],\n\n    [types.Hash, types.Hash],\n\n    [types.AtKeyword, types.LeftParenthesis],\n    [types.AtKeyword, types.String],\n    [types.AtKeyword, types.Colon],\n\n    [types.Percentage, types.Percentage],\n    [types.Percentage, types.Dimension],\n    [types.Percentage, types.Function],\n    [types.Percentage, '-'],\n\n    [types.RightParenthesis, types.Ident],\n    [types.RightParenthesis, types.Function],\n    [types.RightParenthesis, types.Percentage],\n    [types.RightParenthesis, types.Dimension],\n    [types.RightParenthesis, types.Hash],\n    [types.RightParenthesis, '-']\n]);\n\nfunction createMap(pairs) {\n    const isWhiteSpaceRequired = new Set(\n        pairs.map(([prev, next]) => (code(prev) << 16 | code(next)))\n    );\n\n    return function(prevCode, type, value) {\n        const nextCode = code(type, value);\n        const nextCharCode = value.charCodeAt(0);\n        const emitWs =\n            (nextCharCode === HYPHENMINUS &&\n                type !== types.Ident &&\n                type !== types.Function &&\n                type !== types.CDC) ||\n            (nextCharCode === PLUSSIGN)\n                ? isWhiteSpaceRequired.has(prevCode << 16 | nextCharCode << 8)\n                : isWhiteSpaceRequired.has(prevCode << 16 | nextCode);\n\n        if (emitWs) {\n            this.emit(' ', types.WhiteSpace, true);\n        }\n\n        return nextCode;\n    };\n}\n\nconst spec = createMap(specPairs);\nconst safe = createMap(safePairs);\n\nexports.safe = safe;\nexports.spec = spec;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///92413\n")},22694:(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";eval("\n\nconst index$1 = __webpack_require__(94058);\nconst version = __webpack_require__(51606);\nconst create = __webpack_require__(25962);\nconst List = __webpack_require__(28572);\nconst Lexer = __webpack_require__(73627);\nconst index = __webpack_require__(60154);\nconst clone = __webpack_require__(55363);\nconst names$1 = __webpack_require__(60356);\nconst ident = __webpack_require__(4922);\nconst string = __webpack_require__(83500);\nconst url = __webpack_require__(84135);\nconst types = __webpack_require__(78783);\nconst names = __webpack_require__(49404);\nconst TokenStream = __webpack_require__(68411);\n\nconst {\n    tokenize,\n    parse,\n    generate,\n    lexer,\n    createLexer,\n\n    walk,\n    find,\n    findLast,\n    findAll,\n\n    toPlainObject,\n    fromPlainObject,\n\n    fork\n} = index$1;\n\nexports.version = version.version;\nexports.createSyntax = create;\nexports.List = List.List;\nexports.Lexer = Lexer.Lexer;\nexports.definitionSyntax = index;\nexports.clone = clone.clone;\nexports.isCustomProperty = names$1.isCustomProperty;\nexports.keyword = names$1.keyword;\nexports.property = names$1.property;\nexports.vendorPrefix = names$1.vendorPrefix;\nexports.ident = ident;\nexports.string = string;\nexports.url = url;\nexports.tokenTypes = types;\nexports.tokenNames = names;\nexports.TokenStream = TokenStream.TokenStream;\nexports.createLexer = createLexer;\nexports.find = find;\nexports.findAll = findAll;\nexports.findLast = findLast;\nexports.fork = fork;\nexports.fromPlainObject = fromPlainObject;\nexports.generate = generate;\nexports.lexer = lexer;\nexports.parse = parse;\nexports.toPlainObject = toPlainObject;\nexports.tokenize = tokenize;\nexports.walk = walk;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjI2OTQuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsZ0JBQWdCLG1CQUFPLENBQUMsS0FBb0I7QUFDNUMsZ0JBQWdCLG1CQUFPLENBQUMsS0FBZTtBQUN2QyxlQUFlLG1CQUFPLENBQUMsS0FBcUI7QUFDNUMsYUFBYSxtQkFBTyxDQUFDLEtBQWtCO0FBQ3ZDLGNBQWMsbUJBQU8sQ0FBQyxLQUFtQjtBQUN6QyxjQUFjLG1CQUFPLENBQUMsS0FBK0I7QUFDckQsY0FBYyxtQkFBTyxDQUFDLEtBQW1CO0FBQ3pDLGdCQUFnQixtQkFBTyxDQUFDLEtBQW1CO0FBQzNDLGNBQWMsbUJBQU8sQ0FBQyxJQUFtQjtBQUN6QyxlQUFlLG1CQUFPLENBQUMsS0FBb0I7QUFDM0MsWUFBWSxtQkFBTyxDQUFDLEtBQWlCO0FBQ3JDLGNBQWMsbUJBQU8sQ0FBQyxLQUF1QjtBQUM3QyxjQUFjLG1CQUFPLENBQUMsS0FBdUI7QUFDN0Msb0JBQW9CLG1CQUFPLENBQUMsS0FBNkI7O0FBRXpEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0EsRUFBRTs7QUFFRixlQUFlO0FBQ2Ysb0JBQW9CO0FBQ3BCLFlBQVk7QUFDWixhQUFhO0FBQ2Isd0JBQXdCO0FBQ3hCLGFBQWE7QUFDYix3QkFBd0I7QUFDeEIsZUFBZTtBQUNmLGdCQUFnQjtBQUNoQixvQkFBb0I7QUFDcEIsYUFBYTtBQUNiLGNBQWM7QUFDZCxXQUFXO0FBQ1gsa0JBQWtCO0FBQ2xCLGtCQUFrQjtBQUNsQixtQkFBbUI7QUFDbkIsbUJBQW1CO0FBQ25CLFlBQVk7QUFDWixlQUFlO0FBQ2YsZ0JBQWdCO0FBQ2hCLFlBQVk7QUFDWix1QkFBdUI7QUFDdkIsZ0JBQWdCO0FBQ2hCLGFBQWE7QUFDYixhQUFhO0FBQ2IscUJBQXFCO0FBQ3JCLGdCQUFnQjtBQUNoQixZQUFZIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYmxvY2tiaXRlLy4vbm9kZV9tb2R1bGVzL2Nzc28vbm9kZV9tb2R1bGVzL2Nzcy10cmVlL2Nqcy9pbmRleC5janM/Y2I3ZSJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmNvbnN0IGluZGV4JDEgPSByZXF1aXJlKCcuL3N5bnRheC9pbmRleC5janMnKTtcbmNvbnN0IHZlcnNpb24gPSByZXF1aXJlKCcuL3ZlcnNpb24uY2pzJyk7XG5jb25zdCBjcmVhdGUgPSByZXF1aXJlKCcuL3N5bnRheC9jcmVhdGUuY2pzJyk7XG5jb25zdCBMaXN0ID0gcmVxdWlyZSgnLi91dGlscy9MaXN0LmNqcycpO1xuY29uc3QgTGV4ZXIgPSByZXF1aXJlKCcuL2xleGVyL0xleGVyLmNqcycpO1xuY29uc3QgaW5kZXggPSByZXF1aXJlKCcuL2RlZmluaXRpb24tc3ludGF4L2luZGV4LmNqcycpO1xuY29uc3QgY2xvbmUgPSByZXF1aXJlKCcuL3V0aWxzL2Nsb25lLmNqcycpO1xuY29uc3QgbmFtZXMkMSA9IHJlcXVpcmUoJy4vdXRpbHMvbmFtZXMuY2pzJyk7XG5jb25zdCBpZGVudCA9IHJlcXVpcmUoJy4vdXRpbHMvaWRlbnQuY2pzJyk7XG5jb25zdCBzdHJpbmcgPSByZXF1aXJlKCcuL3V0aWxzL3N0cmluZy5janMnKTtcbmNvbnN0IHVybCA9IHJlcXVpcmUoJy4vdXRpbHMvdXJsLmNqcycpO1xuY29uc3QgdHlwZXMgPSByZXF1aXJlKCcuL3Rva2VuaXplci90eXBlcy5janMnKTtcbmNvbnN0IG5hbWVzID0gcmVxdWlyZSgnLi90b2tlbml6ZXIvbmFtZXMuY2pzJyk7XG5jb25zdCBUb2tlblN0cmVhbSA9IHJlcXVpcmUoJy4vdG9rZW5pemVyL1Rva2VuU3RyZWFtLmNqcycpO1xuXG5jb25zdCB7XG4gICAgdG9rZW5pemUsXG4gICAgcGFyc2UsXG4gICAgZ2VuZXJhdGUsXG4gICAgbGV4ZXIsXG4gICAgY3JlYXRlTGV4ZXIsXG5cbiAgICB3YWxrLFxuICAgIGZpbmQsXG4gICAgZmluZExhc3QsXG4gICAgZmluZEFsbCxcblxuICAgIHRvUGxhaW5PYmplY3QsXG4gICAgZnJvbVBsYWluT2JqZWN0LFxuXG4gICAgZm9ya1xufSA9IGluZGV4JDE7XG5cbmV4cG9ydHMudmVyc2lvbiA9IHZlcnNpb24udmVyc2lvbjtcbmV4cG9ydHMuY3JlYXRlU3ludGF4ID0gY3JlYXRlO1xuZXhwb3J0cy5MaXN0ID0gTGlzdC5MaXN0O1xuZXhwb3J0cy5MZXhlciA9IExleGVyLkxleGVyO1xuZXhwb3J0cy5kZWZpbml0aW9uU3ludGF4ID0gaW5kZXg7XG5leHBvcnRzLmNsb25lID0gY2xvbmUuY2xvbmU7XG5leHBvcnRzLmlzQ3VzdG9tUHJvcGVydHkgPSBuYW1lcyQxLmlzQ3VzdG9tUHJvcGVydHk7XG5leHBvcnRzLmtleXdvcmQgPSBuYW1lcyQxLmtleXdvcmQ7XG5leHBvcnRzLnByb3BlcnR5ID0gbmFtZXMkMS5wcm9wZXJ0eTtcbmV4cG9ydHMudmVuZG9yUHJlZml4ID0gbmFtZXMkMS52ZW5kb3JQcmVmaXg7XG5leHBvcnRzLmlkZW50ID0gaWRlbnQ7XG5leHBvcnRzLnN0cmluZyA9IHN0cmluZztcbmV4cG9ydHMudXJsID0gdXJsO1xuZXhwb3J0cy50b2tlblR5cGVzID0gdHlwZXM7XG5leHBvcnRzLnRva2VuTmFtZXMgPSBuYW1lcztcbmV4cG9ydHMuVG9rZW5TdHJlYW0gPSBUb2tlblN0cmVhbS5Ub2tlblN0cmVhbTtcbmV4cG9ydHMuY3JlYXRlTGV4ZXIgPSBjcmVhdGVMZXhlcjtcbmV4cG9ydHMuZmluZCA9IGZpbmQ7XG5leHBvcnRzLmZpbmRBbGwgPSBmaW5kQWxsO1xuZXhwb3J0cy5maW5kTGFzdCA9IGZpbmRMYXN0O1xuZXhwb3J0cy5mb3JrID0gZm9yaztcbmV4cG9ydHMuZnJvbVBsYWluT2JqZWN0ID0gZnJvbVBsYWluT2JqZWN0O1xuZXhwb3J0cy5nZW5lcmF0ZSA9IGdlbmVyYXRlO1xuZXhwb3J0cy5sZXhlciA9IGxleGVyO1xuZXhwb3J0cy5wYXJzZSA9IHBhcnNlO1xuZXhwb3J0cy50b1BsYWluT2JqZWN0ID0gdG9QbGFpbk9iamVjdDtcbmV4cG9ydHMudG9rZW5pemUgPSB0b2tlbml6ZTtcbmV4cG9ydHMud2FsayA9IHdhbGs7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///22694\n")},73627:(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";eval("\n\nconst error = __webpack_require__(2763);\nconst names = __webpack_require__(60356);\nconst genericConst = __webpack_require__(74084);\nconst generic = __webpack_require__(33990);\nconst prepareTokens = __webpack_require__(86355);\nconst matchGraph = __webpack_require__(40473);\nconst match = __webpack_require__(54818);\nconst trace = __webpack_require__(97418);\nconst search = __webpack_require__(11187);\nconst structure = __webpack_require__(91698);\nconst parse = __webpack_require__(66087);\nconst generate = __webpack_require__(22599);\nconst walk = __webpack_require__(77465);\n\nconst cssWideKeywordsSyntax = matchGraph.buildMatchGraph(genericConst.cssWideKeywords.join(' | '));\n\nfunction dumpMapSyntax(map, compact, syntaxAsAst) {\n    const result = {};\n\n    for (const name in map) {\n        if (map[name].syntax) {\n            result[name] = syntaxAsAst\n                ? map[name].syntax\n                : generate.generate(map[name].syntax, { compact });\n        }\n    }\n\n    return result;\n}\n\nfunction dumpAtruleMapSyntax(map, compact, syntaxAsAst) {\n    const result = {};\n\n    for (const [name, atrule] of Object.entries(map)) {\n        result[name] = {\n            prelude: atrule.prelude && (\n                syntaxAsAst\n                    ? atrule.prelude.syntax\n                    : generate.generate(atrule.prelude.syntax, { compact })\n            ),\n            descriptors: atrule.descriptors && dumpMapSyntax(atrule.descriptors, compact, syntaxAsAst)\n        };\n    }\n\n    return result;\n}\n\nfunction valueHasVar(tokens) {\n    for (let i = 0; i < tokens.length; i++) {\n        if (tokens[i].value.toLowerCase() === 'var(') {\n            return true;\n        }\n    }\n\n    return false;\n}\n\nfunction buildMatchResult(matched, error, iterations) {\n    return {\n        matched,\n        iterations,\n        error,\n        ...trace\n    };\n}\n\nfunction matchSyntax(lexer, syntax, value, useCssWideKeywords) {\n    const tokens = prepareTokens(value, lexer.syntax);\n    let result;\n\n    if (valueHasVar(tokens)) {\n        return buildMatchResult(null, new Error('Matching for a tree with var() is not supported'));\n    }\n\n    if (useCssWideKeywords) {\n        result = match.matchAsTree(tokens, lexer.cssWideKeywordsSyntax, lexer);\n    }\n\n    if (!useCssWideKeywords || !result.match) {\n        result = match.matchAsTree(tokens, syntax.match, lexer);\n        if (!result.match) {\n            return buildMatchResult(\n                null,\n                new error.SyntaxMatchError(result.reason, syntax.syntax, value, result),\n                result.iterations\n            );\n        }\n    }\n\n    return buildMatchResult(result.match, null, result.iterations);\n}\n\nclass Lexer {\n    constructor(config, syntax, structure$1) {\n        this.cssWideKeywordsSyntax = cssWideKeywordsSyntax;\n        this.syntax = syntax;\n        this.generic = false;\n        this.atrules = Object.create(null);\n        this.properties = Object.create(null);\n        this.types = Object.create(null);\n        this.structure = structure$1 || structure.getStructureFromConfig(config);\n\n        if (config) {\n            if (config.types) {\n                for (const name in config.types) {\n                    this.addType_(name, config.types[name]);\n                }\n            }\n\n            if (config.generic) {\n                this.generic = true;\n                for (const name in generic) {\n                    this.addType_(name, generic[name]);\n                }\n            }\n\n            if (config.atrules) {\n                for (const name in config.atrules) {\n                    this.addAtrule_(name, config.atrules[name]);\n                }\n            }\n\n            if (config.properties) {\n                for (const name in config.properties) {\n                    this.addProperty_(name, config.properties[name]);\n                }\n            }\n        }\n    }\n\n    checkStructure(ast) {\n        function collectWarning(node, message) {\n            warns.push({ node, message });\n        }\n\n        const structure = this.structure;\n        const warns = [];\n\n        this.syntax.walk(ast, function(node) {\n            if (structure.hasOwnProperty(node.type)) {\n                structure[node.type].check(node, collectWarning);\n            } else {\n                collectWarning(node, 'Unknown node type `' + node.type + '`');\n            }\n        });\n\n        return warns.length ? warns : false;\n    }\n\n    createDescriptor(syntax, type, name, parent = null) {\n        const ref = {\n            type,\n            name\n        };\n        const descriptor = {\n            type,\n            name,\n            parent,\n            serializable: typeof syntax === 'string' || (syntax && typeof syntax.type === 'string'),\n            syntax: null,\n            match: null\n        };\n\n        if (typeof syntax === 'function') {\n            descriptor.match = matchGraph.buildMatchGraph(syntax, ref);\n        } else {\n            if (typeof syntax === 'string') {\n                // lazy parsing on first access\n                Object.defineProperty(descriptor, 'syntax', {\n                    get() {\n                        Object.defineProperty(descriptor, 'syntax', {\n                            value: parse.parse(syntax)\n                        });\n\n                        return descriptor.syntax;\n                    }\n                });\n            } else {\n                descriptor.syntax = syntax;\n            }\n\n            // lazy graph build on first access\n            Object.defineProperty(descriptor, 'match', {\n                get() {\n                    Object.defineProperty(descriptor, 'match', {\n                        value: matchGraph.buildMatchGraph(descriptor.syntax, ref)\n                    });\n\n                    return descriptor.match;\n                }\n            });\n        }\n\n        return descriptor;\n    }\n    addAtrule_(name, syntax) {\n        if (!syntax) {\n            return;\n        }\n\n        this.atrules[name] = {\n            type: 'Atrule',\n            name: name,\n            prelude: syntax.prelude ? this.createDescriptor(syntax.prelude, 'AtrulePrelude', name) : null,\n            descriptors: syntax.descriptors\n                ? Object.keys(syntax.descriptors).reduce(\n                    (map, descName) => {\n                        map[descName] = this.createDescriptor(syntax.descriptors[descName], 'AtruleDescriptor', descName, name);\n                        return map;\n                    },\n                    Object.create(null)\n                )\n                : null\n        };\n    }\n    addProperty_(name, syntax) {\n        if (!syntax) {\n            return;\n        }\n\n        this.properties[name] = this.createDescriptor(syntax, 'Property', name);\n    }\n    addType_(name, syntax) {\n        if (!syntax) {\n            return;\n        }\n\n        this.types[name] = this.createDescriptor(syntax, 'Type', name);\n    }\n\n    checkAtruleName(atruleName) {\n        if (!this.getAtrule(atruleName)) {\n            return new error.SyntaxReferenceError('Unknown at-rule', '@' + atruleName);\n        }\n    }\n    checkAtrulePrelude(atruleName, prelude) {\n        const error = this.checkAtruleName(atruleName);\n\n        if (error) {\n            return error;\n        }\n\n        const atrule = this.getAtrule(atruleName);\n\n        if (!atrule.prelude && prelude) {\n            return new SyntaxError('At-rule `@' + atruleName + '` should not contain a prelude');\n        }\n\n        if (atrule.prelude && !prelude) {\n            if (!matchSyntax(this, atrule.prelude, '', false).matched) {\n                return new SyntaxError('At-rule `@' + atruleName + '` should contain a prelude');\n            }\n        }\n    }\n    checkAtruleDescriptorName(atruleName, descriptorName) {\n        const error$1 = this.checkAtruleName(atruleName);\n\n        if (error$1) {\n            return error$1;\n        }\n\n        const atrule = this.getAtrule(atruleName);\n        const descriptor = names.keyword(descriptorName);\n\n        if (!atrule.descriptors) {\n            return new SyntaxError('At-rule `@' + atruleName + '` has no known descriptors');\n        }\n\n        if (!atrule.descriptors[descriptor.name] &&\n            !atrule.descriptors[descriptor.basename]) {\n            return new error.SyntaxReferenceError('Unknown at-rule descriptor', descriptorName);\n        }\n    }\n    checkPropertyName(propertyName) {\n        if (!this.getProperty(propertyName)) {\n            return new error.SyntaxReferenceError('Unknown property', propertyName);\n        }\n    }\n\n    matchAtrulePrelude(atruleName, prelude) {\n        const error = this.checkAtrulePrelude(atruleName, prelude);\n\n        if (error) {\n            return buildMatchResult(null, error);\n        }\n\n        const atrule = this.getAtrule(atruleName);\n\n        if (!atrule.prelude) {\n            return buildMatchResult(null, null);\n        }\n\n        return matchSyntax(this, atrule.prelude, prelude || '', false);\n    }\n    matchAtruleDescriptor(atruleName, descriptorName, value) {\n        const error = this.checkAtruleDescriptorName(atruleName, descriptorName);\n\n        if (error) {\n            return buildMatchResult(null, error);\n        }\n\n        const atrule = this.getAtrule(atruleName);\n        const descriptor = names.keyword(descriptorName);\n\n        return matchSyntax(this, atrule.descriptors[descriptor.name] || atrule.descriptors[descriptor.basename], value, false);\n    }\n    matchDeclaration(node) {\n        if (node.type !== 'Declaration') {\n            return buildMatchResult(null, new Error('Not a Declaration node'));\n        }\n\n        return this.matchProperty(node.property, node.value);\n    }\n    matchProperty(propertyName, value) {\n        // don't match syntax for a custom property at the moment\n        if (names.property(propertyName).custom) {\n            return buildMatchResult(null, new Error('Lexer matching doesn\\'t applicable for custom properties'));\n        }\n\n        const error = this.checkPropertyName(propertyName);\n\n        if (error) {\n            return buildMatchResult(null, error);\n        }\n\n        return matchSyntax(this, this.getProperty(propertyName), value, true);\n    }\n    matchType(typeName, value) {\n        const typeSyntax = this.getType(typeName);\n\n        if (!typeSyntax) {\n            return buildMatchResult(null, new error.SyntaxReferenceError('Unknown type', typeName));\n        }\n\n        return matchSyntax(this, typeSyntax, value, false);\n    }\n    match(syntax, value) {\n        if (typeof syntax !== 'string' && (!syntax || !syntax.type)) {\n            return buildMatchResult(null, new error.SyntaxReferenceError('Bad syntax'));\n        }\n\n        if (typeof syntax === 'string' || !syntax.match) {\n            syntax = this.createDescriptor(syntax, 'Type', 'anonymous');\n        }\n\n        return matchSyntax(this, syntax, value, false);\n    }\n\n    findValueFragments(propertyName, value, type, name) {\n        return search.matchFragments(this, value, this.matchProperty(propertyName, value), type, name);\n    }\n    findDeclarationValueFragments(declaration, type, name) {\n        return search.matchFragments(this, declaration.value, this.matchDeclaration(declaration), type, name);\n    }\n    findAllFragments(ast, type, name) {\n        const result = [];\n\n        this.syntax.walk(ast, {\n            visit: 'Declaration',\n            enter: (declaration) => {\n                result.push.apply(result, this.findDeclarationValueFragments(declaration, type, name));\n            }\n        });\n\n        return result;\n    }\n\n    getAtrule(atruleName, fallbackBasename = true) {\n        const atrule = names.keyword(atruleName);\n        const atruleEntry = atrule.vendor && fallbackBasename\n            ? this.atrules[atrule.name] || this.atrules[atrule.basename]\n            : this.atrules[atrule.name];\n\n        return atruleEntry || null;\n    }\n    getAtrulePrelude(atruleName, fallbackBasename = true) {\n        const atrule = this.getAtrule(atruleName, fallbackBasename);\n\n        return atrule && atrule.prelude || null;\n    }\n    getAtruleDescriptor(atruleName, name) {\n        return this.atrules.hasOwnProperty(atruleName) && this.atrules.declarators\n            ? this.atrules[atruleName].declarators[name] || null\n            : null;\n    }\n    getProperty(propertyName, fallbackBasename = true) {\n        const property = names.property(propertyName);\n        const propertyEntry = property.vendor && fallbackBasename\n            ? this.properties[property.name] || this.properties[property.basename]\n            : this.properties[property.name];\n\n        return propertyEntry || null;\n    }\n    getType(name) {\n        return hasOwnProperty.call(this.types, name) ? this.types[name] : null;\n    }\n\n    validate() {\n        function validate(syntax, name, broken, descriptor) {\n            if (broken.has(name)) {\n                return broken.get(name);\n            }\n\n            broken.set(name, false);\n            if (descriptor.syntax !== null) {\n                walk.walk(descriptor.syntax, function(node) {\n                    if (node.type !== 'Type' && node.type !== 'Property') {\n                        return;\n                    }\n\n                    const map = node.type === 'Type' ? syntax.types : syntax.properties;\n                    const brokenMap = node.type === 'Type' ? brokenTypes : brokenProperties;\n\n                    if (!hasOwnProperty.call(map, node.name) || validate(syntax, node.name, brokenMap, map[node.name])) {\n                        broken.set(name, true);\n                    }\n                }, this);\n            }\n        }\n\n        let brokenTypes = new Map();\n        let brokenProperties = new Map();\n\n        for (const key in this.types) {\n            validate(this, key, brokenTypes, this.types[key]);\n        }\n\n        for (const key in this.properties) {\n            validate(this, key, brokenProperties, this.properties[key]);\n        }\n\n        brokenTypes = [...brokenTypes.keys()].filter(name => brokenTypes.get(name));\n        brokenProperties = [...brokenProperties.keys()].filter(name => brokenProperties.get(name));\n\n        if (brokenTypes.length || brokenProperties.length) {\n            return {\n                types: brokenTypes,\n                properties: brokenProperties\n            };\n        }\n\n        return null;\n    }\n    dump(syntaxAsAst, pretty) {\n        return {\n            generic: this.generic,\n            types: dumpMapSyntax(this.types, !pretty, syntaxAsAst),\n            properties: dumpMapSyntax(this.properties, !pretty, syntaxAsAst),\n            atrules: dumpAtruleMapSyntax(this.atrules, !pretty, syntaxAsAst)\n        };\n    }\n    toString() {\n        return JSON.stringify(this.dump());\n    }\n}\n\nexports.Lexer = Lexer;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNzM2MjcuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsY0FBYyxtQkFBTyxDQUFDLElBQWE7QUFDbkMsY0FBYyxtQkFBTyxDQUFDLEtBQW9CO0FBQzFDLHFCQUFxQixtQkFBTyxDQUFDLEtBQXFCO0FBQ2xELGdCQUFnQixtQkFBTyxDQUFDLEtBQWU7QUFDdkMsc0JBQXNCLG1CQUFPLENBQUMsS0FBc0I7QUFDcEQsbUJBQW1CLG1CQUFPLENBQUMsS0FBbUI7QUFDOUMsY0FBYyxtQkFBTyxDQUFDLEtBQWE7QUFDbkMsY0FBYyxtQkFBTyxDQUFDLEtBQWE7QUFDbkMsZUFBZSxtQkFBTyxDQUFDLEtBQWM7QUFDckMsa0JBQWtCLG1CQUFPLENBQUMsS0FBaUI7QUFDM0MsY0FBYyxtQkFBTyxDQUFDLEtBQWdDO0FBQ3RELGlCQUFpQixtQkFBTyxDQUFDLEtBQW1DO0FBQzVELGFBQWEsbUJBQU8sQ0FBQyxLQUErQjs7QUFFcEQ7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdEQUF3RCxTQUFTO0FBQ2pFO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpRUFBaUUsU0FBUztBQUMxRTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0Esb0JBQW9CLG1CQUFtQjtBQUN2QztBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSx5QkFBeUIsZUFBZTtBQUN4Qzs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLGNBQWM7QUFDZDtBQUNBO0FBQ0EsU0FBUzs7QUFFVDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUJBQXlCOztBQUV6QjtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCLGNBQWM7QUFDZDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQkFBcUI7O0FBRXJCO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQjtBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7O0FBRVQ7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsYUFBYSIsInNvdXJjZXMiOlsid2VicGFjazovL2Jsb2NrYml0ZS8uL25vZGVfbW9kdWxlcy9jc3NvL25vZGVfbW9kdWxlcy9jc3MtdHJlZS9janMvbGV4ZXIvTGV4ZXIuY2pzPzA4YTUiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBlcnJvciA9IHJlcXVpcmUoJy4vZXJyb3IuY2pzJyk7XG5jb25zdCBuYW1lcyA9IHJlcXVpcmUoJy4uL3V0aWxzL25hbWVzLmNqcycpO1xuY29uc3QgZ2VuZXJpY0NvbnN0ID0gcmVxdWlyZSgnLi9nZW5lcmljLWNvbnN0LmNqcycpO1xuY29uc3QgZ2VuZXJpYyA9IHJlcXVpcmUoJy4vZ2VuZXJpYy5janMnKTtcbmNvbnN0IHByZXBhcmVUb2tlbnMgPSByZXF1aXJlKCcuL3ByZXBhcmUtdG9rZW5zLmNqcycpO1xuY29uc3QgbWF0Y2hHcmFwaCA9IHJlcXVpcmUoJy4vbWF0Y2gtZ3JhcGguY2pzJyk7XG5jb25zdCBtYXRjaCA9IHJlcXVpcmUoJy4vbWF0Y2guY2pzJyk7XG5jb25zdCB0cmFjZSA9IHJlcXVpcmUoJy4vdHJhY2UuY2pzJyk7XG5jb25zdCBzZWFyY2ggPSByZXF1aXJlKCcuL3NlYXJjaC5janMnKTtcbmNvbnN0IHN0cnVjdHVyZSA9IHJlcXVpcmUoJy4vc3RydWN0dXJlLmNqcycpO1xuY29uc3QgcGFyc2UgPSByZXF1aXJlKCcuLi9kZWZpbml0aW9uLXN5bnRheC9wYXJzZS5janMnKTtcbmNvbnN0IGdlbmVyYXRlID0gcmVxdWlyZSgnLi4vZGVmaW5pdGlvbi1zeW50YXgvZ2VuZXJhdGUuY2pzJyk7XG5jb25zdCB3YWxrID0gcmVxdWlyZSgnLi4vZGVmaW5pdGlvbi1zeW50YXgvd2Fsay5janMnKTtcblxuY29uc3QgY3NzV2lkZUtleXdvcmRzU3ludGF4ID0gbWF0Y2hHcmFwaC5idWlsZE1hdGNoR3JhcGgoZ2VuZXJpY0NvbnN0LmNzc1dpZGVLZXl3b3Jkcy5qb2luKCcgfCAnKSk7XG5cbmZ1bmN0aW9uIGR1bXBNYXBTeW50YXgobWFwLCBjb21wYWN0LCBzeW50YXhBc0FzdCkge1xuICAgIGNvbnN0IHJlc3VsdCA9IHt9O1xuXG4gICAgZm9yIChjb25zdCBuYW1lIGluIG1hcCkge1xuICAgICAgICBpZiAobWFwW25hbWVdLnN5bnRheCkge1xuICAgICAgICAgICAgcmVzdWx0W25hbWVdID0gc3ludGF4QXNBc3RcbiAgICAgICAgICAgICAgICA/IG1hcFtuYW1lXS5zeW50YXhcbiAgICAgICAgICAgICAgICA6IGdlbmVyYXRlLmdlbmVyYXRlKG1hcFtuYW1lXS5zeW50YXgsIHsgY29tcGFjdCB9KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiByZXN1bHQ7XG59XG5cbmZ1bmN0aW9uIGR1bXBBdHJ1bGVNYXBTeW50YXgobWFwLCBjb21wYWN0LCBzeW50YXhBc0FzdCkge1xuICAgIGNvbnN0IHJlc3VsdCA9IHt9O1xuXG4gICAgZm9yIChjb25zdCBbbmFtZSwgYXRydWxlXSBvZiBPYmplY3QuZW50cmllcyhtYXApKSB7XG4gICAgICAgIHJlc3VsdFtuYW1lXSA9IHtcbiAgICAgICAgICAgIHByZWx1ZGU6IGF0cnVsZS5wcmVsdWRlICYmIChcbiAgICAgICAgICAgICAgICBzeW50YXhBc0FzdFxuICAgICAgICAgICAgICAgICAgICA/IGF0cnVsZS5wcmVsdWRlLnN5bnRheFxuICAgICAgICAgICAgICAgICAgICA6IGdlbmVyYXRlLmdlbmVyYXRlKGF0cnVsZS5wcmVsdWRlLnN5bnRheCwgeyBjb21wYWN0IH0pXG4gICAgICAgICAgICApLFxuICAgICAgICAgICAgZGVzY3JpcHRvcnM6IGF0cnVsZS5kZXNjcmlwdG9ycyAmJiBkdW1wTWFwU3ludGF4KGF0cnVsZS5kZXNjcmlwdG9ycywgY29tcGFjdCwgc3ludGF4QXNBc3QpXG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZnVuY3Rpb24gdmFsdWVIYXNWYXIodG9rZW5zKSB7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0b2tlbnMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgaWYgKHRva2Vuc1tpXS52YWx1ZS50b0xvd2VyQ2FzZSgpID09PSAndmFyKCcpIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGZhbHNlO1xufVxuXG5mdW5jdGlvbiBidWlsZE1hdGNoUmVzdWx0KG1hdGNoZWQsIGVycm9yLCBpdGVyYXRpb25zKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgbWF0Y2hlZCxcbiAgICAgICAgaXRlcmF0aW9ucyxcbiAgICAgICAgZXJyb3IsXG4gICAgICAgIC4uLnRyYWNlXG4gICAgfTtcbn1cblxuZnVuY3Rpb24gbWF0Y2hTeW50YXgobGV4ZXIsIHN5bnRheCwgdmFsdWUsIHVzZUNzc1dpZGVLZXl3b3Jkcykge1xuICAgIGNvbnN0IHRva2VucyA9IHByZXBhcmVUb2tlbnModmFsdWUsIGxleGVyLnN5bnRheCk7XG4gICAgbGV0IHJlc3VsdDtcblxuICAgIGlmICh2YWx1ZUhhc1Zhcih0b2tlbnMpKSB7XG4gICAgICAgIHJldHVybiBidWlsZE1hdGNoUmVzdWx0KG51bGwsIG5ldyBFcnJvcignTWF0Y2hpbmcgZm9yIGEgdHJlZSB3aXRoIHZhcigpIGlzIG5vdCBzdXBwb3J0ZWQnKSk7XG4gICAgfVxuXG4gICAgaWYgKHVzZUNzc1dpZGVLZXl3b3Jkcykge1xuICAgICAgICByZXN1bHQgPSBtYXRjaC5tYXRjaEFzVHJlZSh0b2tlbnMsIGxleGVyLmNzc1dpZGVLZXl3b3Jkc1N5bnRheCwgbGV4ZXIpO1xuICAgIH1cblxuICAgIGlmICghdXNlQ3NzV2lkZUtleXdvcmRzIHx8ICFyZXN1bHQubWF0Y2gpIHtcbiAgICAgICAgcmVzdWx0ID0gbWF0Y2gubWF0Y2hBc1RyZWUodG9rZW5zLCBzeW50YXgubWF0Y2gsIGxleGVyKTtcbiAgICAgICAgaWYgKCFyZXN1bHQubWF0Y2gpIHtcbiAgICAgICAgICAgIHJldHVybiBidWlsZE1hdGNoUmVzdWx0KFxuICAgICAgICAgICAgICAgIG51bGwsXG4gICAgICAgICAgICAgICAgbmV3IGVycm9yLlN5bnRheE1hdGNoRXJyb3IocmVzdWx0LnJlYXNvbiwgc3ludGF4LnN5bnRheCwgdmFsdWUsIHJlc3VsdCksXG4gICAgICAgICAgICAgICAgcmVzdWx0Lml0ZXJhdGlvbnNcbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gYnVpbGRNYXRjaFJlc3VsdChyZXN1bHQubWF0Y2gsIG51bGwsIHJlc3VsdC5pdGVyYXRpb25zKTtcbn1cblxuY2xhc3MgTGV4ZXIge1xuICAgIGNvbnN0cnVjdG9yKGNvbmZpZywgc3ludGF4LCBzdHJ1Y3R1cmUkMSkge1xuICAgICAgICB0aGlzLmNzc1dpZGVLZXl3b3Jkc1N5bnRheCA9IGNzc1dpZGVLZXl3b3Jkc1N5bnRheDtcbiAgICAgICAgdGhpcy5zeW50YXggPSBzeW50YXg7XG4gICAgICAgIHRoaXMuZ2VuZXJpYyA9IGZhbHNlO1xuICAgICAgICB0aGlzLmF0cnVsZXMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgICAgICB0aGlzLnByb3BlcnRpZXMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgICAgICB0aGlzLnR5cGVzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICAgICAgdGhpcy5zdHJ1Y3R1cmUgPSBzdHJ1Y3R1cmUkMSB8fCBzdHJ1Y3R1cmUuZ2V0U3RydWN0dXJlRnJvbUNvbmZpZyhjb25maWcpO1xuXG4gICAgICAgIGlmIChjb25maWcpIHtcbiAgICAgICAgICAgIGlmIChjb25maWcudHlwZXMpIHtcbiAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IG5hbWUgaW4gY29uZmlnLnR5cGVzKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYWRkVHlwZV8obmFtZSwgY29uZmlnLnR5cGVzW25hbWVdKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChjb25maWcuZ2VuZXJpYykge1xuICAgICAgICAgICAgICAgIHRoaXMuZ2VuZXJpYyA9IHRydWU7XG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCBuYW1lIGluIGdlbmVyaWMpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5hZGRUeXBlXyhuYW1lLCBnZW5lcmljW25hbWVdKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChjb25maWcuYXRydWxlcykge1xuICAgICAgICAgICAgICAgIGZvciAoY29uc3QgbmFtZSBpbiBjb25maWcuYXRydWxlcykge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmFkZEF0cnVsZV8obmFtZSwgY29uZmlnLmF0cnVsZXNbbmFtZV0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKGNvbmZpZy5wcm9wZXJ0aWVzKSB7XG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCBuYW1lIGluIGNvbmZpZy5wcm9wZXJ0aWVzKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYWRkUHJvcGVydHlfKG5hbWUsIGNvbmZpZy5wcm9wZXJ0aWVzW25hbWVdKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBjaGVja1N0cnVjdHVyZShhc3QpIHtcbiAgICAgICAgZnVuY3Rpb24gY29sbGVjdFdhcm5pbmcobm9kZSwgbWVzc2FnZSkge1xuICAgICAgICAgICAgd2FybnMucHVzaCh7IG5vZGUsIG1lc3NhZ2UgfSk7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBzdHJ1Y3R1cmUgPSB0aGlzLnN0cnVjdHVyZTtcbiAgICAgICAgY29uc3Qgd2FybnMgPSBbXTtcblxuICAgICAgICB0aGlzLnN5bnRheC53YWxrKGFzdCwgZnVuY3Rpb24obm9kZSkge1xuICAgICAgICAgICAgaWYgKHN0cnVjdHVyZS5oYXNPd25Qcm9wZXJ0eShub2RlLnR5cGUpKSB7XG4gICAgICAgICAgICAgICAgc3RydWN0dXJlW25vZGUudHlwZV0uY2hlY2sobm9kZSwgY29sbGVjdFdhcm5pbmcpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBjb2xsZWN0V2FybmluZyhub2RlLCAnVW5rbm93biBub2RlIHR5cGUgYCcgKyBub2RlLnR5cGUgKyAnYCcpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICByZXR1cm4gd2FybnMubGVuZ3RoID8gd2FybnMgOiBmYWxzZTtcbiAgICB9XG5cbiAgICBjcmVhdGVEZXNjcmlwdG9yKHN5bnRheCwgdHlwZSwgbmFtZSwgcGFyZW50ID0gbnVsbCkge1xuICAgICAgICBjb25zdCByZWYgPSB7XG4gICAgICAgICAgICB0eXBlLFxuICAgICAgICAgICAgbmFtZVxuICAgICAgICB9O1xuICAgICAgICBjb25zdCBkZXNjcmlwdG9yID0ge1xuICAgICAgICAgICAgdHlwZSxcbiAgICAgICAgICAgIG5hbWUsXG4gICAgICAgICAgICBwYXJlbnQsXG4gICAgICAgICAgICBzZXJpYWxpemFibGU6IHR5cGVvZiBzeW50YXggPT09ICdzdHJpbmcnIHx8IChzeW50YXggJiYgdHlwZW9mIHN5bnRheC50eXBlID09PSAnc3RyaW5nJyksXG4gICAgICAgICAgICBzeW50YXg6IG51bGwsXG4gICAgICAgICAgICBtYXRjaDogbnVsbFxuICAgICAgICB9O1xuXG4gICAgICAgIGlmICh0eXBlb2Ygc3ludGF4ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBkZXNjcmlwdG9yLm1hdGNoID0gbWF0Y2hHcmFwaC5idWlsZE1hdGNoR3JhcGgoc3ludGF4LCByZWYpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBzeW50YXggPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgICAgLy8gbGF6eSBwYXJzaW5nIG9uIGZpcnN0IGFjY2Vzc1xuICAgICAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShkZXNjcmlwdG9yLCAnc3ludGF4Jywge1xuICAgICAgICAgICAgICAgICAgICBnZXQoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZGVzY3JpcHRvciwgJ3N5bnRheCcsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogcGFyc2UucGFyc2Uoc3ludGF4KVxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBkZXNjcmlwdG9yLnN5bnRheDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBkZXNjcmlwdG9yLnN5bnRheCA9IHN5bnRheDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gbGF6eSBncmFwaCBidWlsZCBvbiBmaXJzdCBhY2Nlc3NcbiAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShkZXNjcmlwdG9yLCAnbWF0Y2gnLCB7XG4gICAgICAgICAgICAgICAgZ2V0KCkge1xuICAgICAgICAgICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZGVzY3JpcHRvciwgJ21hdGNoJywge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IG1hdGNoR3JhcGguYnVpbGRNYXRjaEdyYXBoKGRlc2NyaXB0b3Iuc3ludGF4LCByZWYpXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBkZXNjcmlwdG9yLm1hdGNoO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGRlc2NyaXB0b3I7XG4gICAgfVxuICAgIGFkZEF0cnVsZV8obmFtZSwgc3ludGF4KSB7XG4gICAgICAgIGlmICghc3ludGF4KSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLmF0cnVsZXNbbmFtZV0gPSB7XG4gICAgICAgICAgICB0eXBlOiAnQXRydWxlJyxcbiAgICAgICAgICAgIG5hbWU6IG5hbWUsXG4gICAgICAgICAgICBwcmVsdWRlOiBzeW50YXgucHJlbHVkZSA/IHRoaXMuY3JlYXRlRGVzY3JpcHRvcihzeW50YXgucHJlbHVkZSwgJ0F0cnVsZVByZWx1ZGUnLCBuYW1lKSA6IG51bGwsXG4gICAgICAgICAgICBkZXNjcmlwdG9yczogc3ludGF4LmRlc2NyaXB0b3JzXG4gICAgICAgICAgICAgICAgPyBPYmplY3Qua2V5cyhzeW50YXguZGVzY3JpcHRvcnMpLnJlZHVjZShcbiAgICAgICAgICAgICAgICAgICAgKG1hcCwgZGVzY05hbWUpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG1hcFtkZXNjTmFtZV0gPSB0aGlzLmNyZWF0ZURlc2NyaXB0b3Ioc3ludGF4LmRlc2NyaXB0b3JzW2Rlc2NOYW1lXSwgJ0F0cnVsZURlc2NyaXB0b3InLCBkZXNjTmFtZSwgbmFtZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbWFwO1xuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBPYmplY3QuY3JlYXRlKG51bGwpXG4gICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgIDogbnVsbFxuICAgICAgICB9O1xuICAgIH1cbiAgICBhZGRQcm9wZXJ0eV8obmFtZSwgc3ludGF4KSB7XG4gICAgICAgIGlmICghc3ludGF4KSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLnByb3BlcnRpZXNbbmFtZV0gPSB0aGlzLmNyZWF0ZURlc2NyaXB0b3Ioc3ludGF4LCAnUHJvcGVydHknLCBuYW1lKTtcbiAgICB9XG4gICAgYWRkVHlwZV8obmFtZSwgc3ludGF4KSB7XG4gICAgICAgIGlmICghc3ludGF4KSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLnR5cGVzW25hbWVdID0gdGhpcy5jcmVhdGVEZXNjcmlwdG9yKHN5bnRheCwgJ1R5cGUnLCBuYW1lKTtcbiAgICB9XG5cbiAgICBjaGVja0F0cnVsZU5hbWUoYXRydWxlTmFtZSkge1xuICAgICAgICBpZiAoIXRoaXMuZ2V0QXRydWxlKGF0cnVsZU5hbWUpKSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IGVycm9yLlN5bnRheFJlZmVyZW5jZUVycm9yKCdVbmtub3duIGF0LXJ1bGUnLCAnQCcgKyBhdHJ1bGVOYW1lKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBjaGVja0F0cnVsZVByZWx1ZGUoYXRydWxlTmFtZSwgcHJlbHVkZSkge1xuICAgICAgICBjb25zdCBlcnJvciA9IHRoaXMuY2hlY2tBdHJ1bGVOYW1lKGF0cnVsZU5hbWUpO1xuXG4gICAgICAgIGlmIChlcnJvcikge1xuICAgICAgICAgICAgcmV0dXJuIGVycm9yO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgYXRydWxlID0gdGhpcy5nZXRBdHJ1bGUoYXRydWxlTmFtZSk7XG5cbiAgICAgICAgaWYgKCFhdHJ1bGUucHJlbHVkZSAmJiBwcmVsdWRlKSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IFN5bnRheEVycm9yKCdBdC1ydWxlIGBAJyArIGF0cnVsZU5hbWUgKyAnYCBzaG91bGQgbm90IGNvbnRhaW4gYSBwcmVsdWRlJyk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoYXRydWxlLnByZWx1ZGUgJiYgIXByZWx1ZGUpIHtcbiAgICAgICAgICAgIGlmICghbWF0Y2hTeW50YXgodGhpcywgYXRydWxlLnByZWx1ZGUsICcnLCBmYWxzZSkubWF0Y2hlZCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgU3ludGF4RXJyb3IoJ0F0LXJ1bGUgYEAnICsgYXRydWxlTmFtZSArICdgIHNob3VsZCBjb250YWluIGEgcHJlbHVkZScpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIGNoZWNrQXRydWxlRGVzY3JpcHRvck5hbWUoYXRydWxlTmFtZSwgZGVzY3JpcHRvck5hbWUpIHtcbiAgICAgICAgY29uc3QgZXJyb3IkMSA9IHRoaXMuY2hlY2tBdHJ1bGVOYW1lKGF0cnVsZU5hbWUpO1xuXG4gICAgICAgIGlmIChlcnJvciQxKSB7XG4gICAgICAgICAgICByZXR1cm4gZXJyb3IkMTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IGF0cnVsZSA9IHRoaXMuZ2V0QXRydWxlKGF0cnVsZU5hbWUpO1xuICAgICAgICBjb25zdCBkZXNjcmlwdG9yID0gbmFtZXMua2V5d29yZChkZXNjcmlwdG9yTmFtZSk7XG5cbiAgICAgICAgaWYgKCFhdHJ1bGUuZGVzY3JpcHRvcnMpIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgU3ludGF4RXJyb3IoJ0F0LXJ1bGUgYEAnICsgYXRydWxlTmFtZSArICdgIGhhcyBubyBrbm93biBkZXNjcmlwdG9ycycpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCFhdHJ1bGUuZGVzY3JpcHRvcnNbZGVzY3JpcHRvci5uYW1lXSAmJlxuICAgICAgICAgICAgIWF0cnVsZS5kZXNjcmlwdG9yc1tkZXNjcmlwdG9yLmJhc2VuYW1lXSkge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBlcnJvci5TeW50YXhSZWZlcmVuY2VFcnJvcignVW5rbm93biBhdC1ydWxlIGRlc2NyaXB0b3InLCBkZXNjcmlwdG9yTmFtZSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgY2hlY2tQcm9wZXJ0eU5hbWUocHJvcGVydHlOYW1lKSB7XG4gICAgICAgIGlmICghdGhpcy5nZXRQcm9wZXJ0eShwcm9wZXJ0eU5hbWUpKSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IGVycm9yLlN5bnRheFJlZmVyZW5jZUVycm9yKCdVbmtub3duIHByb3BlcnR5JywgcHJvcGVydHlOYW1lKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIG1hdGNoQXRydWxlUHJlbHVkZShhdHJ1bGVOYW1lLCBwcmVsdWRlKSB7XG4gICAgICAgIGNvbnN0IGVycm9yID0gdGhpcy5jaGVja0F0cnVsZVByZWx1ZGUoYXRydWxlTmFtZSwgcHJlbHVkZSk7XG5cbiAgICAgICAgaWYgKGVycm9yKSB7XG4gICAgICAgICAgICByZXR1cm4gYnVpbGRNYXRjaFJlc3VsdChudWxsLCBlcnJvcik7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBhdHJ1bGUgPSB0aGlzLmdldEF0cnVsZShhdHJ1bGVOYW1lKTtcblxuICAgICAgICBpZiAoIWF0cnVsZS5wcmVsdWRlKSB7XG4gICAgICAgICAgICByZXR1cm4gYnVpbGRNYXRjaFJlc3VsdChudWxsLCBudWxsKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBtYXRjaFN5bnRheCh0aGlzLCBhdHJ1bGUucHJlbHVkZSwgcHJlbHVkZSB8fCAnJywgZmFsc2UpO1xuICAgIH1cbiAgICBtYXRjaEF0cnVsZURlc2NyaXB0b3IoYXRydWxlTmFtZSwgZGVzY3JpcHRvck5hbWUsIHZhbHVlKSB7XG4gICAgICAgIGNvbnN0IGVycm9yID0gdGhpcy5jaGVja0F0cnVsZURlc2NyaXB0b3JOYW1lKGF0cnVsZU5hbWUsIGRlc2NyaXB0b3JOYW1lKTtcblxuICAgICAgICBpZiAoZXJyb3IpIHtcbiAgICAgICAgICAgIHJldHVybiBidWlsZE1hdGNoUmVzdWx0KG51bGwsIGVycm9yKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IGF0cnVsZSA9IHRoaXMuZ2V0QXRydWxlKGF0cnVsZU5hbWUpO1xuICAgICAgICBjb25zdCBkZXNjcmlwdG9yID0gbmFtZXMua2V5d29yZChkZXNjcmlwdG9yTmFtZSk7XG5cbiAgICAgICAgcmV0dXJuIG1hdGNoU3ludGF4KHRoaXMsIGF0cnVsZS5kZXNjcmlwdG9yc1tkZXNjcmlwdG9yLm5hbWVdIHx8IGF0cnVsZS5kZXNjcmlwdG9yc1tkZXNjcmlwdG9yLmJhc2VuYW1lXSwgdmFsdWUsIGZhbHNlKTtcbiAgICB9XG4gICAgbWF0Y2hEZWNsYXJhdGlvbihub2RlKSB7XG4gICAgICAgIGlmIChub2RlLnR5cGUgIT09ICdEZWNsYXJhdGlvbicpIHtcbiAgICAgICAgICAgIHJldHVybiBidWlsZE1hdGNoUmVzdWx0KG51bGwsIG5ldyBFcnJvcignTm90IGEgRGVjbGFyYXRpb24gbm9kZScpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0aGlzLm1hdGNoUHJvcGVydHkobm9kZS5wcm9wZXJ0eSwgbm9kZS52YWx1ZSk7XG4gICAgfVxuICAgIG1hdGNoUHJvcGVydHkocHJvcGVydHlOYW1lLCB2YWx1ZSkge1xuICAgICAgICAvLyBkb24ndCBtYXRjaCBzeW50YXggZm9yIGEgY3VzdG9tIHByb3BlcnR5IGF0IHRoZSBtb21lbnRcbiAgICAgICAgaWYgKG5hbWVzLnByb3BlcnR5KHByb3BlcnR5TmFtZSkuY3VzdG9tKSB7XG4gICAgICAgICAgICByZXR1cm4gYnVpbGRNYXRjaFJlc3VsdChudWxsLCBuZXcgRXJyb3IoJ0xleGVyIG1hdGNoaW5nIGRvZXNuXFwndCBhcHBsaWNhYmxlIGZvciBjdXN0b20gcHJvcGVydGllcycpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IGVycm9yID0gdGhpcy5jaGVja1Byb3BlcnR5TmFtZShwcm9wZXJ0eU5hbWUpO1xuXG4gICAgICAgIGlmIChlcnJvcikge1xuICAgICAgICAgICAgcmV0dXJuIGJ1aWxkTWF0Y2hSZXN1bHQobnVsbCwgZXJyb3IpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG1hdGNoU3ludGF4KHRoaXMsIHRoaXMuZ2V0UHJvcGVydHkocHJvcGVydHlOYW1lKSwgdmFsdWUsIHRydWUpO1xuICAgIH1cbiAgICBtYXRjaFR5cGUodHlwZU5hbWUsIHZhbHVlKSB7XG4gICAgICAgIGNvbnN0IHR5cGVTeW50YXggPSB0aGlzLmdldFR5cGUodHlwZU5hbWUpO1xuXG4gICAgICAgIGlmICghdHlwZVN5bnRheCkge1xuICAgICAgICAgICAgcmV0dXJuIGJ1aWxkTWF0Y2hSZXN1bHQobnVsbCwgbmV3IGVycm9yLlN5bnRheFJlZmVyZW5jZUVycm9yKCdVbmtub3duIHR5cGUnLCB0eXBlTmFtZSkpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG1hdGNoU3ludGF4KHRoaXMsIHR5cGVTeW50YXgsIHZhbHVlLCBmYWxzZSk7XG4gICAgfVxuICAgIG1hdGNoKHN5bnRheCwgdmFsdWUpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBzeW50YXggIT09ICdzdHJpbmcnICYmICghc3ludGF4IHx8ICFzeW50YXgudHlwZSkpIHtcbiAgICAgICAgICAgIHJldHVybiBidWlsZE1hdGNoUmVzdWx0KG51bGwsIG5ldyBlcnJvci5TeW50YXhSZWZlcmVuY2VFcnJvcignQmFkIHN5bnRheCcpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0eXBlb2Ygc3ludGF4ID09PSAnc3RyaW5nJyB8fCAhc3ludGF4Lm1hdGNoKSB7XG4gICAgICAgICAgICBzeW50YXggPSB0aGlzLmNyZWF0ZURlc2NyaXB0b3Ioc3ludGF4LCAnVHlwZScsICdhbm9ueW1vdXMnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBtYXRjaFN5bnRheCh0aGlzLCBzeW50YXgsIHZhbHVlLCBmYWxzZSk7XG4gICAgfVxuXG4gICAgZmluZFZhbHVlRnJhZ21lbnRzKHByb3BlcnR5TmFtZSwgdmFsdWUsIHR5cGUsIG5hbWUpIHtcbiAgICAgICAgcmV0dXJuIHNlYXJjaC5tYXRjaEZyYWdtZW50cyh0aGlzLCB2YWx1ZSwgdGhpcy5tYXRjaFByb3BlcnR5KHByb3BlcnR5TmFtZSwgdmFsdWUpLCB0eXBlLCBuYW1lKTtcbiAgICB9XG4gICAgZmluZERlY2xhcmF0aW9uVmFsdWVGcmFnbWVudHMoZGVjbGFyYXRpb24sIHR5cGUsIG5hbWUpIHtcbiAgICAgICAgcmV0dXJuIHNlYXJjaC5tYXRjaEZyYWdtZW50cyh0aGlzLCBkZWNsYXJhdGlvbi52YWx1ZSwgdGhpcy5tYXRjaERlY2xhcmF0aW9uKGRlY2xhcmF0aW9uKSwgdHlwZSwgbmFtZSk7XG4gICAgfVxuICAgIGZpbmRBbGxGcmFnbWVudHMoYXN0LCB0eXBlLCBuYW1lKSB7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IFtdO1xuXG4gICAgICAgIHRoaXMuc3ludGF4LndhbGsoYXN0LCB7XG4gICAgICAgICAgICB2aXNpdDogJ0RlY2xhcmF0aW9uJyxcbiAgICAgICAgICAgIGVudGVyOiAoZGVjbGFyYXRpb24pID0+IHtcbiAgICAgICAgICAgICAgICByZXN1bHQucHVzaC5hcHBseShyZXN1bHQsIHRoaXMuZmluZERlY2xhcmF0aW9uVmFsdWVGcmFnbWVudHMoZGVjbGFyYXRpb24sIHR5cGUsIG5hbWUpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICBnZXRBdHJ1bGUoYXRydWxlTmFtZSwgZmFsbGJhY2tCYXNlbmFtZSA9IHRydWUpIHtcbiAgICAgICAgY29uc3QgYXRydWxlID0gbmFtZXMua2V5d29yZChhdHJ1bGVOYW1lKTtcbiAgICAgICAgY29uc3QgYXRydWxlRW50cnkgPSBhdHJ1bGUudmVuZG9yICYmIGZhbGxiYWNrQmFzZW5hbWVcbiAgICAgICAgICAgID8gdGhpcy5hdHJ1bGVzW2F0cnVsZS5uYW1lXSB8fCB0aGlzLmF0cnVsZXNbYXRydWxlLmJhc2VuYW1lXVxuICAgICAgICAgICAgOiB0aGlzLmF0cnVsZXNbYXRydWxlLm5hbWVdO1xuXG4gICAgICAgIHJldHVybiBhdHJ1bGVFbnRyeSB8fCBudWxsO1xuICAgIH1cbiAgICBnZXRBdHJ1bGVQcmVsdWRlKGF0cnVsZU5hbWUsIGZhbGxiYWNrQmFzZW5hbWUgPSB0cnVlKSB7XG4gICAgICAgIGNvbnN0IGF0cnVsZSA9IHRoaXMuZ2V0QXRydWxlKGF0cnVsZU5hbWUsIGZhbGxiYWNrQmFzZW5hbWUpO1xuXG4gICAgICAgIHJldHVybiBhdHJ1bGUgJiYgYXRydWxlLnByZWx1ZGUgfHwgbnVsbDtcbiAgICB9XG4gICAgZ2V0QXRydWxlRGVzY3JpcHRvcihhdHJ1bGVOYW1lLCBuYW1lKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmF0cnVsZXMuaGFzT3duUHJvcGVydHkoYXRydWxlTmFtZSkgJiYgdGhpcy5hdHJ1bGVzLmRlY2xhcmF0b3JzXG4gICAgICAgICAgICA/IHRoaXMuYXRydWxlc1thdHJ1bGVOYW1lXS5kZWNsYXJhdG9yc1tuYW1lXSB8fCBudWxsXG4gICAgICAgICAgICA6IG51bGw7XG4gICAgfVxuICAgIGdldFByb3BlcnR5KHByb3BlcnR5TmFtZSwgZmFsbGJhY2tCYXNlbmFtZSA9IHRydWUpIHtcbiAgICAgICAgY29uc3QgcHJvcGVydHkgPSBuYW1lcy5wcm9wZXJ0eShwcm9wZXJ0eU5hbWUpO1xuICAgICAgICBjb25zdCBwcm9wZXJ0eUVudHJ5ID0gcHJvcGVydHkudmVuZG9yICYmIGZhbGxiYWNrQmFzZW5hbWVcbiAgICAgICAgICAgID8gdGhpcy5wcm9wZXJ0aWVzW3Byb3BlcnR5Lm5hbWVdIHx8IHRoaXMucHJvcGVydGllc1twcm9wZXJ0eS5iYXNlbmFtZV1cbiAgICAgICAgICAgIDogdGhpcy5wcm9wZXJ0aWVzW3Byb3BlcnR5Lm5hbWVdO1xuXG4gICAgICAgIHJldHVybiBwcm9wZXJ0eUVudHJ5IHx8IG51bGw7XG4gICAgfVxuICAgIGdldFR5cGUobmFtZSkge1xuICAgICAgICByZXR1cm4gaGFzT3duUHJvcGVydHkuY2FsbCh0aGlzLnR5cGVzLCBuYW1lKSA/IHRoaXMudHlwZXNbbmFtZV0gOiBudWxsO1xuICAgIH1cblxuICAgIHZhbGlkYXRlKCkge1xuICAgICAgICBmdW5jdGlvbiB2YWxpZGF0ZShzeW50YXgsIG5hbWUsIGJyb2tlbiwgZGVzY3JpcHRvcikge1xuICAgICAgICAgICAgaWYgKGJyb2tlbi5oYXMobmFtZSkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gYnJva2VuLmdldChuYW1lKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgYnJva2VuLnNldChuYW1lLCBmYWxzZSk7XG4gICAgICAgICAgICBpZiAoZGVzY3JpcHRvci5zeW50YXggIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICB3YWxrLndhbGsoZGVzY3JpcHRvci5zeW50YXgsIGZ1bmN0aW9uKG5vZGUpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG5vZGUudHlwZSAhPT0gJ1R5cGUnICYmIG5vZGUudHlwZSAhPT0gJ1Byb3BlcnR5Jykge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgY29uc3QgbWFwID0gbm9kZS50eXBlID09PSAnVHlwZScgPyBzeW50YXgudHlwZXMgOiBzeW50YXgucHJvcGVydGllcztcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgYnJva2VuTWFwID0gbm9kZS50eXBlID09PSAnVHlwZScgPyBicm9rZW5UeXBlcyA6IGJyb2tlblByb3BlcnRpZXM7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKCFoYXNPd25Qcm9wZXJ0eS5jYWxsKG1hcCwgbm9kZS5uYW1lKSB8fCB2YWxpZGF0ZShzeW50YXgsIG5vZGUubmFtZSwgYnJva2VuTWFwLCBtYXBbbm9kZS5uYW1lXSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyb2tlbi5zZXQobmFtZSwgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9LCB0aGlzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGxldCBicm9rZW5UeXBlcyA9IG5ldyBNYXAoKTtcbiAgICAgICAgbGV0IGJyb2tlblByb3BlcnRpZXMgPSBuZXcgTWFwKCk7XG5cbiAgICAgICAgZm9yIChjb25zdCBrZXkgaW4gdGhpcy50eXBlcykge1xuICAgICAgICAgICAgdmFsaWRhdGUodGhpcywga2V5LCBicm9rZW5UeXBlcywgdGhpcy50eXBlc1trZXldKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZvciAoY29uc3Qga2V5IGluIHRoaXMucHJvcGVydGllcykge1xuICAgICAgICAgICAgdmFsaWRhdGUodGhpcywga2V5LCBicm9rZW5Qcm9wZXJ0aWVzLCB0aGlzLnByb3BlcnRpZXNba2V5XSk7XG4gICAgICAgIH1cblxuICAgICAgICBicm9rZW5UeXBlcyA9IFsuLi5icm9rZW5UeXBlcy5rZXlzKCldLmZpbHRlcihuYW1lID0+IGJyb2tlblR5cGVzLmdldChuYW1lKSk7XG4gICAgICAgIGJyb2tlblByb3BlcnRpZXMgPSBbLi4uYnJva2VuUHJvcGVydGllcy5rZXlzKCldLmZpbHRlcihuYW1lID0+IGJyb2tlblByb3BlcnRpZXMuZ2V0KG5hbWUpKTtcblxuICAgICAgICBpZiAoYnJva2VuVHlwZXMubGVuZ3RoIHx8IGJyb2tlblByb3BlcnRpZXMubGVuZ3RoKSB7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIHR5cGVzOiBicm9rZW5UeXBlcyxcbiAgICAgICAgICAgICAgICBwcm9wZXJ0aWVzOiBicm9rZW5Qcm9wZXJ0aWVzXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIGR1bXAoc3ludGF4QXNBc3QsIHByZXR0eSkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgZ2VuZXJpYzogdGhpcy5nZW5lcmljLFxuICAgICAgICAgICAgdHlwZXM6IGR1bXBNYXBTeW50YXgodGhpcy50eXBlcywgIXByZXR0eSwgc3ludGF4QXNBc3QpLFxuICAgICAgICAgICAgcHJvcGVydGllczogZHVtcE1hcFN5bnRheCh0aGlzLnByb3BlcnRpZXMsICFwcmV0dHksIHN5bnRheEFzQXN0KSxcbiAgICAgICAgICAgIGF0cnVsZXM6IGR1bXBBdHJ1bGVNYXBTeW50YXgodGhpcy5hdHJ1bGVzLCAhcHJldHR5LCBzeW50YXhBc0FzdClcbiAgICAgICAgfTtcbiAgICB9XG4gICAgdG9TdHJpbmcoKSB7XG4gICAgICAgIHJldHVybiBKU09OLnN0cmluZ2lmeSh0aGlzLmR1bXAoKSk7XG4gICAgfVxufVxuXG5leHBvcnRzLkxleGVyID0gTGV4ZXI7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///73627\n")},2763:(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";eval("\n\nconst createCustomError = __webpack_require__(79161);\nconst generate = __webpack_require__(22599);\n\nconst defaultLoc = { offset: 0, line: 1, column: 1 };\n\nfunction locateMismatch(matchResult, node) {\n    const tokens = matchResult.tokens;\n    const longestMatch = matchResult.longestMatch;\n    const mismatchNode = longestMatch < tokens.length ? tokens[longestMatch].node || null : null;\n    const badNode = mismatchNode !== node ? mismatchNode : null;\n    let mismatchOffset = 0;\n    let mismatchLength = 0;\n    let entries = 0;\n    let css = '';\n    let start;\n    let end;\n\n    for (let i = 0; i < tokens.length; i++) {\n        const token = tokens[i].value;\n\n        if (i === longestMatch) {\n            mismatchLength = token.length;\n            mismatchOffset = css.length;\n        }\n\n        if (badNode !== null && tokens[i].node === badNode) {\n            if (i <= longestMatch) {\n                entries++;\n            } else {\n                entries = 0;\n            }\n        }\n\n        css += token;\n    }\n\n    if (longestMatch === tokens.length || entries > 1) { // last\n        start = fromLoc(badNode || node, 'end') || buildLoc(defaultLoc, css);\n        end = buildLoc(start);\n    } else {\n        start = fromLoc(badNode, 'start') ||\n            buildLoc(fromLoc(node, 'start') || defaultLoc, css.slice(0, mismatchOffset));\n        end = fromLoc(badNode, 'end') ||\n            buildLoc(start, css.substr(mismatchOffset, mismatchLength));\n    }\n\n    return {\n        css,\n        mismatchOffset,\n        mismatchLength,\n        start,\n        end\n    };\n}\n\nfunction fromLoc(node, point) {\n    const value = node && node.loc && node.loc[point];\n\n    if (value) {\n        return 'line' in value ? buildLoc(value) : value;\n    }\n\n    return null;\n}\n\nfunction buildLoc({ offset, line, column }, extra) {\n    const loc = {\n        offset,\n        line,\n        column\n    };\n\n    if (extra) {\n        const lines = extra.split(/\\n|\\r\\n?|\\f/);\n\n        loc.offset += extra.length;\n        loc.line += lines.length - 1;\n        loc.column = lines.length === 1 ? loc.column + extra.length : lines.pop().length + 1;\n    }\n\n    return loc;\n}\n\nconst SyntaxReferenceError = function(type, referenceName) {\n    const error = createCustomError.createCustomError(\n        'SyntaxReferenceError',\n        type + (referenceName ? ' `' + referenceName + '`' : '')\n    );\n\n    error.reference = referenceName;\n\n    return error;\n};\n\nconst SyntaxMatchError = function(message, syntax, node, matchResult) {\n    const error = createCustomError.createCustomError('SyntaxMatchError', message);\n    const {\n        css,\n        mismatchOffset,\n        mismatchLength,\n        start,\n        end\n    } = locateMismatch(matchResult, node);\n\n    error.rawMessage = message;\n    error.syntax = syntax ? generate.generate(syntax) : '<generic>';\n    error.css = css;\n    error.mismatchOffset = mismatchOffset;\n    error.mismatchLength = mismatchLength;\n    error.message = message + '\\n' +\n        '  syntax: ' + error.syntax + '\\n' +\n        '   value: ' + (css || '<empty string>') + '\\n' +\n        '  --------' + new Array(error.mismatchOffset + 1).join('-') + '^';\n\n    Object.assign(error, start);\n    error.loc = {\n        source: (node && node.loc && node.loc.source) || '<unknown>',\n        start,\n        end\n    };\n\n    return error;\n};\n\nexports.SyntaxMatchError = SyntaxMatchError;\nexports.SyntaxReferenceError = SyntaxReferenceError;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjc2My5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYiwwQkFBMEIsbUJBQU8sQ0FBQyxLQUFrQztBQUNwRSxpQkFBaUIsbUJBQU8sQ0FBQyxLQUFtQzs7QUFFNUQscUJBQXFCOztBQUVyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLG9CQUFvQixtQkFBbUI7QUFDdkM7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBLHlEQUF5RDtBQUN6RDtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBLG9CQUFvQixzQkFBc0I7QUFDMUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNOztBQUVOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQSx3QkFBd0I7QUFDeEIsNEJBQTRCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYmxvY2tiaXRlLy4vbm9kZV9tb2R1bGVzL2Nzc28vbm9kZV9tb2R1bGVzL2Nzcy10cmVlL2Nqcy9sZXhlci9lcnJvci5janM/YzdlOCJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmNvbnN0IGNyZWF0ZUN1c3RvbUVycm9yID0gcmVxdWlyZSgnLi4vdXRpbHMvY3JlYXRlLWN1c3RvbS1lcnJvci5janMnKTtcbmNvbnN0IGdlbmVyYXRlID0gcmVxdWlyZSgnLi4vZGVmaW5pdGlvbi1zeW50YXgvZ2VuZXJhdGUuY2pzJyk7XG5cbmNvbnN0IGRlZmF1bHRMb2MgPSB7IG9mZnNldDogMCwgbGluZTogMSwgY29sdW1uOiAxIH07XG5cbmZ1bmN0aW9uIGxvY2F0ZU1pc21hdGNoKG1hdGNoUmVzdWx0LCBub2RlKSB7XG4gICAgY29uc3QgdG9rZW5zID0gbWF0Y2hSZXN1bHQudG9rZW5zO1xuICAgIGNvbnN0IGxvbmdlc3RNYXRjaCA9IG1hdGNoUmVzdWx0Lmxvbmdlc3RNYXRjaDtcbiAgICBjb25zdCBtaXNtYXRjaE5vZGUgPSBsb25nZXN0TWF0Y2ggPCB0b2tlbnMubGVuZ3RoID8gdG9rZW5zW2xvbmdlc3RNYXRjaF0ubm9kZSB8fCBudWxsIDogbnVsbDtcbiAgICBjb25zdCBiYWROb2RlID0gbWlzbWF0Y2hOb2RlICE9PSBub2RlID8gbWlzbWF0Y2hOb2RlIDogbnVsbDtcbiAgICBsZXQgbWlzbWF0Y2hPZmZzZXQgPSAwO1xuICAgIGxldCBtaXNtYXRjaExlbmd0aCA9IDA7XG4gICAgbGV0IGVudHJpZXMgPSAwO1xuICAgIGxldCBjc3MgPSAnJztcbiAgICBsZXQgc3RhcnQ7XG4gICAgbGV0IGVuZDtcblxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdG9rZW5zLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGNvbnN0IHRva2VuID0gdG9rZW5zW2ldLnZhbHVlO1xuXG4gICAgICAgIGlmIChpID09PSBsb25nZXN0TWF0Y2gpIHtcbiAgICAgICAgICAgIG1pc21hdGNoTGVuZ3RoID0gdG9rZW4ubGVuZ3RoO1xuICAgICAgICAgICAgbWlzbWF0Y2hPZmZzZXQgPSBjc3MubGVuZ3RoO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGJhZE5vZGUgIT09IG51bGwgJiYgdG9rZW5zW2ldLm5vZGUgPT09IGJhZE5vZGUpIHtcbiAgICAgICAgICAgIGlmIChpIDw9IGxvbmdlc3RNYXRjaCkge1xuICAgICAgICAgICAgICAgIGVudHJpZXMrKztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgZW50cmllcyA9IDA7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBjc3MgKz0gdG9rZW47XG4gICAgfVxuXG4gICAgaWYgKGxvbmdlc3RNYXRjaCA9PT0gdG9rZW5zLmxlbmd0aCB8fCBlbnRyaWVzID4gMSkgeyAvLyBsYXN0XG4gICAgICAgIHN0YXJ0ID0gZnJvbUxvYyhiYWROb2RlIHx8IG5vZGUsICdlbmQnKSB8fCBidWlsZExvYyhkZWZhdWx0TG9jLCBjc3MpO1xuICAgICAgICBlbmQgPSBidWlsZExvYyhzdGFydCk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgc3RhcnQgPSBmcm9tTG9jKGJhZE5vZGUsICdzdGFydCcpIHx8XG4gICAgICAgICAgICBidWlsZExvYyhmcm9tTG9jKG5vZGUsICdzdGFydCcpIHx8IGRlZmF1bHRMb2MsIGNzcy5zbGljZSgwLCBtaXNtYXRjaE9mZnNldCkpO1xuICAgICAgICBlbmQgPSBmcm9tTG9jKGJhZE5vZGUsICdlbmQnKSB8fFxuICAgICAgICAgICAgYnVpbGRMb2Moc3RhcnQsIGNzcy5zdWJzdHIobWlzbWF0Y2hPZmZzZXQsIG1pc21hdGNoTGVuZ3RoKSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgICAgY3NzLFxuICAgICAgICBtaXNtYXRjaE9mZnNldCxcbiAgICAgICAgbWlzbWF0Y2hMZW5ndGgsXG4gICAgICAgIHN0YXJ0LFxuICAgICAgICBlbmRcbiAgICB9O1xufVxuXG5mdW5jdGlvbiBmcm9tTG9jKG5vZGUsIHBvaW50KSB7XG4gICAgY29uc3QgdmFsdWUgPSBub2RlICYmIG5vZGUubG9jICYmIG5vZGUubG9jW3BvaW50XTtcblxuICAgIGlmICh2YWx1ZSkge1xuICAgICAgICByZXR1cm4gJ2xpbmUnIGluIHZhbHVlID8gYnVpbGRMb2ModmFsdWUpIDogdmFsdWU7XG4gICAgfVxuXG4gICAgcmV0dXJuIG51bGw7XG59XG5cbmZ1bmN0aW9uIGJ1aWxkTG9jKHsgb2Zmc2V0LCBsaW5lLCBjb2x1bW4gfSwgZXh0cmEpIHtcbiAgICBjb25zdCBsb2MgPSB7XG4gICAgICAgIG9mZnNldCxcbiAgICAgICAgbGluZSxcbiAgICAgICAgY29sdW1uXG4gICAgfTtcblxuICAgIGlmIChleHRyYSkge1xuICAgICAgICBjb25zdCBsaW5lcyA9IGV4dHJhLnNwbGl0KC9cXG58XFxyXFxuP3xcXGYvKTtcblxuICAgICAgICBsb2Mub2Zmc2V0ICs9IGV4dHJhLmxlbmd0aDtcbiAgICAgICAgbG9jLmxpbmUgKz0gbGluZXMubGVuZ3RoIC0gMTtcbiAgICAgICAgbG9jLmNvbHVtbiA9IGxpbmVzLmxlbmd0aCA9PT0gMSA/IGxvYy5jb2x1bW4gKyBleHRyYS5sZW5ndGggOiBsaW5lcy5wb3AoKS5sZW5ndGggKyAxO1xuICAgIH1cblxuICAgIHJldHVybiBsb2M7XG59XG5cbmNvbnN0IFN5bnRheFJlZmVyZW5jZUVycm9yID0gZnVuY3Rpb24odHlwZSwgcmVmZXJlbmNlTmFtZSkge1xuICAgIGNvbnN0IGVycm9yID0gY3JlYXRlQ3VzdG9tRXJyb3IuY3JlYXRlQ3VzdG9tRXJyb3IoXG4gICAgICAgICdTeW50YXhSZWZlcmVuY2VFcnJvcicsXG4gICAgICAgIHR5cGUgKyAocmVmZXJlbmNlTmFtZSA/ICcgYCcgKyByZWZlcmVuY2VOYW1lICsgJ2AnIDogJycpXG4gICAgKTtcblxuICAgIGVycm9yLnJlZmVyZW5jZSA9IHJlZmVyZW5jZU5hbWU7XG5cbiAgICByZXR1cm4gZXJyb3I7XG59O1xuXG5jb25zdCBTeW50YXhNYXRjaEVycm9yID0gZnVuY3Rpb24obWVzc2FnZSwgc3ludGF4LCBub2RlLCBtYXRjaFJlc3VsdCkge1xuICAgIGNvbnN0IGVycm9yID0gY3JlYXRlQ3VzdG9tRXJyb3IuY3JlYXRlQ3VzdG9tRXJyb3IoJ1N5bnRheE1hdGNoRXJyb3InLCBtZXNzYWdlKTtcbiAgICBjb25zdCB7XG4gICAgICAgIGNzcyxcbiAgICAgICAgbWlzbWF0Y2hPZmZzZXQsXG4gICAgICAgIG1pc21hdGNoTGVuZ3RoLFxuICAgICAgICBzdGFydCxcbiAgICAgICAgZW5kXG4gICAgfSA9IGxvY2F0ZU1pc21hdGNoKG1hdGNoUmVzdWx0LCBub2RlKTtcblxuICAgIGVycm9yLnJhd01lc3NhZ2UgPSBtZXNzYWdlO1xuICAgIGVycm9yLnN5bnRheCA9IHN5bnRheCA/IGdlbmVyYXRlLmdlbmVyYXRlKHN5bnRheCkgOiAnPGdlbmVyaWM+JztcbiAgICBlcnJvci5jc3MgPSBjc3M7XG4gICAgZXJyb3IubWlzbWF0Y2hPZmZzZXQgPSBtaXNtYXRjaE9mZnNldDtcbiAgICBlcnJvci5taXNtYXRjaExlbmd0aCA9IG1pc21hdGNoTGVuZ3RoO1xuICAgIGVycm9yLm1lc3NhZ2UgPSBtZXNzYWdlICsgJ1xcbicgK1xuICAgICAgICAnICBzeW50YXg6ICcgKyBlcnJvci5zeW50YXggKyAnXFxuJyArXG4gICAgICAgICcgICB2YWx1ZTogJyArIChjc3MgfHwgJzxlbXB0eSBzdHJpbmc+JykgKyAnXFxuJyArXG4gICAgICAgICcgIC0tLS0tLS0tJyArIG5ldyBBcnJheShlcnJvci5taXNtYXRjaE9mZnNldCArIDEpLmpvaW4oJy0nKSArICdeJztcblxuICAgIE9iamVjdC5hc3NpZ24oZXJyb3IsIHN0YXJ0KTtcbiAgICBlcnJvci5sb2MgPSB7XG4gICAgICAgIHNvdXJjZTogKG5vZGUgJiYgbm9kZS5sb2MgJiYgbm9kZS5sb2Muc291cmNlKSB8fCAnPHVua25vd24+JyxcbiAgICAgICAgc3RhcnQsXG4gICAgICAgIGVuZFxuICAgIH07XG5cbiAgICByZXR1cm4gZXJyb3I7XG59O1xuXG5leHBvcnRzLlN5bnRheE1hdGNoRXJyb3IgPSBTeW50YXhNYXRjaEVycm9yO1xuZXhwb3J0cy5TeW50YXhSZWZlcmVuY2VFcnJvciA9IFN5bnRheFJlZmVyZW5jZUVycm9yO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///2763\n")},69822:(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval("\n\nconst charCodeDefinitions = __webpack_require__(87351);\nconst types = __webpack_require__(78783);\nconst utils = __webpack_require__(79955);\n\nconst PLUSSIGN = 0x002B;    // U+002B PLUS SIGN (+)\nconst HYPHENMINUS = 0x002D; // U+002D HYPHEN-MINUS (-)\nconst N = 0x006E;           // U+006E LATIN SMALL LETTER N (n)\nconst DISALLOW_SIGN = true;\nconst ALLOW_SIGN = false;\n\nfunction isDelim(token, code) {\n    return token !== null && token.type === types.Delim && token.value.charCodeAt(0) === code;\n}\n\nfunction skipSC(token, offset, getNextToken) {\n    while (token !== null && (token.type === types.WhiteSpace || token.type === types.Comment)) {\n        token = getNextToken(++offset);\n    }\n\n    return offset;\n}\n\nfunction checkInteger(token, valueOffset, disallowSign, offset) {\n    if (!token) {\n        return 0;\n    }\n\n    const code = token.value.charCodeAt(valueOffset);\n\n    if (code === PLUSSIGN || code === HYPHENMINUS) {\n        if (disallowSign) {\n            // Number sign is not allowed\n            return 0;\n        }\n        valueOffset++;\n    }\n\n    for (; valueOffset < token.value.length; valueOffset++) {\n        if (!charCodeDefinitions.isDigit(token.value.charCodeAt(valueOffset))) {\n            // Integer is expected\n            return 0;\n        }\n    }\n\n    return offset + 1;\n}\n\n// ... <signed-integer>\n// ... ['+' | '-'] <signless-integer>\nfunction consumeB(token, offset_, getNextToken) {\n    let sign = false;\n    let offset = skipSC(token, offset_, getNextToken);\n\n    token = getNextToken(offset);\n\n    if (token === null) {\n        return offset_;\n    }\n\n    if (token.type !== types.Number) {\n        if (isDelim(token, PLUSSIGN) || isDelim(token, HYPHENMINUS)) {\n            sign = true;\n            offset = skipSC(getNextToken(++offset), offset, getNextToken);\n            token = getNextToken(offset);\n\n            if (token === null || token.type !== types.Number) {\n                return 0;\n            }\n        } else {\n            return offset_;\n        }\n    }\n\n    if (!sign) {\n        const code = token.value.charCodeAt(0);\n        if (code !== PLUSSIGN && code !== HYPHENMINUS) {\n            // Number sign is expected\n            return 0;\n        }\n    }\n\n    return checkInteger(token, sign ? 0 : 1, sign, offset);\n}\n\n// An+B microsyntax https://www.w3.org/TR/css-syntax-3/#anb\nfunction anPlusB(token, getNextToken) {\n    /* eslint-disable brace-style*/\n    let offset = 0;\n\n    if (!token) {\n        return 0;\n    }\n\n    // <integer>\n    if (token.type === types.Number) {\n        return checkInteger(token, 0, ALLOW_SIGN, offset); // b\n    }\n\n    // -n\n    // -n <signed-integer>\n    // -n ['+' | '-'] <signless-integer>\n    // -n- <signless-integer>\n    // <dashndashdigit-ident>\n    else if (token.type === types.Ident && token.value.charCodeAt(0) === HYPHENMINUS) {\n        // expect 1st char is N\n        if (!utils.cmpChar(token.value, 1, N)) {\n            return 0;\n        }\n\n        switch (token.value.length) {\n            // -n\n            // -n <signed-integer>\n            // -n ['+' | '-'] <signless-integer>\n            case 2:\n                return consumeB(getNextToken(++offset), offset, getNextToken);\n\n            // -n- <signless-integer>\n            case 3:\n                if (token.value.charCodeAt(2) !== HYPHENMINUS) {\n                    return 0;\n                }\n\n                offset = skipSC(getNextToken(++offset), offset, getNextToken);\n                token = getNextToken(offset);\n\n                return checkInteger(token, 0, DISALLOW_SIGN, offset);\n\n            // <dashndashdigit-ident>\n            default:\n                if (token.value.charCodeAt(2) !== HYPHENMINUS) {\n                    return 0;\n                }\n\n                return checkInteger(token, 3, DISALLOW_SIGN, offset);\n        }\n    }\n\n    // '+'? n\n    // '+'? n <signed-integer>\n    // '+'? n ['+' | '-'] <signless-integer>\n    // '+'? n- <signless-integer>\n    // '+'? <ndashdigit-ident>\n    else if (token.type === types.Ident || (isDelim(token, PLUSSIGN) && getNextToken(offset + 1).type === types.Ident)) {\n        // just ignore a plus\n        if (token.type !== types.Ident) {\n            token = getNextToken(++offset);\n        }\n\n        if (token === null || !utils.cmpChar(token.value, 0, N)) {\n            return 0;\n        }\n\n        switch (token.value.length) {\n            // '+'? n\n            // '+'? n <signed-integer>\n            // '+'? n ['+' | '-'] <signless-integer>\n            case 1:\n                return consumeB(getNextToken(++offset), offset, getNextToken);\n\n            // '+'? n- <signless-integer>\n            case 2:\n                if (token.value.charCodeAt(1) !== HYPHENMINUS) {\n                    return 0;\n                }\n\n                offset = skipSC(getNextToken(++offset), offset, getNextToken);\n                token = getNextToken(offset);\n\n                return checkInteger(token, 0, DISALLOW_SIGN, offset);\n\n            // '+'? <ndashdigit-ident>\n            default:\n                if (token.value.charCodeAt(1) !== HYPHENMINUS) {\n                    return 0;\n                }\n\n                return checkInteger(token, 2, DISALLOW_SIGN, offset);\n        }\n    }\n\n    // <ndashdigit-dimension>\n    // <ndash-dimension> <signless-integer>\n    // <n-dimension>\n    // <n-dimension> <signed-integer>\n    // <n-dimension> ['+' | '-'] <signless-integer>\n    else if (token.type === types.Dimension) {\n        let code = token.value.charCodeAt(0);\n        let sign = code === PLUSSIGN || code === HYPHENMINUS ? 1 : 0;\n        let i = sign;\n\n        for (; i < token.value.length; i++) {\n            if (!charCodeDefinitions.isDigit(token.value.charCodeAt(i))) {\n                break;\n            }\n        }\n\n        if (i === sign) {\n            // Integer is expected\n            return 0;\n        }\n\n        if (!utils.cmpChar(token.value, i, N)) {\n            return 0;\n        }\n\n        // <n-dimension>\n        // <n-dimension> <signed-integer>\n        // <n-dimension> ['+' | '-'] <signless-integer>\n        if (i + 1 === token.value.length) {\n            return consumeB(getNextToken(++offset), offset, getNextToken);\n        } else {\n            if (token.value.charCodeAt(i + 1) !== HYPHENMINUS) {\n                return 0;\n            }\n\n            // <ndash-dimension> <signless-integer>\n            if (i + 2 === token.value.length) {\n                offset = skipSC(getNextToken(++offset), offset, getNextToken);\n                token = getNextToken(offset);\n\n                return checkInteger(token, 0, DISALLOW_SIGN, offset);\n            }\n            // <ndashdigit-dimension>\n            else {\n                return checkInteger(token, i + 2, DISALLOW_SIGN, offset);\n            }\n        }\n    }\n\n    return 0;\n}\n\nmodule.exports = anPlusB;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///69822\n")},74084:(__unused_webpack_module,exports)=>{"use strict";eval("\n\n// https://drafts.csswg.org/css-cascade-5/\nconst cssWideKeywords = [\n    'initial',\n    'inherit',\n    'unset',\n    'revert',\n    'revert-layer'\n];\n\nexports.cssWideKeywords = cssWideKeywords;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNzQwODQuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSx1QkFBdUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ibG9ja2JpdGUvLi9ub2RlX21vZHVsZXMvY3Nzby9ub2RlX21vZHVsZXMvY3NzLXRyZWUvY2pzL2xleGVyL2dlbmVyaWMtY29uc3QuY2pzPzRhY2YiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG4vLyBodHRwczovL2RyYWZ0cy5jc3N3Zy5vcmcvY3NzLWNhc2NhZGUtNS9cbmNvbnN0IGNzc1dpZGVLZXl3b3JkcyA9IFtcbiAgICAnaW5pdGlhbCcsXG4gICAgJ2luaGVyaXQnLFxuICAgICd1bnNldCcsXG4gICAgJ3JldmVydCcsXG4gICAgJ3JldmVydC1sYXllcidcbl07XG5cbmV4cG9ydHMuY3NzV2lkZUtleXdvcmRzID0gY3NzV2lkZUtleXdvcmRzO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///74084\n")},5327:(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval("\n\nconst charCodeDefinitions = __webpack_require__(87351);\nconst types = __webpack_require__(78783);\nconst utils = __webpack_require__(79955);\n\nconst PLUSSIGN = 0x002B;     // U+002B PLUS SIGN (+)\nconst HYPHENMINUS = 0x002D;  // U+002D HYPHEN-MINUS (-)\nconst QUESTIONMARK = 0x003F; // U+003F QUESTION MARK (?)\nconst U = 0x0075;            // U+0075 LATIN SMALL LETTER U (u)\n\nfunction isDelim(token, code) {\n    return token !== null && token.type === types.Delim && token.value.charCodeAt(0) === code;\n}\n\nfunction startsWith(token, code) {\n    return token.value.charCodeAt(0) === code;\n}\n\nfunction hexSequence(token, offset, allowDash) {\n    let hexlen = 0;\n\n    for (let pos = offset; pos < token.value.length; pos++) {\n        const code = token.value.charCodeAt(pos);\n\n        if (code === HYPHENMINUS && allowDash && hexlen !== 0) {\n            hexSequence(token, offset + hexlen + 1, false);\n            return 6; // dissallow following question marks\n        }\n\n        if (!charCodeDefinitions.isHexDigit(code)) {\n            return 0; // not a hex digit\n        }\n\n        if (++hexlen > 6) {\n            return 0; // too many hex digits\n        }    }\n\n    return hexlen;\n}\n\nfunction withQuestionMarkSequence(consumed, length, getNextToken) {\n    if (!consumed) {\n        return 0; // nothing consumed\n    }\n\n    while (isDelim(getNextToken(length), QUESTIONMARK)) {\n        if (++consumed > 6) {\n            return 0; // too many question marks\n        }\n\n        length++;\n    }\n\n    return length;\n}\n\n// https://drafts.csswg.org/css-syntax/#urange\n// Informally, the <urange> production has three forms:\n// U+0001\n//      Defines a range consisting of a single code point, in this case the code point \"1\".\n// U+0001-00ff\n//      Defines a range of codepoints between the first and the second value, in this case\n//      the range between \"1\" and \"ff\" (255 in decimal) inclusive.\n// U+00??\n//      Defines a range of codepoints where the \"?\" characters range over all hex digits,\n//      in this case defining the same as the value U+0000-00ff.\n// In each form, a maximum of 6 digits is allowed for each hexadecimal number (if you treat \"?\" as a hexadecimal digit).\n//\n// <urange> =\n//   u '+' <ident-token> '?'* |\n//   u <dimension-token> '?'* |\n//   u <number-token> '?'* |\n//   u <number-token> <dimension-token> |\n//   u <number-token> <number-token> |\n//   u '+' '?'+\nfunction urange(token, getNextToken) {\n    let length = 0;\n\n    // should start with `u` or `U`\n    if (token === null || token.type !== types.Ident || !utils.cmpChar(token.value, 0, U)) {\n        return 0;\n    }\n\n    token = getNextToken(++length);\n    if (token === null) {\n        return 0;\n    }\n\n    // u '+' <ident-token> '?'*\n    // u '+' '?'+\n    if (isDelim(token, PLUSSIGN)) {\n        token = getNextToken(++length);\n        if (token === null) {\n            return 0;\n        }\n\n        if (token.type === types.Ident) {\n            // u '+' <ident-token> '?'*\n            return withQuestionMarkSequence(hexSequence(token, 0, true), ++length, getNextToken);\n        }\n\n        if (isDelim(token, QUESTIONMARK)) {\n            // u '+' '?'+\n            return withQuestionMarkSequence(1, ++length, getNextToken);\n        }\n\n        // Hex digit or question mark is expected\n        return 0;\n    }\n\n    // u <number-token> '?'*\n    // u <number-token> <dimension-token>\n    // u <number-token> <number-token>\n    if (token.type === types.Number) {\n        const consumedHexLength = hexSequence(token, 1, true);\n        if (consumedHexLength === 0) {\n            return 0;\n        }\n\n        token = getNextToken(++length);\n        if (token === null) {\n            // u <number-token> <eof>\n            return length;\n        }\n\n        if (token.type === types.Dimension || token.type === types.Number) {\n            // u <number-token> <dimension-token>\n            // u <number-token> <number-token>\n            if (!startsWith(token, HYPHENMINUS) || !hexSequence(token, 1, false)) {\n                return 0;\n            }\n\n            return length + 1;\n        }\n\n        // u <number-token> '?'*\n        return withQuestionMarkSequence(consumedHexLength, length, getNextToken);\n    }\n\n    // u <dimension-token> '?'*\n    if (token.type === types.Dimension) {\n        return withQuestionMarkSequence(hexSequence(token, 1, true), ++length, getNextToken);\n    }\n\n    return 0;\n}\n\nmodule.exports = urange;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNTMyNy5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYiw0QkFBNEIsbUJBQU8sQ0FBQyxLQUF3QztBQUM1RSxjQUFjLG1CQUFPLENBQUMsS0FBd0I7QUFDOUMsY0FBYyxtQkFBTyxDQUFDLEtBQXdCOztBQUU5Qyw2QkFBNkI7QUFDN0IsNkJBQTZCO0FBQzdCLDZCQUE2QjtBQUM3Qiw2QkFBNkI7O0FBRTdCO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQSwyQkFBMkIsMEJBQTBCO0FBQ3JEOztBQUVBO0FBQ0E7QUFDQSxzQkFBc0I7QUFDdEI7O0FBRUE7QUFDQSxzQkFBc0I7QUFDdEI7O0FBRUE7QUFDQSxzQkFBc0I7QUFDdEI7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0Esa0JBQWtCO0FBQ2xCOztBQUVBO0FBQ0E7QUFDQSxzQkFBc0I7QUFDdEI7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYmxvY2tiaXRlLy4vbm9kZV9tb2R1bGVzL2Nzc28vbm9kZV9tb2R1bGVzL2Nzcy10cmVlL2Nqcy9sZXhlci9nZW5lcmljLXVyYW5nZS5janM/NTU0MSJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmNvbnN0IGNoYXJDb2RlRGVmaW5pdGlvbnMgPSByZXF1aXJlKCcuLi90b2tlbml6ZXIvY2hhci1jb2RlLWRlZmluaXRpb25zLmNqcycpO1xuY29uc3QgdHlwZXMgPSByZXF1aXJlKCcuLi90b2tlbml6ZXIvdHlwZXMuY2pzJyk7XG5jb25zdCB1dGlscyA9IHJlcXVpcmUoJy4uL3Rva2VuaXplci91dGlscy5janMnKTtcblxuY29uc3QgUExVU1NJR04gPSAweDAwMkI7ICAgICAvLyBVKzAwMkIgUExVUyBTSUdOICgrKVxuY29uc3QgSFlQSEVOTUlOVVMgPSAweDAwMkQ7ICAvLyBVKzAwMkQgSFlQSEVOLU1JTlVTICgtKVxuY29uc3QgUVVFU1RJT05NQVJLID0gMHgwMDNGOyAvLyBVKzAwM0YgUVVFU1RJT04gTUFSSyAoPylcbmNvbnN0IFUgPSAweDAwNzU7ICAgICAgICAgICAgLy8gVSswMDc1IExBVElOIFNNQUxMIExFVFRFUiBVICh1KVxuXG5mdW5jdGlvbiBpc0RlbGltKHRva2VuLCBjb2RlKSB7XG4gICAgcmV0dXJuIHRva2VuICE9PSBudWxsICYmIHRva2VuLnR5cGUgPT09IHR5cGVzLkRlbGltICYmIHRva2VuLnZhbHVlLmNoYXJDb2RlQXQoMCkgPT09IGNvZGU7XG59XG5cbmZ1bmN0aW9uIHN0YXJ0c1dpdGgodG9rZW4sIGNvZGUpIHtcbiAgICByZXR1cm4gdG9rZW4udmFsdWUuY2hhckNvZGVBdCgwKSA9PT0gY29kZTtcbn1cblxuZnVuY3Rpb24gaGV4U2VxdWVuY2UodG9rZW4sIG9mZnNldCwgYWxsb3dEYXNoKSB7XG4gICAgbGV0IGhleGxlbiA9IDA7XG5cbiAgICBmb3IgKGxldCBwb3MgPSBvZmZzZXQ7IHBvcyA8IHRva2VuLnZhbHVlLmxlbmd0aDsgcG9zKyspIHtcbiAgICAgICAgY29uc3QgY29kZSA9IHRva2VuLnZhbHVlLmNoYXJDb2RlQXQocG9zKTtcblxuICAgICAgICBpZiAoY29kZSA9PT0gSFlQSEVOTUlOVVMgJiYgYWxsb3dEYXNoICYmIGhleGxlbiAhPT0gMCkge1xuICAgICAgICAgICAgaGV4U2VxdWVuY2UodG9rZW4sIG9mZnNldCArIGhleGxlbiArIDEsIGZhbHNlKTtcbiAgICAgICAgICAgIHJldHVybiA2OyAvLyBkaXNzYWxsb3cgZm9sbG93aW5nIHF1ZXN0aW9uIG1hcmtzXG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIWNoYXJDb2RlRGVmaW5pdGlvbnMuaXNIZXhEaWdpdChjb2RlKSkge1xuICAgICAgICAgICAgcmV0dXJuIDA7IC8vIG5vdCBhIGhleCBkaWdpdFxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCsraGV4bGVuID4gNikge1xuICAgICAgICAgICAgcmV0dXJuIDA7IC8vIHRvbyBtYW55IGhleCBkaWdpdHNcbiAgICAgICAgfSAgICB9XG5cbiAgICByZXR1cm4gaGV4bGVuO1xufVxuXG5mdW5jdGlvbiB3aXRoUXVlc3Rpb25NYXJrU2VxdWVuY2UoY29uc3VtZWQsIGxlbmd0aCwgZ2V0TmV4dFRva2VuKSB7XG4gICAgaWYgKCFjb25zdW1lZCkge1xuICAgICAgICByZXR1cm4gMDsgLy8gbm90aGluZyBjb25zdW1lZFxuICAgIH1cblxuICAgIHdoaWxlIChpc0RlbGltKGdldE5leHRUb2tlbihsZW5ndGgpLCBRVUVTVElPTk1BUkspKSB7XG4gICAgICAgIGlmICgrK2NvbnN1bWVkID4gNikge1xuICAgICAgICAgICAgcmV0dXJuIDA7IC8vIHRvbyBtYW55IHF1ZXN0aW9uIG1hcmtzXG4gICAgICAgIH1cblxuICAgICAgICBsZW5ndGgrKztcbiAgICB9XG5cbiAgICByZXR1cm4gbGVuZ3RoO1xufVxuXG4vLyBodHRwczovL2RyYWZ0cy5jc3N3Zy5vcmcvY3NzLXN5bnRheC8jdXJhbmdlXG4vLyBJbmZvcm1hbGx5LCB0aGUgPHVyYW5nZT4gcHJvZHVjdGlvbiBoYXMgdGhyZWUgZm9ybXM6XG4vLyBVKzAwMDFcbi8vICAgICAgRGVmaW5lcyBhIHJhbmdlIGNvbnNpc3Rpbmcgb2YgYSBzaW5nbGUgY29kZSBwb2ludCwgaW4gdGhpcyBjYXNlIHRoZSBjb2RlIHBvaW50IFwiMVwiLlxuLy8gVSswMDAxLTAwZmZcbi8vICAgICAgRGVmaW5lcyBhIHJhbmdlIG9mIGNvZGVwb2ludHMgYmV0d2VlbiB0aGUgZmlyc3QgYW5kIHRoZSBzZWNvbmQgdmFsdWUsIGluIHRoaXMgY2FzZVxuLy8gICAgICB0aGUgcmFuZ2UgYmV0d2VlbiBcIjFcIiBhbmQgXCJmZlwiICgyNTUgaW4gZGVjaW1hbCkgaW5jbHVzaXZlLlxuLy8gVSswMD8/XG4vLyAgICAgIERlZmluZXMgYSByYW5nZSBvZiBjb2RlcG9pbnRzIHdoZXJlIHRoZSBcIj9cIiBjaGFyYWN0ZXJzIHJhbmdlIG92ZXIgYWxsIGhleCBkaWdpdHMsXG4vLyAgICAgIGluIHRoaXMgY2FzZSBkZWZpbmluZyB0aGUgc2FtZSBhcyB0aGUgdmFsdWUgVSswMDAwLTAwZmYuXG4vLyBJbiBlYWNoIGZvcm0sIGEgbWF4aW11bSBvZiA2IGRpZ2l0cyBpcyBhbGxvd2VkIGZvciBlYWNoIGhleGFkZWNpbWFsIG51bWJlciAoaWYgeW91IHRyZWF0IFwiP1wiIGFzIGEgaGV4YWRlY2ltYWwgZGlnaXQpLlxuLy9cbi8vIDx1cmFuZ2U+ID1cbi8vICAgdSAnKycgPGlkZW50LXRva2VuPiAnPycqIHxcbi8vICAgdSA8ZGltZW5zaW9uLXRva2VuPiAnPycqIHxcbi8vICAgdSA8bnVtYmVyLXRva2VuPiAnPycqIHxcbi8vICAgdSA8bnVtYmVyLXRva2VuPiA8ZGltZW5zaW9uLXRva2VuPiB8XG4vLyAgIHUgPG51bWJlci10b2tlbj4gPG51bWJlci10b2tlbj4gfFxuLy8gICB1ICcrJyAnPycrXG5mdW5jdGlvbiB1cmFuZ2UodG9rZW4sIGdldE5leHRUb2tlbikge1xuICAgIGxldCBsZW5ndGggPSAwO1xuXG4gICAgLy8gc2hvdWxkIHN0YXJ0IHdpdGggYHVgIG9yIGBVYFxuICAgIGlmICh0b2tlbiA9PT0gbnVsbCB8fCB0b2tlbi50eXBlICE9PSB0eXBlcy5JZGVudCB8fCAhdXRpbHMuY21wQ2hhcih0b2tlbi52YWx1ZSwgMCwgVSkpIHtcbiAgICAgICAgcmV0dXJuIDA7XG4gICAgfVxuXG4gICAgdG9rZW4gPSBnZXROZXh0VG9rZW4oKytsZW5ndGgpO1xuICAgIGlmICh0b2tlbiA9PT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gMDtcbiAgICB9XG5cbiAgICAvLyB1ICcrJyA8aWRlbnQtdG9rZW4+ICc/JypcbiAgICAvLyB1ICcrJyAnPycrXG4gICAgaWYgKGlzRGVsaW0odG9rZW4sIFBMVVNTSUdOKSkge1xuICAgICAgICB0b2tlbiA9IGdldE5leHRUb2tlbigrK2xlbmd0aCk7XG4gICAgICAgIGlmICh0b2tlbiA9PT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodG9rZW4udHlwZSA9PT0gdHlwZXMuSWRlbnQpIHtcbiAgICAgICAgICAgIC8vIHUgJysnIDxpZGVudC10b2tlbj4gJz8nKlxuICAgICAgICAgICAgcmV0dXJuIHdpdGhRdWVzdGlvbk1hcmtTZXF1ZW5jZShoZXhTZXF1ZW5jZSh0b2tlbiwgMCwgdHJ1ZSksICsrbGVuZ3RoLCBnZXROZXh0VG9rZW4pO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGlzRGVsaW0odG9rZW4sIFFVRVNUSU9OTUFSSykpIHtcbiAgICAgICAgICAgIC8vIHUgJysnICc/JytcbiAgICAgICAgICAgIHJldHVybiB3aXRoUXVlc3Rpb25NYXJrU2VxdWVuY2UoMSwgKytsZW5ndGgsIGdldE5leHRUb2tlbik7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBIZXggZGlnaXQgb3IgcXVlc3Rpb24gbWFyayBpcyBleHBlY3RlZFxuICAgICAgICByZXR1cm4gMDtcbiAgICB9XG5cbiAgICAvLyB1IDxudW1iZXItdG9rZW4+ICc/JypcbiAgICAvLyB1IDxudW1iZXItdG9rZW4+IDxkaW1lbnNpb24tdG9rZW4+XG4gICAgLy8gdSA8bnVtYmVyLXRva2VuPiA8bnVtYmVyLXRva2VuPlxuICAgIGlmICh0b2tlbi50eXBlID09PSB0eXBlcy5OdW1iZXIpIHtcbiAgICAgICAgY29uc3QgY29uc3VtZWRIZXhMZW5ndGggPSBoZXhTZXF1ZW5jZSh0b2tlbiwgMSwgdHJ1ZSk7XG4gICAgICAgIGlmIChjb25zdW1lZEhleExlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgIH1cblxuICAgICAgICB0b2tlbiA9IGdldE5leHRUb2tlbigrK2xlbmd0aCk7XG4gICAgICAgIGlmICh0b2tlbiA9PT0gbnVsbCkge1xuICAgICAgICAgICAgLy8gdSA8bnVtYmVyLXRva2VuPiA8ZW9mPlxuICAgICAgICAgICAgcmV0dXJuIGxlbmd0aDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0b2tlbi50eXBlID09PSB0eXBlcy5EaW1lbnNpb24gfHwgdG9rZW4udHlwZSA9PT0gdHlwZXMuTnVtYmVyKSB7XG4gICAgICAgICAgICAvLyB1IDxudW1iZXItdG9rZW4+IDxkaW1lbnNpb24tdG9rZW4+XG4gICAgICAgICAgICAvLyB1IDxudW1iZXItdG9rZW4+IDxudW1iZXItdG9rZW4+XG4gICAgICAgICAgICBpZiAoIXN0YXJ0c1dpdGgodG9rZW4sIEhZUEhFTk1JTlVTKSB8fCAhaGV4U2VxdWVuY2UodG9rZW4sIDEsIGZhbHNlKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gbGVuZ3RoICsgMTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIHUgPG51bWJlci10b2tlbj4gJz8nKlxuICAgICAgICByZXR1cm4gd2l0aFF1ZXN0aW9uTWFya1NlcXVlbmNlKGNvbnN1bWVkSGV4TGVuZ3RoLCBsZW5ndGgsIGdldE5leHRUb2tlbik7XG4gICAgfVxuXG4gICAgLy8gdSA8ZGltZW5zaW9uLXRva2VuPiAnPycqXG4gICAgaWYgKHRva2VuLnR5cGUgPT09IHR5cGVzLkRpbWVuc2lvbikge1xuICAgICAgICByZXR1cm4gd2l0aFF1ZXN0aW9uTWFya1NlcXVlbmNlKGhleFNlcXVlbmNlKHRva2VuLCAxLCB0cnVlKSwgKytsZW5ndGgsIGdldE5leHRUb2tlbik7XG4gICAgfVxuXG4gICAgcmV0dXJuIDA7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gdXJhbmdlO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///5327\n")},33990:(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval("\n\nconst genericConst = __webpack_require__(74084);\nconst genericAnPlusB = __webpack_require__(69822);\nconst genericUrange = __webpack_require__(5327);\nconst types = __webpack_require__(78783);\nconst charCodeDefinitions = __webpack_require__(87351);\nconst utils = __webpack_require__(79955);\n\nconst calcFunctionNames = ['calc(', '-moz-calc(', '-webkit-calc('];\nconst balancePair = new Map([\n    [types.Function, types.RightParenthesis],\n    [types.LeftParenthesis, types.RightParenthesis],\n    [types.LeftSquareBracket, types.RightSquareBracket],\n    [types.LeftCurlyBracket, types.RightCurlyBracket]\n]);\n\n// units\nconst LENGTH = [\n    // absolute length units https://www.w3.org/TR/css-values-3/#lengths\n    'cm', 'mm', 'q', 'in', 'pt', 'pc', 'px',\n    // font-relative length units https://drafts.csswg.org/css-values-4/#font-relative-lengths\n    'em', 'rem',\n    'ex', 'rex',\n    'cap', 'rcap',\n    'ch', 'rch',\n    'ic', 'ric',\n    'lh', 'rlh',\n    // viewport-percentage lengths https://drafts.csswg.org/css-values-4/#viewport-relative-lengths\n    'vw', 'svw', 'lvw', 'dvw',\n    'vh', 'svh', 'lvh', 'dvh',\n    'vi', 'svi', 'lvi', 'dvi',\n    'vb', 'svb', 'lvb', 'dvb',\n    'vmin', 'svmin', 'lvmin', 'dvmin',\n    'vmax', 'svmax', 'lvmax', 'dvmax',\n    // container relative lengths https://drafts.csswg.org/css-contain-3/#container-lengths\n    'cqw', 'cqh', 'cqi', 'cqb', 'cqmin', 'cqmax'\n];\nconst ANGLE = ['deg', 'grad', 'rad', 'turn']; // https://www.w3.org/TR/css-values-3/#angles\nconst TIME = ['s', 'ms'];                     // https://www.w3.org/TR/css-values-3/#time\nconst FREQUENCY = ['hz', 'khz'];              // https://www.w3.org/TR/css-values-3/#frequency\nconst RESOLUTION = ['dpi', 'dpcm', 'dppx', 'x']; // https://www.w3.org/TR/css-values-3/#resolution\nconst FLEX = ['fr'];                          // https://drafts.csswg.org/css-grid/#fr-unit\nconst DECIBEL = ['db'];                       // https://www.w3.org/TR/css3-speech/#mixing-props-voice-volume\nconst SEMITONES = ['st'];                     // https://www.w3.org/TR/css3-speech/#voice-props-voice-pitch\n\n// safe char code getter\nfunction charCodeAt(str, index) {\n    return index < str.length ? str.charCodeAt(index) : 0;\n}\n\nfunction eqStr(actual, expected) {\n    return utils.cmpStr(actual, 0, actual.length, expected);\n}\n\nfunction eqStrAny(actual, expected) {\n    for (let i = 0; i < expected.length; i++) {\n        if (eqStr(actual, expected[i])) {\n            return true;\n        }\n    }\n\n    return false;\n}\n\n// IE postfix hack, i.e. 123\\0 or 123px\\9\nfunction isPostfixIeHack(str, offset) {\n    if (offset !== str.length - 2) {\n        return false;\n    }\n\n    return (\n        charCodeAt(str, offset) === 0x005C &&  // U+005C REVERSE SOLIDUS (\\)\n        charCodeDefinitions.isDigit(charCodeAt(str, offset + 1))\n    );\n}\n\nfunction outOfRange(opts, value, numEnd) {\n    if (opts && opts.type === 'Range') {\n        const num = Number(\n            numEnd !== undefined && numEnd !== value.length\n                ? value.substr(0, numEnd)\n                : value\n        );\n\n        if (isNaN(num)) {\n            return true;\n        }\n\n        // FIXME: when opts.min is a string it's a dimension, skip a range validation\n        // for now since it requires a type covertation which is not implmented yet\n        if (opts.min !== null && num < opts.min && typeof opts.min !== 'string') {\n            return true;\n        }\n\n        // FIXME: when opts.max is a string it's a dimension, skip a range validation\n        // for now since it requires a type covertation which is not implmented yet\n        if (opts.max !== null && num > opts.max && typeof opts.max !== 'string') {\n            return true;\n        }\n    }\n\n    return false;\n}\n\nfunction consumeFunction(token, getNextToken) {\n    let balanceCloseType = 0;\n    let balanceStash = [];\n    let length = 0;\n\n    // balanced token consuming\n    scan:\n    do {\n        switch (token.type) {\n            case types.RightCurlyBracket:\n            case types.RightParenthesis:\n            case types.RightSquareBracket:\n                if (token.type !== balanceCloseType) {\n                    break scan;\n                }\n\n                balanceCloseType = balanceStash.pop();\n\n                if (balanceStash.length === 0) {\n                    length++;\n                    break scan;\n                }\n\n                break;\n\n            case types.Function:\n            case types.LeftParenthesis:\n            case types.LeftSquareBracket:\n            case types.LeftCurlyBracket:\n                balanceStash.push(balanceCloseType);\n                balanceCloseType = balancePair.get(token.type);\n                break;\n        }\n\n        length++;\n    } while (token = getNextToken(length));\n\n    return length;\n}\n\n// TODO: implement\n// can be used wherever <length>, <frequency>, <angle>, <time>, <percentage>, <number>, or <integer> values are allowed\n// https://drafts.csswg.org/css-values/#calc-notation\nfunction calc(next) {\n    return function(token, getNextToken, opts) {\n        if (token === null) {\n            return 0;\n        }\n\n        if (token.type === types.Function && eqStrAny(token.value, calcFunctionNames)) {\n            return consumeFunction(token, getNextToken);\n        }\n\n        return next(token, getNextToken, opts);\n    };\n}\n\nfunction tokenType(expectedTokenType) {\n    return function(token) {\n        if (token === null || token.type !== expectedTokenType) {\n            return 0;\n        }\n\n        return 1;\n    };\n}\n\n// =========================\n// Complex types\n//\n\n// https://drafts.csswg.org/css-values-4/#custom-idents\n// 4.2. Author-defined Identifiers: the <custom-ident> type\n// Some properties accept arbitrary author-defined identifiers as a component value.\n// This generic data type is denoted by <custom-ident>, and represents any valid CSS identifier\n// that would not be misinterpreted as a pre-defined keyword in that property’s value definition.\n//\n// See also: https://developer.mozilla.org/en-US/docs/Web/CSS/custom-ident\nfunction customIdent(token) {\n    if (token === null || token.type !== types.Ident) {\n        return 0;\n    }\n\n    const name = token.value.toLowerCase();\n\n    // The CSS-wide keywords are not valid <custom-ident>s\n    if (eqStrAny(name, genericConst.cssWideKeywords)) {\n        return 0;\n    }\n\n    // The default keyword is reserved and is also not a valid <custom-ident>\n    if (eqStr(name, 'default')) {\n        return 0;\n    }\n\n    // TODO: ignore property specific keywords (as described https://developer.mozilla.org/en-US/docs/Web/CSS/custom-ident)\n    // Specifications using <custom-ident> must specify clearly what other keywords\n    // are excluded from <custom-ident>, if any—for example by saying that any pre-defined keywords\n    // in that property’s value definition are excluded. Excluded keywords are excluded\n    // in all ASCII case permutations.\n\n    return 1;\n}\n\n// https://drafts.csswg.org/css-variables/#typedef-custom-property-name\n// A custom property is any property whose name starts with two dashes (U+002D HYPHEN-MINUS), like --foo.\n// The <custom-property-name> production corresponds to this: it’s defined as any valid identifier\n// that starts with two dashes, except -- itself, which is reserved for future use by CSS.\n// NOTE: Current implementation treat `--` as a valid name since most (all?) major browsers treat it as valid.\nfunction customPropertyName(token) {\n    // ... defined as any valid identifier\n    if (token === null || token.type !== types.Ident) {\n        return 0;\n    }\n\n    // ... that starts with two dashes (U+002D HYPHEN-MINUS)\n    if (charCodeAt(token.value, 0) !== 0x002D || charCodeAt(token.value, 1) !== 0x002D) {\n        return 0;\n    }\n\n    return 1;\n}\n\n// https://drafts.csswg.org/css-color-4/#hex-notation\n// The syntax of a <hex-color> is a <hash-token> token whose value consists of 3, 4, 6, or 8 hexadecimal digits.\n// In other words, a hex color is written as a hash character, \"#\", followed by some number of digits 0-9 or\n// letters a-f (the case of the letters doesn’t matter - #00ff00 is identical to #00FF00).\nfunction hexColor(token) {\n    if (token === null || token.type !== types.Hash) {\n        return 0;\n    }\n\n    const length = token.value.length;\n\n    // valid values (length): #rgb (4), #rgba (5), #rrggbb (7), #rrggbbaa (9)\n    if (length !== 4 && length !== 5 && length !== 7 && length !== 9) {\n        return 0;\n    }\n\n    for (let i = 1; i < length; i++) {\n        if (!charCodeDefinitions.isHexDigit(charCodeAt(token.value, i))) {\n            return 0;\n        }\n    }\n\n    return 1;\n}\n\nfunction idSelector(token) {\n    if (token === null || token.type !== types.Hash) {\n        return 0;\n    }\n\n    if (!charCodeDefinitions.isIdentifierStart(charCodeAt(token.value, 1), charCodeAt(token.value, 2), charCodeAt(token.value, 3))) {\n        return 0;\n    }\n\n    return 1;\n}\n\n// https://drafts.csswg.org/css-syntax/#any-value\n// It represents the entirety of what a valid declaration can have as its value.\nfunction declarationValue(token, getNextToken) {\n    if (!token) {\n        return 0;\n    }\n\n    let balanceCloseType = 0;\n    let balanceStash = [];\n    let length = 0;\n\n    // The <declaration-value> production matches any sequence of one or more tokens,\n    // so long as the sequence does not contain ...\n    scan:\n    do {\n        switch (token.type) {\n            // ... <bad-string-token>, <bad-url-token>,\n            case types.BadString:\n            case types.BadUrl:\n                break scan;\n\n            // ... unmatched <)-token>, <]-token>, or <}-token>,\n            case types.RightCurlyBracket:\n            case types.RightParenthesis:\n            case types.RightSquareBracket:\n                if (token.type !== balanceCloseType) {\n                    break scan;\n                }\n\n                balanceCloseType = balanceStash.pop();\n                break;\n\n            // ... or top-level <semicolon-token> tokens\n            case types.Semicolon:\n                if (balanceCloseType === 0) {\n                    break scan;\n                }\n\n                break;\n\n            // ... or <delim-token> tokens with a value of \"!\"\n            case types.Delim:\n                if (balanceCloseType === 0 && token.value === '!') {\n                    break scan;\n                }\n\n                break;\n\n            case types.Function:\n            case types.LeftParenthesis:\n            case types.LeftSquareBracket:\n            case types.LeftCurlyBracket:\n                balanceStash.push(balanceCloseType);\n                balanceCloseType = balancePair.get(token.type);\n                break;\n        }\n\n        length++;\n    } while (token = getNextToken(length));\n\n    return length;\n}\n\n// https://drafts.csswg.org/css-syntax/#any-value\n// The <any-value> production is identical to <declaration-value>, but also\n// allows top-level <semicolon-token> tokens and <delim-token> tokens\n// with a value of \"!\". It represents the entirety of what valid CSS can be in any context.\nfunction anyValue(token, getNextToken) {\n    if (!token) {\n        return 0;\n    }\n\n    let balanceCloseType = 0;\n    let balanceStash = [];\n    let length = 0;\n\n    // The <any-value> production matches any sequence of one or more tokens,\n    // so long as the sequence ...\n    scan:\n    do {\n        switch (token.type) {\n            // ... does not contain <bad-string-token>, <bad-url-token>,\n            case types.BadString:\n            case types.BadUrl:\n                break scan;\n\n            // ... unmatched <)-token>, <]-token>, or <}-token>,\n            case types.RightCurlyBracket:\n            case types.RightParenthesis:\n            case types.RightSquareBracket:\n                if (token.type !== balanceCloseType) {\n                    break scan;\n                }\n\n                balanceCloseType = balanceStash.pop();\n                break;\n\n            case types.Function:\n            case types.LeftParenthesis:\n            case types.LeftSquareBracket:\n            case types.LeftCurlyBracket:\n                balanceStash.push(balanceCloseType);\n                balanceCloseType = balancePair.get(token.type);\n                break;\n        }\n\n        length++;\n    } while (token = getNextToken(length));\n\n    return length;\n}\n\n// =========================\n// Dimensions\n//\n\nfunction dimension(type) {\n    if (type) {\n        type = new Set(type);\n    }\n\n    return function(token, getNextToken, opts) {\n        if (token === null || token.type !== types.Dimension) {\n            return 0;\n        }\n\n        const numberEnd = utils.consumeNumber(token.value, 0);\n\n        // check unit\n        if (type !== null) {\n            // check for IE postfix hack, i.e. 123px\\0 or 123px\\9\n            const reverseSolidusOffset = token.value.indexOf('\\\\', numberEnd);\n            const unit = reverseSolidusOffset === -1 || !isPostfixIeHack(token.value, reverseSolidusOffset)\n                ? token.value.substr(numberEnd)\n                : token.value.substring(numberEnd, reverseSolidusOffset);\n\n            if (type.has(unit.toLowerCase()) === false) {\n                return 0;\n            }\n        }\n\n        // check range if specified\n        if (outOfRange(opts, token.value, numberEnd)) {\n            return 0;\n        }\n\n        return 1;\n    };\n}\n\n// =========================\n// Percentage\n//\n\n// §5.5. Percentages: the <percentage> type\n// https://drafts.csswg.org/css-values-4/#percentages\nfunction percentage(token, getNextToken, opts) {\n    // ... corresponds to the <percentage-token> production\n    if (token === null || token.type !== types.Percentage) {\n        return 0;\n    }\n\n    // check range if specified\n    if (outOfRange(opts, token.value, token.value.length - 1)) {\n        return 0;\n    }\n\n    return 1;\n}\n\n// =========================\n// Numeric\n//\n\n// https://drafts.csswg.org/css-values-4/#numbers\n// The value <zero> represents a literal number with the value 0. Expressions that merely\n// evaluate to a <number> with the value 0 (for example, calc(0)) do not match <zero>;\n// only literal <number-token>s do.\nfunction zero(next) {\n    if (typeof next !== 'function') {\n        next = function() {\n            return 0;\n        };\n    }\n\n    return function(token, getNextToken, opts) {\n        if (token !== null && token.type === types.Number) {\n            if (Number(token.value) === 0) {\n                return 1;\n            }\n        }\n\n        return next(token, getNextToken, opts);\n    };\n}\n\n// § 5.3. Real Numbers: the <number> type\n// https://drafts.csswg.org/css-values-4/#numbers\n// Number values are denoted by <number>, and represent real numbers, possibly with a fractional component.\n// ... It corresponds to the <number-token> production\nfunction number(token, getNextToken, opts) {\n    if (token === null) {\n        return 0;\n    }\n\n    const numberEnd = utils.consumeNumber(token.value, 0);\n    const isNumber = numberEnd === token.value.length;\n    if (!isNumber && !isPostfixIeHack(token.value, numberEnd)) {\n        return 0;\n    }\n\n    // check range if specified\n    if (outOfRange(opts, token.value, numberEnd)) {\n        return 0;\n    }\n\n    return 1;\n}\n\n// §5.2. Integers: the <integer> type\n// https://drafts.csswg.org/css-values-4/#integers\nfunction integer(token, getNextToken, opts) {\n    // ... corresponds to a subset of the <number-token> production\n    if (token === null || token.type !== types.Number) {\n        return 0;\n    }\n\n    // The first digit of an integer may be immediately preceded by `-` or `+` to indicate the integer’s sign.\n    let i = charCodeAt(token.value, 0) === 0x002B ||       // U+002B PLUS SIGN (+)\n            charCodeAt(token.value, 0) === 0x002D ? 1 : 0; // U+002D HYPHEN-MINUS (-)\n\n    // When written literally, an integer is one or more decimal digits 0 through 9 ...\n    for (; i < token.value.length; i++) {\n        if (!charCodeDefinitions.isDigit(charCodeAt(token.value, i))) {\n            return 0;\n        }\n    }\n\n    // check range if specified\n    if (outOfRange(opts, token.value, i)) {\n        return 0;\n    }\n\n    return 1;\n}\n\nconst genericSyntaxes = {\n    // token types\n    'ident-token': tokenType(types.Ident),\n    'function-token': tokenType(types.Function),\n    'at-keyword-token': tokenType(types.AtKeyword),\n    'hash-token': tokenType(types.Hash),\n    'string-token': tokenType(types.String),\n    'bad-string-token': tokenType(types.BadString),\n    'url-token': tokenType(types.Url),\n    'bad-url-token': tokenType(types.BadUrl),\n    'delim-token': tokenType(types.Delim),\n    'number-token': tokenType(types.Number),\n    'percentage-token': tokenType(types.Percentage),\n    'dimension-token': tokenType(types.Dimension),\n    'whitespace-token': tokenType(types.WhiteSpace),\n    'CDO-token': tokenType(types.CDO),\n    'CDC-token': tokenType(types.CDC),\n    'colon-token': tokenType(types.Colon),\n    'semicolon-token': tokenType(types.Semicolon),\n    'comma-token': tokenType(types.Comma),\n    '[-token': tokenType(types.LeftSquareBracket),\n    ']-token': tokenType(types.RightSquareBracket),\n    '(-token': tokenType(types.LeftParenthesis),\n    ')-token': tokenType(types.RightParenthesis),\n    '{-token': tokenType(types.LeftCurlyBracket),\n    '}-token': tokenType(types.RightCurlyBracket),\n\n    // token type aliases\n    'string': tokenType(types.String),\n    'ident': tokenType(types.Ident),\n\n    // complex types\n    'custom-ident': customIdent,\n    'custom-property-name': customPropertyName,\n    'hex-color': hexColor,\n    'id-selector': idSelector, // element( <id-selector> )\n    'an-plus-b': genericAnPlusB,\n    'urange': genericUrange,\n    'declaration-value': declarationValue,\n    'any-value': anyValue,\n\n    // dimensions\n    'dimension': calc(dimension(null)),\n    'angle': calc(dimension(ANGLE)),\n    'decibel': calc(dimension(DECIBEL)),\n    'frequency': calc(dimension(FREQUENCY)),\n    'flex': calc(dimension(FLEX)),\n    'length': calc(zero(dimension(LENGTH))),\n    'resolution': calc(dimension(RESOLUTION)),\n    'semitones': calc(dimension(SEMITONES)),\n    'time': calc(dimension(TIME)),\n\n    // percentage\n    'percentage': calc(percentage),\n\n    // numeric\n    'zero': zero(),\n    'number': calc(number),\n    'integer': calc(integer)\n};\n\nmodule.exports = genericSyntaxes;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///33990\n")},40473:(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";eval("\n\nconst parse = __webpack_require__(66087);\n\nconst MATCH = { type: 'Match' };\nconst MISMATCH = { type: 'Mismatch' };\nconst DISALLOW_EMPTY = { type: 'DisallowEmpty' };\n\nconst LEFTPARENTHESIS = 40;  // (\nconst RIGHTPARENTHESIS = 41; // )\n\nfunction createCondition(match, thenBranch, elseBranch) {\n    // reduce node count\n    if (thenBranch === MATCH && elseBranch === MISMATCH) {\n        return match;\n    }\n\n    if (match === MATCH && thenBranch === MATCH && elseBranch === MATCH) {\n        return match;\n    }\n\n    if (match.type === 'If' && match.else === MISMATCH && thenBranch === MATCH) {\n        thenBranch = match.then;\n        match = match.match;\n    }\n\n    return {\n        type: 'If',\n        match,\n        then: thenBranch,\n        else: elseBranch\n    };\n}\n\nfunction isFunctionType(name) {\n    return (\n        name.length > 2 &&\n        name.charCodeAt(name.length - 2) === LEFTPARENTHESIS &&\n        name.charCodeAt(name.length - 1) === RIGHTPARENTHESIS\n    );\n}\n\nfunction isEnumCapatible(term) {\n    return (\n        term.type === 'Keyword' ||\n        term.type === 'AtKeyword' ||\n        term.type === 'Function' ||\n        term.type === 'Type' && isFunctionType(term.name)\n    );\n}\n\nfunction buildGroupMatchGraph(combinator, terms, atLeastOneTermMatched) {\n    switch (combinator) {\n        case ' ': {\n            // Juxtaposing components means that all of them must occur, in the given order.\n            //\n            // a b c\n            // =\n            // match a\n            //   then match b\n            //     then match c\n            //       then MATCH\n            //       else MISMATCH\n            //     else MISMATCH\n            //   else MISMATCH\n            let result = MATCH;\n\n            for (let i = terms.length - 1; i >= 0; i--) {\n                const term = terms[i];\n\n                result = createCondition(\n                    term,\n                    result,\n                    MISMATCH\n                );\n            }\n            return result;\n        }\n\n        case '|': {\n            // A bar (|) separates two or more alternatives: exactly one of them must occur.\n            //\n            // a | b | c\n            // =\n            // match a\n            //   then MATCH\n            //   else match b\n            //     then MATCH\n            //     else match c\n            //       then MATCH\n            //       else MISMATCH\n\n            let result = MISMATCH;\n            let map = null;\n\n            for (let i = terms.length - 1; i >= 0; i--) {\n                let term = terms[i];\n\n                // reduce sequence of keywords into a Enum\n                if (isEnumCapatible(term)) {\n                    if (map === null && i > 0 && isEnumCapatible(terms[i - 1])) {\n                        map = Object.create(null);\n                        result = createCondition(\n                            {\n                                type: 'Enum',\n                                map\n                            },\n                            MATCH,\n                            result\n                        );\n                    }\n\n                    if (map !== null) {\n                        const key = (isFunctionType(term.name) ? term.name.slice(0, -1) : term.name).toLowerCase();\n                        if (key in map === false) {\n                            map[key] = term;\n                            continue;\n                        }\n                    }\n                }\n\n                map = null;\n\n                // create a new conditonal node\n                result = createCondition(\n                    term,\n                    MATCH,\n                    result\n                );\n            }\n            return result;\n        }\n\n        case '&&': {\n            // A double ampersand (&&) separates two or more components,\n            // all of which must occur, in any order.\n\n            // Use MatchOnce for groups with a large number of terms,\n            // since &&-groups produces at least N!-node trees\n            if (terms.length > 5) {\n                return {\n                    type: 'MatchOnce',\n                    terms,\n                    all: true\n                };\n            }\n\n            // Use a combination tree for groups with small number of terms\n            //\n            // a && b && c\n            // =\n            // match a\n            //   then [b && c]\n            //   else match b\n            //     then [a && c]\n            //     else match c\n            //       then [a && b]\n            //       else MISMATCH\n            //\n            // a && b\n            // =\n            // match a\n            //   then match b\n            //     then MATCH\n            //     else MISMATCH\n            //   else match b\n            //     then match a\n            //       then MATCH\n            //       else MISMATCH\n            //     else MISMATCH\n            let result = MISMATCH;\n\n            for (let i = terms.length - 1; i >= 0; i--) {\n                const term = terms[i];\n                let thenClause;\n\n                if (terms.length > 1) {\n                    thenClause = buildGroupMatchGraph(\n                        combinator,\n                        terms.filter(function(newGroupTerm) {\n                            return newGroupTerm !== term;\n                        }),\n                        false\n                    );\n                } else {\n                    thenClause = MATCH;\n                }\n\n                result = createCondition(\n                    term,\n                    thenClause,\n                    result\n                );\n            }\n            return result;\n        }\n\n        case '||': {\n            // A double bar (||) separates two or more options:\n            // one or more of them must occur, in any order.\n\n            // Use MatchOnce for groups with a large number of terms,\n            // since ||-groups produces at least N!-node trees\n            if (terms.length > 5) {\n                return {\n                    type: 'MatchOnce',\n                    terms,\n                    all: false\n                };\n            }\n\n            // Use a combination tree for groups with small number of terms\n            //\n            // a || b || c\n            // =\n            // match a\n            //   then [b || c]\n            //   else match b\n            //     then [a || c]\n            //     else match c\n            //       then [a || b]\n            //       else MISMATCH\n            //\n            // a || b\n            // =\n            // match a\n            //   then match b\n            //     then MATCH\n            //     else MATCH\n            //   else match b\n            //     then match a\n            //       then MATCH\n            //       else MATCH\n            //     else MISMATCH\n            let result = atLeastOneTermMatched ? MATCH : MISMATCH;\n\n            for (let i = terms.length - 1; i >= 0; i--) {\n                const term = terms[i];\n                let thenClause;\n\n                if (terms.length > 1) {\n                    thenClause = buildGroupMatchGraph(\n                        combinator,\n                        terms.filter(function(newGroupTerm) {\n                            return newGroupTerm !== term;\n                        }),\n                        true\n                    );\n                } else {\n                    thenClause = MATCH;\n                }\n\n                result = createCondition(\n                    term,\n                    thenClause,\n                    result\n                );\n            }\n            return result;\n        }\n    }\n}\n\nfunction buildMultiplierMatchGraph(node) {\n    let result = MATCH;\n    let matchTerm = buildMatchGraphInternal(node.term);\n\n    if (node.max === 0) {\n        // disable repeating of empty match to prevent infinite loop\n        matchTerm = createCondition(\n            matchTerm,\n            DISALLOW_EMPTY,\n            MISMATCH\n        );\n\n        // an occurrence count is not limited, make a cycle;\n        // to collect more terms on each following matching mismatch\n        result = createCondition(\n            matchTerm,\n            null, // will be a loop\n            MISMATCH\n        );\n\n        result.then = createCondition(\n            MATCH,\n            MATCH,\n            result // make a loop\n        );\n\n        if (node.comma) {\n            result.then.else = createCondition(\n                { type: 'Comma', syntax: node },\n                result,\n                MISMATCH\n            );\n        }\n    } else {\n        // create a match node chain for [min .. max] interval with optional matches\n        for (let i = node.min || 1; i <= node.max; i++) {\n            if (node.comma && result !== MATCH) {\n                result = createCondition(\n                    { type: 'Comma', syntax: node },\n                    result,\n                    MISMATCH\n                );\n            }\n\n            result = createCondition(\n                matchTerm,\n                createCondition(\n                    MATCH,\n                    MATCH,\n                    result\n                ),\n                MISMATCH\n            );\n        }\n    }\n\n    if (node.min === 0) {\n        // allow zero match\n        result = createCondition(\n            MATCH,\n            MATCH,\n            result\n        );\n    } else {\n        // create a match node chain to collect [0 ... min - 1] required matches\n        for (let i = 0; i < node.min - 1; i++) {\n            if (node.comma && result !== MATCH) {\n                result = createCondition(\n                    { type: 'Comma', syntax: node },\n                    result,\n                    MISMATCH\n                );\n            }\n\n            result = createCondition(\n                matchTerm,\n                result,\n                MISMATCH\n            );\n        }\n    }\n\n    return result;\n}\n\nfunction buildMatchGraphInternal(node) {\n    if (typeof node === 'function') {\n        return {\n            type: 'Generic',\n            fn: node\n        };\n    }\n\n    switch (node.type) {\n        case 'Group': {\n            let result = buildGroupMatchGraph(\n                node.combinator,\n                node.terms.map(buildMatchGraphInternal),\n                false\n            );\n\n            if (node.disallowEmpty) {\n                result = createCondition(\n                    result,\n                    DISALLOW_EMPTY,\n                    MISMATCH\n                );\n            }\n\n            return result;\n        }\n\n        case 'Multiplier':\n            return buildMultiplierMatchGraph(node);\n\n        case 'Type':\n        case 'Property':\n            return {\n                type: node.type,\n                name: node.name,\n                syntax: node\n            };\n\n        case 'Keyword':\n            return {\n                type: node.type,\n                name: node.name.toLowerCase(),\n                syntax: node\n            };\n\n        case 'AtKeyword':\n            return {\n                type: node.type,\n                name: '@' + node.name.toLowerCase(),\n                syntax: node\n            };\n\n        case 'Function':\n            return {\n                type: node.type,\n                name: node.name.toLowerCase() + '(',\n                syntax: node\n            };\n\n        case 'String':\n            // convert a one char length String to a Token\n            if (node.value.length === 3) {\n                return {\n                    type: 'Token',\n                    value: node.value.charAt(1),\n                    syntax: node\n                };\n            }\n\n            // otherwise use it as is\n            return {\n                type: node.type,\n                value: node.value.substr(1, node.value.length - 2).replace(/\\\\'/g, '\\''),\n                syntax: node\n            };\n\n        case 'Token':\n            return {\n                type: node.type,\n                value: node.value,\n                syntax: node\n            };\n\n        case 'Comma':\n            return {\n                type: node.type,\n                syntax: node\n            };\n\n        default:\n            throw new Error('Unknown node type:', node.type);\n    }\n}\n\nfunction buildMatchGraph(syntaxTree, ref) {\n    if (typeof syntaxTree === 'string') {\n        syntaxTree = parse.parse(syntaxTree);\n    }\n\n    return {\n        type: 'MatchGraph',\n        match: buildMatchGraphInternal(syntaxTree),\n        syntax: ref || null,\n        source: syntaxTree\n    };\n}\n\nexports.DISALLOW_EMPTY = DISALLOW_EMPTY;\nexports.MATCH = MATCH;\nexports.MISMATCH = MISMATCH;\nexports.buildMatchGraph = buildMatchGraph;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///40473\n")},54818:(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";eval("\n\nconst matchGraph = __webpack_require__(40473);\nconst types = __webpack_require__(78783);\n\nconst { hasOwnProperty } = Object.prototype;\nconst STUB = 0;\nconst TOKEN = 1;\nconst OPEN_SYNTAX = 2;\nconst CLOSE_SYNTAX = 3;\n\nconst EXIT_REASON_MATCH = 'Match';\nconst EXIT_REASON_MISMATCH = 'Mismatch';\nconst EXIT_REASON_ITERATION_LIMIT = 'Maximum iteration number exceeded (please fill an issue on https://github.com/csstree/csstree/issues)';\n\nconst ITERATION_LIMIT = 15000;\n\nfunction reverseList(list) {\n    let prev = null;\n    let next = null;\n    let item = list;\n\n    while (item !== null) {\n        next = item.prev;\n        item.prev = prev;\n        prev = item;\n        item = next;\n    }\n\n    return prev;\n}\n\nfunction areStringsEqualCaseInsensitive(testStr, referenceStr) {\n    if (testStr.length !== referenceStr.length) {\n        return false;\n    }\n\n    for (let i = 0; i < testStr.length; i++) {\n        const referenceCode = referenceStr.charCodeAt(i);\n        let testCode = testStr.charCodeAt(i);\n\n        // testCode.toLowerCase() for U+0041 LATIN CAPITAL LETTER A (A) .. U+005A LATIN CAPITAL LETTER Z (Z).\n        if (testCode >= 0x0041 && testCode <= 0x005A) {\n            testCode = testCode | 32;\n        }\n\n        if (testCode !== referenceCode) {\n            return false;\n        }\n    }\n\n    return true;\n}\n\nfunction isContextEdgeDelim(token) {\n    if (token.type !== types.Delim) {\n        return false;\n    }\n\n    // Fix matching for unicode-range: U+30??, U+FF00-FF9F\n    // Probably we need to check out previous match instead\n    return token.value !== '?';\n}\n\nfunction isCommaContextStart(token) {\n    if (token === null) {\n        return true;\n    }\n\n    return (\n        token.type === types.Comma ||\n        token.type === types.Function ||\n        token.type === types.LeftParenthesis ||\n        token.type === types.LeftSquareBracket ||\n        token.type === types.LeftCurlyBracket ||\n        isContextEdgeDelim(token)\n    );\n}\n\nfunction isCommaContextEnd(token) {\n    if (token === null) {\n        return true;\n    }\n\n    return (\n        token.type === types.RightParenthesis ||\n        token.type === types.RightSquareBracket ||\n        token.type === types.RightCurlyBracket ||\n        (token.type === types.Delim && token.value === '/')\n    );\n}\n\nfunction internalMatch(tokens, state, syntaxes) {\n    function moveToNextToken() {\n        do {\n            tokenIndex++;\n            token = tokenIndex < tokens.length ? tokens[tokenIndex] : null;\n        } while (token !== null && (token.type === types.WhiteSpace || token.type === types.Comment));\n    }\n\n    function getNextToken(offset) {\n        const nextIndex = tokenIndex + offset;\n\n        return nextIndex < tokens.length ? tokens[nextIndex] : null;\n    }\n\n    function stateSnapshotFromSyntax(nextState, prev) {\n        return {\n            nextState,\n            matchStack,\n            syntaxStack,\n            thenStack,\n            tokenIndex,\n            prev\n        };\n    }\n\n    function pushThenStack(nextState) {\n        thenStack = {\n            nextState,\n            matchStack,\n            syntaxStack,\n            prev: thenStack\n        };\n    }\n\n    function pushElseStack(nextState) {\n        elseStack = stateSnapshotFromSyntax(nextState, elseStack);\n    }\n\n    function addTokenToMatch() {\n        matchStack = {\n            type: TOKEN,\n            syntax: state.syntax,\n            token,\n            prev: matchStack\n        };\n\n        moveToNextToken();\n        syntaxStash = null;\n\n        if (tokenIndex > longestMatch) {\n            longestMatch = tokenIndex;\n        }\n    }\n\n    function openSyntax() {\n        syntaxStack = {\n            syntax: state.syntax,\n            opts: state.syntax.opts || (syntaxStack !== null && syntaxStack.opts) || null,\n            prev: syntaxStack\n        };\n\n        matchStack = {\n            type: OPEN_SYNTAX,\n            syntax: state.syntax,\n            token: matchStack.token,\n            prev: matchStack\n        };\n    }\n\n    function closeSyntax() {\n        if (matchStack.type === OPEN_SYNTAX) {\n            matchStack = matchStack.prev;\n        } else {\n            matchStack = {\n                type: CLOSE_SYNTAX,\n                syntax: syntaxStack.syntax,\n                token: matchStack.token,\n                prev: matchStack\n            };\n        }\n\n        syntaxStack = syntaxStack.prev;\n    }\n\n    let syntaxStack = null;\n    let thenStack = null;\n    let elseStack = null;\n\n    // null – stashing allowed, nothing stashed\n    // false – stashing disabled, nothing stashed\n    // anithing else – fail stashable syntaxes, some syntax stashed\n    let syntaxStash = null;\n\n    let iterationCount = 0; // count iterations and prevent infinite loop\n    let exitReason = null;\n\n    let token = null;\n    let tokenIndex = -1;\n    let longestMatch = 0;\n    let matchStack = {\n        type: STUB,\n        syntax: null,\n        token: null,\n        prev: null\n    };\n\n    moveToNextToken();\n\n    while (exitReason === null && ++iterationCount < ITERATION_LIMIT) {\n        // function mapList(list, fn) {\n        //     const result = [];\n        //     while (list) {\n        //         result.unshift(fn(list));\n        //         list = list.prev;\n        //     }\n        //     return result;\n        // }\n        // console.log('--\\n',\n        //     '#' + iterationCount,\n        //     require('util').inspect({\n        //         match: mapList(matchStack, x => x.type === TOKEN ? x.token && x.token.value : x.syntax ? ({ [OPEN_SYNTAX]: '<', [CLOSE_SYNTAX]: '</' }[x.type] || x.type) + '!' + x.syntax.name : null),\n        //         token: token && token.value,\n        //         tokenIndex,\n        //         syntax: syntax.type + (syntax.id ? ' #' + syntax.id : '')\n        //     }, { depth: null })\n        // );\n        switch (state.type) {\n            case 'Match':\n                if (thenStack === null) {\n                    // turn to MISMATCH when some tokens left unmatched\n                    if (token !== null) {\n                        // doesn't mismatch if just one token left and it's an IE hack\n                        if (tokenIndex !== tokens.length - 1 || (token.value !== '\\\\0' && token.value !== '\\\\9')) {\n                            state = matchGraph.MISMATCH;\n                            break;\n                        }\n                    }\n\n                    // break the main loop, return a result - MATCH\n                    exitReason = EXIT_REASON_MATCH;\n                    break;\n                }\n\n                // go to next syntax (`then` branch)\n                state = thenStack.nextState;\n\n                // check match is not empty\n                if (state === matchGraph.DISALLOW_EMPTY) {\n                    if (thenStack.matchStack === matchStack) {\n                        state = matchGraph.MISMATCH;\n                        break;\n                    } else {\n                        state = matchGraph.MATCH;\n                    }\n                }\n\n                // close syntax if needed\n                while (thenStack.syntaxStack !== syntaxStack) {\n                    closeSyntax();\n                }\n\n                // pop stack\n                thenStack = thenStack.prev;\n                break;\n\n            case 'Mismatch':\n                // when some syntax is stashed\n                if (syntaxStash !== null && syntaxStash !== false) {\n                    // there is no else branches or a branch reduce match stack\n                    if (elseStack === null || tokenIndex > elseStack.tokenIndex) {\n                        // restore state from the stash\n                        elseStack = syntaxStash;\n                        syntaxStash = false; // disable stashing\n                    }\n                } else if (elseStack === null) {\n                    // no else branches -> break the main loop\n                    // return a result - MISMATCH\n                    exitReason = EXIT_REASON_MISMATCH;\n                    break;\n                }\n\n                // go to next syntax (`else` branch)\n                state = elseStack.nextState;\n\n                // restore all the rest stack states\n                thenStack = elseStack.thenStack;\n                syntaxStack = elseStack.syntaxStack;\n                matchStack = elseStack.matchStack;\n                tokenIndex = elseStack.tokenIndex;\n                token = tokenIndex < tokens.length ? tokens[tokenIndex] : null;\n\n                // pop stack\n                elseStack = elseStack.prev;\n                break;\n\n            case 'MatchGraph':\n                state = state.match;\n                break;\n\n            case 'If':\n                // IMPORTANT: else stack push must go first,\n                // since it stores the state of thenStack before changes\n                if (state.else !== matchGraph.MISMATCH) {\n                    pushElseStack(state.else);\n                }\n\n                if (state.then !== matchGraph.MATCH) {\n                    pushThenStack(state.then);\n                }\n\n                state = state.match;\n                break;\n\n            case 'MatchOnce':\n                state = {\n                    type: 'MatchOnceBuffer',\n                    syntax: state,\n                    index: 0,\n                    mask: 0\n                };\n                break;\n\n            case 'MatchOnceBuffer': {\n                const terms = state.syntax.terms;\n\n                if (state.index === terms.length) {\n                    // no matches at all or it's required all terms to be matched\n                    if (state.mask === 0 || state.syntax.all) {\n                        state = matchGraph.MISMATCH;\n                        break;\n                    }\n\n                    // a partial match is ok\n                    state = matchGraph.MATCH;\n                    break;\n                }\n\n                // all terms are matched\n                if (state.mask === (1 << terms.length) - 1) {\n                    state = matchGraph.MATCH;\n                    break;\n                }\n\n                for (; state.index < terms.length; state.index++) {\n                    const matchFlag = 1 << state.index;\n\n                    if ((state.mask & matchFlag) === 0) {\n                        // IMPORTANT: else stack push must go first,\n                        // since it stores the state of thenStack before changes\n                        pushElseStack(state);\n                        pushThenStack({\n                            type: 'AddMatchOnce',\n                            syntax: state.syntax,\n                            mask: state.mask | matchFlag\n                        });\n\n                        // match\n                        state = terms[state.index++];\n                        break;\n                    }\n                }\n                break;\n            }\n\n            case 'AddMatchOnce':\n                state = {\n                    type: 'MatchOnceBuffer',\n                    syntax: state.syntax,\n                    index: 0,\n                    mask: state.mask\n                };\n                break;\n\n            case 'Enum':\n                if (token !== null) {\n                    let name = token.value.toLowerCase();\n\n                    // drop \\0 and \\9 hack from keyword name\n                    if (name.indexOf('\\\\') !== -1) {\n                        name = name.replace(/\\\\[09].*$/, '');\n                    }\n\n                    if (hasOwnProperty.call(state.map, name)) {\n                        state = state.map[name];\n                        break;\n                    }\n                }\n\n                state = matchGraph.MISMATCH;\n                break;\n\n            case 'Generic': {\n                const opts = syntaxStack !== null ? syntaxStack.opts : null;\n                const lastTokenIndex = tokenIndex + Math.floor(state.fn(token, getNextToken, opts));\n\n                if (!isNaN(lastTokenIndex) && lastTokenIndex > tokenIndex) {\n                    while (tokenIndex < lastTokenIndex) {\n                        addTokenToMatch();\n                    }\n\n                    state = matchGraph.MATCH;\n                } else {\n                    state = matchGraph.MISMATCH;\n                }\n\n                break;\n            }\n\n            case 'Type':\n            case 'Property': {\n                const syntaxDict = state.type === 'Type' ? 'types' : 'properties';\n                const dictSyntax = hasOwnProperty.call(syntaxes, syntaxDict) ? syntaxes[syntaxDict][state.name] : null;\n\n                if (!dictSyntax || !dictSyntax.match) {\n                    throw new Error(\n                        'Bad syntax reference: ' +\n                        (state.type === 'Type'\n                            ? '<' + state.name + '>'\n                            : '<\\'' + state.name + '\\'>')\n                    );\n                }\n\n                // stash a syntax for types with low priority\n                if (syntaxStash !== false && token !== null && state.type === 'Type') {\n                    const lowPriorityMatching =\n                        // https://drafts.csswg.org/css-values-4/#custom-idents\n                        // When parsing positionally-ambiguous keywords in a property value, a <custom-ident> production\n                        // can only claim the keyword if no other unfulfilled production can claim it.\n                        (state.name === 'custom-ident' && token.type === types.Ident) ||\n\n                        // https://drafts.csswg.org/css-values-4/#lengths\n                        // ... if a `0` could be parsed as either a <number> or a <length> in a property (such as line-height),\n                        // it must parse as a <number>\n                        (state.name === 'length' && token.value === '0');\n\n                    if (lowPriorityMatching) {\n                        if (syntaxStash === null) {\n                            syntaxStash = stateSnapshotFromSyntax(state, elseStack);\n                        }\n\n                        state = matchGraph.MISMATCH;\n                        break;\n                    }\n                }\n\n                openSyntax();\n                state = dictSyntax.match;\n                break;\n            }\n\n            case 'Keyword': {\n                const name = state.name;\n\n                if (token !== null) {\n                    let keywordName = token.value;\n\n                    // drop \\0 and \\9 hack from keyword name\n                    if (keywordName.indexOf('\\\\') !== -1) {\n                        keywordName = keywordName.replace(/\\\\[09].*$/, '');\n                    }\n\n                    if (areStringsEqualCaseInsensitive(keywordName, name)) {\n                        addTokenToMatch();\n                        state = matchGraph.MATCH;\n                        break;\n                    }\n                }\n\n                state = matchGraph.MISMATCH;\n                break;\n            }\n\n            case 'AtKeyword':\n            case 'Function':\n                if (token !== null && areStringsEqualCaseInsensitive(token.value, state.name)) {\n                    addTokenToMatch();\n                    state = matchGraph.MATCH;\n                    break;\n                }\n\n                state = matchGraph.MISMATCH;\n                break;\n\n            case 'Token':\n                if (token !== null && token.value === state.value) {\n                    addTokenToMatch();\n                    state = matchGraph.MATCH;\n                    break;\n                }\n\n                state = matchGraph.MISMATCH;\n                break;\n\n            case 'Comma':\n                if (token !== null && token.type === types.Comma) {\n                    if (isCommaContextStart(matchStack.token)) {\n                        state = matchGraph.MISMATCH;\n                    } else {\n                        addTokenToMatch();\n                        state = isCommaContextEnd(token) ? matchGraph.MISMATCH : matchGraph.MATCH;\n                    }\n                } else {\n                    state = isCommaContextStart(matchStack.token) || isCommaContextEnd(token) ? matchGraph.MATCH : matchGraph.MISMATCH;\n                }\n\n                break;\n\n            case 'String':\n                let string = '';\n                let lastTokenIndex = tokenIndex;\n\n                for (; lastTokenIndex < tokens.length && string.length < state.value.length; lastTokenIndex++) {\n                    string += tokens[lastTokenIndex].value;\n                }\n\n                if (areStringsEqualCaseInsensitive(string, state.value)) {\n                    while (tokenIndex < lastTokenIndex) {\n                        addTokenToMatch();\n                    }\n\n                    state = matchGraph.MATCH;\n                } else {\n                    state = matchGraph.MISMATCH;\n                }\n\n                break;\n\n            default:\n                throw new Error('Unknown node type: ' + state.type);\n        }\n    }\n\n    switch (exitReason) {\n        case null:\n            console.warn('[csstree-match] BREAK after ' + ITERATION_LIMIT + ' iterations');\n            exitReason = EXIT_REASON_ITERATION_LIMIT;\n            matchStack = null;\n            break;\n\n        case EXIT_REASON_MATCH:\n            while (syntaxStack !== null) {\n                closeSyntax();\n            }\n            break;\n\n        default:\n            matchStack = null;\n    }\n\n    return {\n        tokens,\n        reason: exitReason,\n        iterations: iterationCount,\n        match: matchStack,\n        longestMatch\n    };\n}\n\nfunction matchAsList(tokens, matchGraph, syntaxes) {\n    const matchResult = internalMatch(tokens, matchGraph, syntaxes || {});\n\n    if (matchResult.match !== null) {\n        let item = reverseList(matchResult.match).prev;\n\n        matchResult.match = [];\n\n        while (item !== null) {\n            switch (item.type) {\n                case OPEN_SYNTAX:\n                case CLOSE_SYNTAX:\n                    matchResult.match.push({\n                        type: item.type,\n                        syntax: item.syntax\n                    });\n                    break;\n\n                default:\n                    matchResult.match.push({\n                        token: item.token.value,\n                        node: item.token.node\n                    });\n                    break;\n            }\n\n            item = item.prev;\n        }\n    }\n\n    return matchResult;\n}\n\nfunction matchAsTree(tokens, matchGraph, syntaxes) {\n    const matchResult = internalMatch(tokens, matchGraph, syntaxes || {});\n\n    if (matchResult.match === null) {\n        return matchResult;\n    }\n\n    let item = matchResult.match;\n    let host = matchResult.match = {\n        syntax: matchGraph.syntax || null,\n        match: []\n    };\n    const hostStack = [host];\n\n    // revert a list and start with 2nd item since 1st is a stub item\n    item = reverseList(item).prev;\n\n    // build a tree\n    while (item !== null) {\n        switch (item.type) {\n            case OPEN_SYNTAX:\n                host.match.push(host = {\n                    syntax: item.syntax,\n                    match: []\n                });\n                hostStack.push(host);\n                break;\n\n            case CLOSE_SYNTAX:\n                hostStack.pop();\n                host = hostStack[hostStack.length - 1];\n                break;\n\n            default:\n                host.match.push({\n                    syntax: item.syntax || null,\n                    token: item.token.value,\n                    node: item.token.node\n                });\n        }\n\n        item = item.prev;\n    }\n\n    return matchResult;\n}\n\nexports.matchAsList = matchAsList;\nexports.matchAsTree = matchAsTree;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///54818\n")},86355:(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval("\n\nconst index = __webpack_require__(68328);\n\nconst astToTokens = {\n    decorator(handlers) {\n        const tokens = [];\n        let curNode = null;\n\n        return {\n            ...handlers,\n            node(node) {\n                const tmp = curNode;\n                curNode = node;\n                handlers.node.call(this, node);\n                curNode = tmp;\n            },\n            emit(value, type, auto) {\n                tokens.push({\n                    type,\n                    value,\n                    node: auto ? null : curNode\n                });\n            },\n            result() {\n                return tokens;\n            }\n        };\n    }\n};\n\nfunction stringToTokens(str) {\n    const tokens = [];\n\n    index.tokenize(str, (type, start, end) =>\n        tokens.push({\n            type,\n            value: str.slice(start, end),\n            node: null\n        })\n    );\n\n    return tokens;\n}\n\nfunction prepareTokens(value, syntax) {\n    if (typeof value === 'string') {\n        return stringToTokens(value);\n    }\n\n    return syntax.generate(value, astToTokens);\n}\n\nmodule.exports = prepareTokens;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiODYzNTUuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsY0FBYyxtQkFBTyxDQUFDLEtBQXdCOztBQUU5QztBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQSIsInNvdXJjZXMiOlsid2VicGFjazovL2Jsb2NrYml0ZS8uL25vZGVfbW9kdWxlcy9jc3NvL25vZGVfbW9kdWxlcy9jc3MtdHJlZS9janMvbGV4ZXIvcHJlcGFyZS10b2tlbnMuY2pzP2IyODciXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBpbmRleCA9IHJlcXVpcmUoJy4uL3Rva2VuaXplci9pbmRleC5janMnKTtcblxuY29uc3QgYXN0VG9Ub2tlbnMgPSB7XG4gICAgZGVjb3JhdG9yKGhhbmRsZXJzKSB7XG4gICAgICAgIGNvbnN0IHRva2VucyA9IFtdO1xuICAgICAgICBsZXQgY3VyTm9kZSA9IG51bGw7XG5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIC4uLmhhbmRsZXJzLFxuICAgICAgICAgICAgbm9kZShub2RlKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgdG1wID0gY3VyTm9kZTtcbiAgICAgICAgICAgICAgICBjdXJOb2RlID0gbm9kZTtcbiAgICAgICAgICAgICAgICBoYW5kbGVycy5ub2RlLmNhbGwodGhpcywgbm9kZSk7XG4gICAgICAgICAgICAgICAgY3VyTm9kZSA9IHRtcDtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBlbWl0KHZhbHVlLCB0eXBlLCBhdXRvKSB7XG4gICAgICAgICAgICAgICAgdG9rZW5zLnB1c2goe1xuICAgICAgICAgICAgICAgICAgICB0eXBlLFxuICAgICAgICAgICAgICAgICAgICB2YWx1ZSxcbiAgICAgICAgICAgICAgICAgICAgbm9kZTogYXV0byA/IG51bGwgOiBjdXJOb2RlXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcmVzdWx0KCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0b2tlbnM7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgfVxufTtcblxuZnVuY3Rpb24gc3RyaW5nVG9Ub2tlbnMoc3RyKSB7XG4gICAgY29uc3QgdG9rZW5zID0gW107XG5cbiAgICBpbmRleC50b2tlbml6ZShzdHIsICh0eXBlLCBzdGFydCwgZW5kKSA9PlxuICAgICAgICB0b2tlbnMucHVzaCh7XG4gICAgICAgICAgICB0eXBlLFxuICAgICAgICAgICAgdmFsdWU6IHN0ci5zbGljZShzdGFydCwgZW5kKSxcbiAgICAgICAgICAgIG5vZGU6IG51bGxcbiAgICAgICAgfSlcbiAgICApO1xuXG4gICAgcmV0dXJuIHRva2Vucztcbn1cblxuZnVuY3Rpb24gcHJlcGFyZVRva2Vucyh2YWx1ZSwgc3ludGF4KSB7XG4gICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgcmV0dXJuIHN0cmluZ1RvVG9rZW5zKHZhbHVlKTtcbiAgICB9XG5cbiAgICByZXR1cm4gc3ludGF4LmdlbmVyYXRlKHZhbHVlLCBhc3RUb1Rva2Vucyk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gcHJlcGFyZVRva2VucztcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///86355\n")},11187:(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";eval("\n\nconst List = __webpack_require__(28572);\n\nfunction getFirstMatchNode(matchNode) {\n    if ('node' in matchNode) {\n        return matchNode.node;\n    }\n\n    return getFirstMatchNode(matchNode.match[0]);\n}\n\nfunction getLastMatchNode(matchNode) {\n    if ('node' in matchNode) {\n        return matchNode.node;\n    }\n\n    return getLastMatchNode(matchNode.match[matchNode.match.length - 1]);\n}\n\nfunction matchFragments(lexer, ast, match, type, name) {\n    function findFragments(matchNode) {\n        if (matchNode.syntax !== null &&\n            matchNode.syntax.type === type &&\n            matchNode.syntax.name === name) {\n            const start = getFirstMatchNode(matchNode);\n            const end = getLastMatchNode(matchNode);\n\n            lexer.syntax.walk(ast, function(node, item, list) {\n                if (node === start) {\n                    const nodes = new List.List();\n\n                    do {\n                        nodes.appendData(item.data);\n\n                        if (item.data === end) {\n                            break;\n                        }\n\n                        item = item.next;\n                    } while (item !== null);\n\n                    fragments.push({\n                        parent: list,\n                        nodes\n                    });\n                }\n            });\n        }\n\n        if (Array.isArray(matchNode.match)) {\n            matchNode.match.forEach(findFragments);\n        }\n    }\n\n    const fragments = [];\n\n    if (match.matched !== null) {\n        findFragments(match.matched);\n    }\n\n    return fragments;\n}\n\nexports.matchFragments = matchFragments;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTExODcuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsYUFBYSxtQkFBTyxDQUFDLEtBQW1COztBQUV4QztBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0Esc0JBQXNCOztBQUV0QjtBQUNBO0FBQ0E7QUFDQSxxQkFBcUI7QUFDckI7QUFDQSxhQUFhO0FBQ2I7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUEsc0JBQXNCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYmxvY2tiaXRlLy4vbm9kZV9tb2R1bGVzL2Nzc28vbm9kZV9tb2R1bGVzL2Nzcy10cmVlL2Nqcy9sZXhlci9zZWFyY2guY2pzPzViMTYiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBMaXN0ID0gcmVxdWlyZSgnLi4vdXRpbHMvTGlzdC5janMnKTtcblxuZnVuY3Rpb24gZ2V0Rmlyc3RNYXRjaE5vZGUobWF0Y2hOb2RlKSB7XG4gICAgaWYgKCdub2RlJyBpbiBtYXRjaE5vZGUpIHtcbiAgICAgICAgcmV0dXJuIG1hdGNoTm9kZS5ub2RlO1xuICAgIH1cblxuICAgIHJldHVybiBnZXRGaXJzdE1hdGNoTm9kZShtYXRjaE5vZGUubWF0Y2hbMF0pO1xufVxuXG5mdW5jdGlvbiBnZXRMYXN0TWF0Y2hOb2RlKG1hdGNoTm9kZSkge1xuICAgIGlmICgnbm9kZScgaW4gbWF0Y2hOb2RlKSB7XG4gICAgICAgIHJldHVybiBtYXRjaE5vZGUubm9kZTtcbiAgICB9XG5cbiAgICByZXR1cm4gZ2V0TGFzdE1hdGNoTm9kZShtYXRjaE5vZGUubWF0Y2hbbWF0Y2hOb2RlLm1hdGNoLmxlbmd0aCAtIDFdKTtcbn1cblxuZnVuY3Rpb24gbWF0Y2hGcmFnbWVudHMobGV4ZXIsIGFzdCwgbWF0Y2gsIHR5cGUsIG5hbWUpIHtcbiAgICBmdW5jdGlvbiBmaW5kRnJhZ21lbnRzKG1hdGNoTm9kZSkge1xuICAgICAgICBpZiAobWF0Y2hOb2RlLnN5bnRheCAhPT0gbnVsbCAmJlxuICAgICAgICAgICAgbWF0Y2hOb2RlLnN5bnRheC50eXBlID09PSB0eXBlICYmXG4gICAgICAgICAgICBtYXRjaE5vZGUuc3ludGF4Lm5hbWUgPT09IG5hbWUpIHtcbiAgICAgICAgICAgIGNvbnN0IHN0YXJ0ID0gZ2V0Rmlyc3RNYXRjaE5vZGUobWF0Y2hOb2RlKTtcbiAgICAgICAgICAgIGNvbnN0IGVuZCA9IGdldExhc3RNYXRjaE5vZGUobWF0Y2hOb2RlKTtcblxuICAgICAgICAgICAgbGV4ZXIuc3ludGF4LndhbGsoYXN0LCBmdW5jdGlvbihub2RlLCBpdGVtLCBsaXN0KSB7XG4gICAgICAgICAgICAgICAgaWYgKG5vZGUgPT09IHN0YXJ0KSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IG5vZGVzID0gbmV3IExpc3QuTGlzdCgpO1xuXG4gICAgICAgICAgICAgICAgICAgIGRvIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5vZGVzLmFwcGVuZERhdGEoaXRlbS5kYXRhKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGl0ZW0uZGF0YSA9PT0gZW5kKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW0gPSBpdGVtLm5leHQ7XG4gICAgICAgICAgICAgICAgICAgIH0gd2hpbGUgKGl0ZW0gIT09IG51bGwpO1xuXG4gICAgICAgICAgICAgICAgICAgIGZyYWdtZW50cy5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhcmVudDogbGlzdCxcbiAgICAgICAgICAgICAgICAgICAgICAgIG5vZGVzXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkobWF0Y2hOb2RlLm1hdGNoKSkge1xuICAgICAgICAgICAgbWF0Y2hOb2RlLm1hdGNoLmZvckVhY2goZmluZEZyYWdtZW50cyk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBjb25zdCBmcmFnbWVudHMgPSBbXTtcblxuICAgIGlmIChtYXRjaC5tYXRjaGVkICE9PSBudWxsKSB7XG4gICAgICAgIGZpbmRGcmFnbWVudHMobWF0Y2gubWF0Y2hlZCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZyYWdtZW50cztcbn1cblxuZXhwb3J0cy5tYXRjaEZyYWdtZW50cyA9IG1hdGNoRnJhZ21lbnRzO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///11187\n")},91698:(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";eval("\n\nconst List = __webpack_require__(28572);\n\nconst { hasOwnProperty } = Object.prototype;\n\nfunction isValidNumber(value) {\n    // Number.isInteger(value) && value >= 0\n    return (\n        typeof value === 'number' &&\n        isFinite(value) &&\n        Math.floor(value) === value &&\n        value >= 0\n    );\n}\n\nfunction isValidLocation(loc) {\n    return (\n        Boolean(loc) &&\n        isValidNumber(loc.offset) &&\n        isValidNumber(loc.line) &&\n        isValidNumber(loc.column)\n    );\n}\n\nfunction createNodeStructureChecker(type, fields) {\n    return function checkNode(node, warn) {\n        if (!node || node.constructor !== Object) {\n            return warn(node, 'Type of node should be an Object');\n        }\n\n        for (let key in node) {\n            let valid = true;\n\n            if (hasOwnProperty.call(node, key) === false) {\n                continue;\n            }\n\n            if (key === 'type') {\n                if (node.type !== type) {\n                    warn(node, 'Wrong node type `' + node.type + '`, expected `' + type + '`');\n                }\n            } else if (key === 'loc') {\n                if (node.loc === null) {\n                    continue;\n                } else if (node.loc && node.loc.constructor === Object) {\n                    if (typeof node.loc.source !== 'string') {\n                        key += '.source';\n                    } else if (!isValidLocation(node.loc.start)) {\n                        key += '.start';\n                    } else if (!isValidLocation(node.loc.end)) {\n                        key += '.end';\n                    } else {\n                        continue;\n                    }\n                }\n\n                valid = false;\n            } else if (fields.hasOwnProperty(key)) {\n                valid = false;\n\n                for (let i = 0; !valid && i < fields[key].length; i++) {\n                    const fieldType = fields[key][i];\n\n                    switch (fieldType) {\n                        case String:\n                            valid = typeof node[key] === 'string';\n                            break;\n\n                        case Boolean:\n                            valid = typeof node[key] === 'boolean';\n                            break;\n\n                        case null:\n                            valid = node[key] === null;\n                            break;\n\n                        default:\n                            if (typeof fieldType === 'string') {\n                                valid = node[key] && node[key].type === fieldType;\n                            } else if (Array.isArray(fieldType)) {\n                                valid = node[key] instanceof List.List;\n                            }\n                    }\n                }\n            } else {\n                warn(node, 'Unknown field `' + key + '` for ' + type + ' node type');\n            }\n\n            if (!valid) {\n                warn(node, 'Bad value for `' + type + '.' + key + '`');\n            }\n        }\n\n        for (const key in fields) {\n            if (hasOwnProperty.call(fields, key) &&\n                hasOwnProperty.call(node, key) === false) {\n                warn(node, 'Field `' + type + '.' + key + '` is missed');\n            }\n        }\n    };\n}\n\nfunction processStructure(name, nodeType) {\n    const structure = nodeType.structure;\n    const fields = {\n        type: String,\n        loc: true\n    };\n    const docs = {\n        type: '\"' + name + '\"'\n    };\n\n    for (const key in structure) {\n        if (hasOwnProperty.call(structure, key) === false) {\n            continue;\n        }\n\n        const docsTypes = [];\n        const fieldTypes = fields[key] = Array.isArray(structure[key])\n            ? structure[key].slice()\n            : [structure[key]];\n\n        for (let i = 0; i < fieldTypes.length; i++) {\n            const fieldType = fieldTypes[i];\n            if (fieldType === String || fieldType === Boolean) {\n                docsTypes.push(fieldType.name);\n            } else if (fieldType === null) {\n                docsTypes.push('null');\n            } else if (typeof fieldType === 'string') {\n                docsTypes.push('<' + fieldType + '>');\n            } else if (Array.isArray(fieldType)) {\n                docsTypes.push('List'); // TODO: use type enum\n            } else {\n                throw new Error('Wrong value `' + fieldType + '` in `' + name + '.' + key + '` structure definition');\n            }\n        }\n\n        docs[key] = docsTypes.join(' | ');\n    }\n\n    return {\n        docs,\n        check: createNodeStructureChecker(name, fields)\n    };\n}\n\nfunction getStructureFromConfig(config) {\n    const structure = {};\n\n    if (config.node) {\n        for (const name in config.node) {\n            if (hasOwnProperty.call(config.node, name)) {\n                const nodeType = config.node[name];\n\n                if (nodeType.structure) {\n                    structure[name] = processStructure(name, nodeType);\n                } else {\n                    throw new Error('Missed `structure` field in `' + name + '` node type definition');\n                }\n            }\n        }\n    }\n\n    return structure;\n}\n\nexports.getStructureFromConfig = getStructureFromConfig;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///91698\n")},97418:(__unused_webpack_module,exports)=>{"use strict";eval("\n\nfunction getTrace(node) {\n    function shouldPutToTrace(syntax) {\n        if (syntax === null) {\n            return false;\n        }\n\n        return (\n            syntax.type === 'Type' ||\n            syntax.type === 'Property' ||\n            syntax.type === 'Keyword'\n        );\n    }\n\n    function hasMatch(matchNode) {\n        if (Array.isArray(matchNode.match)) {\n            // use for-loop for better perfomance\n            for (let i = 0; i < matchNode.match.length; i++) {\n                if (hasMatch(matchNode.match[i])) {\n                    if (shouldPutToTrace(matchNode.syntax)) {\n                        result.unshift(matchNode.syntax);\n                    }\n\n                    return true;\n                }\n            }\n        } else if (matchNode.node === node) {\n            result = shouldPutToTrace(matchNode.syntax)\n                ? [matchNode.syntax]\n                : [];\n\n            return true;\n        }\n\n        return false;\n    }\n\n    let result = null;\n\n    if (this.matched !== null) {\n        hasMatch(this.matched);\n    }\n\n    return result;\n}\n\nfunction isType(node, type) {\n    return testNode(this, node, match => match.type === 'Type' && match.name === type);\n}\n\nfunction isProperty(node, property) {\n    return testNode(this, node, match => match.type === 'Property' && match.name === property);\n}\n\nfunction isKeyword(node) {\n    return testNode(this, node, match => match.type === 'Keyword');\n}\n\nfunction testNode(match, node, fn) {\n    const trace = getTrace.call(match, node);\n\n    if (trace === null) {\n        return false;\n    }\n\n    return trace.some(fn);\n}\n\nexports.getTrace = getTrace;\nexports.isKeyword = isKeyword;\nexports.isProperty = isProperty;\nexports.isType = isType;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOTc0MTguanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWI7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsNEJBQTRCLDRCQUE0QjtBQUN4RDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBLGdCQUFnQjtBQUNoQixpQkFBaUI7QUFDakIsa0JBQWtCO0FBQ2xCLGNBQWMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ibG9ja2JpdGUvLi9ub2RlX21vZHVsZXMvY3Nzby9ub2RlX21vZHVsZXMvY3NzLXRyZWUvY2pzL2xleGVyL3RyYWNlLmNqcz81MjhiIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuZnVuY3Rpb24gZ2V0VHJhY2Uobm9kZSkge1xuICAgIGZ1bmN0aW9uIHNob3VsZFB1dFRvVHJhY2Uoc3ludGF4KSB7XG4gICAgICAgIGlmIChzeW50YXggPT09IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICBzeW50YXgudHlwZSA9PT0gJ1R5cGUnIHx8XG4gICAgICAgICAgICBzeW50YXgudHlwZSA9PT0gJ1Byb3BlcnR5JyB8fFxuICAgICAgICAgICAgc3ludGF4LnR5cGUgPT09ICdLZXl3b3JkJ1xuICAgICAgICApO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGhhc01hdGNoKG1hdGNoTm9kZSkge1xuICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShtYXRjaE5vZGUubWF0Y2gpKSB7XG4gICAgICAgICAgICAvLyB1c2UgZm9yLWxvb3AgZm9yIGJldHRlciBwZXJmb21hbmNlXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IG1hdGNoTm9kZS5tYXRjaC5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIGlmIChoYXNNYXRjaChtYXRjaE5vZGUubWF0Y2hbaV0pKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChzaG91bGRQdXRUb1RyYWNlKG1hdGNoTm9kZS5zeW50YXgpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQudW5zaGlmdChtYXRjaE5vZGUuc3ludGF4KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmIChtYXRjaE5vZGUubm9kZSA9PT0gbm9kZSkge1xuICAgICAgICAgICAgcmVzdWx0ID0gc2hvdWxkUHV0VG9UcmFjZShtYXRjaE5vZGUuc3ludGF4KVxuICAgICAgICAgICAgICAgID8gW21hdGNoTm9kZS5zeW50YXhdXG4gICAgICAgICAgICAgICAgOiBbXTtcblxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgbGV0IHJlc3VsdCA9IG51bGw7XG5cbiAgICBpZiAodGhpcy5tYXRjaGVkICE9PSBudWxsKSB7XG4gICAgICAgIGhhc01hdGNoKHRoaXMubWF0Y2hlZCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZnVuY3Rpb24gaXNUeXBlKG5vZGUsIHR5cGUpIHtcbiAgICByZXR1cm4gdGVzdE5vZGUodGhpcywgbm9kZSwgbWF0Y2ggPT4gbWF0Y2gudHlwZSA9PT0gJ1R5cGUnICYmIG1hdGNoLm5hbWUgPT09IHR5cGUpO1xufVxuXG5mdW5jdGlvbiBpc1Byb3BlcnR5KG5vZGUsIHByb3BlcnR5KSB7XG4gICAgcmV0dXJuIHRlc3ROb2RlKHRoaXMsIG5vZGUsIG1hdGNoID0+IG1hdGNoLnR5cGUgPT09ICdQcm9wZXJ0eScgJiYgbWF0Y2gubmFtZSA9PT0gcHJvcGVydHkpO1xufVxuXG5mdW5jdGlvbiBpc0tleXdvcmQobm9kZSkge1xuICAgIHJldHVybiB0ZXN0Tm9kZSh0aGlzLCBub2RlLCBtYXRjaCA9PiBtYXRjaC50eXBlID09PSAnS2V5d29yZCcpO1xufVxuXG5mdW5jdGlvbiB0ZXN0Tm9kZShtYXRjaCwgbm9kZSwgZm4pIHtcbiAgICBjb25zdCB0cmFjZSA9IGdldFRyYWNlLmNhbGwobWF0Y2gsIG5vZGUpO1xuXG4gICAgaWYgKHRyYWNlID09PSBudWxsKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICByZXR1cm4gdHJhY2Uuc29tZShmbik7XG59XG5cbmV4cG9ydHMuZ2V0VHJhY2UgPSBnZXRUcmFjZTtcbmV4cG9ydHMuaXNLZXl3b3JkID0gaXNLZXl3b3JkO1xuZXhwb3J0cy5pc1Byb3BlcnR5ID0gaXNQcm9wZXJ0eTtcbmV4cG9ydHMuaXNUeXBlID0gaXNUeXBlO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///97418\n")},50443:(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";eval("\n\nconst createCustomError = __webpack_require__(79161);\n\nconst MAX_LINE_LENGTH = 100;\nconst OFFSET_CORRECTION = 60;\nconst TAB_REPLACEMENT = '    ';\n\nfunction sourceFragment({ source, line, column }, extraLines) {\n    function processLines(start, end) {\n        return lines\n            .slice(start, end)\n            .map((line, idx) =>\n                String(start + idx + 1).padStart(maxNumLength) + ' |' + line\n            ).join('\\n');\n    }\n\n    const lines = source.split(/\\r\\n?|\\n|\\f/);\n    const startLine = Math.max(1, line - extraLines) - 1;\n    const endLine = Math.min(line + extraLines, lines.length + 1);\n    const maxNumLength = Math.max(4, String(endLine).length) + 1;\n    let cutLeft = 0;\n\n    // column correction according to replaced tab before column\n    column += (TAB_REPLACEMENT.length - 1) * (lines[line - 1].substr(0, column - 1).match(/\\t/g) || []).length;\n\n    if (column > MAX_LINE_LENGTH) {\n        cutLeft = column - OFFSET_CORRECTION + 3;\n        column = OFFSET_CORRECTION - 2;\n    }\n\n    for (let i = startLine; i <= endLine; i++) {\n        if (i >= 0 && i < lines.length) {\n            lines[i] = lines[i].replace(/\\t/g, TAB_REPLACEMENT);\n            lines[i] =\n                (cutLeft > 0 && lines[i].length > cutLeft ? '\\u2026' : '') +\n                lines[i].substr(cutLeft, MAX_LINE_LENGTH - 2) +\n                (lines[i].length > cutLeft + MAX_LINE_LENGTH - 1 ? '\\u2026' : '');\n        }\n    }\n\n    return [\n        processLines(startLine, line),\n        new Array(column + maxNumLength + 2).join('-') + '^',\n        processLines(line, endLine)\n    ].filter(Boolean).join('\\n');\n}\n\nfunction SyntaxError(message, source, offset, line, column) {\n    const error = Object.assign(createCustomError.createCustomError('SyntaxError', message), {\n        source,\n        offset,\n        line,\n        column,\n        sourceFragment(extraLines) {\n            return sourceFragment({ source, line, column }, isNaN(extraLines) ? 0 : extraLines);\n        },\n        get formattedMessage() {\n            return (\n                `Parse error: ${message}\\n` +\n                sourceFragment({ source, line, column }, 2)\n            );\n        }\n    });\n\n    return error;\n}\n\nexports.SyntaxError = SyntaxError;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNTA0NDMuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsMEJBQTBCLG1CQUFPLENBQUMsS0FBa0M7O0FBRXBFO0FBQ0E7QUFDQTs7QUFFQSwwQkFBMEIsc0JBQXNCO0FBQ2hEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSw0QkFBNEIsY0FBYztBQUMxQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9DQUFvQyxzQkFBc0I7QUFDMUQsU0FBUztBQUNUO0FBQ0E7QUFDQSxnQ0FBZ0MsUUFBUTtBQUN4QyxpQ0FBaUMsc0JBQXNCO0FBQ3ZEO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7O0FBRUEsbUJBQW1CIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYmxvY2tiaXRlLy4vbm9kZV9tb2R1bGVzL2Nzc28vbm9kZV9tb2R1bGVzL2Nzcy10cmVlL2Nqcy9wYXJzZXIvU3ludGF4RXJyb3IuY2pzPzJkY2IiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBjcmVhdGVDdXN0b21FcnJvciA9IHJlcXVpcmUoJy4uL3V0aWxzL2NyZWF0ZS1jdXN0b20tZXJyb3IuY2pzJyk7XG5cbmNvbnN0IE1BWF9MSU5FX0xFTkdUSCA9IDEwMDtcbmNvbnN0IE9GRlNFVF9DT1JSRUNUSU9OID0gNjA7XG5jb25zdCBUQUJfUkVQTEFDRU1FTlQgPSAnICAgICc7XG5cbmZ1bmN0aW9uIHNvdXJjZUZyYWdtZW50KHsgc291cmNlLCBsaW5lLCBjb2x1bW4gfSwgZXh0cmFMaW5lcykge1xuICAgIGZ1bmN0aW9uIHByb2Nlc3NMaW5lcyhzdGFydCwgZW5kKSB7XG4gICAgICAgIHJldHVybiBsaW5lc1xuICAgICAgICAgICAgLnNsaWNlKHN0YXJ0LCBlbmQpXG4gICAgICAgICAgICAubWFwKChsaW5lLCBpZHgpID0+XG4gICAgICAgICAgICAgICAgU3RyaW5nKHN0YXJ0ICsgaWR4ICsgMSkucGFkU3RhcnQobWF4TnVtTGVuZ3RoKSArICcgfCcgKyBsaW5lXG4gICAgICAgICAgICApLmpvaW4oJ1xcbicpO1xuICAgIH1cblxuICAgIGNvbnN0IGxpbmVzID0gc291cmNlLnNwbGl0KC9cXHJcXG4/fFxcbnxcXGYvKTtcbiAgICBjb25zdCBzdGFydExpbmUgPSBNYXRoLm1heCgxLCBsaW5lIC0gZXh0cmFMaW5lcykgLSAxO1xuICAgIGNvbnN0IGVuZExpbmUgPSBNYXRoLm1pbihsaW5lICsgZXh0cmFMaW5lcywgbGluZXMubGVuZ3RoICsgMSk7XG4gICAgY29uc3QgbWF4TnVtTGVuZ3RoID0gTWF0aC5tYXgoNCwgU3RyaW5nKGVuZExpbmUpLmxlbmd0aCkgKyAxO1xuICAgIGxldCBjdXRMZWZ0ID0gMDtcblxuICAgIC8vIGNvbHVtbiBjb3JyZWN0aW9uIGFjY29yZGluZyB0byByZXBsYWNlZCB0YWIgYmVmb3JlIGNvbHVtblxuICAgIGNvbHVtbiArPSAoVEFCX1JFUExBQ0VNRU5ULmxlbmd0aCAtIDEpICogKGxpbmVzW2xpbmUgLSAxXS5zdWJzdHIoMCwgY29sdW1uIC0gMSkubWF0Y2goL1xcdC9nKSB8fCBbXSkubGVuZ3RoO1xuXG4gICAgaWYgKGNvbHVtbiA+IE1BWF9MSU5FX0xFTkdUSCkge1xuICAgICAgICBjdXRMZWZ0ID0gY29sdW1uIC0gT0ZGU0VUX0NPUlJFQ1RJT04gKyAzO1xuICAgICAgICBjb2x1bW4gPSBPRkZTRVRfQ09SUkVDVElPTiAtIDI7XG4gICAgfVxuXG4gICAgZm9yIChsZXQgaSA9IHN0YXJ0TGluZTsgaSA8PSBlbmRMaW5lOyBpKyspIHtcbiAgICAgICAgaWYgKGkgPj0gMCAmJiBpIDwgbGluZXMubGVuZ3RoKSB7XG4gICAgICAgICAgICBsaW5lc1tpXSA9IGxpbmVzW2ldLnJlcGxhY2UoL1xcdC9nLCBUQUJfUkVQTEFDRU1FTlQpO1xuICAgICAgICAgICAgbGluZXNbaV0gPVxuICAgICAgICAgICAgICAgIChjdXRMZWZ0ID4gMCAmJiBsaW5lc1tpXS5sZW5ndGggPiBjdXRMZWZ0ID8gJ1xcdTIwMjYnIDogJycpICtcbiAgICAgICAgICAgICAgICBsaW5lc1tpXS5zdWJzdHIoY3V0TGVmdCwgTUFYX0xJTkVfTEVOR1RIIC0gMikgK1xuICAgICAgICAgICAgICAgIChsaW5lc1tpXS5sZW5ndGggPiBjdXRMZWZ0ICsgTUFYX0xJTkVfTEVOR1RIIC0gMSA/ICdcXHUyMDI2JyA6ICcnKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBbXG4gICAgICAgIHByb2Nlc3NMaW5lcyhzdGFydExpbmUsIGxpbmUpLFxuICAgICAgICBuZXcgQXJyYXkoY29sdW1uICsgbWF4TnVtTGVuZ3RoICsgMikuam9pbignLScpICsgJ14nLFxuICAgICAgICBwcm9jZXNzTGluZXMobGluZSwgZW5kTGluZSlcbiAgICBdLmZpbHRlcihCb29sZWFuKS5qb2luKCdcXG4nKTtcbn1cblxuZnVuY3Rpb24gU3ludGF4RXJyb3IobWVzc2FnZSwgc291cmNlLCBvZmZzZXQsIGxpbmUsIGNvbHVtbikge1xuICAgIGNvbnN0IGVycm9yID0gT2JqZWN0LmFzc2lnbihjcmVhdGVDdXN0b21FcnJvci5jcmVhdGVDdXN0b21FcnJvcignU3ludGF4RXJyb3InLCBtZXNzYWdlKSwge1xuICAgICAgICBzb3VyY2UsXG4gICAgICAgIG9mZnNldCxcbiAgICAgICAgbGluZSxcbiAgICAgICAgY29sdW1uLFxuICAgICAgICBzb3VyY2VGcmFnbWVudChleHRyYUxpbmVzKSB7XG4gICAgICAgICAgICByZXR1cm4gc291cmNlRnJhZ21lbnQoeyBzb3VyY2UsIGxpbmUsIGNvbHVtbiB9LCBpc05hTihleHRyYUxpbmVzKSA/IDAgOiBleHRyYUxpbmVzKTtcbiAgICAgICAgfSxcbiAgICAgICAgZ2V0IGZvcm1hdHRlZE1lc3NhZ2UoKSB7XG4gICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICAgIGBQYXJzZSBlcnJvcjogJHttZXNzYWdlfVxcbmAgK1xuICAgICAgICAgICAgICAgIHNvdXJjZUZyYWdtZW50KHsgc291cmNlLCBsaW5lLCBjb2x1bW4gfSwgMilcbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIHJldHVybiBlcnJvcjtcbn1cblxuZXhwb3J0cy5TeW50YXhFcnJvciA9IFN5bnRheEVycm9yO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///50443\n")},37146:(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";eval("\n\nconst List = __webpack_require__(28572);\nconst SyntaxError = __webpack_require__(50443);\nconst index = __webpack_require__(68328);\nconst sequence = __webpack_require__(35929);\nconst OffsetToLocation = __webpack_require__(24587);\nconst TokenStream = __webpack_require__(68411);\nconst utils = __webpack_require__(79955);\nconst types = __webpack_require__(78783);\nconst names = __webpack_require__(49404);\n\nconst NOOP = () => {};\nconst EXCLAMATIONMARK = 0x0021;  // U+0021 EXCLAMATION MARK (!)\nconst NUMBERSIGN = 0x0023;       // U+0023 NUMBER SIGN (#)\nconst SEMICOLON = 0x003B;        // U+003B SEMICOLON (;)\nconst LEFTCURLYBRACKET = 0x007B; // U+007B LEFT CURLY BRACKET ({)\nconst NULL = 0;\n\nfunction createParseContext(name) {\n    return function() {\n        return this[name]();\n    };\n}\n\nfunction fetchParseValues(dict) {\n    const result = Object.create(null);\n\n    for (const name in dict) {\n        const item = dict[name];\n        const fn = item.parse || item;\n\n        if (fn) {\n            result[name] = fn;\n        }\n    }\n\n    return result;\n}\n\nfunction processConfig(config) {\n    const parseConfig = {\n        context: Object.create(null),\n        scope: Object.assign(Object.create(null), config.scope),\n        atrule: fetchParseValues(config.atrule),\n        pseudo: fetchParseValues(config.pseudo),\n        node: fetchParseValues(config.node)\n    };\n\n    for (const name in config.parseContext) {\n        switch (typeof config.parseContext[name]) {\n            case 'function':\n                parseConfig.context[name] = config.parseContext[name];\n                break;\n\n            case 'string':\n                parseConfig.context[name] = createParseContext(config.parseContext[name]);\n                break;\n        }\n    }\n\n    return {\n        config: parseConfig,\n        ...parseConfig,\n        ...parseConfig.node\n    };\n}\n\nfunction createParser(config) {\n    let source = '';\n    let filename = '<unknown>';\n    let needPositions = false;\n    let onParseError = NOOP;\n    let onParseErrorThrow = false;\n\n    const locationMap = new OffsetToLocation.OffsetToLocation();\n    const parser = Object.assign(new TokenStream.TokenStream(), processConfig(config || {}), {\n        parseAtrulePrelude: true,\n        parseRulePrelude: true,\n        parseValue: true,\n        parseCustomProperty: false,\n\n        readSequence: sequence.readSequence,\n\n        consumeUntilBalanceEnd: () => 0,\n        consumeUntilLeftCurlyBracket(code) {\n            return code === LEFTCURLYBRACKET ? 1 : 0;\n        },\n        consumeUntilLeftCurlyBracketOrSemicolon(code) {\n            return code === LEFTCURLYBRACKET || code === SEMICOLON ? 1 : 0;\n        },\n        consumeUntilExclamationMarkOrSemicolon(code) {\n            return code === EXCLAMATIONMARK || code === SEMICOLON ? 1 : 0;\n        },\n        consumeUntilSemicolonIncluded(code) {\n            return code === SEMICOLON ? 2 : 0;\n        },\n\n        createList() {\n            return new List.List();\n        },\n        createSingleNodeList(node) {\n            return new List.List().appendData(node);\n        },\n        getFirstListNode(list) {\n            return list && list.first;\n        },\n        getLastListNode(list) {\n            return list && list.last;\n        },\n\n        parseWithFallback(consumer, fallback) {\n            const startToken = this.tokenIndex;\n\n            try {\n                return consumer.call(this);\n            } catch (e) {\n                if (onParseErrorThrow) {\n                    throw e;\n                }\n\n                const fallbackNode = fallback.call(this, startToken);\n\n                onParseErrorThrow = true;\n                onParseError(e, fallbackNode);\n                onParseErrorThrow = false;\n\n                return fallbackNode;\n            }\n        },\n\n        lookupNonWSType(offset) {\n            let type;\n\n            do {\n                type = this.lookupType(offset++);\n                if (type !== types.WhiteSpace) {\n                    return type;\n                }\n            } while (type !== NULL);\n\n            return NULL;\n        },\n\n        charCodeAt(offset) {\n            return offset >= 0 && offset < source.length ? source.charCodeAt(offset) : 0;\n        },\n        substring(offsetStart, offsetEnd) {\n            return source.substring(offsetStart, offsetEnd);\n        },\n        substrToCursor(start) {\n            return this.source.substring(start, this.tokenStart);\n        },\n\n        cmpChar(offset, charCode) {\n            return utils.cmpChar(source, offset, charCode);\n        },\n        cmpStr(offsetStart, offsetEnd, str) {\n            return utils.cmpStr(source, offsetStart, offsetEnd, str);\n        },\n\n        consume(tokenType) {\n            const start = this.tokenStart;\n\n            this.eat(tokenType);\n\n            return this.substrToCursor(start);\n        },\n        consumeFunctionName() {\n            const name = source.substring(this.tokenStart, this.tokenEnd - 1);\n\n            this.eat(types.Function);\n\n            return name;\n        },\n        consumeNumber(type) {\n            const number = source.substring(this.tokenStart, utils.consumeNumber(source, this.tokenStart));\n\n            this.eat(type);\n\n            return number;\n        },\n\n        eat(tokenType) {\n            if (this.tokenType !== tokenType) {\n                const tokenName = names[tokenType].slice(0, -6).replace(/-/g, ' ').replace(/^./, m => m.toUpperCase());\n                let message = `${/[[\\](){}]/.test(tokenName) ? `\"${tokenName}\"` : tokenName} is expected`;\n                let offset = this.tokenStart;\n\n                // tweak message and offset\n                switch (tokenType) {\n                    case types.Ident:\n                        // when identifier is expected but there is a function or url\n                        if (this.tokenType === types.Function || this.tokenType === types.Url) {\n                            offset = this.tokenEnd - 1;\n                            message = 'Identifier is expected but function found';\n                        } else {\n                            message = 'Identifier is expected';\n                        }\n                        break;\n\n                    case types.Hash:\n                        if (this.isDelim(NUMBERSIGN)) {\n                            this.next();\n                            offset++;\n                            message = 'Name is expected';\n                        }\n                        break;\n\n                    case types.Percentage:\n                        if (this.tokenType === types.Number) {\n                            offset = this.tokenEnd;\n                            message = 'Percent sign is expected';\n                        }\n                        break;\n                }\n\n                this.error(message, offset);\n            }\n\n            this.next();\n        },\n        eatIdent(name) {\n            if (this.tokenType !== types.Ident || this.lookupValue(0, name) === false) {\n                this.error(`Identifier \"${name}\" is expected`);\n            }\n\n            this.next();\n        },\n        eatDelim(code) {\n            if (!this.isDelim(code)) {\n                this.error(`Delim \"${String.fromCharCode(code)}\" is expected`);\n            }\n\n            this.next();\n        },\n\n        getLocation(start, end) {\n            if (needPositions) {\n                return locationMap.getLocationRange(\n                    start,\n                    end,\n                    filename\n                );\n            }\n\n            return null;\n        },\n        getLocationFromList(list) {\n            if (needPositions) {\n                const head = this.getFirstListNode(list);\n                const tail = this.getLastListNode(list);\n                return locationMap.getLocationRange(\n                    head !== null ? head.loc.start.offset - locationMap.startOffset : this.tokenStart,\n                    tail !== null ? tail.loc.end.offset - locationMap.startOffset : this.tokenStart,\n                    filename\n                );\n            }\n\n            return null;\n        },\n\n        error(message, offset) {\n            const location = typeof offset !== 'undefined' && offset < source.length\n                ? locationMap.getLocation(offset)\n                : this.eof\n                    ? locationMap.getLocation(utils.findWhiteSpaceStart(source, source.length - 1))\n                    : locationMap.getLocation(this.tokenStart);\n\n            throw new SyntaxError.SyntaxError(\n                message || 'Unexpected input',\n                source,\n                location.offset,\n                location.line,\n                location.column\n            );\n        }\n    });\n\n    const parse = function(source_, options) {\n        source = source_;\n        options = options || {};\n\n        parser.setSource(source, index.tokenize);\n        locationMap.setSource(\n            source,\n            options.offset,\n            options.line,\n            options.column\n        );\n\n        filename = options.filename || '<unknown>';\n        needPositions = Boolean(options.positions);\n        onParseError = typeof options.onParseError === 'function' ? options.onParseError : NOOP;\n        onParseErrorThrow = false;\n\n        parser.parseAtrulePrelude = 'parseAtrulePrelude' in options ? Boolean(options.parseAtrulePrelude) : true;\n        parser.parseRulePrelude = 'parseRulePrelude' in options ? Boolean(options.parseRulePrelude) : true;\n        parser.parseValue = 'parseValue' in options ? Boolean(options.parseValue) : true;\n        parser.parseCustomProperty = 'parseCustomProperty' in options ? Boolean(options.parseCustomProperty) : false;\n\n        const { context = 'default', onComment } = options;\n\n        if (context in parser.context === false) {\n            throw new Error('Unknown context `' + context + '`');\n        }\n\n        if (typeof onComment === 'function') {\n            parser.forEachToken((type, start, end) => {\n                if (type === types.Comment) {\n                    const loc = parser.getLocation(start, end);\n                    const value = utils.cmpStr(source, end - 2, end, '*/')\n                        ? source.slice(start + 2, end - 2)\n                        : source.slice(start + 2, end);\n\n                    onComment(value, loc);\n                }\n            });\n        }\n\n        const ast = parser.context[context].call(parser, options);\n\n        if (!parser.eof) {\n            parser.error();\n        }\n\n        return ast;\n    };\n\n    return Object.assign(parse, {\n        SyntaxError: SyntaxError.SyntaxError,\n        config: parser.config\n    });\n}\n\nexports.createParser = createParser;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzcxNDYuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsYUFBYSxtQkFBTyxDQUFDLEtBQW1CO0FBQ3hDLG9CQUFvQixtQkFBTyxDQUFDLEtBQW1CO0FBQy9DLGNBQWMsbUJBQU8sQ0FBQyxLQUF3QjtBQUM5QyxpQkFBaUIsbUJBQU8sQ0FBQyxLQUFnQjtBQUN6Qyx5QkFBeUIsbUJBQU8sQ0FBQyxLQUFtQztBQUNwRSxvQkFBb0IsbUJBQU8sQ0FBQyxLQUE4QjtBQUMxRCxjQUFjLG1CQUFPLENBQUMsS0FBd0I7QUFDOUMsY0FBYyxtQkFBTyxDQUFDLEtBQXdCO0FBQzlDLGNBQWMsbUJBQU8sQ0FBQyxLQUF3Qjs7QUFFOUM7QUFDQSxpQ0FBaUM7QUFDakMsaUNBQWlDO0FBQ2pDLGlDQUFpQyxzQkFBc0I7QUFDdkQsaUNBQWlDLCtCQUErQjtBQUNoRTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLDBGQUEwRjtBQUMxRjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxTQUFTOztBQUVUO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxTQUFTOztBQUVUO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLGNBQWM7QUFDZDtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxTQUFTOztBQUVUO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWM7O0FBRWQ7QUFDQSxTQUFTOztBQUVUO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsU0FBUzs7QUFFVDtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxTQUFTOztBQUVUO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQSxTQUFTO0FBQ1Q7QUFDQTs7QUFFQTs7QUFFQTtBQUNBLFNBQVM7QUFDVDtBQUNBOztBQUVBOztBQUVBO0FBQ0EsU0FBUzs7QUFFVDtBQUNBO0FBQ0E7QUFDQSxpQ0FBaUMsU0FBUyx5QkFBeUIsVUFBVSxnQkFBZ0I7QUFDN0Y7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwQkFBMEI7QUFDMUI7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLDBDQUEwQyxLQUFLO0FBQy9DOztBQUVBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxxQ0FBcUMsMEJBQTBCO0FBQy9EOztBQUVBO0FBQ0EsU0FBUzs7QUFFVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsU0FBUzs7QUFFVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLGdCQUFnQixpQ0FBaUM7O0FBRWpEO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsYUFBYTtBQUNiOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDs7QUFFQSxvQkFBb0IiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ibG9ja2JpdGUvLi9ub2RlX21vZHVsZXMvY3Nzby9ub2RlX21vZHVsZXMvY3NzLXRyZWUvY2pzL3BhcnNlci9jcmVhdGUuY2pzPzMzOGEiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBMaXN0ID0gcmVxdWlyZSgnLi4vdXRpbHMvTGlzdC5janMnKTtcbmNvbnN0IFN5bnRheEVycm9yID0gcmVxdWlyZSgnLi9TeW50YXhFcnJvci5janMnKTtcbmNvbnN0IGluZGV4ID0gcmVxdWlyZSgnLi4vdG9rZW5pemVyL2luZGV4LmNqcycpO1xuY29uc3Qgc2VxdWVuY2UgPSByZXF1aXJlKCcuL3NlcXVlbmNlLmNqcycpO1xuY29uc3QgT2Zmc2V0VG9Mb2NhdGlvbiA9IHJlcXVpcmUoJy4uL3Rva2VuaXplci9PZmZzZXRUb0xvY2F0aW9uLmNqcycpO1xuY29uc3QgVG9rZW5TdHJlYW0gPSByZXF1aXJlKCcuLi90b2tlbml6ZXIvVG9rZW5TdHJlYW0uY2pzJyk7XG5jb25zdCB1dGlscyA9IHJlcXVpcmUoJy4uL3Rva2VuaXplci91dGlscy5janMnKTtcbmNvbnN0IHR5cGVzID0gcmVxdWlyZSgnLi4vdG9rZW5pemVyL3R5cGVzLmNqcycpO1xuY29uc3QgbmFtZXMgPSByZXF1aXJlKCcuLi90b2tlbml6ZXIvbmFtZXMuY2pzJyk7XG5cbmNvbnN0IE5PT1AgPSAoKSA9PiB7fTtcbmNvbnN0IEVYQ0xBTUFUSU9OTUFSSyA9IDB4MDAyMTsgIC8vIFUrMDAyMSBFWENMQU1BVElPTiBNQVJLICghKVxuY29uc3QgTlVNQkVSU0lHTiA9IDB4MDAyMzsgICAgICAgLy8gVSswMDIzIE5VTUJFUiBTSUdOICgjKVxuY29uc3QgU0VNSUNPTE9OID0gMHgwMDNCOyAgICAgICAgLy8gVSswMDNCIFNFTUlDT0xPTiAoOylcbmNvbnN0IExFRlRDVVJMWUJSQUNLRVQgPSAweDAwN0I7IC8vIFUrMDA3QiBMRUZUIENVUkxZIEJSQUNLRVQgKHspXG5jb25zdCBOVUxMID0gMDtcblxuZnVuY3Rpb24gY3JlYXRlUGFyc2VDb250ZXh0KG5hbWUpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzW25hbWVdKCk7XG4gICAgfTtcbn1cblxuZnVuY3Rpb24gZmV0Y2hQYXJzZVZhbHVlcyhkaWN0KSB7XG4gICAgY29uc3QgcmVzdWx0ID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcblxuICAgIGZvciAoY29uc3QgbmFtZSBpbiBkaWN0KSB7XG4gICAgICAgIGNvbnN0IGl0ZW0gPSBkaWN0W25hbWVdO1xuICAgICAgICBjb25zdCBmbiA9IGl0ZW0ucGFyc2UgfHwgaXRlbTtcblxuICAgICAgICBpZiAoZm4pIHtcbiAgICAgICAgICAgIHJlc3VsdFtuYW1lXSA9IGZuO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZnVuY3Rpb24gcHJvY2Vzc0NvbmZpZyhjb25maWcpIHtcbiAgICBjb25zdCBwYXJzZUNvbmZpZyA9IHtcbiAgICAgICAgY29udGV4dDogT2JqZWN0LmNyZWF0ZShudWxsKSxcbiAgICAgICAgc2NvcGU6IE9iamVjdC5hc3NpZ24oT2JqZWN0LmNyZWF0ZShudWxsKSwgY29uZmlnLnNjb3BlKSxcbiAgICAgICAgYXRydWxlOiBmZXRjaFBhcnNlVmFsdWVzKGNvbmZpZy5hdHJ1bGUpLFxuICAgICAgICBwc2V1ZG86IGZldGNoUGFyc2VWYWx1ZXMoY29uZmlnLnBzZXVkbyksXG4gICAgICAgIG5vZGU6IGZldGNoUGFyc2VWYWx1ZXMoY29uZmlnLm5vZGUpXG4gICAgfTtcblxuICAgIGZvciAoY29uc3QgbmFtZSBpbiBjb25maWcucGFyc2VDb250ZXh0KSB7XG4gICAgICAgIHN3aXRjaCAodHlwZW9mIGNvbmZpZy5wYXJzZUNvbnRleHRbbmFtZV0pIHtcbiAgICAgICAgICAgIGNhc2UgJ2Z1bmN0aW9uJzpcbiAgICAgICAgICAgICAgICBwYXJzZUNvbmZpZy5jb250ZXh0W25hbWVdID0gY29uZmlnLnBhcnNlQ29udGV4dFtuYW1lXTtcbiAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgY2FzZSAnc3RyaW5nJzpcbiAgICAgICAgICAgICAgICBwYXJzZUNvbmZpZy5jb250ZXh0W25hbWVdID0gY3JlYXRlUGFyc2VDb250ZXh0KGNvbmZpZy5wYXJzZUNvbnRleHRbbmFtZV0pO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgICAgY29uZmlnOiBwYXJzZUNvbmZpZyxcbiAgICAgICAgLi4ucGFyc2VDb25maWcsXG4gICAgICAgIC4uLnBhcnNlQ29uZmlnLm5vZGVcbiAgICB9O1xufVxuXG5mdW5jdGlvbiBjcmVhdGVQYXJzZXIoY29uZmlnKSB7XG4gICAgbGV0IHNvdXJjZSA9ICcnO1xuICAgIGxldCBmaWxlbmFtZSA9ICc8dW5rbm93bj4nO1xuICAgIGxldCBuZWVkUG9zaXRpb25zID0gZmFsc2U7XG4gICAgbGV0IG9uUGFyc2VFcnJvciA9IE5PT1A7XG4gICAgbGV0IG9uUGFyc2VFcnJvclRocm93ID0gZmFsc2U7XG5cbiAgICBjb25zdCBsb2NhdGlvbk1hcCA9IG5ldyBPZmZzZXRUb0xvY2F0aW9uLk9mZnNldFRvTG9jYXRpb24oKTtcbiAgICBjb25zdCBwYXJzZXIgPSBPYmplY3QuYXNzaWduKG5ldyBUb2tlblN0cmVhbS5Ub2tlblN0cmVhbSgpLCBwcm9jZXNzQ29uZmlnKGNvbmZpZyB8fCB7fSksIHtcbiAgICAgICAgcGFyc2VBdHJ1bGVQcmVsdWRlOiB0cnVlLFxuICAgICAgICBwYXJzZVJ1bGVQcmVsdWRlOiB0cnVlLFxuICAgICAgICBwYXJzZVZhbHVlOiB0cnVlLFxuICAgICAgICBwYXJzZUN1c3RvbVByb3BlcnR5OiBmYWxzZSxcblxuICAgICAgICByZWFkU2VxdWVuY2U6IHNlcXVlbmNlLnJlYWRTZXF1ZW5jZSxcblxuICAgICAgICBjb25zdW1lVW50aWxCYWxhbmNlRW5kOiAoKSA9PiAwLFxuICAgICAgICBjb25zdW1lVW50aWxMZWZ0Q3VybHlCcmFja2V0KGNvZGUpIHtcbiAgICAgICAgICAgIHJldHVybiBjb2RlID09PSBMRUZUQ1VSTFlCUkFDS0VUID8gMSA6IDA7XG4gICAgICAgIH0sXG4gICAgICAgIGNvbnN1bWVVbnRpbExlZnRDdXJseUJyYWNrZXRPclNlbWljb2xvbihjb2RlKSB7XG4gICAgICAgICAgICByZXR1cm4gY29kZSA9PT0gTEVGVENVUkxZQlJBQ0tFVCB8fCBjb2RlID09PSBTRU1JQ09MT04gPyAxIDogMDtcbiAgICAgICAgfSxcbiAgICAgICAgY29uc3VtZVVudGlsRXhjbGFtYXRpb25NYXJrT3JTZW1pY29sb24oY29kZSkge1xuICAgICAgICAgICAgcmV0dXJuIGNvZGUgPT09IEVYQ0xBTUFUSU9OTUFSSyB8fCBjb2RlID09PSBTRU1JQ09MT04gPyAxIDogMDtcbiAgICAgICAgfSxcbiAgICAgICAgY29uc3VtZVVudGlsU2VtaWNvbG9uSW5jbHVkZWQoY29kZSkge1xuICAgICAgICAgICAgcmV0dXJuIGNvZGUgPT09IFNFTUlDT0xPTiA/IDIgOiAwO1xuICAgICAgICB9LFxuXG4gICAgICAgIGNyZWF0ZUxpc3QoKSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IExpc3QuTGlzdCgpO1xuICAgICAgICB9LFxuICAgICAgICBjcmVhdGVTaW5nbGVOb2RlTGlzdChub2RlKSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IExpc3QuTGlzdCgpLmFwcGVuZERhdGEobm9kZSk7XG4gICAgICAgIH0sXG4gICAgICAgIGdldEZpcnN0TGlzdE5vZGUobGlzdCkge1xuICAgICAgICAgICAgcmV0dXJuIGxpc3QgJiYgbGlzdC5maXJzdDtcbiAgICAgICAgfSxcbiAgICAgICAgZ2V0TGFzdExpc3ROb2RlKGxpc3QpIHtcbiAgICAgICAgICAgIHJldHVybiBsaXN0ICYmIGxpc3QubGFzdDtcbiAgICAgICAgfSxcblxuICAgICAgICBwYXJzZVdpdGhGYWxsYmFjayhjb25zdW1lciwgZmFsbGJhY2spIHtcbiAgICAgICAgICAgIGNvbnN0IHN0YXJ0VG9rZW4gPSB0aGlzLnRva2VuSW5kZXg7XG5cbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGNvbnN1bWVyLmNhbGwodGhpcyk7XG4gICAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgaWYgKG9uUGFyc2VFcnJvclRocm93KSB7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IGU7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgY29uc3QgZmFsbGJhY2tOb2RlID0gZmFsbGJhY2suY2FsbCh0aGlzLCBzdGFydFRva2VuKTtcblxuICAgICAgICAgICAgICAgIG9uUGFyc2VFcnJvclRocm93ID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBvblBhcnNlRXJyb3IoZSwgZmFsbGJhY2tOb2RlKTtcbiAgICAgICAgICAgICAgICBvblBhcnNlRXJyb3JUaHJvdyA9IGZhbHNlO1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbGxiYWNrTm9kZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcblxuICAgICAgICBsb29rdXBOb25XU1R5cGUob2Zmc2V0KSB7XG4gICAgICAgICAgICBsZXQgdHlwZTtcblxuICAgICAgICAgICAgZG8ge1xuICAgICAgICAgICAgICAgIHR5cGUgPSB0aGlzLmxvb2t1cFR5cGUob2Zmc2V0KyspO1xuICAgICAgICAgICAgICAgIGlmICh0eXBlICE9PSB0eXBlcy5XaGl0ZVNwYWNlKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0eXBlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gd2hpbGUgKHR5cGUgIT09IE5VTEwpO1xuXG4gICAgICAgICAgICByZXR1cm4gTlVMTDtcbiAgICAgICAgfSxcblxuICAgICAgICBjaGFyQ29kZUF0KG9mZnNldCkge1xuICAgICAgICAgICAgcmV0dXJuIG9mZnNldCA+PSAwICYmIG9mZnNldCA8IHNvdXJjZS5sZW5ndGggPyBzb3VyY2UuY2hhckNvZGVBdChvZmZzZXQpIDogMDtcbiAgICAgICAgfSxcbiAgICAgICAgc3Vic3RyaW5nKG9mZnNldFN0YXJ0LCBvZmZzZXRFbmQpIHtcbiAgICAgICAgICAgIHJldHVybiBzb3VyY2Uuc3Vic3RyaW5nKG9mZnNldFN0YXJ0LCBvZmZzZXRFbmQpO1xuICAgICAgICB9LFxuICAgICAgICBzdWJzdHJUb0N1cnNvcihzdGFydCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuc291cmNlLnN1YnN0cmluZyhzdGFydCwgdGhpcy50b2tlblN0YXJ0KTtcbiAgICAgICAgfSxcblxuICAgICAgICBjbXBDaGFyKG9mZnNldCwgY2hhckNvZGUpIHtcbiAgICAgICAgICAgIHJldHVybiB1dGlscy5jbXBDaGFyKHNvdXJjZSwgb2Zmc2V0LCBjaGFyQ29kZSk7XG4gICAgICAgIH0sXG4gICAgICAgIGNtcFN0cihvZmZzZXRTdGFydCwgb2Zmc2V0RW5kLCBzdHIpIHtcbiAgICAgICAgICAgIHJldHVybiB1dGlscy5jbXBTdHIoc291cmNlLCBvZmZzZXRTdGFydCwgb2Zmc2V0RW5kLCBzdHIpO1xuICAgICAgICB9LFxuXG4gICAgICAgIGNvbnN1bWUodG9rZW5UeXBlKSB7XG4gICAgICAgICAgICBjb25zdCBzdGFydCA9IHRoaXMudG9rZW5TdGFydDtcblxuICAgICAgICAgICAgdGhpcy5lYXQodG9rZW5UeXBlKTtcblxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuc3Vic3RyVG9DdXJzb3Ioc3RhcnQpO1xuICAgICAgICB9LFxuICAgICAgICBjb25zdW1lRnVuY3Rpb25OYW1lKCkge1xuICAgICAgICAgICAgY29uc3QgbmFtZSA9IHNvdXJjZS5zdWJzdHJpbmcodGhpcy50b2tlblN0YXJ0LCB0aGlzLnRva2VuRW5kIC0gMSk7XG5cbiAgICAgICAgICAgIHRoaXMuZWF0KHR5cGVzLkZ1bmN0aW9uKTtcblxuICAgICAgICAgICAgcmV0dXJuIG5hbWU7XG4gICAgICAgIH0sXG4gICAgICAgIGNvbnN1bWVOdW1iZXIodHlwZSkge1xuICAgICAgICAgICAgY29uc3QgbnVtYmVyID0gc291cmNlLnN1YnN0cmluZyh0aGlzLnRva2VuU3RhcnQsIHV0aWxzLmNvbnN1bWVOdW1iZXIoc291cmNlLCB0aGlzLnRva2VuU3RhcnQpKTtcblxuICAgICAgICAgICAgdGhpcy5lYXQodHlwZSk7XG5cbiAgICAgICAgICAgIHJldHVybiBudW1iZXI7XG4gICAgICAgIH0sXG5cbiAgICAgICAgZWF0KHRva2VuVHlwZSkge1xuICAgICAgICAgICAgaWYgKHRoaXMudG9rZW5UeXBlICE9PSB0b2tlblR5cGUpIHtcbiAgICAgICAgICAgICAgICBjb25zdCB0b2tlbk5hbWUgPSBuYW1lc1t0b2tlblR5cGVdLnNsaWNlKDAsIC02KS5yZXBsYWNlKC8tL2csICcgJykucmVwbGFjZSgvXi4vLCBtID0+IG0udG9VcHBlckNhc2UoKSk7XG4gICAgICAgICAgICAgICAgbGV0IG1lc3NhZ2UgPSBgJHsvW1tcXF0oKXt9XS8udGVzdCh0b2tlbk5hbWUpID8gYFwiJHt0b2tlbk5hbWV9XCJgIDogdG9rZW5OYW1lfSBpcyBleHBlY3RlZGA7XG4gICAgICAgICAgICAgICAgbGV0IG9mZnNldCA9IHRoaXMudG9rZW5TdGFydDtcblxuICAgICAgICAgICAgICAgIC8vIHR3ZWFrIG1lc3NhZ2UgYW5kIG9mZnNldFxuICAgICAgICAgICAgICAgIHN3aXRjaCAodG9rZW5UeXBlKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgdHlwZXMuSWRlbnQ6XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyB3aGVuIGlkZW50aWZpZXIgaXMgZXhwZWN0ZWQgYnV0IHRoZXJlIGlzIGEgZnVuY3Rpb24gb3IgdXJsXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy50b2tlblR5cGUgPT09IHR5cGVzLkZ1bmN0aW9uIHx8IHRoaXMudG9rZW5UeXBlID09PSB0eXBlcy5VcmwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvZmZzZXQgPSB0aGlzLnRva2VuRW5kIC0gMTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlID0gJ0lkZW50aWZpZXIgaXMgZXhwZWN0ZWQgYnV0IGZ1bmN0aW9uIGZvdW5kJztcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZSA9ICdJZGVudGlmaWVyIGlzIGV4cGVjdGVkJztcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgdHlwZXMuSGFzaDpcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmlzRGVsaW0oTlVNQkVSU0lHTikpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm5leHQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvZmZzZXQrKztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlID0gJ05hbWUgaXMgZXhwZWN0ZWQnO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICAgICAgY2FzZSB0eXBlcy5QZXJjZW50YWdlOlxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMudG9rZW5UeXBlID09PSB0eXBlcy5OdW1iZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvZmZzZXQgPSB0aGlzLnRva2VuRW5kO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UgPSAnUGVyY2VudCBzaWduIGlzIGV4cGVjdGVkJztcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHRoaXMuZXJyb3IobWVzc2FnZSwgb2Zmc2V0KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdGhpcy5uZXh0KCk7XG4gICAgICAgIH0sXG4gICAgICAgIGVhdElkZW50KG5hbWUpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnRva2VuVHlwZSAhPT0gdHlwZXMuSWRlbnQgfHwgdGhpcy5sb29rdXBWYWx1ZSgwLCBuYW1lKSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmVycm9yKGBJZGVudGlmaWVyIFwiJHtuYW1lfVwiIGlzIGV4cGVjdGVkYCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRoaXMubmV4dCgpO1xuICAgICAgICB9LFxuICAgICAgICBlYXREZWxpbShjb2RlKSB7XG4gICAgICAgICAgICBpZiAoIXRoaXMuaXNEZWxpbShjb2RlKSkge1xuICAgICAgICAgICAgICAgIHRoaXMuZXJyb3IoYERlbGltIFwiJHtTdHJpbmcuZnJvbUNoYXJDb2RlKGNvZGUpfVwiIGlzIGV4cGVjdGVkYCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRoaXMubmV4dCgpO1xuICAgICAgICB9LFxuXG4gICAgICAgIGdldExvY2F0aW9uKHN0YXJ0LCBlbmQpIHtcbiAgICAgICAgICAgIGlmIChuZWVkUG9zaXRpb25zKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGxvY2F0aW9uTWFwLmdldExvY2F0aW9uUmFuZ2UoXG4gICAgICAgICAgICAgICAgICAgIHN0YXJ0LFxuICAgICAgICAgICAgICAgICAgICBlbmQsXG4gICAgICAgICAgICAgICAgICAgIGZpbGVuYW1lXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH0sXG4gICAgICAgIGdldExvY2F0aW9uRnJvbUxpc3QobGlzdCkge1xuICAgICAgICAgICAgaWYgKG5lZWRQb3NpdGlvbnMpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBoZWFkID0gdGhpcy5nZXRGaXJzdExpc3ROb2RlKGxpc3QpO1xuICAgICAgICAgICAgICAgIGNvbnN0IHRhaWwgPSB0aGlzLmdldExhc3RMaXN0Tm9kZShsaXN0KTtcbiAgICAgICAgICAgICAgICByZXR1cm4gbG9jYXRpb25NYXAuZ2V0TG9jYXRpb25SYW5nZShcbiAgICAgICAgICAgICAgICAgICAgaGVhZCAhPT0gbnVsbCA/IGhlYWQubG9jLnN0YXJ0Lm9mZnNldCAtIGxvY2F0aW9uTWFwLnN0YXJ0T2Zmc2V0IDogdGhpcy50b2tlblN0YXJ0LFxuICAgICAgICAgICAgICAgICAgICB0YWlsICE9PSBudWxsID8gdGFpbC5sb2MuZW5kLm9mZnNldCAtIGxvY2F0aW9uTWFwLnN0YXJ0T2Zmc2V0IDogdGhpcy50b2tlblN0YXJ0LFxuICAgICAgICAgICAgICAgICAgICBmaWxlbmFtZVxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9LFxuXG4gICAgICAgIGVycm9yKG1lc3NhZ2UsIG9mZnNldCkge1xuICAgICAgICAgICAgY29uc3QgbG9jYXRpb24gPSB0eXBlb2Ygb2Zmc2V0ICE9PSAndW5kZWZpbmVkJyAmJiBvZmZzZXQgPCBzb3VyY2UubGVuZ3RoXG4gICAgICAgICAgICAgICAgPyBsb2NhdGlvbk1hcC5nZXRMb2NhdGlvbihvZmZzZXQpXG4gICAgICAgICAgICAgICAgOiB0aGlzLmVvZlxuICAgICAgICAgICAgICAgICAgICA/IGxvY2F0aW9uTWFwLmdldExvY2F0aW9uKHV0aWxzLmZpbmRXaGl0ZVNwYWNlU3RhcnQoc291cmNlLCBzb3VyY2UubGVuZ3RoIC0gMSkpXG4gICAgICAgICAgICAgICAgICAgIDogbG9jYXRpb25NYXAuZ2V0TG9jYXRpb24odGhpcy50b2tlblN0YXJ0KTtcblxuICAgICAgICAgICAgdGhyb3cgbmV3IFN5bnRheEVycm9yLlN5bnRheEVycm9yKFxuICAgICAgICAgICAgICAgIG1lc3NhZ2UgfHwgJ1VuZXhwZWN0ZWQgaW5wdXQnLFxuICAgICAgICAgICAgICAgIHNvdXJjZSxcbiAgICAgICAgICAgICAgICBsb2NhdGlvbi5vZmZzZXQsXG4gICAgICAgICAgICAgICAgbG9jYXRpb24ubGluZSxcbiAgICAgICAgICAgICAgICBsb2NhdGlvbi5jb2x1bW5cbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIGNvbnN0IHBhcnNlID0gZnVuY3Rpb24oc291cmNlXywgb3B0aW9ucykge1xuICAgICAgICBzb3VyY2UgPSBzb3VyY2VfO1xuICAgICAgICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcblxuICAgICAgICBwYXJzZXIuc2V0U291cmNlKHNvdXJjZSwgaW5kZXgudG9rZW5pemUpO1xuICAgICAgICBsb2NhdGlvbk1hcC5zZXRTb3VyY2UoXG4gICAgICAgICAgICBzb3VyY2UsXG4gICAgICAgICAgICBvcHRpb25zLm9mZnNldCxcbiAgICAgICAgICAgIG9wdGlvbnMubGluZSxcbiAgICAgICAgICAgIG9wdGlvbnMuY29sdW1uXG4gICAgICAgICk7XG5cbiAgICAgICAgZmlsZW5hbWUgPSBvcHRpb25zLmZpbGVuYW1lIHx8ICc8dW5rbm93bj4nO1xuICAgICAgICBuZWVkUG9zaXRpb25zID0gQm9vbGVhbihvcHRpb25zLnBvc2l0aW9ucyk7XG4gICAgICAgIG9uUGFyc2VFcnJvciA9IHR5cGVvZiBvcHRpb25zLm9uUGFyc2VFcnJvciA9PT0gJ2Z1bmN0aW9uJyA/IG9wdGlvbnMub25QYXJzZUVycm9yIDogTk9PUDtcbiAgICAgICAgb25QYXJzZUVycm9yVGhyb3cgPSBmYWxzZTtcblxuICAgICAgICBwYXJzZXIucGFyc2VBdHJ1bGVQcmVsdWRlID0gJ3BhcnNlQXRydWxlUHJlbHVkZScgaW4gb3B0aW9ucyA/IEJvb2xlYW4ob3B0aW9ucy5wYXJzZUF0cnVsZVByZWx1ZGUpIDogdHJ1ZTtcbiAgICAgICAgcGFyc2VyLnBhcnNlUnVsZVByZWx1ZGUgPSAncGFyc2VSdWxlUHJlbHVkZScgaW4gb3B0aW9ucyA/IEJvb2xlYW4ob3B0aW9ucy5wYXJzZVJ1bGVQcmVsdWRlKSA6IHRydWU7XG4gICAgICAgIHBhcnNlci5wYXJzZVZhbHVlID0gJ3BhcnNlVmFsdWUnIGluIG9wdGlvbnMgPyBCb29sZWFuKG9wdGlvbnMucGFyc2VWYWx1ZSkgOiB0cnVlO1xuICAgICAgICBwYXJzZXIucGFyc2VDdXN0b21Qcm9wZXJ0eSA9ICdwYXJzZUN1c3RvbVByb3BlcnR5JyBpbiBvcHRpb25zID8gQm9vbGVhbihvcHRpb25zLnBhcnNlQ3VzdG9tUHJvcGVydHkpIDogZmFsc2U7XG5cbiAgICAgICAgY29uc3QgeyBjb250ZXh0ID0gJ2RlZmF1bHQnLCBvbkNvbW1lbnQgfSA9IG9wdGlvbnM7XG5cbiAgICAgICAgaWYgKGNvbnRleHQgaW4gcGFyc2VyLmNvbnRleHQgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1Vua25vd24gY29udGV4dCBgJyArIGNvbnRleHQgKyAnYCcpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHR5cGVvZiBvbkNvbW1lbnQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIHBhcnNlci5mb3JFYWNoVG9rZW4oKHR5cGUsIHN0YXJ0LCBlbmQpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAodHlwZSA9PT0gdHlwZXMuQ29tbWVudCkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBsb2MgPSBwYXJzZXIuZ2V0TG9jYXRpb24oc3RhcnQsIGVuZCk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHZhbHVlID0gdXRpbHMuY21wU3RyKHNvdXJjZSwgZW5kIC0gMiwgZW5kLCAnKi8nKVxuICAgICAgICAgICAgICAgICAgICAgICAgPyBzb3VyY2Uuc2xpY2Uoc3RhcnQgKyAyLCBlbmQgLSAyKVxuICAgICAgICAgICAgICAgICAgICAgICAgOiBzb3VyY2Uuc2xpY2Uoc3RhcnQgKyAyLCBlbmQpO1xuXG4gICAgICAgICAgICAgICAgICAgIG9uQ29tbWVudCh2YWx1ZSwgbG9jKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IGFzdCA9IHBhcnNlci5jb250ZXh0W2NvbnRleHRdLmNhbGwocGFyc2VyLCBvcHRpb25zKTtcblxuICAgICAgICBpZiAoIXBhcnNlci5lb2YpIHtcbiAgICAgICAgICAgIHBhcnNlci5lcnJvcigpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGFzdDtcbiAgICB9O1xuXG4gICAgcmV0dXJuIE9iamVjdC5hc3NpZ24ocGFyc2UsIHtcbiAgICAgICAgU3ludGF4RXJyb3I6IFN5bnRheEVycm9yLlN5bnRheEVycm9yLFxuICAgICAgICBjb25maWc6IHBhcnNlci5jb25maWdcbiAgICB9KTtcbn1cblxuZXhwb3J0cy5jcmVhdGVQYXJzZXIgPSBjcmVhdGVQYXJzZXI7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///37146\n")},35929:(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";eval("\n\nconst types = __webpack_require__(78783);\n\nfunction readSequence(recognizer) {\n    const children = this.createList();\n    let space = false;\n    const context = {\n        recognizer\n    };\n\n    while (!this.eof) {\n        switch (this.tokenType) {\n            case types.Comment:\n                this.next();\n                continue;\n\n            case types.WhiteSpace:\n                space = true;\n                this.next();\n                continue;\n        }\n\n        let child = recognizer.getNode.call(this, context);\n\n        if (child === undefined) {\n            break;\n        }\n\n        if (space) {\n            if (recognizer.onWhiteSpace) {\n                recognizer.onWhiteSpace.call(this, child, children, context);\n            }\n            space = false;\n        }\n\n        children.push(child);\n    }\n\n    if (space && recognizer.onWhiteSpace) {\n        recognizer.onWhiteSpace.call(this, null, children, context);\n    }\n\n    return children;\n}\n\nexports.readSequence = readSequence;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzU5MjkuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsY0FBYyxtQkFBTyxDQUFDLEtBQXdCOztBQUU5QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQSxvQkFBb0IiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ibG9ja2JpdGUvLi9ub2RlX21vZHVsZXMvY3Nzby9ub2RlX21vZHVsZXMvY3NzLXRyZWUvY2pzL3BhcnNlci9zZXF1ZW5jZS5janM/MzI5NSJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmNvbnN0IHR5cGVzID0gcmVxdWlyZSgnLi4vdG9rZW5pemVyL3R5cGVzLmNqcycpO1xuXG5mdW5jdGlvbiByZWFkU2VxdWVuY2UocmVjb2duaXplcikge1xuICAgIGNvbnN0IGNoaWxkcmVuID0gdGhpcy5jcmVhdGVMaXN0KCk7XG4gICAgbGV0IHNwYWNlID0gZmFsc2U7XG4gICAgY29uc3QgY29udGV4dCA9IHtcbiAgICAgICAgcmVjb2duaXplclxuICAgIH07XG5cbiAgICB3aGlsZSAoIXRoaXMuZW9mKSB7XG4gICAgICAgIHN3aXRjaCAodGhpcy50b2tlblR5cGUpIHtcbiAgICAgICAgICAgIGNhc2UgdHlwZXMuQ29tbWVudDpcbiAgICAgICAgICAgICAgICB0aGlzLm5leHQoKTtcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcblxuICAgICAgICAgICAgY2FzZSB0eXBlcy5XaGl0ZVNwYWNlOlxuICAgICAgICAgICAgICAgIHNwYWNlID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB0aGlzLm5leHQoKTtcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCBjaGlsZCA9IHJlY29nbml6ZXIuZ2V0Tm9kZS5jYWxsKHRoaXMsIGNvbnRleHQpO1xuXG4gICAgICAgIGlmIChjaGlsZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChzcGFjZSkge1xuICAgICAgICAgICAgaWYgKHJlY29nbml6ZXIub25XaGl0ZVNwYWNlKSB7XG4gICAgICAgICAgICAgICAgcmVjb2duaXplci5vbldoaXRlU3BhY2UuY2FsbCh0aGlzLCBjaGlsZCwgY2hpbGRyZW4sIGNvbnRleHQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgc3BhY2UgPSBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNoaWxkcmVuLnB1c2goY2hpbGQpO1xuICAgIH1cblxuICAgIGlmIChzcGFjZSAmJiByZWNvZ25pemVyLm9uV2hpdGVTcGFjZSkge1xuICAgICAgICByZWNvZ25pemVyLm9uV2hpdGVTcGFjZS5jYWxsKHRoaXMsIG51bGwsIGNoaWxkcmVuLCBjb250ZXh0KTtcbiAgICB9XG5cbiAgICByZXR1cm4gY2hpbGRyZW47XG59XG5cbmV4cG9ydHMucmVhZFNlcXVlbmNlID0gcmVhZFNlcXVlbmNlO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///35929\n")},12401:module=>{"use strict";eval("\n\nconst fontFace = {\n    parse: {\n        prelude: null,\n        block() {\n            return this.Block(true);\n        }\n    }\n};\n\nmodule.exports = fontFace;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTI0MDEuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSIsInNvdXJjZXMiOlsid2VicGFjazovL2Jsb2NrYml0ZS8uL25vZGVfbW9kdWxlcy9jc3NvL25vZGVfbW9kdWxlcy9jc3MtdHJlZS9janMvc3ludGF4L2F0cnVsZS9mb250LWZhY2UuY2pzP2MxM2IiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBmb250RmFjZSA9IHtcbiAgICBwYXJzZToge1xuICAgICAgICBwcmVsdWRlOiBudWxsLFxuICAgICAgICBibG9jaygpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLkJsb2NrKHRydWUpO1xuICAgICAgICB9XG4gICAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBmb250RmFjZTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///12401\n")},80941:(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval("\n\nconst types = __webpack_require__(78783);\n\nconst importAtrule = {\n    parse: {\n        prelude() {\n            const children = this.createList();\n\n            this.skipSC();\n\n            switch (this.tokenType) {\n                case types.String:\n                    children.push(this.String());\n                    break;\n\n                case types.Url:\n                case types.Function:\n                    children.push(this.Url());\n                    break;\n\n                default:\n                    this.error('String or url() is expected');\n            }\n\n            if (this.lookupNonWSType(0) === types.Ident ||\n                this.lookupNonWSType(0) === types.LeftParenthesis) {\n                children.push(this.MediaQueryList());\n            }\n\n            return children;\n        },\n        block: null\n    }\n};\n\nmodule.exports = importAtrule;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiODA5NDEuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsY0FBYyxtQkFBTyxDQUFDLEtBQTJCOztBQUVqRDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBOztBQUVBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYmxvY2tiaXRlLy4vbm9kZV9tb2R1bGVzL2Nzc28vbm9kZV9tb2R1bGVzL2Nzcy10cmVlL2Nqcy9zeW50YXgvYXRydWxlL2ltcG9ydC5janM/YWNmNiJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmNvbnN0IHR5cGVzID0gcmVxdWlyZSgnLi4vLi4vdG9rZW5pemVyL3R5cGVzLmNqcycpO1xuXG5jb25zdCBpbXBvcnRBdHJ1bGUgPSB7XG4gICAgcGFyc2U6IHtcbiAgICAgICAgcHJlbHVkZSgpIHtcbiAgICAgICAgICAgIGNvbnN0IGNoaWxkcmVuID0gdGhpcy5jcmVhdGVMaXN0KCk7XG5cbiAgICAgICAgICAgIHRoaXMuc2tpcFNDKCk7XG5cbiAgICAgICAgICAgIHN3aXRjaCAodGhpcy50b2tlblR5cGUpIHtcbiAgICAgICAgICAgICAgICBjYXNlIHR5cGVzLlN0cmluZzpcbiAgICAgICAgICAgICAgICAgICAgY2hpbGRyZW4ucHVzaCh0aGlzLlN0cmluZygpKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICBjYXNlIHR5cGVzLlVybDpcbiAgICAgICAgICAgICAgICBjYXNlIHR5cGVzLkZ1bmN0aW9uOlxuICAgICAgICAgICAgICAgICAgICBjaGlsZHJlbi5wdXNoKHRoaXMuVXJsKCkpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZXJyb3IoJ1N0cmluZyBvciB1cmwoKSBpcyBleHBlY3RlZCcpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAodGhpcy5sb29rdXBOb25XU1R5cGUoMCkgPT09IHR5cGVzLklkZW50IHx8XG4gICAgICAgICAgICAgICAgdGhpcy5sb29rdXBOb25XU1R5cGUoMCkgPT09IHR5cGVzLkxlZnRQYXJlbnRoZXNpcykge1xuICAgICAgICAgICAgICAgIGNoaWxkcmVuLnB1c2godGhpcy5NZWRpYVF1ZXJ5TGlzdCgpKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIGNoaWxkcmVuO1xuICAgICAgICB9LFxuICAgICAgICBibG9jazogbnVsbFxuICAgIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gaW1wb3J0QXRydWxlO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///80941\n")},20394:(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval("\n\nconst fontFace = __webpack_require__(12401);\nconst _import = __webpack_require__(80941);\nconst media = __webpack_require__(44214);\nconst page = __webpack_require__(44635);\nconst supports = __webpack_require__(30970);\n\nconst atrule = {\n    'font-face': fontFace,\n    'import': _import,\n    media,\n    page,\n    supports\n};\n\nmodule.exports = atrule;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjAzOTQuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsaUJBQWlCLG1CQUFPLENBQUMsS0FBaUI7QUFDMUMsZ0JBQWdCLG1CQUFPLENBQUMsS0FBYztBQUN0QyxjQUFjLG1CQUFPLENBQUMsS0FBYTtBQUNuQyxhQUFhLG1CQUFPLENBQUMsS0FBWTtBQUNqQyxpQkFBaUIsbUJBQU8sQ0FBQyxLQUFnQjs7QUFFekM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ibG9ja2JpdGUvLi9ub2RlX21vZHVsZXMvY3Nzby9ub2RlX21vZHVsZXMvY3NzLXRyZWUvY2pzL3N5bnRheC9hdHJ1bGUvaW5kZXguY2pzP2Q1MDIiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBmb250RmFjZSA9IHJlcXVpcmUoJy4vZm9udC1mYWNlLmNqcycpO1xuY29uc3QgX2ltcG9ydCA9IHJlcXVpcmUoJy4vaW1wb3J0LmNqcycpO1xuY29uc3QgbWVkaWEgPSByZXF1aXJlKCcuL21lZGlhLmNqcycpO1xuY29uc3QgcGFnZSA9IHJlcXVpcmUoJy4vcGFnZS5janMnKTtcbmNvbnN0IHN1cHBvcnRzID0gcmVxdWlyZSgnLi9zdXBwb3J0cy5janMnKTtcblxuY29uc3QgYXRydWxlID0ge1xuICAgICdmb250LWZhY2UnOiBmb250RmFjZSxcbiAgICAnaW1wb3J0JzogX2ltcG9ydCxcbiAgICBtZWRpYSxcbiAgICBwYWdlLFxuICAgIHN1cHBvcnRzXG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGF0cnVsZTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///20394\n")},44214:module=>{"use strict";eval("\n\nconst media = {\n    parse: {\n        prelude() {\n            return this.createSingleNodeList(\n                this.MediaQueryList()\n            );\n        },\n        block() {\n            return this.Block(false);\n        }\n    }\n};\n\nmodule.exports = media;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDQyMTQuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ibG9ja2JpdGUvLi9ub2RlX21vZHVsZXMvY3Nzby9ub2RlX21vZHVsZXMvY3NzLXRyZWUvY2pzL3N5bnRheC9hdHJ1bGUvbWVkaWEuY2pzPzZlZDQiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBtZWRpYSA9IHtcbiAgICBwYXJzZToge1xuICAgICAgICBwcmVsdWRlKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuY3JlYXRlU2luZ2xlTm9kZUxpc3QoXG4gICAgICAgICAgICAgICAgdGhpcy5NZWRpYVF1ZXJ5TGlzdCgpXG4gICAgICAgICAgICApO1xuICAgICAgICB9LFxuICAgICAgICBibG9jaygpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLkJsb2NrKGZhbHNlKTtcbiAgICAgICAgfVxuICAgIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gbWVkaWE7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///44214\n")},44635:module=>{"use strict";eval("\n\nconst page = {\n    parse: {\n        prelude() {\n            return this.createSingleNodeList(\n                this.SelectorList()\n            );\n        },\n        block() {\n            return this.Block(true);\n        }\n    }\n};\n\nmodule.exports = page;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDQ2MzUuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ibG9ja2JpdGUvLi9ub2RlX21vZHVsZXMvY3Nzby9ub2RlX21vZHVsZXMvY3NzLXRyZWUvY2pzL3N5bnRheC9hdHJ1bGUvcGFnZS5janM/NmU0MyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmNvbnN0IHBhZ2UgPSB7XG4gICAgcGFyc2U6IHtcbiAgICAgICAgcHJlbHVkZSgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmNyZWF0ZVNpbmdsZU5vZGVMaXN0KFxuICAgICAgICAgICAgICAgIHRoaXMuU2VsZWN0b3JMaXN0KClcbiAgICAgICAgICAgICk7XG4gICAgICAgIH0sXG4gICAgICAgIGJsb2NrKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuQmxvY2sodHJ1ZSk7XG4gICAgICAgIH1cbiAgICB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IHBhZ2U7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///44635\n")},30970:(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval("\n\nconst types = __webpack_require__(78783);\n\nfunction consumeRaw() {\n    return this.createSingleNodeList(\n        this.Raw(this.tokenIndex, null, false)\n    );\n}\n\nfunction parentheses() {\n    this.skipSC();\n\n    if (this.tokenType === types.Ident &&\n        this.lookupNonWSType(1) === types.Colon) {\n        return this.createSingleNodeList(\n            this.Declaration()\n        );\n    }\n\n    return readSequence.call(this);\n}\n\nfunction readSequence() {\n    const children = this.createList();\n    let child;\n\n    this.skipSC();\n\n    scan:\n    while (!this.eof) {\n        switch (this.tokenType) {\n            case types.Comment:\n            case types.WhiteSpace:\n                this.next();\n                continue;\n\n            case types.Function:\n                child = this.Function(consumeRaw, this.scope.AtrulePrelude);\n                break;\n\n            case types.Ident:\n                child = this.Identifier();\n                break;\n\n            case types.LeftParenthesis:\n                child = this.Parentheses(parentheses, this.scope.AtrulePrelude);\n                break;\n\n            default:\n                break scan;\n        }\n\n        children.push(child);\n    }\n\n    return children;\n}\n\nconst supports = {\n    parse: {\n        prelude() {\n            const children = readSequence.call(this);\n\n            if (this.getFirstListNode(children) === null) {\n                this.error('Condition is expected');\n            }\n\n            return children;\n        },\n        block() {\n            return this.Block(false);\n        }\n    }\n};\n\nmodule.exports = supports;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzA5NzAuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsY0FBYyxtQkFBTyxDQUFDLEtBQTJCOztBQUVqRDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ibG9ja2JpdGUvLi9ub2RlX21vZHVsZXMvY3Nzby9ub2RlX21vZHVsZXMvY3NzLXRyZWUvY2pzL3N5bnRheC9hdHJ1bGUvc3VwcG9ydHMuY2pzP2EzZjAiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCB0eXBlcyA9IHJlcXVpcmUoJy4uLy4uL3Rva2VuaXplci90eXBlcy5janMnKTtcblxuZnVuY3Rpb24gY29uc3VtZVJhdygpIHtcbiAgICByZXR1cm4gdGhpcy5jcmVhdGVTaW5nbGVOb2RlTGlzdChcbiAgICAgICAgdGhpcy5SYXcodGhpcy50b2tlbkluZGV4LCBudWxsLCBmYWxzZSlcbiAgICApO1xufVxuXG5mdW5jdGlvbiBwYXJlbnRoZXNlcygpIHtcbiAgICB0aGlzLnNraXBTQygpO1xuXG4gICAgaWYgKHRoaXMudG9rZW5UeXBlID09PSB0eXBlcy5JZGVudCAmJlxuICAgICAgICB0aGlzLmxvb2t1cE5vbldTVHlwZSgxKSA9PT0gdHlwZXMuQ29sb24pIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY3JlYXRlU2luZ2xlTm9kZUxpc3QoXG4gICAgICAgICAgICB0aGlzLkRlY2xhcmF0aW9uKClcbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICByZXR1cm4gcmVhZFNlcXVlbmNlLmNhbGwodGhpcyk7XG59XG5cbmZ1bmN0aW9uIHJlYWRTZXF1ZW5jZSgpIHtcbiAgICBjb25zdCBjaGlsZHJlbiA9IHRoaXMuY3JlYXRlTGlzdCgpO1xuICAgIGxldCBjaGlsZDtcblxuICAgIHRoaXMuc2tpcFNDKCk7XG5cbiAgICBzY2FuOlxuICAgIHdoaWxlICghdGhpcy5lb2YpIHtcbiAgICAgICAgc3dpdGNoICh0aGlzLnRva2VuVHlwZSkge1xuICAgICAgICAgICAgY2FzZSB0eXBlcy5Db21tZW50OlxuICAgICAgICAgICAgY2FzZSB0eXBlcy5XaGl0ZVNwYWNlOlxuICAgICAgICAgICAgICAgIHRoaXMubmV4dCgpO1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuXG4gICAgICAgICAgICBjYXNlIHR5cGVzLkZ1bmN0aW9uOlxuICAgICAgICAgICAgICAgIGNoaWxkID0gdGhpcy5GdW5jdGlvbihjb25zdW1lUmF3LCB0aGlzLnNjb3BlLkF0cnVsZVByZWx1ZGUpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICBjYXNlIHR5cGVzLklkZW50OlxuICAgICAgICAgICAgICAgIGNoaWxkID0gdGhpcy5JZGVudGlmaWVyKCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgIGNhc2UgdHlwZXMuTGVmdFBhcmVudGhlc2lzOlxuICAgICAgICAgICAgICAgIGNoaWxkID0gdGhpcy5QYXJlbnRoZXNlcyhwYXJlbnRoZXNlcywgdGhpcy5zY29wZS5BdHJ1bGVQcmVsdWRlKTtcbiAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICBicmVhayBzY2FuO1xuICAgICAgICB9XG5cbiAgICAgICAgY2hpbGRyZW4ucHVzaChjaGlsZCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGNoaWxkcmVuO1xufVxuXG5jb25zdCBzdXBwb3J0cyA9IHtcbiAgICBwYXJzZToge1xuICAgICAgICBwcmVsdWRlKCkge1xuICAgICAgICAgICAgY29uc3QgY2hpbGRyZW4gPSByZWFkU2VxdWVuY2UuY2FsbCh0aGlzKTtcblxuICAgICAgICAgICAgaWYgKHRoaXMuZ2V0Rmlyc3RMaXN0Tm9kZShjaGlsZHJlbikgPT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmVycm9yKCdDb25kaXRpb24gaXMgZXhwZWN0ZWQnKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIGNoaWxkcmVuO1xuICAgICAgICB9LFxuICAgICAgICBibG9jaygpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLkJsb2NrKGZhbHNlKTtcbiAgICAgICAgfVxuICAgIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gc3VwcG9ydHM7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///30970\n")},34855:(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval("\n\nconst data = __webpack_require__(28594);\nconst index = __webpack_require__(38603);\n\nconst lexerConfig = {\n    generic: true,\n    ...data,\n    node: index\n};\n\nmodule.exports = lexerConfig;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzQ4NTUuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsYUFBYSxtQkFBTyxDQUFDLEtBQWdCO0FBQ3JDLGNBQWMsbUJBQU8sQ0FBQyxLQUFtQjs7QUFFekM7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSIsInNvdXJjZXMiOlsid2VicGFjazovL2Jsb2NrYml0ZS8uL25vZGVfbW9kdWxlcy9jc3NvL25vZGVfbW9kdWxlcy9jc3MtdHJlZS9janMvc3ludGF4L2NvbmZpZy9sZXhlci5janM/MDQ2YSJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmNvbnN0IGRhdGEgPSByZXF1aXJlKCcuLi8uLi9kYXRhLmNqcycpO1xuY29uc3QgaW5kZXggPSByZXF1aXJlKCcuLi9ub2RlL2luZGV4LmNqcycpO1xuXG5jb25zdCBsZXhlckNvbmZpZyA9IHtcbiAgICBnZW5lcmljOiB0cnVlLFxuICAgIC4uLmRhdGEsXG4gICAgbm9kZTogaW5kZXhcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gbGV4ZXJDb25maWc7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///34855\n")},31271:module=>{"use strict";eval("\n\nconst { hasOwnProperty } = Object.prototype;\nconst shape = {\n    generic: true,\n    types: appendOrAssign,\n    atrules: {\n        prelude: appendOrAssignOrNull,\n        descriptors: appendOrAssignOrNull\n    },\n    properties: appendOrAssign,\n    parseContext: assign,\n    scope: deepAssign,\n    atrule: ['parse'],\n    pseudo: ['parse'],\n    node: ['name', 'structure', 'parse', 'generate', 'walkContext']\n};\n\nfunction isObject(value) {\n    return value && value.constructor === Object;\n}\n\nfunction copy(value) {\n    return isObject(value)\n        ? { ...value }\n        : value;\n}\n\nfunction assign(dest, src) {\n    return Object.assign(dest, src);\n}\n\nfunction deepAssign(dest, src) {\n    for (const key in src) {\n        if (hasOwnProperty.call(src, key)) {\n            if (isObject(dest[key])) {\n                deepAssign(dest[key], src[key]);\n            } else {\n                dest[key] = copy(src[key]);\n            }\n        }\n    }\n\n    return dest;\n}\n\nfunction append(a, b) {\n    if (typeof b === 'string' && /^\\s*\\|/.test(b)) {\n        return typeof a === 'string'\n            ? a + b\n            : b.replace(/^\\s*\\|\\s*/, '');\n    }\n\n    return b || null;\n}\n\nfunction appendOrAssign(a, b) {\n    if (typeof b === 'string') {\n        return append(a, b);\n    }\n\n    const result = { ...a };\n    for (let key in b) {\n        if (hasOwnProperty.call(b, key)) {\n            result[key] = append(hasOwnProperty.call(a, key) ? a[key] : undefined, b[key]);\n        }\n    }\n\n    return result;\n}\n\nfunction appendOrAssignOrNull(a, b) {\n    const result = appendOrAssign(a, b);\n\n    return !isObject(result) || Object.keys(result).length\n        ? result\n        : null;\n}\n\nfunction mix(dest, src, shape) {\n    for (const key in shape) {\n        if (hasOwnProperty.call(shape, key) === false) {\n            continue;\n        }\n\n        if (shape[key] === true) {\n            if (hasOwnProperty.call(src, key)) {\n                dest[key] = copy(src[key]);\n            }\n        } else if (shape[key]) {\n            if (typeof shape[key] === 'function') {\n                const fn = shape[key];\n                dest[key] = fn({}, dest[key]);\n                dest[key] = fn(dest[key] || {}, src[key]);\n            } else if (isObject(shape[key])) {\n                const result = {};\n\n                for (let name in dest[key]) {\n                    result[name] = mix({}, dest[key][name], shape[key]);\n                }\n\n                for (let name in src[key]) {\n                    result[name] = mix(result[name] || {}, src[key][name], shape[key]);\n                }\n\n                dest[key] = result;\n            } else if (Array.isArray(shape[key])) {\n                const res = {};\n                const innerShape = shape[key].reduce(function(s, k) {\n                    s[k] = true;\n                    return s;\n                }, {});\n\n                for (const [name, value] of Object.entries(dest[key] || {})) {\n                    res[name] = {};\n                    if (value) {\n                        mix(res[name], value, innerShape);\n                    }\n                }\n\n                for (const name in src[key]) {\n                    if (hasOwnProperty.call(src[key], name)) {\n                        if (!res[name]) {\n                            res[name] = {};\n                        }\n\n                        if (src[key] && src[key][name]) {\n                            mix(res[name], src[key][name], innerShape);\n                        }\n                    }\n                }\n\n                dest[key] = res;\n            }\n        }\n    }\n    return dest;\n}\n\nconst mix$1 = (dest, src) => mix(dest, src, shape);\n\nmodule.exports = mix$1;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzEyNzEuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsUUFBUSxpQkFBaUI7QUFDekI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjO0FBQ2Q7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxxQkFBcUI7QUFDckI7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0EsaUNBQWlDO0FBQ2pDLDhDQUE4QztBQUM5QyxjQUFjO0FBQ2Q7O0FBRUE7QUFDQSx5Q0FBeUM7QUFDekM7O0FBRUE7QUFDQSx5REFBeUQ7QUFDekQ7O0FBRUE7QUFDQSxjQUFjO0FBQ2Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUIsSUFBSTs7QUFFckIsMEVBQTBFO0FBQzFFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQSIsInNvdXJjZXMiOlsid2VicGFjazovL2Jsb2NrYml0ZS8uL25vZGVfbW9kdWxlcy9jc3NvL25vZGVfbW9kdWxlcy9jc3MtdHJlZS9janMvc3ludGF4L2NvbmZpZy9taXguY2pzPzRkZDMiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCB7IGhhc093blByb3BlcnR5IH0gPSBPYmplY3QucHJvdG90eXBlO1xuY29uc3Qgc2hhcGUgPSB7XG4gICAgZ2VuZXJpYzogdHJ1ZSxcbiAgICB0eXBlczogYXBwZW5kT3JBc3NpZ24sXG4gICAgYXRydWxlczoge1xuICAgICAgICBwcmVsdWRlOiBhcHBlbmRPckFzc2lnbk9yTnVsbCxcbiAgICAgICAgZGVzY3JpcHRvcnM6IGFwcGVuZE9yQXNzaWduT3JOdWxsXG4gICAgfSxcbiAgICBwcm9wZXJ0aWVzOiBhcHBlbmRPckFzc2lnbixcbiAgICBwYXJzZUNvbnRleHQ6IGFzc2lnbixcbiAgICBzY29wZTogZGVlcEFzc2lnbixcbiAgICBhdHJ1bGU6IFsncGFyc2UnXSxcbiAgICBwc2V1ZG86IFsncGFyc2UnXSxcbiAgICBub2RlOiBbJ25hbWUnLCAnc3RydWN0dXJlJywgJ3BhcnNlJywgJ2dlbmVyYXRlJywgJ3dhbGtDb250ZXh0J11cbn07XG5cbmZ1bmN0aW9uIGlzT2JqZWN0KHZhbHVlKSB7XG4gICAgcmV0dXJuIHZhbHVlICYmIHZhbHVlLmNvbnN0cnVjdG9yID09PSBPYmplY3Q7XG59XG5cbmZ1bmN0aW9uIGNvcHkodmFsdWUpIHtcbiAgICByZXR1cm4gaXNPYmplY3QodmFsdWUpXG4gICAgICAgID8geyAuLi52YWx1ZSB9XG4gICAgICAgIDogdmFsdWU7XG59XG5cbmZ1bmN0aW9uIGFzc2lnbihkZXN0LCBzcmMpIHtcbiAgICByZXR1cm4gT2JqZWN0LmFzc2lnbihkZXN0LCBzcmMpO1xufVxuXG5mdW5jdGlvbiBkZWVwQXNzaWduKGRlc3QsIHNyYykge1xuICAgIGZvciAoY29uc3Qga2V5IGluIHNyYykge1xuICAgICAgICBpZiAoaGFzT3duUHJvcGVydHkuY2FsbChzcmMsIGtleSkpIHtcbiAgICAgICAgICAgIGlmIChpc09iamVjdChkZXN0W2tleV0pKSB7XG4gICAgICAgICAgICAgICAgZGVlcEFzc2lnbihkZXN0W2tleV0sIHNyY1trZXldKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgZGVzdFtrZXldID0gY29weShzcmNba2V5XSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gZGVzdDtcbn1cblxuZnVuY3Rpb24gYXBwZW5kKGEsIGIpIHtcbiAgICBpZiAodHlwZW9mIGIgPT09ICdzdHJpbmcnICYmIC9eXFxzKlxcfC8udGVzdChiKSkge1xuICAgICAgICByZXR1cm4gdHlwZW9mIGEgPT09ICdzdHJpbmcnXG4gICAgICAgICAgICA/IGEgKyBiXG4gICAgICAgICAgICA6IGIucmVwbGFjZSgvXlxccypcXHxcXHMqLywgJycpO1xuICAgIH1cblxuICAgIHJldHVybiBiIHx8IG51bGw7XG59XG5cbmZ1bmN0aW9uIGFwcGVuZE9yQXNzaWduKGEsIGIpIHtcbiAgICBpZiAodHlwZW9mIGIgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHJldHVybiBhcHBlbmQoYSwgYik7XG4gICAgfVxuXG4gICAgY29uc3QgcmVzdWx0ID0geyAuLi5hIH07XG4gICAgZm9yIChsZXQga2V5IGluIGIpIHtcbiAgICAgICAgaWYgKGhhc093blByb3BlcnR5LmNhbGwoYiwga2V5KSkge1xuICAgICAgICAgICAgcmVzdWx0W2tleV0gPSBhcHBlbmQoaGFzT3duUHJvcGVydHkuY2FsbChhLCBrZXkpID8gYVtrZXldIDogdW5kZWZpbmVkLCBiW2tleV0pO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZnVuY3Rpb24gYXBwZW5kT3JBc3NpZ25Pck51bGwoYSwgYikge1xuICAgIGNvbnN0IHJlc3VsdCA9IGFwcGVuZE9yQXNzaWduKGEsIGIpO1xuXG4gICAgcmV0dXJuICFpc09iamVjdChyZXN1bHQpIHx8IE9iamVjdC5rZXlzKHJlc3VsdCkubGVuZ3RoXG4gICAgICAgID8gcmVzdWx0XG4gICAgICAgIDogbnVsbDtcbn1cblxuZnVuY3Rpb24gbWl4KGRlc3QsIHNyYywgc2hhcGUpIHtcbiAgICBmb3IgKGNvbnN0IGtleSBpbiBzaGFwZSkge1xuICAgICAgICBpZiAoaGFzT3duUHJvcGVydHkuY2FsbChzaGFwZSwga2V5KSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHNoYXBlW2tleV0gPT09IHRydWUpIHtcbiAgICAgICAgICAgIGlmIChoYXNPd25Qcm9wZXJ0eS5jYWxsKHNyYywga2V5KSkge1xuICAgICAgICAgICAgICAgIGRlc3Rba2V5XSA9IGNvcHkoc3JjW2tleV0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKHNoYXBlW2tleV0pIHtcbiAgICAgICAgICAgIGlmICh0eXBlb2Ygc2hhcGVba2V5XSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICAgIGNvbnN0IGZuID0gc2hhcGVba2V5XTtcbiAgICAgICAgICAgICAgICBkZXN0W2tleV0gPSBmbih7fSwgZGVzdFtrZXldKTtcbiAgICAgICAgICAgICAgICBkZXN0W2tleV0gPSBmbihkZXN0W2tleV0gfHwge30sIHNyY1trZXldKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaXNPYmplY3Qoc2hhcGVba2V5XSkpIHtcbiAgICAgICAgICAgICAgICBjb25zdCByZXN1bHQgPSB7fTtcblxuICAgICAgICAgICAgICAgIGZvciAobGV0IG5hbWUgaW4gZGVzdFtrZXldKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdFtuYW1lXSA9IG1peCh7fSwgZGVzdFtrZXldW25hbWVdLCBzaGFwZVtrZXldKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBmb3IgKGxldCBuYW1lIGluIHNyY1trZXldKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdFtuYW1lXSA9IG1peChyZXN1bHRbbmFtZV0gfHwge30sIHNyY1trZXldW25hbWVdLCBzaGFwZVtrZXldKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBkZXN0W2tleV0gPSByZXN1bHQ7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKEFycmF5LmlzQXJyYXkoc2hhcGVba2V5XSkpIHtcbiAgICAgICAgICAgICAgICBjb25zdCByZXMgPSB7fTtcbiAgICAgICAgICAgICAgICBjb25zdCBpbm5lclNoYXBlID0gc2hhcGVba2V5XS5yZWR1Y2UoZnVuY3Rpb24ocywgaykge1xuICAgICAgICAgICAgICAgICAgICBzW2tdID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHM7XG4gICAgICAgICAgICAgICAgfSwge30pO1xuXG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCBbbmFtZSwgdmFsdWVdIG9mIE9iamVjdC5lbnRyaWVzKGRlc3Rba2V5XSB8fCB7fSkpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzW25hbWVdID0ge307XG4gICAgICAgICAgICAgICAgICAgIGlmICh2YWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgbWl4KHJlc1tuYW1lXSwgdmFsdWUsIGlubmVyU2hhcGUpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCBuYW1lIGluIHNyY1trZXldKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChoYXNPd25Qcm9wZXJ0eS5jYWxsKHNyY1trZXldLCBuYW1lKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFyZXNbbmFtZV0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXNbbmFtZV0gPSB7fTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHNyY1trZXldICYmIHNyY1trZXldW25hbWVdKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWl4KHJlc1tuYW1lXSwgc3JjW2tleV1bbmFtZV0sIGlubmVyU2hhcGUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgZGVzdFtrZXldID0gcmVzO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBkZXN0O1xufVxuXG5jb25zdCBtaXgkMSA9IChkZXN0LCBzcmMpID0+IG1peChkZXN0LCBzcmMsIHNoYXBlKTtcblxubW9kdWxlLmV4cG9ydHMgPSBtaXgkMTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///31271\n")},59690:(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval("\n\nconst index = __webpack_require__(1075);\nconst index$1 = __webpack_require__(20394);\nconst index$2 = __webpack_require__(56225);\nconst indexParse = __webpack_require__(44713);\n\nconst config = {\n    parseContext: {\n        default: 'StyleSheet',\n        stylesheet: 'StyleSheet',\n        atrule: 'Atrule',\n        atrulePrelude(options) {\n            return this.AtrulePrelude(options.atrule ? String(options.atrule) : null);\n        },\n        mediaQueryList: 'MediaQueryList',\n        mediaQuery: 'MediaQuery',\n        rule: 'Rule',\n        selectorList: 'SelectorList',\n        selector: 'Selector',\n        block() {\n            return this.Block(true);\n        },\n        declarationList: 'DeclarationList',\n        declaration: 'Declaration',\n        value: 'Value'\n    },\n    scope: index,\n    atrule: index$1,\n    pseudo: index$2,\n    node: indexParse\n};\n\nmodule.exports = config;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNTk2OTAuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsY0FBYyxtQkFBTyxDQUFDLElBQW9CO0FBQzFDLGdCQUFnQixtQkFBTyxDQUFDLEtBQXFCO0FBQzdDLGdCQUFnQixtQkFBTyxDQUFDLEtBQXFCO0FBQzdDLG1CQUFtQixtQkFBTyxDQUFDLEtBQXlCOztBQUVwRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSIsInNvdXJjZXMiOlsid2VicGFjazovL2Jsb2NrYml0ZS8uL25vZGVfbW9kdWxlcy9jc3NvL25vZGVfbW9kdWxlcy9jc3MtdHJlZS9janMvc3ludGF4L2NvbmZpZy9wYXJzZXIuY2pzP2MwNjQiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBpbmRleCA9IHJlcXVpcmUoJy4uL3Njb3BlL2luZGV4LmNqcycpO1xuY29uc3QgaW5kZXgkMSA9IHJlcXVpcmUoJy4uL2F0cnVsZS9pbmRleC5janMnKTtcbmNvbnN0IGluZGV4JDIgPSByZXF1aXJlKCcuLi9wc2V1ZG8vaW5kZXguY2pzJyk7XG5jb25zdCBpbmRleFBhcnNlID0gcmVxdWlyZSgnLi4vbm9kZS9pbmRleC1wYXJzZS5janMnKTtcblxuY29uc3QgY29uZmlnID0ge1xuICAgIHBhcnNlQ29udGV4dDoge1xuICAgICAgICBkZWZhdWx0OiAnU3R5bGVTaGVldCcsXG4gICAgICAgIHN0eWxlc2hlZXQ6ICdTdHlsZVNoZWV0JyxcbiAgICAgICAgYXRydWxlOiAnQXRydWxlJyxcbiAgICAgICAgYXRydWxlUHJlbHVkZShvcHRpb25zKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5BdHJ1bGVQcmVsdWRlKG9wdGlvbnMuYXRydWxlID8gU3RyaW5nKG9wdGlvbnMuYXRydWxlKSA6IG51bGwpO1xuICAgICAgICB9LFxuICAgICAgICBtZWRpYVF1ZXJ5TGlzdDogJ01lZGlhUXVlcnlMaXN0JyxcbiAgICAgICAgbWVkaWFRdWVyeTogJ01lZGlhUXVlcnknLFxuICAgICAgICBydWxlOiAnUnVsZScsXG4gICAgICAgIHNlbGVjdG9yTGlzdDogJ1NlbGVjdG9yTGlzdCcsXG4gICAgICAgIHNlbGVjdG9yOiAnU2VsZWN0b3InLFxuICAgICAgICBibG9jaygpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLkJsb2NrKHRydWUpO1xuICAgICAgICB9LFxuICAgICAgICBkZWNsYXJhdGlvbkxpc3Q6ICdEZWNsYXJhdGlvbkxpc3QnLFxuICAgICAgICBkZWNsYXJhdGlvbjogJ0RlY2xhcmF0aW9uJyxcbiAgICAgICAgdmFsdWU6ICdWYWx1ZSdcbiAgICB9LFxuICAgIHNjb3BlOiBpbmRleCxcbiAgICBhdHJ1bGU6IGluZGV4JDEsXG4gICAgcHNldWRvOiBpbmRleCQyLFxuICAgIG5vZGU6IGluZGV4UGFyc2Vcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gY29uZmlnO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///59690\n")},91009:(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval("\n\nconst index = __webpack_require__(38603);\n\nconst config = {\n    node: index\n};\n\nmodule.exports = config;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOTEwMDkuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsY0FBYyxtQkFBTyxDQUFDLEtBQW1COztBQUV6QztBQUNBO0FBQ0E7O0FBRUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ibG9ja2JpdGUvLi9ub2RlX21vZHVsZXMvY3Nzby9ub2RlX21vZHVsZXMvY3NzLXRyZWUvY2pzL3N5bnRheC9jb25maWcvd2Fsa2VyLmNqcz9hYjZlIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuY29uc3QgaW5kZXggPSByZXF1aXJlKCcuLi9ub2RlL2luZGV4LmNqcycpO1xuXG5jb25zdCBjb25maWcgPSB7XG4gICAgbm9kZTogaW5kZXhcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gY29uZmlnO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///91009\n")},25962:(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval("\n\nconst index = __webpack_require__(68328);\nconst create = __webpack_require__(37146);\nconst create$2 = __webpack_require__(83176);\nconst create$3 = __webpack_require__(29515);\nconst create$1 = __webpack_require__(7339);\nconst Lexer = __webpack_require__(73627);\nconst mix = __webpack_require__(31271);\n\nfunction createSyntax(config) {\n    const parse = create.createParser(config);\n    const walk = create$1.createWalker(config);\n    const generate = create$2.createGenerator(config);\n    const { fromPlainObject, toPlainObject } = create$3.createConvertor(walk);\n\n    const syntax = {\n        lexer: null,\n        createLexer: config => new Lexer.Lexer(config, syntax, syntax.lexer.structure),\n\n        tokenize: index.tokenize,\n        parse,\n        generate,\n\n        walk,\n        find: walk.find,\n        findLast: walk.findLast,\n        findAll: walk.findAll,\n\n        fromPlainObject,\n        toPlainObject,\n\n        fork(extension) {\n            const base = mix({}, config); // copy of config\n\n            return createSyntax(\n                typeof extension === 'function'\n                    ? extension(base, Object.assign)\n                    : mix(base, extension)\n            );\n        }\n    };\n\n    syntax.lexer = new Lexer.Lexer({\n        generic: true,\n        types: config.types,\n        atrules: config.atrules,\n        properties: config.properties,\n        node: config.node\n    }, syntax);\n\n    return syntax;\n}\nconst createSyntax$1 = config => createSyntax(mix({}, config));\n\nmodule.exports = createSyntax$1;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjU5NjIuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsY0FBYyxtQkFBTyxDQUFDLEtBQXdCO0FBQzlDLGVBQWUsbUJBQU8sQ0FBQyxLQUFzQjtBQUM3QyxpQkFBaUIsbUJBQU8sQ0FBQyxLQUF5QjtBQUNsRCxpQkFBaUIsbUJBQU8sQ0FBQyxLQUF5QjtBQUNsRCxpQkFBaUIsbUJBQU8sQ0FBQyxJQUFzQjtBQUMvQyxjQUFjLG1CQUFPLENBQUMsS0FBb0I7QUFDMUMsWUFBWSxtQkFBTyxDQUFDLEtBQWtCOztBQUV0QztBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVksaUNBQWlDOztBQUU3QztBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQSwrQkFBK0IsV0FBVzs7QUFFMUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0Esb0RBQW9EOztBQUVwRCIsInNvdXJjZXMiOlsid2VicGFjazovL2Jsb2NrYml0ZS8uL25vZGVfbW9kdWxlcy9jc3NvL25vZGVfbW9kdWxlcy9jc3MtdHJlZS9janMvc3ludGF4L2NyZWF0ZS5janM/MzRmNyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmNvbnN0IGluZGV4ID0gcmVxdWlyZSgnLi4vdG9rZW5pemVyL2luZGV4LmNqcycpO1xuY29uc3QgY3JlYXRlID0gcmVxdWlyZSgnLi4vcGFyc2VyL2NyZWF0ZS5janMnKTtcbmNvbnN0IGNyZWF0ZSQyID0gcmVxdWlyZSgnLi4vZ2VuZXJhdG9yL2NyZWF0ZS5janMnKTtcbmNvbnN0IGNyZWF0ZSQzID0gcmVxdWlyZSgnLi4vY29udmVydG9yL2NyZWF0ZS5janMnKTtcbmNvbnN0IGNyZWF0ZSQxID0gcmVxdWlyZSgnLi4vd2Fsa2VyL2NyZWF0ZS5janMnKTtcbmNvbnN0IExleGVyID0gcmVxdWlyZSgnLi4vbGV4ZXIvTGV4ZXIuY2pzJyk7XG5jb25zdCBtaXggPSByZXF1aXJlKCcuL2NvbmZpZy9taXguY2pzJyk7XG5cbmZ1bmN0aW9uIGNyZWF0ZVN5bnRheChjb25maWcpIHtcbiAgICBjb25zdCBwYXJzZSA9IGNyZWF0ZS5jcmVhdGVQYXJzZXIoY29uZmlnKTtcbiAgICBjb25zdCB3YWxrID0gY3JlYXRlJDEuY3JlYXRlV2Fsa2VyKGNvbmZpZyk7XG4gICAgY29uc3QgZ2VuZXJhdGUgPSBjcmVhdGUkMi5jcmVhdGVHZW5lcmF0b3IoY29uZmlnKTtcbiAgICBjb25zdCB7IGZyb21QbGFpbk9iamVjdCwgdG9QbGFpbk9iamVjdCB9ID0gY3JlYXRlJDMuY3JlYXRlQ29udmVydG9yKHdhbGspO1xuXG4gICAgY29uc3Qgc3ludGF4ID0ge1xuICAgICAgICBsZXhlcjogbnVsbCxcbiAgICAgICAgY3JlYXRlTGV4ZXI6IGNvbmZpZyA9PiBuZXcgTGV4ZXIuTGV4ZXIoY29uZmlnLCBzeW50YXgsIHN5bnRheC5sZXhlci5zdHJ1Y3R1cmUpLFxuXG4gICAgICAgIHRva2VuaXplOiBpbmRleC50b2tlbml6ZSxcbiAgICAgICAgcGFyc2UsXG4gICAgICAgIGdlbmVyYXRlLFxuXG4gICAgICAgIHdhbGssXG4gICAgICAgIGZpbmQ6IHdhbGsuZmluZCxcbiAgICAgICAgZmluZExhc3Q6IHdhbGsuZmluZExhc3QsXG4gICAgICAgIGZpbmRBbGw6IHdhbGsuZmluZEFsbCxcblxuICAgICAgICBmcm9tUGxhaW5PYmplY3QsXG4gICAgICAgIHRvUGxhaW5PYmplY3QsXG5cbiAgICAgICAgZm9yayhleHRlbnNpb24pIHtcbiAgICAgICAgICAgIGNvbnN0IGJhc2UgPSBtaXgoe30sIGNvbmZpZyk7IC8vIGNvcHkgb2YgY29uZmlnXG5cbiAgICAgICAgICAgIHJldHVybiBjcmVhdGVTeW50YXgoXG4gICAgICAgICAgICAgICAgdHlwZW9mIGV4dGVuc2lvbiA9PT0gJ2Z1bmN0aW9uJ1xuICAgICAgICAgICAgICAgICAgICA/IGV4dGVuc2lvbihiYXNlLCBPYmplY3QuYXNzaWduKVxuICAgICAgICAgICAgICAgICAgICA6IG1peChiYXNlLCBleHRlbnNpb24pXG4gICAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIHN5bnRheC5sZXhlciA9IG5ldyBMZXhlci5MZXhlcih7XG4gICAgICAgIGdlbmVyaWM6IHRydWUsXG4gICAgICAgIHR5cGVzOiBjb25maWcudHlwZXMsXG4gICAgICAgIGF0cnVsZXM6IGNvbmZpZy5hdHJ1bGVzLFxuICAgICAgICBwcm9wZXJ0aWVzOiBjb25maWcucHJvcGVydGllcyxcbiAgICAgICAgbm9kZTogY29uZmlnLm5vZGVcbiAgICB9LCBzeW50YXgpO1xuXG4gICAgcmV0dXJuIHN5bnRheDtcbn1cbmNvbnN0IGNyZWF0ZVN5bnRheCQxID0gY29uZmlnID0+IGNyZWF0ZVN5bnRheChtaXgoe30sIGNvbmZpZykpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGNyZWF0ZVN5bnRheCQxO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///25962\n")},49023:module=>{"use strict";eval("\n\n// legacy IE function\n// expression( <any-value> )\nfunction expressionFn() {\n    return this.createSingleNodeList(\n        this.Raw(this.tokenIndex, null, false)\n    );\n}\n\nmodule.exports = expressionFn;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDkwMjMuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ibG9ja2JpdGUvLi9ub2RlX21vZHVsZXMvY3Nzby9ub2RlX21vZHVsZXMvY3NzLXRyZWUvY2pzL3N5bnRheC9mdW5jdGlvbi9leHByZXNzaW9uLmNqcz9mYmU5Il0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuLy8gbGVnYWN5IElFIGZ1bmN0aW9uXG4vLyBleHByZXNzaW9uKCA8YW55LXZhbHVlPiApXG5mdW5jdGlvbiBleHByZXNzaW9uRm4oKSB7XG4gICAgcmV0dXJuIHRoaXMuY3JlYXRlU2luZ2xlTm9kZUxpc3QoXG4gICAgICAgIHRoaXMuUmF3KHRoaXMudG9rZW5JbmRleCwgbnVsbCwgZmFsc2UpXG4gICAgKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBleHByZXNzaW9uRm47XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///49023\n")},32040:(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval("\n\nconst types = __webpack_require__(78783);\n\n// var( <ident> , <value>? )\nfunction varFn() {\n    const children = this.createList();\n\n    this.skipSC();\n\n    // NOTE: Don't check more than a first argument is an ident, rest checks are for lexer\n    children.push(this.Identifier());\n\n    this.skipSC();\n\n    if (this.tokenType === types.Comma) {\n        children.push(this.Operator());\n\n        const startIndex = this.tokenIndex;\n        const value = this.parseCustomProperty\n            ? this.Value(null)\n            : this.Raw(this.tokenIndex, this.consumeUntilExclamationMarkOrSemicolon, false);\n\n        if (value.type === 'Value' && value.children.isEmpty) {\n            for (let offset = startIndex - this.tokenIndex; offset <= 0; offset++) {\n                if (this.lookupType(offset) === types.WhiteSpace) {\n                    value.children.appendData({\n                        type: 'WhiteSpace',\n                        loc: null,\n                        value: ' '\n                    });\n                    break;\n                }\n            }\n        }\n\n        children.push(value);\n    }\n\n    return children;\n}\n\nmodule.exports = varFn;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzIwNDAuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsY0FBYyxtQkFBTyxDQUFDLEtBQTJCOztBQUVqRDtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsNERBQTRELGFBQWE7QUFDekU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQjtBQUNyQjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ibG9ja2JpdGUvLi9ub2RlX21vZHVsZXMvY3Nzby9ub2RlX21vZHVsZXMvY3NzLXRyZWUvY2pzL3N5bnRheC9mdW5jdGlvbi92YXIuY2pzPzBlOTgiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCB0eXBlcyA9IHJlcXVpcmUoJy4uLy4uL3Rva2VuaXplci90eXBlcy5janMnKTtcblxuLy8gdmFyKCA8aWRlbnQ+ICwgPHZhbHVlPj8gKVxuZnVuY3Rpb24gdmFyRm4oKSB7XG4gICAgY29uc3QgY2hpbGRyZW4gPSB0aGlzLmNyZWF0ZUxpc3QoKTtcblxuICAgIHRoaXMuc2tpcFNDKCk7XG5cbiAgICAvLyBOT1RFOiBEb24ndCBjaGVjayBtb3JlIHRoYW4gYSBmaXJzdCBhcmd1bWVudCBpcyBhbiBpZGVudCwgcmVzdCBjaGVja3MgYXJlIGZvciBsZXhlclxuICAgIGNoaWxkcmVuLnB1c2godGhpcy5JZGVudGlmaWVyKCkpO1xuXG4gICAgdGhpcy5za2lwU0MoKTtcblxuICAgIGlmICh0aGlzLnRva2VuVHlwZSA9PT0gdHlwZXMuQ29tbWEpIHtcbiAgICAgICAgY2hpbGRyZW4ucHVzaCh0aGlzLk9wZXJhdG9yKCkpO1xuXG4gICAgICAgIGNvbnN0IHN0YXJ0SW5kZXggPSB0aGlzLnRva2VuSW5kZXg7XG4gICAgICAgIGNvbnN0IHZhbHVlID0gdGhpcy5wYXJzZUN1c3RvbVByb3BlcnR5XG4gICAgICAgICAgICA/IHRoaXMuVmFsdWUobnVsbClcbiAgICAgICAgICAgIDogdGhpcy5SYXcodGhpcy50b2tlbkluZGV4LCB0aGlzLmNvbnN1bWVVbnRpbEV4Y2xhbWF0aW9uTWFya09yU2VtaWNvbG9uLCBmYWxzZSk7XG5cbiAgICAgICAgaWYgKHZhbHVlLnR5cGUgPT09ICdWYWx1ZScgJiYgdmFsdWUuY2hpbGRyZW4uaXNFbXB0eSkge1xuICAgICAgICAgICAgZm9yIChsZXQgb2Zmc2V0ID0gc3RhcnRJbmRleCAtIHRoaXMudG9rZW5JbmRleDsgb2Zmc2V0IDw9IDA7IG9mZnNldCsrKSB7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMubG9va3VwVHlwZShvZmZzZXQpID09PSB0eXBlcy5XaGl0ZVNwYWNlKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhbHVlLmNoaWxkcmVuLmFwcGVuZERhdGEoe1xuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogJ1doaXRlU3BhY2UnLFxuICAgICAgICAgICAgICAgICAgICAgICAgbG9jOiBudWxsLFxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6ICcgJ1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgY2hpbGRyZW4ucHVzaCh2YWx1ZSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGNoaWxkcmVuO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHZhckZuO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///32040\n")},94058:(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval("\n\nconst create = __webpack_require__(25962);\nconst lexer = __webpack_require__(34855);\nconst parser = __webpack_require__(59690);\nconst walker = __webpack_require__(91009);\n\nconst syntax = create({\n    ...lexer,\n    ...parser,\n    ...walker\n});\n\nmodule.exports = syntax;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOTQwNTguanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsZUFBZSxtQkFBTyxDQUFDLEtBQWM7QUFDckMsY0FBYyxtQkFBTyxDQUFDLEtBQW9CO0FBQzFDLGVBQWUsbUJBQU8sQ0FBQyxLQUFxQjtBQUM1QyxlQUFlLG1CQUFPLENBQUMsS0FBcUI7O0FBRTVDO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQzs7QUFFRCIsInNvdXJjZXMiOlsid2VicGFjazovL2Jsb2NrYml0ZS8uL25vZGVfbW9kdWxlcy9jc3NvL25vZGVfbW9kdWxlcy9jc3MtdHJlZS9janMvc3ludGF4L2luZGV4LmNqcz8xYjkyIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuY29uc3QgY3JlYXRlID0gcmVxdWlyZSgnLi9jcmVhdGUuY2pzJyk7XG5jb25zdCBsZXhlciA9IHJlcXVpcmUoJy4vY29uZmlnL2xleGVyLmNqcycpO1xuY29uc3QgcGFyc2VyID0gcmVxdWlyZSgnLi9jb25maWcvcGFyc2VyLmNqcycpO1xuY29uc3Qgd2Fsa2VyID0gcmVxdWlyZSgnLi9jb25maWcvd2Fsa2VyLmNqcycpO1xuXG5jb25zdCBzeW50YXggPSBjcmVhdGUoe1xuICAgIC4uLmxleGVyLFxuICAgIC4uLnBhcnNlcixcbiAgICAuLi53YWxrZXJcbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHN5bnRheDtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///94058\n")},3826:(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";eval("\n\nconst types = __webpack_require__(78783);\nconst charCodeDefinitions = __webpack_require__(87351);\n\nconst PLUSSIGN = 0x002B;    // U+002B PLUS SIGN (+)\nconst HYPHENMINUS = 0x002D; // U+002D HYPHEN-MINUS (-)\nconst N = 0x006E;           // U+006E LATIN SMALL LETTER N (n)\nconst DISALLOW_SIGN = true;\nconst ALLOW_SIGN = false;\n\nfunction checkInteger(offset, disallowSign) {\n    let pos = this.tokenStart + offset;\n    const code = this.charCodeAt(pos);\n\n    if (code === PLUSSIGN || code === HYPHENMINUS) {\n        if (disallowSign) {\n            this.error('Number sign is not allowed');\n        }\n        pos++;\n    }\n\n    for (; pos < this.tokenEnd; pos++) {\n        if (!charCodeDefinitions.isDigit(this.charCodeAt(pos))) {\n            this.error('Integer is expected', pos);\n        }\n    }\n}\n\nfunction checkTokenIsInteger(disallowSign) {\n    return checkInteger.call(this, 0, disallowSign);\n}\n\nfunction expectCharCode(offset, code) {\n    if (!this.cmpChar(this.tokenStart + offset, code)) {\n        let msg = '';\n\n        switch (code) {\n            case N:\n                msg = 'N is expected';\n                break;\n            case HYPHENMINUS:\n                msg = 'HyphenMinus is expected';\n                break;\n        }\n\n        this.error(msg, this.tokenStart + offset);\n    }\n}\n\n// ... <signed-integer>\n// ... ['+' | '-'] <signless-integer>\nfunction consumeB() {\n    let offset = 0;\n    let sign = 0;\n    let type = this.tokenType;\n\n    while (type === types.WhiteSpace || type === types.Comment) {\n        type = this.lookupType(++offset);\n    }\n\n    if (type !== types.Number) {\n        if (this.isDelim(PLUSSIGN, offset) ||\n            this.isDelim(HYPHENMINUS, offset)) {\n            sign = this.isDelim(PLUSSIGN, offset) ? PLUSSIGN : HYPHENMINUS;\n\n            do {\n                type = this.lookupType(++offset);\n            } while (type === types.WhiteSpace || type === types.Comment);\n\n            if (type !== types.Number) {\n                this.skip(offset);\n                checkTokenIsInteger.call(this, DISALLOW_SIGN);\n            }\n        } else {\n            return null;\n        }\n    }\n\n    if (offset > 0) {\n        this.skip(offset);\n    }\n\n    if (sign === 0) {\n        type = this.charCodeAt(this.tokenStart);\n        if (type !== PLUSSIGN && type !== HYPHENMINUS) {\n            this.error('Number sign is expected');\n        }\n    }\n\n    checkTokenIsInteger.call(this, sign !== 0);\n    return sign === HYPHENMINUS ? '-' + this.consume(types.Number) : this.consume(types.Number);\n}\n\n// An+B microsyntax https://www.w3.org/TR/css-syntax-3/#anb\nconst name = 'AnPlusB';\nconst structure = {\n    a: [String, null],\n    b: [String, null]\n};\n\nfunction parse() {\n    /* eslint-disable brace-style*/\n    const start = this.tokenStart;\n    let a = null;\n    let b = null;\n\n    // <integer>\n    if (this.tokenType === types.Number) {\n        checkTokenIsInteger.call(this, ALLOW_SIGN);\n        b = this.consume(types.Number);\n    }\n\n    // -n\n    // -n <signed-integer>\n    // -n ['+' | '-'] <signless-integer>\n    // -n- <signless-integer>\n    // <dashndashdigit-ident>\n    else if (this.tokenType === types.Ident && this.cmpChar(this.tokenStart, HYPHENMINUS)) {\n        a = '-1';\n\n        expectCharCode.call(this, 1, N);\n\n        switch (this.tokenEnd - this.tokenStart) {\n            // -n\n            // -n <signed-integer>\n            // -n ['+' | '-'] <signless-integer>\n            case 2:\n                this.next();\n                b = consumeB.call(this);\n                break;\n\n            // -n- <signless-integer>\n            case 3:\n                expectCharCode.call(this, 2, HYPHENMINUS);\n\n                this.next();\n                this.skipSC();\n\n                checkTokenIsInteger.call(this, DISALLOW_SIGN);\n\n                b = '-' + this.consume(types.Number);\n                break;\n\n            // <dashndashdigit-ident>\n            default:\n                expectCharCode.call(this, 2, HYPHENMINUS);\n                checkInteger.call(this, 3, DISALLOW_SIGN);\n                this.next();\n\n                b = this.substrToCursor(start + 2);\n        }\n    }\n\n    // '+'? n\n    // '+'? n <signed-integer>\n    // '+'? n ['+' | '-'] <signless-integer>\n    // '+'? n- <signless-integer>\n    // '+'? <ndashdigit-ident>\n    else if (this.tokenType === types.Ident || (this.isDelim(PLUSSIGN) && this.lookupType(1) === types.Ident)) {\n        let sign = 0;\n        a = '1';\n\n        // just ignore a plus\n        if (this.isDelim(PLUSSIGN)) {\n            sign = 1;\n            this.next();\n        }\n\n        expectCharCode.call(this, 0, N);\n\n        switch (this.tokenEnd - this.tokenStart) {\n            // '+'? n\n            // '+'? n <signed-integer>\n            // '+'? n ['+' | '-'] <signless-integer>\n            case 1:\n                this.next();\n                b = consumeB.call(this);\n                break;\n\n            // '+'? n- <signless-integer>\n            case 2:\n                expectCharCode.call(this, 1, HYPHENMINUS);\n\n                this.next();\n                this.skipSC();\n\n                checkTokenIsInteger.call(this, DISALLOW_SIGN);\n\n                b = '-' + this.consume(types.Number);\n                break;\n\n            // '+'? <ndashdigit-ident>\n            default:\n                expectCharCode.call(this, 1, HYPHENMINUS);\n                checkInteger.call(this, 2, DISALLOW_SIGN);\n                this.next();\n\n                b = this.substrToCursor(start + sign + 1);\n        }\n    }\n\n    // <ndashdigit-dimension>\n    // <ndash-dimension> <signless-integer>\n    // <n-dimension>\n    // <n-dimension> <signed-integer>\n    // <n-dimension> ['+' | '-'] <signless-integer>\n    else if (this.tokenType === types.Dimension) {\n        const code = this.charCodeAt(this.tokenStart);\n        const sign = code === PLUSSIGN || code === HYPHENMINUS;\n        let i = this.tokenStart + sign;\n\n        for (; i < this.tokenEnd; i++) {\n            if (!charCodeDefinitions.isDigit(this.charCodeAt(i))) {\n                break;\n            }\n        }\n\n        if (i === this.tokenStart + sign) {\n            this.error('Integer is expected', this.tokenStart + sign);\n        }\n\n        expectCharCode.call(this, i - this.tokenStart, N);\n        a = this.substring(start, i);\n\n        // <n-dimension>\n        // <n-dimension> <signed-integer>\n        // <n-dimension> ['+' | '-'] <signless-integer>\n        if (i + 1 === this.tokenEnd) {\n            this.next();\n            b = consumeB.call(this);\n        } else {\n            expectCharCode.call(this, i - this.tokenStart + 1, HYPHENMINUS);\n\n            // <ndash-dimension> <signless-integer>\n            if (i + 2 === this.tokenEnd) {\n                this.next();\n                this.skipSC();\n                checkTokenIsInteger.call(this, DISALLOW_SIGN);\n                b = '-' + this.consume(types.Number);\n            }\n            // <ndashdigit-dimension>\n            else {\n                checkInteger.call(this, i - this.tokenStart + 2, DISALLOW_SIGN);\n                this.next();\n                b = this.substrToCursor(i + 1);\n            }\n        }\n    } else {\n        this.error();\n    }\n\n    if (a !== null && a.charCodeAt(0) === PLUSSIGN) {\n        a = a.substr(1);\n    }\n\n    if (b !== null && b.charCodeAt(0) === PLUSSIGN) {\n        b = b.substr(1);\n    }\n\n    return {\n        type: 'AnPlusB',\n        loc: this.getLocation(start, this.tokenStart),\n        a,\n        b\n    };\n}\n\nfunction generate(node) {\n    if (node.a) {\n        const a =\n            node.a === '+1' && 'n' ||\n            node.a ===  '1' && 'n' ||\n            node.a === '-1' && '-n' ||\n            node.a + 'n';\n\n        if (node.b) {\n            const b = node.b[0] === '-' || node.b[0] === '+'\n                ? node.b\n                : '+' + node.b;\n            this.tokenize(a + b);\n        } else {\n            this.tokenize(a);\n        }\n    } else {\n        this.tokenize(node.b);\n    }\n}\n\nexports.generate = generate;\nexports.name = name;\nexports.parse = parse;\nexports.structure = structure;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///3826\n")},42344:(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";eval("\n\nconst types = __webpack_require__(78783);\n\nfunction consumeRaw(startToken) {\n    return this.Raw(startToken, this.consumeUntilLeftCurlyBracketOrSemicolon, true);\n}\n\nfunction isDeclarationBlockAtrule() {\n    for (let offset = 1, type; type = this.lookupType(offset); offset++) {\n        if (type === types.RightCurlyBracket) {\n            return true;\n        }\n\n        if (type === types.LeftCurlyBracket ||\n            type === types.AtKeyword) {\n            return false;\n        }\n    }\n\n    return false;\n}\n\n\nconst name = 'Atrule';\nconst walkContext = 'atrule';\nconst structure = {\n    name: String,\n    prelude: ['AtrulePrelude', 'Raw', null],\n    block: ['Block', null]\n};\n\nfunction parse() {\n    const start = this.tokenStart;\n    let name;\n    let nameLowerCase;\n    let prelude = null;\n    let block = null;\n\n    this.eat(types.AtKeyword);\n\n    name = this.substrToCursor(start + 1);\n    nameLowerCase = name.toLowerCase();\n    this.skipSC();\n\n    // parse prelude\n    if (this.eof === false &&\n        this.tokenType !== types.LeftCurlyBracket &&\n        this.tokenType !== types.Semicolon) {\n        if (this.parseAtrulePrelude) {\n            prelude = this.parseWithFallback(this.AtrulePrelude.bind(this, name), consumeRaw);\n        } else {\n            prelude = consumeRaw.call(this, this.tokenIndex);\n        }\n\n        this.skipSC();\n    }\n\n    switch (this.tokenType) {\n        case types.Semicolon:\n            this.next();\n            break;\n\n        case types.LeftCurlyBracket:\n            if (hasOwnProperty.call(this.atrule, nameLowerCase) &&\n                typeof this.atrule[nameLowerCase].block === 'function') {\n                block = this.atrule[nameLowerCase].block.call(this);\n            } else {\n                // TODO: should consume block content as Raw?\n                block = this.Block(isDeclarationBlockAtrule.call(this));\n            }\n\n            break;\n    }\n\n    return {\n        type: 'Atrule',\n        loc: this.getLocation(start, this.tokenStart),\n        name,\n        prelude,\n        block\n    };\n}\n\nfunction generate(node) {\n    this.token(types.AtKeyword, '@' + node.name);\n\n    if (node.prelude !== null) {\n        this.node(node.prelude);\n    }\n\n    if (node.block) {\n        this.node(node.block);\n    } else {\n        this.token(types.Semicolon, ';');\n    }\n}\n\nexports.generate = generate;\nexports.name = name;\nexports.parse = parse;\nexports.structure = structure;\nexports.walkContext = walkContext;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDIzNDQuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsY0FBYyxtQkFBTyxDQUFDLEtBQTJCOztBQUVqRDtBQUNBO0FBQ0E7O0FBRUE7QUFDQSwrQkFBK0IsZ0NBQWdDO0FBQy9EO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWM7QUFDZDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxNQUFNO0FBQ04sc0NBQXNDO0FBQ3RDO0FBQ0E7O0FBRUEsZ0JBQWdCO0FBQ2hCLFlBQVk7QUFDWixhQUFhO0FBQ2IsaUJBQWlCO0FBQ2pCLG1CQUFtQiIsInNvdXJjZXMiOlsid2VicGFjazovL2Jsb2NrYml0ZS8uL25vZGVfbW9kdWxlcy9jc3NvL25vZGVfbW9kdWxlcy9jc3MtdHJlZS9janMvc3ludGF4L25vZGUvQXRydWxlLmNqcz8zYjFjIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuY29uc3QgdHlwZXMgPSByZXF1aXJlKCcuLi8uLi90b2tlbml6ZXIvdHlwZXMuY2pzJyk7XG5cbmZ1bmN0aW9uIGNvbnN1bWVSYXcoc3RhcnRUb2tlbikge1xuICAgIHJldHVybiB0aGlzLlJhdyhzdGFydFRva2VuLCB0aGlzLmNvbnN1bWVVbnRpbExlZnRDdXJseUJyYWNrZXRPclNlbWljb2xvbiwgdHJ1ZSk7XG59XG5cbmZ1bmN0aW9uIGlzRGVjbGFyYXRpb25CbG9ja0F0cnVsZSgpIHtcbiAgICBmb3IgKGxldCBvZmZzZXQgPSAxLCB0eXBlOyB0eXBlID0gdGhpcy5sb29rdXBUeXBlKG9mZnNldCk7IG9mZnNldCsrKSB7XG4gICAgICAgIGlmICh0eXBlID09PSB0eXBlcy5SaWdodEN1cmx5QnJhY2tldCkge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodHlwZSA9PT0gdHlwZXMuTGVmdEN1cmx5QnJhY2tldCB8fFxuICAgICAgICAgICAgdHlwZSA9PT0gdHlwZXMuQXRLZXl3b3JkKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gZmFsc2U7XG59XG5cblxuY29uc3QgbmFtZSA9ICdBdHJ1bGUnO1xuY29uc3Qgd2Fsa0NvbnRleHQgPSAnYXRydWxlJztcbmNvbnN0IHN0cnVjdHVyZSA9IHtcbiAgICBuYW1lOiBTdHJpbmcsXG4gICAgcHJlbHVkZTogWydBdHJ1bGVQcmVsdWRlJywgJ1JhdycsIG51bGxdLFxuICAgIGJsb2NrOiBbJ0Jsb2NrJywgbnVsbF1cbn07XG5cbmZ1bmN0aW9uIHBhcnNlKCkge1xuICAgIGNvbnN0IHN0YXJ0ID0gdGhpcy50b2tlblN0YXJ0O1xuICAgIGxldCBuYW1lO1xuICAgIGxldCBuYW1lTG93ZXJDYXNlO1xuICAgIGxldCBwcmVsdWRlID0gbnVsbDtcbiAgICBsZXQgYmxvY2sgPSBudWxsO1xuXG4gICAgdGhpcy5lYXQodHlwZXMuQXRLZXl3b3JkKTtcblxuICAgIG5hbWUgPSB0aGlzLnN1YnN0clRvQ3Vyc29yKHN0YXJ0ICsgMSk7XG4gICAgbmFtZUxvd2VyQ2FzZSA9IG5hbWUudG9Mb3dlckNhc2UoKTtcbiAgICB0aGlzLnNraXBTQygpO1xuXG4gICAgLy8gcGFyc2UgcHJlbHVkZVxuICAgIGlmICh0aGlzLmVvZiA9PT0gZmFsc2UgJiZcbiAgICAgICAgdGhpcy50b2tlblR5cGUgIT09IHR5cGVzLkxlZnRDdXJseUJyYWNrZXQgJiZcbiAgICAgICAgdGhpcy50b2tlblR5cGUgIT09IHR5cGVzLlNlbWljb2xvbikge1xuICAgICAgICBpZiAodGhpcy5wYXJzZUF0cnVsZVByZWx1ZGUpIHtcbiAgICAgICAgICAgIHByZWx1ZGUgPSB0aGlzLnBhcnNlV2l0aEZhbGxiYWNrKHRoaXMuQXRydWxlUHJlbHVkZS5iaW5kKHRoaXMsIG5hbWUpLCBjb25zdW1lUmF3KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHByZWx1ZGUgPSBjb25zdW1lUmF3LmNhbGwodGhpcywgdGhpcy50b2tlbkluZGV4KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuc2tpcFNDKCk7XG4gICAgfVxuXG4gICAgc3dpdGNoICh0aGlzLnRva2VuVHlwZSkge1xuICAgICAgICBjYXNlIHR5cGVzLlNlbWljb2xvbjpcbiAgICAgICAgICAgIHRoaXMubmV4dCgpO1xuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSB0eXBlcy5MZWZ0Q3VybHlCcmFja2V0OlxuICAgICAgICAgICAgaWYgKGhhc093blByb3BlcnR5LmNhbGwodGhpcy5hdHJ1bGUsIG5hbWVMb3dlckNhc2UpICYmXG4gICAgICAgICAgICAgICAgdHlwZW9mIHRoaXMuYXRydWxlW25hbWVMb3dlckNhc2VdLmJsb2NrID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAgICAgYmxvY2sgPSB0aGlzLmF0cnVsZVtuYW1lTG93ZXJDYXNlXS5ibG9jay5jYWxsKHRoaXMpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAvLyBUT0RPOiBzaG91bGQgY29uc3VtZSBibG9jayBjb250ZW50IGFzIFJhdz9cbiAgICAgICAgICAgICAgICBibG9jayA9IHRoaXMuQmxvY2soaXNEZWNsYXJhdGlvbkJsb2NrQXRydWxlLmNhbGwodGhpcykpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBicmVhaztcbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgICB0eXBlOiAnQXRydWxlJyxcbiAgICAgICAgbG9jOiB0aGlzLmdldExvY2F0aW9uKHN0YXJ0LCB0aGlzLnRva2VuU3RhcnQpLFxuICAgICAgICBuYW1lLFxuICAgICAgICBwcmVsdWRlLFxuICAgICAgICBibG9ja1xuICAgIH07XG59XG5cbmZ1bmN0aW9uIGdlbmVyYXRlKG5vZGUpIHtcbiAgICB0aGlzLnRva2VuKHR5cGVzLkF0S2V5d29yZCwgJ0AnICsgbm9kZS5uYW1lKTtcblxuICAgIGlmIChub2RlLnByZWx1ZGUgIT09IG51bGwpIHtcbiAgICAgICAgdGhpcy5ub2RlKG5vZGUucHJlbHVkZSk7XG4gICAgfVxuXG4gICAgaWYgKG5vZGUuYmxvY2spIHtcbiAgICAgICAgdGhpcy5ub2RlKG5vZGUuYmxvY2spO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMudG9rZW4odHlwZXMuU2VtaWNvbG9uLCAnOycpO1xuICAgIH1cbn1cblxuZXhwb3J0cy5nZW5lcmF0ZSA9IGdlbmVyYXRlO1xuZXhwb3J0cy5uYW1lID0gbmFtZTtcbmV4cG9ydHMucGFyc2UgPSBwYXJzZTtcbmV4cG9ydHMuc3RydWN0dXJlID0gc3RydWN0dXJlO1xuZXhwb3J0cy53YWxrQ29udGV4dCA9IHdhbGtDb250ZXh0O1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///42344\n")},931:(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";eval("\n\nconst types = __webpack_require__(78783);\n\nconst name = 'AtrulePrelude';\nconst walkContext = 'atrulePrelude';\nconst structure = {\n    children: [[]]\n};\n\nfunction parse(name) {\n    let children = null;\n\n    if (name !== null) {\n        name = name.toLowerCase();\n    }\n\n    this.skipSC();\n\n    if (hasOwnProperty.call(this.atrule, name) &&\n        typeof this.atrule[name].prelude === 'function') {\n        // custom consumer\n        children = this.atrule[name].prelude.call(this);\n    } else {\n        // default consumer\n        children = this.readSequence(this.scope.AtrulePrelude);\n    }\n\n    this.skipSC();\n\n    if (this.eof !== true &&\n        this.tokenType !== types.LeftCurlyBracket &&\n        this.tokenType !== types.Semicolon) {\n        this.error('Semicolon or block is expected');\n    }\n\n    return {\n        type: 'AtrulePrelude',\n        loc: this.getLocationFromList(children),\n        children\n    };\n}\n\nfunction generate(node) {\n    this.children(node);\n}\n\nexports.generate = generate;\nexports.name = name;\nexports.parse = parse;\nexports.structure = structure;\nexports.walkContext = walkContext;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOTMxLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViLGNBQWMsbUJBQU8sQ0FBQyxLQUEyQjs7QUFFakQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBLGdCQUFnQjtBQUNoQixZQUFZO0FBQ1osYUFBYTtBQUNiLGlCQUFpQjtBQUNqQixtQkFBbUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ibG9ja2JpdGUvLi9ub2RlX21vZHVsZXMvY3Nzby9ub2RlX21vZHVsZXMvY3NzLXRyZWUvY2pzL3N5bnRheC9ub2RlL0F0cnVsZVByZWx1ZGUuY2pzPzk2MjIiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCB0eXBlcyA9IHJlcXVpcmUoJy4uLy4uL3Rva2VuaXplci90eXBlcy5janMnKTtcblxuY29uc3QgbmFtZSA9ICdBdHJ1bGVQcmVsdWRlJztcbmNvbnN0IHdhbGtDb250ZXh0ID0gJ2F0cnVsZVByZWx1ZGUnO1xuY29uc3Qgc3RydWN0dXJlID0ge1xuICAgIGNoaWxkcmVuOiBbW11dXG59O1xuXG5mdW5jdGlvbiBwYXJzZShuYW1lKSB7XG4gICAgbGV0IGNoaWxkcmVuID0gbnVsbDtcblxuICAgIGlmIChuYW1lICE9PSBudWxsKSB7XG4gICAgICAgIG5hbWUgPSBuYW1lLnRvTG93ZXJDYXNlKCk7XG4gICAgfVxuXG4gICAgdGhpcy5za2lwU0MoKTtcblxuICAgIGlmIChoYXNPd25Qcm9wZXJ0eS5jYWxsKHRoaXMuYXRydWxlLCBuYW1lKSAmJlxuICAgICAgICB0eXBlb2YgdGhpcy5hdHJ1bGVbbmFtZV0ucHJlbHVkZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAvLyBjdXN0b20gY29uc3VtZXJcbiAgICAgICAgY2hpbGRyZW4gPSB0aGlzLmF0cnVsZVtuYW1lXS5wcmVsdWRlLmNhbGwodGhpcyk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgLy8gZGVmYXVsdCBjb25zdW1lclxuICAgICAgICBjaGlsZHJlbiA9IHRoaXMucmVhZFNlcXVlbmNlKHRoaXMuc2NvcGUuQXRydWxlUHJlbHVkZSk7XG4gICAgfVxuXG4gICAgdGhpcy5za2lwU0MoKTtcblxuICAgIGlmICh0aGlzLmVvZiAhPT0gdHJ1ZSAmJlxuICAgICAgICB0aGlzLnRva2VuVHlwZSAhPT0gdHlwZXMuTGVmdEN1cmx5QnJhY2tldCAmJlxuICAgICAgICB0aGlzLnRva2VuVHlwZSAhPT0gdHlwZXMuU2VtaWNvbG9uKSB7XG4gICAgICAgIHRoaXMuZXJyb3IoJ1NlbWljb2xvbiBvciBibG9jayBpcyBleHBlY3RlZCcpO1xuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICAgIHR5cGU6ICdBdHJ1bGVQcmVsdWRlJyxcbiAgICAgICAgbG9jOiB0aGlzLmdldExvY2F0aW9uRnJvbUxpc3QoY2hpbGRyZW4pLFxuICAgICAgICBjaGlsZHJlblxuICAgIH07XG59XG5cbmZ1bmN0aW9uIGdlbmVyYXRlKG5vZGUpIHtcbiAgICB0aGlzLmNoaWxkcmVuKG5vZGUpO1xufVxuXG5leHBvcnRzLmdlbmVyYXRlID0gZ2VuZXJhdGU7XG5leHBvcnRzLm5hbWUgPSBuYW1lO1xuZXhwb3J0cy5wYXJzZSA9IHBhcnNlO1xuZXhwb3J0cy5zdHJ1Y3R1cmUgPSBzdHJ1Y3R1cmU7XG5leHBvcnRzLndhbGtDb250ZXh0ID0gd2Fsa0NvbnRleHQ7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///931\n")},79152:(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";eval("\n\nconst types = __webpack_require__(78783);\n\nconst DOLLARSIGN = 0x0024;       // U+0024 DOLLAR SIGN ($)\nconst ASTERISK = 0x002A;         // U+002A ASTERISK (*)\nconst EQUALSSIGN = 0x003D;       // U+003D EQUALS SIGN (=)\nconst CIRCUMFLEXACCENT = 0x005E; // U+005E (^)\nconst VERTICALLINE = 0x007C;     // U+007C VERTICAL LINE (|)\nconst TILDE = 0x007E;            // U+007E TILDE (~)\n\nfunction getAttributeName() {\n    if (this.eof) {\n        this.error('Unexpected end of input');\n    }\n\n    const start = this.tokenStart;\n    let expectIdent = false;\n\n    if (this.isDelim(ASTERISK)) {\n        expectIdent = true;\n        this.next();\n    } else if (!this.isDelim(VERTICALLINE)) {\n        this.eat(types.Ident);\n    }\n\n    if (this.isDelim(VERTICALLINE)) {\n        if (this.charCodeAt(this.tokenStart + 1) !== EQUALSSIGN) {\n            this.next();\n            this.eat(types.Ident);\n        } else if (expectIdent) {\n            this.error('Identifier is expected', this.tokenEnd);\n        }\n    } else if (expectIdent) {\n        this.error('Vertical line is expected');\n    }\n\n    return {\n        type: 'Identifier',\n        loc: this.getLocation(start, this.tokenStart),\n        name: this.substrToCursor(start)\n    };\n}\n\nfunction getOperator() {\n    const start = this.tokenStart;\n    const code = this.charCodeAt(start);\n\n    if (code !== EQUALSSIGN &&        // =\n        code !== TILDE &&             // ~=\n        code !== CIRCUMFLEXACCENT &&  // ^=\n        code !== DOLLARSIGN &&        // $=\n        code !== ASTERISK &&          // *=\n        code !== VERTICALLINE         // |=\n    ) {\n        this.error('Attribute selector (=, ~=, ^=, $=, *=, |=) is expected');\n    }\n\n    this.next();\n\n    if (code !== EQUALSSIGN) {\n        if (!this.isDelim(EQUALSSIGN)) {\n            this.error('Equal sign is expected');\n        }\n\n        this.next();\n    }\n\n    return this.substrToCursor(start);\n}\n\n// '[' <wq-name> ']'\n// '[' <wq-name> <attr-matcher> [ <string-token> | <ident-token> ] <attr-modifier>? ']'\nconst name = 'AttributeSelector';\nconst structure = {\n    name: 'Identifier',\n    matcher: [String, null],\n    value: ['String', 'Identifier', null],\n    flags: [String, null]\n};\n\nfunction parse() {\n    const start = this.tokenStart;\n    let name;\n    let matcher = null;\n    let value = null;\n    let flags = null;\n\n    this.eat(types.LeftSquareBracket);\n    this.skipSC();\n\n    name = getAttributeName.call(this);\n    this.skipSC();\n\n    if (this.tokenType !== types.RightSquareBracket) {\n        // avoid case `[name i]`\n        if (this.tokenType !== types.Ident) {\n            matcher = getOperator.call(this);\n\n            this.skipSC();\n\n            value = this.tokenType === types.String\n                ? this.String()\n                : this.Identifier();\n\n            this.skipSC();\n        }\n\n        // attribute flags\n        if (this.tokenType === types.Ident) {\n            flags = this.consume(types.Ident);\n\n            this.skipSC();\n        }\n    }\n\n    this.eat(types.RightSquareBracket);\n\n    return {\n        type: 'AttributeSelector',\n        loc: this.getLocation(start, this.tokenStart),\n        name,\n        matcher,\n        value,\n        flags\n    };\n}\n\nfunction generate(node) {\n    this.token(types.Delim, '[');\n    this.node(node.name);\n\n    if (node.matcher !== null) {\n        this.tokenize(node.matcher);\n        this.node(node.value);\n    }\n\n    if (node.flags !== null) {\n        this.token(types.Ident, node.flags);\n    }\n\n    this.token(types.Delim, ']');\n}\n\nexports.generate = generate;\nexports.name = name;\nexports.parse = parse;\nexports.structure = structure;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNzkxNTIuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsY0FBYyxtQkFBTyxDQUFDLEtBQTJCOztBQUVqRCxpQ0FBaUM7QUFDakMsaUNBQWlDO0FBQ2pDLGlDQUFpQztBQUNqQyxpQ0FBaUM7QUFDakMsaUNBQWlDO0FBQ2pDLGlDQUFpQzs7QUFFakM7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQSxnQkFBZ0I7QUFDaEIsWUFBWTtBQUNaLGFBQWE7QUFDYixpQkFBaUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ibG9ja2JpdGUvLi9ub2RlX21vZHVsZXMvY3Nzby9ub2RlX21vZHVsZXMvY3NzLXRyZWUvY2pzL3N5bnRheC9ub2RlL0F0dHJpYnV0ZVNlbGVjdG9yLmNqcz9jMjNhIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuY29uc3QgdHlwZXMgPSByZXF1aXJlKCcuLi8uLi90b2tlbml6ZXIvdHlwZXMuY2pzJyk7XG5cbmNvbnN0IERPTExBUlNJR04gPSAweDAwMjQ7ICAgICAgIC8vIFUrMDAyNCBET0xMQVIgU0lHTiAoJClcbmNvbnN0IEFTVEVSSVNLID0gMHgwMDJBOyAgICAgICAgIC8vIFUrMDAyQSBBU1RFUklTSyAoKilcbmNvbnN0IEVRVUFMU1NJR04gPSAweDAwM0Q7ICAgICAgIC8vIFUrMDAzRCBFUVVBTFMgU0lHTiAoPSlcbmNvbnN0IENJUkNVTUZMRVhBQ0NFTlQgPSAweDAwNUU7IC8vIFUrMDA1RSAoXilcbmNvbnN0IFZFUlRJQ0FMTElORSA9IDB4MDA3QzsgICAgIC8vIFUrMDA3QyBWRVJUSUNBTCBMSU5FICh8KVxuY29uc3QgVElMREUgPSAweDAwN0U7ICAgICAgICAgICAgLy8gVSswMDdFIFRJTERFICh+KVxuXG5mdW5jdGlvbiBnZXRBdHRyaWJ1dGVOYW1lKCkge1xuICAgIGlmICh0aGlzLmVvZikge1xuICAgICAgICB0aGlzLmVycm9yKCdVbmV4cGVjdGVkIGVuZCBvZiBpbnB1dCcpO1xuICAgIH1cblxuICAgIGNvbnN0IHN0YXJ0ID0gdGhpcy50b2tlblN0YXJ0O1xuICAgIGxldCBleHBlY3RJZGVudCA9IGZhbHNlO1xuXG4gICAgaWYgKHRoaXMuaXNEZWxpbShBU1RFUklTSykpIHtcbiAgICAgICAgZXhwZWN0SWRlbnQgPSB0cnVlO1xuICAgICAgICB0aGlzLm5leHQoKTtcbiAgICB9IGVsc2UgaWYgKCF0aGlzLmlzRGVsaW0oVkVSVElDQUxMSU5FKSkge1xuICAgICAgICB0aGlzLmVhdCh0eXBlcy5JZGVudCk7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuaXNEZWxpbShWRVJUSUNBTExJTkUpKSB7XG4gICAgICAgIGlmICh0aGlzLmNoYXJDb2RlQXQodGhpcy50b2tlblN0YXJ0ICsgMSkgIT09IEVRVUFMU1NJR04pIHtcbiAgICAgICAgICAgIHRoaXMubmV4dCgpO1xuICAgICAgICAgICAgdGhpcy5lYXQodHlwZXMuSWRlbnQpO1xuICAgICAgICB9IGVsc2UgaWYgKGV4cGVjdElkZW50KSB7XG4gICAgICAgICAgICB0aGlzLmVycm9yKCdJZGVudGlmaWVyIGlzIGV4cGVjdGVkJywgdGhpcy50b2tlbkVuZCk7XG4gICAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGV4cGVjdElkZW50KSB7XG4gICAgICAgIHRoaXMuZXJyb3IoJ1ZlcnRpY2FsIGxpbmUgaXMgZXhwZWN0ZWQnKTtcbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgICB0eXBlOiAnSWRlbnRpZmllcicsXG4gICAgICAgIGxvYzogdGhpcy5nZXRMb2NhdGlvbihzdGFydCwgdGhpcy50b2tlblN0YXJ0KSxcbiAgICAgICAgbmFtZTogdGhpcy5zdWJzdHJUb0N1cnNvcihzdGFydClcbiAgICB9O1xufVxuXG5mdW5jdGlvbiBnZXRPcGVyYXRvcigpIHtcbiAgICBjb25zdCBzdGFydCA9IHRoaXMudG9rZW5TdGFydDtcbiAgICBjb25zdCBjb2RlID0gdGhpcy5jaGFyQ29kZUF0KHN0YXJ0KTtcblxuICAgIGlmIChjb2RlICE9PSBFUVVBTFNTSUdOICYmICAgICAgICAvLyA9XG4gICAgICAgIGNvZGUgIT09IFRJTERFICYmICAgICAgICAgICAgIC8vIH49XG4gICAgICAgIGNvZGUgIT09IENJUkNVTUZMRVhBQ0NFTlQgJiYgIC8vIF49XG4gICAgICAgIGNvZGUgIT09IERPTExBUlNJR04gJiYgICAgICAgIC8vICQ9XG4gICAgICAgIGNvZGUgIT09IEFTVEVSSVNLICYmICAgICAgICAgIC8vICo9XG4gICAgICAgIGNvZGUgIT09IFZFUlRJQ0FMTElORSAgICAgICAgIC8vIHw9XG4gICAgKSB7XG4gICAgICAgIHRoaXMuZXJyb3IoJ0F0dHJpYnV0ZSBzZWxlY3RvciAoPSwgfj0sIF49LCAkPSwgKj0sIHw9KSBpcyBleHBlY3RlZCcpO1xuICAgIH1cblxuICAgIHRoaXMubmV4dCgpO1xuXG4gICAgaWYgKGNvZGUgIT09IEVRVUFMU1NJR04pIHtcbiAgICAgICAgaWYgKCF0aGlzLmlzRGVsaW0oRVFVQUxTU0lHTikpIHtcbiAgICAgICAgICAgIHRoaXMuZXJyb3IoJ0VxdWFsIHNpZ24gaXMgZXhwZWN0ZWQnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMubmV4dCgpO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLnN1YnN0clRvQ3Vyc29yKHN0YXJ0KTtcbn1cblxuLy8gJ1snIDx3cS1uYW1lPiAnXSdcbi8vICdbJyA8d3EtbmFtZT4gPGF0dHItbWF0Y2hlcj4gWyA8c3RyaW5nLXRva2VuPiB8IDxpZGVudC10b2tlbj4gXSA8YXR0ci1tb2RpZmllcj4/ICddJ1xuY29uc3QgbmFtZSA9ICdBdHRyaWJ1dGVTZWxlY3Rvcic7XG5jb25zdCBzdHJ1Y3R1cmUgPSB7XG4gICAgbmFtZTogJ0lkZW50aWZpZXInLFxuICAgIG1hdGNoZXI6IFtTdHJpbmcsIG51bGxdLFxuICAgIHZhbHVlOiBbJ1N0cmluZycsICdJZGVudGlmaWVyJywgbnVsbF0sXG4gICAgZmxhZ3M6IFtTdHJpbmcsIG51bGxdXG59O1xuXG5mdW5jdGlvbiBwYXJzZSgpIHtcbiAgICBjb25zdCBzdGFydCA9IHRoaXMudG9rZW5TdGFydDtcbiAgICBsZXQgbmFtZTtcbiAgICBsZXQgbWF0Y2hlciA9IG51bGw7XG4gICAgbGV0IHZhbHVlID0gbnVsbDtcbiAgICBsZXQgZmxhZ3MgPSBudWxsO1xuXG4gICAgdGhpcy5lYXQodHlwZXMuTGVmdFNxdWFyZUJyYWNrZXQpO1xuICAgIHRoaXMuc2tpcFNDKCk7XG5cbiAgICBuYW1lID0gZ2V0QXR0cmlidXRlTmFtZS5jYWxsKHRoaXMpO1xuICAgIHRoaXMuc2tpcFNDKCk7XG5cbiAgICBpZiAodGhpcy50b2tlblR5cGUgIT09IHR5cGVzLlJpZ2h0U3F1YXJlQnJhY2tldCkge1xuICAgICAgICAvLyBhdm9pZCBjYXNlIGBbbmFtZSBpXWBcbiAgICAgICAgaWYgKHRoaXMudG9rZW5UeXBlICE9PSB0eXBlcy5JZGVudCkge1xuICAgICAgICAgICAgbWF0Y2hlciA9IGdldE9wZXJhdG9yLmNhbGwodGhpcyk7XG5cbiAgICAgICAgICAgIHRoaXMuc2tpcFNDKCk7XG5cbiAgICAgICAgICAgIHZhbHVlID0gdGhpcy50b2tlblR5cGUgPT09IHR5cGVzLlN0cmluZ1xuICAgICAgICAgICAgICAgID8gdGhpcy5TdHJpbmcoKVxuICAgICAgICAgICAgICAgIDogdGhpcy5JZGVudGlmaWVyKCk7XG5cbiAgICAgICAgICAgIHRoaXMuc2tpcFNDKCk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBhdHRyaWJ1dGUgZmxhZ3NcbiAgICAgICAgaWYgKHRoaXMudG9rZW5UeXBlID09PSB0eXBlcy5JZGVudCkge1xuICAgICAgICAgICAgZmxhZ3MgPSB0aGlzLmNvbnN1bWUodHlwZXMuSWRlbnQpO1xuXG4gICAgICAgICAgICB0aGlzLnNraXBTQygpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgdGhpcy5lYXQodHlwZXMuUmlnaHRTcXVhcmVCcmFja2V0KTtcblxuICAgIHJldHVybiB7XG4gICAgICAgIHR5cGU6ICdBdHRyaWJ1dGVTZWxlY3RvcicsXG4gICAgICAgIGxvYzogdGhpcy5nZXRMb2NhdGlvbihzdGFydCwgdGhpcy50b2tlblN0YXJ0KSxcbiAgICAgICAgbmFtZSxcbiAgICAgICAgbWF0Y2hlcixcbiAgICAgICAgdmFsdWUsXG4gICAgICAgIGZsYWdzXG4gICAgfTtcbn1cblxuZnVuY3Rpb24gZ2VuZXJhdGUobm9kZSkge1xuICAgIHRoaXMudG9rZW4odHlwZXMuRGVsaW0sICdbJyk7XG4gICAgdGhpcy5ub2RlKG5vZGUubmFtZSk7XG5cbiAgICBpZiAobm9kZS5tYXRjaGVyICE9PSBudWxsKSB7XG4gICAgICAgIHRoaXMudG9rZW5pemUobm9kZS5tYXRjaGVyKTtcbiAgICAgICAgdGhpcy5ub2RlKG5vZGUudmFsdWUpO1xuICAgIH1cblxuICAgIGlmIChub2RlLmZsYWdzICE9PSBudWxsKSB7XG4gICAgICAgIHRoaXMudG9rZW4odHlwZXMuSWRlbnQsIG5vZGUuZmxhZ3MpO1xuICAgIH1cblxuICAgIHRoaXMudG9rZW4odHlwZXMuRGVsaW0sICddJyk7XG59XG5cbmV4cG9ydHMuZ2VuZXJhdGUgPSBnZW5lcmF0ZTtcbmV4cG9ydHMubmFtZSA9IG5hbWU7XG5leHBvcnRzLnBhcnNlID0gcGFyc2U7XG5leHBvcnRzLnN0cnVjdHVyZSA9IHN0cnVjdHVyZTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///79152\n")},94516:(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";eval("\n\nconst types = __webpack_require__(78783);\n\nfunction consumeRaw(startToken) {\n    return this.Raw(startToken, null, true);\n}\nfunction consumeRule() {\n    return this.parseWithFallback(this.Rule, consumeRaw);\n}\nfunction consumeRawDeclaration(startToken) {\n    return this.Raw(startToken, this.consumeUntilSemicolonIncluded, true);\n}\nfunction consumeDeclaration() {\n    if (this.tokenType === types.Semicolon) {\n        return consumeRawDeclaration.call(this, this.tokenIndex);\n    }\n\n    const node = this.parseWithFallback(this.Declaration, consumeRawDeclaration);\n\n    if (this.tokenType === types.Semicolon) {\n        this.next();\n    }\n\n    return node;\n}\n\nconst name = 'Block';\nconst walkContext = 'block';\nconst structure = {\n    children: [[\n        'Atrule',\n        'Rule',\n        'Declaration'\n    ]]\n};\n\nfunction parse(isDeclaration) {\n    const consumer = isDeclaration ? consumeDeclaration : consumeRule;\n    const start = this.tokenStart;\n    let children = this.createList();\n\n    this.eat(types.LeftCurlyBracket);\n\n    scan:\n    while (!this.eof) {\n        switch (this.tokenType) {\n            case types.RightCurlyBracket:\n                break scan;\n\n            case types.WhiteSpace:\n            case types.Comment:\n                this.next();\n                break;\n\n            case types.AtKeyword:\n                children.push(this.parseWithFallback(this.Atrule, consumeRaw));\n                break;\n\n            default:\n                children.push(consumer.call(this));\n        }\n    }\n\n    if (!this.eof) {\n        this.eat(types.RightCurlyBracket);\n    }\n\n    return {\n        type: 'Block',\n        loc: this.getLocation(start, this.tokenStart),\n        children\n    };\n}\n\nfunction generate(node) {\n    this.token(types.LeftCurlyBracket, '{');\n    this.children(node, prev => {\n        if (prev.type === 'Declaration') {\n            this.token(types.Semicolon, ';');\n        }\n    });\n    this.token(types.RightCurlyBracket, '}');\n}\n\nexports.generate = generate;\nexports.name = name;\nexports.parse = parse;\nexports.structure = structure;\nexports.walkContext = walkContext;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOTQ1MTYuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsY0FBYyxtQkFBTyxDQUFDLEtBQTJCOztBQUVqRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLHlDQUF5QztBQUN6QztBQUNBO0FBQ0EsMENBQTBDO0FBQzFDO0FBQ0EsS0FBSztBQUNMLDBDQUEwQztBQUMxQzs7QUFFQSxnQkFBZ0I7QUFDaEIsWUFBWTtBQUNaLGFBQWE7QUFDYixpQkFBaUI7QUFDakIsbUJBQW1CIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYmxvY2tiaXRlLy4vbm9kZV9tb2R1bGVzL2Nzc28vbm9kZV9tb2R1bGVzL2Nzcy10cmVlL2Nqcy9zeW50YXgvbm9kZS9CbG9jay5janM/ZDc2YyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmNvbnN0IHR5cGVzID0gcmVxdWlyZSgnLi4vLi4vdG9rZW5pemVyL3R5cGVzLmNqcycpO1xuXG5mdW5jdGlvbiBjb25zdW1lUmF3KHN0YXJ0VG9rZW4pIHtcbiAgICByZXR1cm4gdGhpcy5SYXcoc3RhcnRUb2tlbiwgbnVsbCwgdHJ1ZSk7XG59XG5mdW5jdGlvbiBjb25zdW1lUnVsZSgpIHtcbiAgICByZXR1cm4gdGhpcy5wYXJzZVdpdGhGYWxsYmFjayh0aGlzLlJ1bGUsIGNvbnN1bWVSYXcpO1xufVxuZnVuY3Rpb24gY29uc3VtZVJhd0RlY2xhcmF0aW9uKHN0YXJ0VG9rZW4pIHtcbiAgICByZXR1cm4gdGhpcy5SYXcoc3RhcnRUb2tlbiwgdGhpcy5jb25zdW1lVW50aWxTZW1pY29sb25JbmNsdWRlZCwgdHJ1ZSk7XG59XG5mdW5jdGlvbiBjb25zdW1lRGVjbGFyYXRpb24oKSB7XG4gICAgaWYgKHRoaXMudG9rZW5UeXBlID09PSB0eXBlcy5TZW1pY29sb24pIHtcbiAgICAgICAgcmV0dXJuIGNvbnN1bWVSYXdEZWNsYXJhdGlvbi5jYWxsKHRoaXMsIHRoaXMudG9rZW5JbmRleCk7XG4gICAgfVxuXG4gICAgY29uc3Qgbm9kZSA9IHRoaXMucGFyc2VXaXRoRmFsbGJhY2sodGhpcy5EZWNsYXJhdGlvbiwgY29uc3VtZVJhd0RlY2xhcmF0aW9uKTtcblxuICAgIGlmICh0aGlzLnRva2VuVHlwZSA9PT0gdHlwZXMuU2VtaWNvbG9uKSB7XG4gICAgICAgIHRoaXMubmV4dCgpO1xuICAgIH1cblxuICAgIHJldHVybiBub2RlO1xufVxuXG5jb25zdCBuYW1lID0gJ0Jsb2NrJztcbmNvbnN0IHdhbGtDb250ZXh0ID0gJ2Jsb2NrJztcbmNvbnN0IHN0cnVjdHVyZSA9IHtcbiAgICBjaGlsZHJlbjogW1tcbiAgICAgICAgJ0F0cnVsZScsXG4gICAgICAgICdSdWxlJyxcbiAgICAgICAgJ0RlY2xhcmF0aW9uJ1xuICAgIF1dXG59O1xuXG5mdW5jdGlvbiBwYXJzZShpc0RlY2xhcmF0aW9uKSB7XG4gICAgY29uc3QgY29uc3VtZXIgPSBpc0RlY2xhcmF0aW9uID8gY29uc3VtZURlY2xhcmF0aW9uIDogY29uc3VtZVJ1bGU7XG4gICAgY29uc3Qgc3RhcnQgPSB0aGlzLnRva2VuU3RhcnQ7XG4gICAgbGV0IGNoaWxkcmVuID0gdGhpcy5jcmVhdGVMaXN0KCk7XG5cbiAgICB0aGlzLmVhdCh0eXBlcy5MZWZ0Q3VybHlCcmFja2V0KTtcblxuICAgIHNjYW46XG4gICAgd2hpbGUgKCF0aGlzLmVvZikge1xuICAgICAgICBzd2l0Y2ggKHRoaXMudG9rZW5UeXBlKSB7XG4gICAgICAgICAgICBjYXNlIHR5cGVzLlJpZ2h0Q3VybHlCcmFja2V0OlxuICAgICAgICAgICAgICAgIGJyZWFrIHNjYW47XG5cbiAgICAgICAgICAgIGNhc2UgdHlwZXMuV2hpdGVTcGFjZTpcbiAgICAgICAgICAgIGNhc2UgdHlwZXMuQ29tbWVudDpcbiAgICAgICAgICAgICAgICB0aGlzLm5leHQoKTtcbiAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgY2FzZSB0eXBlcy5BdEtleXdvcmQ6XG4gICAgICAgICAgICAgICAgY2hpbGRyZW4ucHVzaCh0aGlzLnBhcnNlV2l0aEZhbGxiYWNrKHRoaXMuQXRydWxlLCBjb25zdW1lUmF3KSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgY2hpbGRyZW4ucHVzaChjb25zdW1lci5jYWxsKHRoaXMpKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGlmICghdGhpcy5lb2YpIHtcbiAgICAgICAgdGhpcy5lYXQodHlwZXMuUmlnaHRDdXJseUJyYWNrZXQpO1xuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICAgIHR5cGU6ICdCbG9jaycsXG4gICAgICAgIGxvYzogdGhpcy5nZXRMb2NhdGlvbihzdGFydCwgdGhpcy50b2tlblN0YXJ0KSxcbiAgICAgICAgY2hpbGRyZW5cbiAgICB9O1xufVxuXG5mdW5jdGlvbiBnZW5lcmF0ZShub2RlKSB7XG4gICAgdGhpcy50b2tlbih0eXBlcy5MZWZ0Q3VybHlCcmFja2V0LCAneycpO1xuICAgIHRoaXMuY2hpbGRyZW4obm9kZSwgcHJldiA9PiB7XG4gICAgICAgIGlmIChwcmV2LnR5cGUgPT09ICdEZWNsYXJhdGlvbicpIHtcbiAgICAgICAgICAgIHRoaXMudG9rZW4odHlwZXMuU2VtaWNvbG9uLCAnOycpO1xuICAgICAgICB9XG4gICAgfSk7XG4gICAgdGhpcy50b2tlbih0eXBlcy5SaWdodEN1cmx5QnJhY2tldCwgJ30nKTtcbn1cblxuZXhwb3J0cy5nZW5lcmF0ZSA9IGdlbmVyYXRlO1xuZXhwb3J0cy5uYW1lID0gbmFtZTtcbmV4cG9ydHMucGFyc2UgPSBwYXJzZTtcbmV4cG9ydHMuc3RydWN0dXJlID0gc3RydWN0dXJlO1xuZXhwb3J0cy53YWxrQ29udGV4dCA9IHdhbGtDb250ZXh0O1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///94516\n")},94462:(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";eval("\n\nconst types = __webpack_require__(78783);\n\nconst name = 'Brackets';\nconst structure = {\n    children: [[]]\n};\n\nfunction parse(readSequence, recognizer) {\n    const start = this.tokenStart;\n    let children = null;\n\n    this.eat(types.LeftSquareBracket);\n\n    children = readSequence.call(this, recognizer);\n\n    if (!this.eof) {\n        this.eat(types.RightSquareBracket);\n    }\n\n    return {\n        type: 'Brackets',\n        loc: this.getLocation(start, this.tokenStart),\n        children\n    };\n}\n\nfunction generate(node) {\n    this.token(types.Delim, '[');\n    this.children(node);\n    this.token(types.Delim, ']');\n}\n\nexports.generate = generate;\nexports.name = name;\nexports.parse = parse;\nexports.structure = structure;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOTQ0NjIuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsY0FBYyxtQkFBTyxDQUFDLEtBQTJCOztBQUVqRDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLGdCQUFnQjtBQUNoQixZQUFZO0FBQ1osYUFBYTtBQUNiLGlCQUFpQiIsInNvdXJjZXMiOlsid2VicGFjazovL2Jsb2NrYml0ZS8uL25vZGVfbW9kdWxlcy9jc3NvL25vZGVfbW9kdWxlcy9jc3MtdHJlZS9janMvc3ludGF4L25vZGUvQnJhY2tldHMuY2pzPzQxZjkiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCB0eXBlcyA9IHJlcXVpcmUoJy4uLy4uL3Rva2VuaXplci90eXBlcy5janMnKTtcblxuY29uc3QgbmFtZSA9ICdCcmFja2V0cyc7XG5jb25zdCBzdHJ1Y3R1cmUgPSB7XG4gICAgY2hpbGRyZW46IFtbXV1cbn07XG5cbmZ1bmN0aW9uIHBhcnNlKHJlYWRTZXF1ZW5jZSwgcmVjb2duaXplcikge1xuICAgIGNvbnN0IHN0YXJ0ID0gdGhpcy50b2tlblN0YXJ0O1xuICAgIGxldCBjaGlsZHJlbiA9IG51bGw7XG5cbiAgICB0aGlzLmVhdCh0eXBlcy5MZWZ0U3F1YXJlQnJhY2tldCk7XG5cbiAgICBjaGlsZHJlbiA9IHJlYWRTZXF1ZW5jZS5jYWxsKHRoaXMsIHJlY29nbml6ZXIpO1xuXG4gICAgaWYgKCF0aGlzLmVvZikge1xuICAgICAgICB0aGlzLmVhdCh0eXBlcy5SaWdodFNxdWFyZUJyYWNrZXQpO1xuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICAgIHR5cGU6ICdCcmFja2V0cycsXG4gICAgICAgIGxvYzogdGhpcy5nZXRMb2NhdGlvbihzdGFydCwgdGhpcy50b2tlblN0YXJ0KSxcbiAgICAgICAgY2hpbGRyZW5cbiAgICB9O1xufVxuXG5mdW5jdGlvbiBnZW5lcmF0ZShub2RlKSB7XG4gICAgdGhpcy50b2tlbih0eXBlcy5EZWxpbSwgJ1snKTtcbiAgICB0aGlzLmNoaWxkcmVuKG5vZGUpO1xuICAgIHRoaXMudG9rZW4odHlwZXMuRGVsaW0sICddJyk7XG59XG5cbmV4cG9ydHMuZ2VuZXJhdGUgPSBnZW5lcmF0ZTtcbmV4cG9ydHMubmFtZSA9IG5hbWU7XG5leHBvcnRzLnBhcnNlID0gcGFyc2U7XG5leHBvcnRzLnN0cnVjdHVyZSA9IHN0cnVjdHVyZTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///94462\n")},36319:(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";eval("\n\nconst types = __webpack_require__(78783);\n\nconst name = 'CDC';\nconst structure = [];\n\nfunction parse() {\n    const start = this.tokenStart;\n\n    this.eat(types.CDC); // --\x3e\n\n    return {\n        type: 'CDC',\n        loc: this.getLocation(start, this.tokenStart)\n    };\n}\n\nfunction generate() {\n    this.token(types.CDC, '--\x3e');\n}\n\nexports.generate = generate;\nexports.name = name;\nexports.parse = parse;\nexports.structure = structure;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzYzMTkuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsY0FBYyxtQkFBTyxDQUFDLEtBQTJCOztBQUVqRDtBQUNBOztBQUVBO0FBQ0E7O0FBRUEseUJBQXlCOztBQUV6QjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQSxnQkFBZ0I7QUFDaEIsWUFBWTtBQUNaLGFBQWE7QUFDYixpQkFBaUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ibG9ja2JpdGUvLi9ub2RlX21vZHVsZXMvY3Nzby9ub2RlX21vZHVsZXMvY3NzLXRyZWUvY2pzL3N5bnRheC9ub2RlL0NEQy5janM/ZGY5NiJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmNvbnN0IHR5cGVzID0gcmVxdWlyZSgnLi4vLi4vdG9rZW5pemVyL3R5cGVzLmNqcycpO1xuXG5jb25zdCBuYW1lID0gJ0NEQyc7XG5jb25zdCBzdHJ1Y3R1cmUgPSBbXTtcblxuZnVuY3Rpb24gcGFyc2UoKSB7XG4gICAgY29uc3Qgc3RhcnQgPSB0aGlzLnRva2VuU3RhcnQ7XG5cbiAgICB0aGlzLmVhdCh0eXBlcy5DREMpOyAvLyAtLT5cblxuICAgIHJldHVybiB7XG4gICAgICAgIHR5cGU6ICdDREMnLFxuICAgICAgICBsb2M6IHRoaXMuZ2V0TG9jYXRpb24oc3RhcnQsIHRoaXMudG9rZW5TdGFydClcbiAgICB9O1xufVxuXG5mdW5jdGlvbiBnZW5lcmF0ZSgpIHtcbiAgICB0aGlzLnRva2VuKHR5cGVzLkNEQywgJy0tPicpO1xufVxuXG5leHBvcnRzLmdlbmVyYXRlID0gZ2VuZXJhdGU7XG5leHBvcnRzLm5hbWUgPSBuYW1lO1xuZXhwb3J0cy5wYXJzZSA9IHBhcnNlO1xuZXhwb3J0cy5zdHJ1Y3R1cmUgPSBzdHJ1Y3R1cmU7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///36319\n")},46987:(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";eval("\n\nconst types = __webpack_require__(78783);\n\nconst name = 'CDO';\nconst structure = [];\n\nfunction parse() {\n    const start = this.tokenStart;\n\n    this.eat(types.CDO); // \x3c!--\n\n    return {\n        type: 'CDO',\n        loc: this.getLocation(start, this.tokenStart)\n    };\n}\n\nfunction generate() {\n    this.token(types.CDO, '\x3c!--');\n}\n\nexports.generate = generate;\nexports.name = name;\nexports.parse = parse;\nexports.structure = structure;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDY5ODcuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsY0FBYyxtQkFBTyxDQUFDLEtBQTJCOztBQUVqRDtBQUNBOztBQUVBO0FBQ0E7O0FBRUEseUJBQXlCOztBQUV6QjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQSxnQkFBZ0I7QUFDaEIsWUFBWTtBQUNaLGFBQWE7QUFDYixpQkFBaUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ibG9ja2JpdGUvLi9ub2RlX21vZHVsZXMvY3Nzby9ub2RlX21vZHVsZXMvY3NzLXRyZWUvY2pzL3N5bnRheC9ub2RlL0NETy5janM/OTMzZSJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmNvbnN0IHR5cGVzID0gcmVxdWlyZSgnLi4vLi4vdG9rZW5pemVyL3R5cGVzLmNqcycpO1xuXG5jb25zdCBuYW1lID0gJ0NETyc7XG5jb25zdCBzdHJ1Y3R1cmUgPSBbXTtcblxuZnVuY3Rpb24gcGFyc2UoKSB7XG4gICAgY29uc3Qgc3RhcnQgPSB0aGlzLnRva2VuU3RhcnQ7XG5cbiAgICB0aGlzLmVhdCh0eXBlcy5DRE8pOyAvLyA8IS0tXG5cbiAgICByZXR1cm4ge1xuICAgICAgICB0eXBlOiAnQ0RPJyxcbiAgICAgICAgbG9jOiB0aGlzLmdldExvY2F0aW9uKHN0YXJ0LCB0aGlzLnRva2VuU3RhcnQpXG4gICAgfTtcbn1cblxuZnVuY3Rpb24gZ2VuZXJhdGUoKSB7XG4gICAgdGhpcy50b2tlbih0eXBlcy5DRE8sICc8IS0tJyk7XG59XG5cbmV4cG9ydHMuZ2VuZXJhdGUgPSBnZW5lcmF0ZTtcbmV4cG9ydHMubmFtZSA9IG5hbWU7XG5leHBvcnRzLnBhcnNlID0gcGFyc2U7XG5leHBvcnRzLnN0cnVjdHVyZSA9IHN0cnVjdHVyZTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///46987\n")},40260:(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";eval("\n\nconst types = __webpack_require__(78783);\n\nconst FULLSTOP = 0x002E; // U+002E FULL STOP (.)\n\n// '.' ident\nconst name = 'ClassSelector';\nconst structure = {\n    name: String\n};\n\nfunction parse() {\n    this.eatDelim(FULLSTOP);\n\n    return {\n        type: 'ClassSelector',\n        loc: this.getLocation(this.tokenStart - 1, this.tokenEnd),\n        name: this.consume(types.Ident)\n    };\n}\n\nfunction generate(node) {\n    this.token(types.Delim, '.');\n    this.token(types.Ident, node.name);\n}\n\nexports.generate = generate;\nexports.name = name;\nexports.parse = parse;\nexports.structure = structure;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDAyNjAuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsY0FBYyxtQkFBTyxDQUFDLEtBQTJCOztBQUVqRCx5QkFBeUI7O0FBRXpCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsZ0JBQWdCO0FBQ2hCLFlBQVk7QUFDWixhQUFhO0FBQ2IsaUJBQWlCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYmxvY2tiaXRlLy4vbm9kZV9tb2R1bGVzL2Nzc28vbm9kZV9tb2R1bGVzL2Nzcy10cmVlL2Nqcy9zeW50YXgvbm9kZS9DbGFzc1NlbGVjdG9yLmNqcz8zODE3Il0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuY29uc3QgdHlwZXMgPSByZXF1aXJlKCcuLi8uLi90b2tlbml6ZXIvdHlwZXMuY2pzJyk7XG5cbmNvbnN0IEZVTExTVE9QID0gMHgwMDJFOyAvLyBVKzAwMkUgRlVMTCBTVE9QICguKVxuXG4vLyAnLicgaWRlbnRcbmNvbnN0IG5hbWUgPSAnQ2xhc3NTZWxlY3Rvcic7XG5jb25zdCBzdHJ1Y3R1cmUgPSB7XG4gICAgbmFtZTogU3RyaW5nXG59O1xuXG5mdW5jdGlvbiBwYXJzZSgpIHtcbiAgICB0aGlzLmVhdERlbGltKEZVTExTVE9QKTtcblxuICAgIHJldHVybiB7XG4gICAgICAgIHR5cGU6ICdDbGFzc1NlbGVjdG9yJyxcbiAgICAgICAgbG9jOiB0aGlzLmdldExvY2F0aW9uKHRoaXMudG9rZW5TdGFydCAtIDEsIHRoaXMudG9rZW5FbmQpLFxuICAgICAgICBuYW1lOiB0aGlzLmNvbnN1bWUodHlwZXMuSWRlbnQpXG4gICAgfTtcbn1cblxuZnVuY3Rpb24gZ2VuZXJhdGUobm9kZSkge1xuICAgIHRoaXMudG9rZW4odHlwZXMuRGVsaW0sICcuJyk7XG4gICAgdGhpcy50b2tlbih0eXBlcy5JZGVudCwgbm9kZS5uYW1lKTtcbn1cblxuZXhwb3J0cy5nZW5lcmF0ZSA9IGdlbmVyYXRlO1xuZXhwb3J0cy5uYW1lID0gbmFtZTtcbmV4cG9ydHMucGFyc2UgPSBwYXJzZTtcbmV4cG9ydHMuc3RydWN0dXJlID0gc3RydWN0dXJlO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///40260\n")},88907:(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";eval("\n\nconst types = __webpack_require__(78783);\n\nconst PLUSSIGN = 0x002B;        // U+002B PLUS SIGN (+)\nconst SOLIDUS = 0x002F;         // U+002F SOLIDUS (/)\nconst GREATERTHANSIGN = 0x003E; // U+003E GREATER-THAN SIGN (>)\nconst TILDE = 0x007E;           // U+007E TILDE (~)\n\nconst name = 'Combinator';\nconst structure = {\n    name: String\n};\n\n// + | > | ~ | /deep/\nfunction parse() {\n    const start = this.tokenStart;\n    let name;\n\n    switch (this.tokenType) {\n        case types.WhiteSpace:\n            name = ' ';\n            break;\n\n        case types.Delim:\n            switch (this.charCodeAt(this.tokenStart)) {\n                case GREATERTHANSIGN:\n                case PLUSSIGN:\n                case TILDE:\n                    this.next();\n                    break;\n\n                case SOLIDUS:\n                    this.next();\n                    this.eatIdent('deep');\n                    this.eatDelim(SOLIDUS);\n                    break;\n\n                default:\n                    this.error('Combinator is expected');\n            }\n\n            name = this.substrToCursor(start);\n            break;\n    }\n\n    return {\n        type: 'Combinator',\n        loc: this.getLocation(start, this.tokenStart),\n        name\n    };\n}\n\nfunction generate(node) {\n    this.tokenize(node.name);\n}\n\nexports.generate = generate;\nexports.name = name;\nexports.parse = parse;\nexports.structure = structure;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiODg5MDcuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsY0FBYyxtQkFBTyxDQUFDLEtBQTJCOztBQUVqRCxnQ0FBZ0M7QUFDaEMsZ0NBQWdDO0FBQ2hDLGdDQUFnQztBQUNoQyxnQ0FBZ0M7O0FBRWhDO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBLGdCQUFnQjtBQUNoQixZQUFZO0FBQ1osYUFBYTtBQUNiLGlCQUFpQiIsInNvdXJjZXMiOlsid2VicGFjazovL2Jsb2NrYml0ZS8uL25vZGVfbW9kdWxlcy9jc3NvL25vZGVfbW9kdWxlcy9jc3MtdHJlZS9janMvc3ludGF4L25vZGUvQ29tYmluYXRvci5janM/MThmMSJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmNvbnN0IHR5cGVzID0gcmVxdWlyZSgnLi4vLi4vdG9rZW5pemVyL3R5cGVzLmNqcycpO1xuXG5jb25zdCBQTFVTU0lHTiA9IDB4MDAyQjsgICAgICAgIC8vIFUrMDAyQiBQTFVTIFNJR04gKCspXG5jb25zdCBTT0xJRFVTID0gMHgwMDJGOyAgICAgICAgIC8vIFUrMDAyRiBTT0xJRFVTICgvKVxuY29uc3QgR1JFQVRFUlRIQU5TSUdOID0gMHgwMDNFOyAvLyBVKzAwM0UgR1JFQVRFUi1USEFOIFNJR04gKD4pXG5jb25zdCBUSUxERSA9IDB4MDA3RTsgICAgICAgICAgIC8vIFUrMDA3RSBUSUxERSAofilcblxuY29uc3QgbmFtZSA9ICdDb21iaW5hdG9yJztcbmNvbnN0IHN0cnVjdHVyZSA9IHtcbiAgICBuYW1lOiBTdHJpbmdcbn07XG5cbi8vICsgfCA+IHwgfiB8IC9kZWVwL1xuZnVuY3Rpb24gcGFyc2UoKSB7XG4gICAgY29uc3Qgc3RhcnQgPSB0aGlzLnRva2VuU3RhcnQ7XG4gICAgbGV0IG5hbWU7XG5cbiAgICBzd2l0Y2ggKHRoaXMudG9rZW5UeXBlKSB7XG4gICAgICAgIGNhc2UgdHlwZXMuV2hpdGVTcGFjZTpcbiAgICAgICAgICAgIG5hbWUgPSAnICc7XG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlIHR5cGVzLkRlbGltOlxuICAgICAgICAgICAgc3dpdGNoICh0aGlzLmNoYXJDb2RlQXQodGhpcy50b2tlblN0YXJ0KSkge1xuICAgICAgICAgICAgICAgIGNhc2UgR1JFQVRFUlRIQU5TSUdOOlxuICAgICAgICAgICAgICAgIGNhc2UgUExVU1NJR046XG4gICAgICAgICAgICAgICAgY2FzZSBUSUxERTpcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5uZXh0KCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgY2FzZSBTT0xJRFVTOlxuICAgICAgICAgICAgICAgICAgICB0aGlzLm5leHQoKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5lYXRJZGVudCgnZGVlcCcpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmVhdERlbGltKFNPTElEVVMpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZXJyb3IoJ0NvbWJpbmF0b3IgaXMgZXhwZWN0ZWQnKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgbmFtZSA9IHRoaXMuc3Vic3RyVG9DdXJzb3Ioc3RhcnQpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgICAgdHlwZTogJ0NvbWJpbmF0b3InLFxuICAgICAgICBsb2M6IHRoaXMuZ2V0TG9jYXRpb24oc3RhcnQsIHRoaXMudG9rZW5TdGFydCksXG4gICAgICAgIG5hbWVcbiAgICB9O1xufVxuXG5mdW5jdGlvbiBnZW5lcmF0ZShub2RlKSB7XG4gICAgdGhpcy50b2tlbml6ZShub2RlLm5hbWUpO1xufVxuXG5leHBvcnRzLmdlbmVyYXRlID0gZ2VuZXJhdGU7XG5leHBvcnRzLm5hbWUgPSBuYW1lO1xuZXhwb3J0cy5wYXJzZSA9IHBhcnNlO1xuZXhwb3J0cy5zdHJ1Y3R1cmUgPSBzdHJ1Y3R1cmU7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///88907\n")},85500:(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";eval("\n\nconst types = __webpack_require__(78783);\n\nconst ASTERISK = 0x002A;        // U+002A ASTERISK (*)\nconst SOLIDUS = 0x002F;         // U+002F SOLIDUS (/)\n\n\nconst name = 'Comment';\nconst structure = {\n    value: String\n};\n\nfunction parse() {\n    const start = this.tokenStart;\n    let end = this.tokenEnd;\n\n    this.eat(types.Comment);\n\n    if ((end - start + 2) >= 2 &&\n        this.charCodeAt(end - 2) === ASTERISK &&\n        this.charCodeAt(end - 1) === SOLIDUS) {\n        end -= 2;\n    }\n\n    return {\n        type: 'Comment',\n        loc: this.getLocation(start, this.tokenStart),\n        value: this.substring(start + 2, end)\n    };\n}\n\nfunction generate(node) {\n    this.token(types.Comment, '/*' + node.value + '*/');\n}\n\nexports.generate = generate;\nexports.name = name;\nexports.parse = parse;\nexports.structure = structure;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiODU1MDAuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsY0FBYyxtQkFBTyxDQUFDLEtBQTJCOztBQUVqRCxnQ0FBZ0M7QUFDaEMsZ0NBQWdDOzs7QUFHaEM7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQSxnQkFBZ0I7QUFDaEIsWUFBWTtBQUNaLGFBQWE7QUFDYixpQkFBaUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ibG9ja2JpdGUvLi9ub2RlX21vZHVsZXMvY3Nzby9ub2RlX21vZHVsZXMvY3NzLXRyZWUvY2pzL3N5bnRheC9ub2RlL0NvbW1lbnQuY2pzPzE3MjMiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCB0eXBlcyA9IHJlcXVpcmUoJy4uLy4uL3Rva2VuaXplci90eXBlcy5janMnKTtcblxuY29uc3QgQVNURVJJU0sgPSAweDAwMkE7ICAgICAgICAvLyBVKzAwMkEgQVNURVJJU0sgKCopXG5jb25zdCBTT0xJRFVTID0gMHgwMDJGOyAgICAgICAgIC8vIFUrMDAyRiBTT0xJRFVTICgvKVxuXG5cbmNvbnN0IG5hbWUgPSAnQ29tbWVudCc7XG5jb25zdCBzdHJ1Y3R1cmUgPSB7XG4gICAgdmFsdWU6IFN0cmluZ1xufTtcblxuZnVuY3Rpb24gcGFyc2UoKSB7XG4gICAgY29uc3Qgc3RhcnQgPSB0aGlzLnRva2VuU3RhcnQ7XG4gICAgbGV0IGVuZCA9IHRoaXMudG9rZW5FbmQ7XG5cbiAgICB0aGlzLmVhdCh0eXBlcy5Db21tZW50KTtcblxuICAgIGlmICgoZW5kIC0gc3RhcnQgKyAyKSA+PSAyICYmXG4gICAgICAgIHRoaXMuY2hhckNvZGVBdChlbmQgLSAyKSA9PT0gQVNURVJJU0sgJiZcbiAgICAgICAgdGhpcy5jaGFyQ29kZUF0KGVuZCAtIDEpID09PSBTT0xJRFVTKSB7XG4gICAgICAgIGVuZCAtPSAyO1xuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICAgIHR5cGU6ICdDb21tZW50JyxcbiAgICAgICAgbG9jOiB0aGlzLmdldExvY2F0aW9uKHN0YXJ0LCB0aGlzLnRva2VuU3RhcnQpLFxuICAgICAgICB2YWx1ZTogdGhpcy5zdWJzdHJpbmcoc3RhcnQgKyAyLCBlbmQpXG4gICAgfTtcbn1cblxuZnVuY3Rpb24gZ2VuZXJhdGUobm9kZSkge1xuICAgIHRoaXMudG9rZW4odHlwZXMuQ29tbWVudCwgJy8qJyArIG5vZGUudmFsdWUgKyAnKi8nKTtcbn1cblxuZXhwb3J0cy5nZW5lcmF0ZSA9IGdlbmVyYXRlO1xuZXhwb3J0cy5uYW1lID0gbmFtZTtcbmV4cG9ydHMucGFyc2UgPSBwYXJzZTtcbmV4cG9ydHMuc3RydWN0dXJlID0gc3RydWN0dXJlO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///85500\n")},68071:(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";eval("\n\nconst names = __webpack_require__(60356);\nconst types = __webpack_require__(78783);\n\nconst EXCLAMATIONMARK = 0x0021; // U+0021 EXCLAMATION MARK (!)\nconst NUMBERSIGN = 0x0023;      // U+0023 NUMBER SIGN (#)\nconst DOLLARSIGN = 0x0024;      // U+0024 DOLLAR SIGN ($)\nconst AMPERSAND = 0x0026;       // U+0026 AMPERSAND (&)\nconst ASTERISK = 0x002A;        // U+002A ASTERISK (*)\nconst PLUSSIGN = 0x002B;        // U+002B PLUS SIGN (+)\nconst SOLIDUS = 0x002F;         // U+002F SOLIDUS (/)\n\nfunction consumeValueRaw(startToken) {\n    return this.Raw(startToken, this.consumeUntilExclamationMarkOrSemicolon, true);\n}\n\nfunction consumeCustomPropertyRaw(startToken) {\n    return this.Raw(startToken, this.consumeUntilExclamationMarkOrSemicolon, false);\n}\n\nfunction consumeValue() {\n    const startValueToken = this.tokenIndex;\n    const value = this.Value();\n\n    if (value.type !== 'Raw' &&\n        this.eof === false &&\n        this.tokenType !== types.Semicolon &&\n        this.isDelim(EXCLAMATIONMARK) === false &&\n        this.isBalanceEdge(startValueToken) === false) {\n        this.error();\n    }\n\n    return value;\n}\n\nconst name = 'Declaration';\nconst walkContext = 'declaration';\nconst structure = {\n    important: [Boolean, String],\n    property: String,\n    value: ['Value', 'Raw']\n};\n\nfunction parse() {\n    const start = this.tokenStart;\n    const startToken = this.tokenIndex;\n    const property = readProperty.call(this);\n    const customProperty = names.isCustomProperty(property);\n    const parseValue = customProperty ? this.parseCustomProperty : this.parseValue;\n    const consumeRaw = customProperty ? consumeCustomPropertyRaw : consumeValueRaw;\n    let important = false;\n    let value;\n\n    this.skipSC();\n    this.eat(types.Colon);\n\n    const valueStart = this.tokenIndex;\n\n    if (!customProperty) {\n        this.skipSC();\n    }\n\n    if (parseValue) {\n        value = this.parseWithFallback(consumeValue, consumeRaw);\n    } else {\n        value = consumeRaw.call(this, this.tokenIndex);\n    }\n\n    if (customProperty && value.type === 'Value' && value.children.isEmpty) {\n        for (let offset = valueStart - this.tokenIndex; offset <= 0; offset++) {\n            if (this.lookupType(offset) === types.WhiteSpace) {\n                value.children.appendData({\n                    type: 'WhiteSpace',\n                    loc: null,\n                    value: ' '\n                });\n                break;\n            }\n        }\n    }\n\n    if (this.isDelim(EXCLAMATIONMARK)) {\n        important = getImportant.call(this);\n        this.skipSC();\n    }\n\n    // Do not include semicolon to range per spec\n    // https://drafts.csswg.org/css-syntax/#declaration-diagram\n\n    if (this.eof === false &&\n        this.tokenType !== types.Semicolon &&\n        this.isBalanceEdge(startToken) === false) {\n        this.error();\n    }\n\n    return {\n        type: 'Declaration',\n        loc: this.getLocation(start, this.tokenStart),\n        important,\n        property,\n        value\n    };\n}\n\nfunction generate(node) {\n    this.token(types.Ident, node.property);\n    this.token(types.Colon, ':');\n    this.node(node.value);\n\n    if (node.important) {\n        this.token(types.Delim, '!');\n        this.token(types.Ident, node.important === true ? 'important' : node.important);\n    }\n}\n\nfunction readProperty() {\n    const start = this.tokenStart;\n\n    // hacks\n    if (this.tokenType === types.Delim) {\n        switch (this.charCodeAt(this.tokenStart)) {\n            case ASTERISK:\n            case DOLLARSIGN:\n            case PLUSSIGN:\n            case NUMBERSIGN:\n            case AMPERSAND:\n                this.next();\n                break;\n\n            // TODO: not sure we should support this hack\n            case SOLIDUS:\n                this.next();\n                if (this.isDelim(SOLIDUS)) {\n                    this.next();\n                }\n                break;\n        }\n    }\n\n    if (this.tokenType === types.Hash) {\n        this.eat(types.Hash);\n    } else {\n        this.eat(types.Ident);\n    }\n\n    return this.substrToCursor(start);\n}\n\n// ! ws* important\nfunction getImportant() {\n    this.eat(types.Delim);\n    this.skipSC();\n\n    const important = this.consume(types.Ident);\n\n    // store original value in case it differ from `important`\n    // for better original source restoring and hacks like `!ie` support\n    return important === 'important' ? true : important;\n}\n\nexports.generate = generate;\nexports.name = name;\nexports.parse = parse;\nexports.structure = structure;\nexports.walkContext = walkContext;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNjgwNzEuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsY0FBYyxtQkFBTyxDQUFDLEtBQXVCO0FBQzdDLGNBQWMsbUJBQU8sQ0FBQyxLQUEyQjs7QUFFakQsZ0NBQWdDO0FBQ2hDLGdDQUFnQztBQUNoQyxnQ0FBZ0M7QUFDaEMsZ0NBQWdDO0FBQ2hDLGdDQUFnQztBQUNoQyxnQ0FBZ0M7QUFDaEMsZ0NBQWdDOztBQUVoQztBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7O0FBRUE7QUFDQSx3REFBd0QsYUFBYTtBQUNyRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsZ0JBQWdCO0FBQ2hCLFlBQVk7QUFDWixhQUFhO0FBQ2IsaUJBQWlCO0FBQ2pCLG1CQUFtQiIsInNvdXJjZXMiOlsid2VicGFjazovL2Jsb2NrYml0ZS8uL25vZGVfbW9kdWxlcy9jc3NvL25vZGVfbW9kdWxlcy9jc3MtdHJlZS9janMvc3ludGF4L25vZGUvRGVjbGFyYXRpb24uY2pzPzI1Y2MiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBuYW1lcyA9IHJlcXVpcmUoJy4uLy4uL3V0aWxzL25hbWVzLmNqcycpO1xuY29uc3QgdHlwZXMgPSByZXF1aXJlKCcuLi8uLi90b2tlbml6ZXIvdHlwZXMuY2pzJyk7XG5cbmNvbnN0IEVYQ0xBTUFUSU9OTUFSSyA9IDB4MDAyMTsgLy8gVSswMDIxIEVYQ0xBTUFUSU9OIE1BUksgKCEpXG5jb25zdCBOVU1CRVJTSUdOID0gMHgwMDIzOyAgICAgIC8vIFUrMDAyMyBOVU1CRVIgU0lHTiAoIylcbmNvbnN0IERPTExBUlNJR04gPSAweDAwMjQ7ICAgICAgLy8gVSswMDI0IERPTExBUiBTSUdOICgkKVxuY29uc3QgQU1QRVJTQU5EID0gMHgwMDI2OyAgICAgICAvLyBVKzAwMjYgQU1QRVJTQU5EICgmKVxuY29uc3QgQVNURVJJU0sgPSAweDAwMkE7ICAgICAgICAvLyBVKzAwMkEgQVNURVJJU0sgKCopXG5jb25zdCBQTFVTU0lHTiA9IDB4MDAyQjsgICAgICAgIC8vIFUrMDAyQiBQTFVTIFNJR04gKCspXG5jb25zdCBTT0xJRFVTID0gMHgwMDJGOyAgICAgICAgIC8vIFUrMDAyRiBTT0xJRFVTICgvKVxuXG5mdW5jdGlvbiBjb25zdW1lVmFsdWVSYXcoc3RhcnRUb2tlbikge1xuICAgIHJldHVybiB0aGlzLlJhdyhzdGFydFRva2VuLCB0aGlzLmNvbnN1bWVVbnRpbEV4Y2xhbWF0aW9uTWFya09yU2VtaWNvbG9uLCB0cnVlKTtcbn1cblxuZnVuY3Rpb24gY29uc3VtZUN1c3RvbVByb3BlcnR5UmF3KHN0YXJ0VG9rZW4pIHtcbiAgICByZXR1cm4gdGhpcy5SYXcoc3RhcnRUb2tlbiwgdGhpcy5jb25zdW1lVW50aWxFeGNsYW1hdGlvbk1hcmtPclNlbWljb2xvbiwgZmFsc2UpO1xufVxuXG5mdW5jdGlvbiBjb25zdW1lVmFsdWUoKSB7XG4gICAgY29uc3Qgc3RhcnRWYWx1ZVRva2VuID0gdGhpcy50b2tlbkluZGV4O1xuICAgIGNvbnN0IHZhbHVlID0gdGhpcy5WYWx1ZSgpO1xuXG4gICAgaWYgKHZhbHVlLnR5cGUgIT09ICdSYXcnICYmXG4gICAgICAgIHRoaXMuZW9mID09PSBmYWxzZSAmJlxuICAgICAgICB0aGlzLnRva2VuVHlwZSAhPT0gdHlwZXMuU2VtaWNvbG9uICYmXG4gICAgICAgIHRoaXMuaXNEZWxpbShFWENMQU1BVElPTk1BUkspID09PSBmYWxzZSAmJlxuICAgICAgICB0aGlzLmlzQmFsYW5jZUVkZ2Uoc3RhcnRWYWx1ZVRva2VuKSA9PT0gZmFsc2UpIHtcbiAgICAgICAgdGhpcy5lcnJvcigpO1xuICAgIH1cblxuICAgIHJldHVybiB2YWx1ZTtcbn1cblxuY29uc3QgbmFtZSA9ICdEZWNsYXJhdGlvbic7XG5jb25zdCB3YWxrQ29udGV4dCA9ICdkZWNsYXJhdGlvbic7XG5jb25zdCBzdHJ1Y3R1cmUgPSB7XG4gICAgaW1wb3J0YW50OiBbQm9vbGVhbiwgU3RyaW5nXSxcbiAgICBwcm9wZXJ0eTogU3RyaW5nLFxuICAgIHZhbHVlOiBbJ1ZhbHVlJywgJ1JhdyddXG59O1xuXG5mdW5jdGlvbiBwYXJzZSgpIHtcbiAgICBjb25zdCBzdGFydCA9IHRoaXMudG9rZW5TdGFydDtcbiAgICBjb25zdCBzdGFydFRva2VuID0gdGhpcy50b2tlbkluZGV4O1xuICAgIGNvbnN0IHByb3BlcnR5ID0gcmVhZFByb3BlcnR5LmNhbGwodGhpcyk7XG4gICAgY29uc3QgY3VzdG9tUHJvcGVydHkgPSBuYW1lcy5pc0N1c3RvbVByb3BlcnR5KHByb3BlcnR5KTtcbiAgICBjb25zdCBwYXJzZVZhbHVlID0gY3VzdG9tUHJvcGVydHkgPyB0aGlzLnBhcnNlQ3VzdG9tUHJvcGVydHkgOiB0aGlzLnBhcnNlVmFsdWU7XG4gICAgY29uc3QgY29uc3VtZVJhdyA9IGN1c3RvbVByb3BlcnR5ID8gY29uc3VtZUN1c3RvbVByb3BlcnR5UmF3IDogY29uc3VtZVZhbHVlUmF3O1xuICAgIGxldCBpbXBvcnRhbnQgPSBmYWxzZTtcbiAgICBsZXQgdmFsdWU7XG5cbiAgICB0aGlzLnNraXBTQygpO1xuICAgIHRoaXMuZWF0KHR5cGVzLkNvbG9uKTtcblxuICAgIGNvbnN0IHZhbHVlU3RhcnQgPSB0aGlzLnRva2VuSW5kZXg7XG5cbiAgICBpZiAoIWN1c3RvbVByb3BlcnR5KSB7XG4gICAgICAgIHRoaXMuc2tpcFNDKCk7XG4gICAgfVxuXG4gICAgaWYgKHBhcnNlVmFsdWUpIHtcbiAgICAgICAgdmFsdWUgPSB0aGlzLnBhcnNlV2l0aEZhbGxiYWNrKGNvbnN1bWVWYWx1ZSwgY29uc3VtZVJhdyk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgdmFsdWUgPSBjb25zdW1lUmF3LmNhbGwodGhpcywgdGhpcy50b2tlbkluZGV4KTtcbiAgICB9XG5cbiAgICBpZiAoY3VzdG9tUHJvcGVydHkgJiYgdmFsdWUudHlwZSA9PT0gJ1ZhbHVlJyAmJiB2YWx1ZS5jaGlsZHJlbi5pc0VtcHR5KSB7XG4gICAgICAgIGZvciAobGV0IG9mZnNldCA9IHZhbHVlU3RhcnQgLSB0aGlzLnRva2VuSW5kZXg7IG9mZnNldCA8PSAwOyBvZmZzZXQrKykge1xuICAgICAgICAgICAgaWYgKHRoaXMubG9va3VwVHlwZShvZmZzZXQpID09PSB0eXBlcy5XaGl0ZVNwYWNlKSB7XG4gICAgICAgICAgICAgICAgdmFsdWUuY2hpbGRyZW4uYXBwZW5kRGF0YSh7XG4gICAgICAgICAgICAgICAgICAgIHR5cGU6ICdXaGl0ZVNwYWNlJyxcbiAgICAgICAgICAgICAgICAgICAgbG9jOiBudWxsLFxuICAgICAgICAgICAgICAgICAgICB2YWx1ZTogJyAnXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAodGhpcy5pc0RlbGltKEVYQ0xBTUFUSU9OTUFSSykpIHtcbiAgICAgICAgaW1wb3J0YW50ID0gZ2V0SW1wb3J0YW50LmNhbGwodGhpcyk7XG4gICAgICAgIHRoaXMuc2tpcFNDKCk7XG4gICAgfVxuXG4gICAgLy8gRG8gbm90IGluY2x1ZGUgc2VtaWNvbG9uIHRvIHJhbmdlIHBlciBzcGVjXG4gICAgLy8gaHR0cHM6Ly9kcmFmdHMuY3Nzd2cub3JnL2Nzcy1zeW50YXgvI2RlY2xhcmF0aW9uLWRpYWdyYW1cblxuICAgIGlmICh0aGlzLmVvZiA9PT0gZmFsc2UgJiZcbiAgICAgICAgdGhpcy50b2tlblR5cGUgIT09IHR5cGVzLlNlbWljb2xvbiAmJlxuICAgICAgICB0aGlzLmlzQmFsYW5jZUVkZ2Uoc3RhcnRUb2tlbikgPT09IGZhbHNlKSB7XG4gICAgICAgIHRoaXMuZXJyb3IoKTtcbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgICB0eXBlOiAnRGVjbGFyYXRpb24nLFxuICAgICAgICBsb2M6IHRoaXMuZ2V0TG9jYXRpb24oc3RhcnQsIHRoaXMudG9rZW5TdGFydCksXG4gICAgICAgIGltcG9ydGFudCxcbiAgICAgICAgcHJvcGVydHksXG4gICAgICAgIHZhbHVlXG4gICAgfTtcbn1cblxuZnVuY3Rpb24gZ2VuZXJhdGUobm9kZSkge1xuICAgIHRoaXMudG9rZW4odHlwZXMuSWRlbnQsIG5vZGUucHJvcGVydHkpO1xuICAgIHRoaXMudG9rZW4odHlwZXMuQ29sb24sICc6Jyk7XG4gICAgdGhpcy5ub2RlKG5vZGUudmFsdWUpO1xuXG4gICAgaWYgKG5vZGUuaW1wb3J0YW50KSB7XG4gICAgICAgIHRoaXMudG9rZW4odHlwZXMuRGVsaW0sICchJyk7XG4gICAgICAgIHRoaXMudG9rZW4odHlwZXMuSWRlbnQsIG5vZGUuaW1wb3J0YW50ID09PSB0cnVlID8gJ2ltcG9ydGFudCcgOiBub2RlLmltcG9ydGFudCk7XG4gICAgfVxufVxuXG5mdW5jdGlvbiByZWFkUHJvcGVydHkoKSB7XG4gICAgY29uc3Qgc3RhcnQgPSB0aGlzLnRva2VuU3RhcnQ7XG5cbiAgICAvLyBoYWNrc1xuICAgIGlmICh0aGlzLnRva2VuVHlwZSA9PT0gdHlwZXMuRGVsaW0pIHtcbiAgICAgICAgc3dpdGNoICh0aGlzLmNoYXJDb2RlQXQodGhpcy50b2tlblN0YXJ0KSkge1xuICAgICAgICAgICAgY2FzZSBBU1RFUklTSzpcbiAgICAgICAgICAgIGNhc2UgRE9MTEFSU0lHTjpcbiAgICAgICAgICAgIGNhc2UgUExVU1NJR046XG4gICAgICAgICAgICBjYXNlIE5VTUJFUlNJR046XG4gICAgICAgICAgICBjYXNlIEFNUEVSU0FORDpcbiAgICAgICAgICAgICAgICB0aGlzLm5leHQoKTtcbiAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgLy8gVE9ETzogbm90IHN1cmUgd2Ugc2hvdWxkIHN1cHBvcnQgdGhpcyBoYWNrXG4gICAgICAgICAgICBjYXNlIFNPTElEVVM6XG4gICAgICAgICAgICAgICAgdGhpcy5uZXh0KCk7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuaXNEZWxpbShTT0xJRFVTKSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLm5leHQoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAodGhpcy50b2tlblR5cGUgPT09IHR5cGVzLkhhc2gpIHtcbiAgICAgICAgdGhpcy5lYXQodHlwZXMuSGFzaCk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5lYXQodHlwZXMuSWRlbnQpO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLnN1YnN0clRvQ3Vyc29yKHN0YXJ0KTtcbn1cblxuLy8gISB3cyogaW1wb3J0YW50XG5mdW5jdGlvbiBnZXRJbXBvcnRhbnQoKSB7XG4gICAgdGhpcy5lYXQodHlwZXMuRGVsaW0pO1xuICAgIHRoaXMuc2tpcFNDKCk7XG5cbiAgICBjb25zdCBpbXBvcnRhbnQgPSB0aGlzLmNvbnN1bWUodHlwZXMuSWRlbnQpO1xuXG4gICAgLy8gc3RvcmUgb3JpZ2luYWwgdmFsdWUgaW4gY2FzZSBpdCBkaWZmZXIgZnJvbSBgaW1wb3J0YW50YFxuICAgIC8vIGZvciBiZXR0ZXIgb3JpZ2luYWwgc291cmNlIHJlc3RvcmluZyBhbmQgaGFja3MgbGlrZSBgIWllYCBzdXBwb3J0XG4gICAgcmV0dXJuIGltcG9ydGFudCA9PT0gJ2ltcG9ydGFudCcgPyB0cnVlIDogaW1wb3J0YW50O1xufVxuXG5leHBvcnRzLmdlbmVyYXRlID0gZ2VuZXJhdGU7XG5leHBvcnRzLm5hbWUgPSBuYW1lO1xuZXhwb3J0cy5wYXJzZSA9IHBhcnNlO1xuZXhwb3J0cy5zdHJ1Y3R1cmUgPSBzdHJ1Y3R1cmU7XG5leHBvcnRzLndhbGtDb250ZXh0ID0gd2Fsa0NvbnRleHQ7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///68071\n")},74499:(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";eval("\n\nconst types = __webpack_require__(78783);\n\nfunction consumeRaw(startToken) {\n    return this.Raw(startToken, this.consumeUntilSemicolonIncluded, true);\n}\n\nconst name = 'DeclarationList';\nconst structure = {\n    children: [[\n        'Declaration'\n    ]]\n};\n\nfunction parse() {\n    const children = this.createList();\n\n    while (!this.eof) {\n        switch (this.tokenType) {\n            case types.WhiteSpace:\n            case types.Comment:\n            case types.Semicolon:\n                this.next();\n                break;\n\n            default:\n                children.push(this.parseWithFallback(this.Declaration, consumeRaw));\n        }\n    }\n\n    return {\n        type: 'DeclarationList',\n        loc: this.getLocationFromList(children),\n        children\n    };\n}\n\nfunction generate(node) {\n    this.children(node, prev => {\n        if (prev.type === 'Declaration') {\n            this.token(types.Semicolon, ';');\n        }\n    });\n}\n\nexports.generate = generate;\nexports.name = name;\nexports.parse = parse;\nexports.structure = structure;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNzQ0OTkuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsY0FBYyxtQkFBTyxDQUFDLEtBQTJCOztBQUVqRDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLDBDQUEwQztBQUMxQztBQUNBLEtBQUs7QUFDTDs7QUFFQSxnQkFBZ0I7QUFDaEIsWUFBWTtBQUNaLGFBQWE7QUFDYixpQkFBaUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ibG9ja2JpdGUvLi9ub2RlX21vZHVsZXMvY3Nzby9ub2RlX21vZHVsZXMvY3NzLXRyZWUvY2pzL3N5bnRheC9ub2RlL0RlY2xhcmF0aW9uTGlzdC5janM/ZWFmZiJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmNvbnN0IHR5cGVzID0gcmVxdWlyZSgnLi4vLi4vdG9rZW5pemVyL3R5cGVzLmNqcycpO1xuXG5mdW5jdGlvbiBjb25zdW1lUmF3KHN0YXJ0VG9rZW4pIHtcbiAgICByZXR1cm4gdGhpcy5SYXcoc3RhcnRUb2tlbiwgdGhpcy5jb25zdW1lVW50aWxTZW1pY29sb25JbmNsdWRlZCwgdHJ1ZSk7XG59XG5cbmNvbnN0IG5hbWUgPSAnRGVjbGFyYXRpb25MaXN0JztcbmNvbnN0IHN0cnVjdHVyZSA9IHtcbiAgICBjaGlsZHJlbjogW1tcbiAgICAgICAgJ0RlY2xhcmF0aW9uJ1xuICAgIF1dXG59O1xuXG5mdW5jdGlvbiBwYXJzZSgpIHtcbiAgICBjb25zdCBjaGlsZHJlbiA9IHRoaXMuY3JlYXRlTGlzdCgpO1xuXG4gICAgd2hpbGUgKCF0aGlzLmVvZikge1xuICAgICAgICBzd2l0Y2ggKHRoaXMudG9rZW5UeXBlKSB7XG4gICAgICAgICAgICBjYXNlIHR5cGVzLldoaXRlU3BhY2U6XG4gICAgICAgICAgICBjYXNlIHR5cGVzLkNvbW1lbnQ6XG4gICAgICAgICAgICBjYXNlIHR5cGVzLlNlbWljb2xvbjpcbiAgICAgICAgICAgICAgICB0aGlzLm5leHQoKTtcbiAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICBjaGlsZHJlbi5wdXNoKHRoaXMucGFyc2VXaXRoRmFsbGJhY2sodGhpcy5EZWNsYXJhdGlvbiwgY29uc3VtZVJhdykpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgICAgdHlwZTogJ0RlY2xhcmF0aW9uTGlzdCcsXG4gICAgICAgIGxvYzogdGhpcy5nZXRMb2NhdGlvbkZyb21MaXN0KGNoaWxkcmVuKSxcbiAgICAgICAgY2hpbGRyZW5cbiAgICB9O1xufVxuXG5mdW5jdGlvbiBnZW5lcmF0ZShub2RlKSB7XG4gICAgdGhpcy5jaGlsZHJlbihub2RlLCBwcmV2ID0+IHtcbiAgICAgICAgaWYgKHByZXYudHlwZSA9PT0gJ0RlY2xhcmF0aW9uJykge1xuICAgICAgICAgICAgdGhpcy50b2tlbih0eXBlcy5TZW1pY29sb24sICc7Jyk7XG4gICAgICAgIH1cbiAgICB9KTtcbn1cblxuZXhwb3J0cy5nZW5lcmF0ZSA9IGdlbmVyYXRlO1xuZXhwb3J0cy5uYW1lID0gbmFtZTtcbmV4cG9ydHMucGFyc2UgPSBwYXJzZTtcbmV4cG9ydHMuc3RydWN0dXJlID0gc3RydWN0dXJlO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///74499\n")},5991:(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";eval("\n\nconst types = __webpack_require__(78783);\n\nconst name = 'Dimension';\nconst structure = {\n    value: String,\n    unit: String\n};\n\nfunction parse() {\n    const start = this.tokenStart;\n    const value = this.consumeNumber(types.Dimension);\n\n    return {\n        type: 'Dimension',\n        loc: this.getLocation(start, this.tokenStart),\n        value,\n        unit: this.substring(start + value.length, this.tokenStart)\n    };\n}\n\nfunction generate(node) {\n    this.token(types.Dimension, node.value + node.unit);\n}\n\nexports.generate = generate;\nexports.name = name;\nexports.parse = parse;\nexports.structure = structure;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNTk5MS5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYixjQUFjLG1CQUFPLENBQUMsS0FBMkI7O0FBRWpEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQSxnQkFBZ0I7QUFDaEIsWUFBWTtBQUNaLGFBQWE7QUFDYixpQkFBaUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ibG9ja2JpdGUvLi9ub2RlX21vZHVsZXMvY3Nzby9ub2RlX21vZHVsZXMvY3NzLXRyZWUvY2pzL3N5bnRheC9ub2RlL0RpbWVuc2lvbi5janM/ODg5MyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmNvbnN0IHR5cGVzID0gcmVxdWlyZSgnLi4vLi4vdG9rZW5pemVyL3R5cGVzLmNqcycpO1xuXG5jb25zdCBuYW1lID0gJ0RpbWVuc2lvbic7XG5jb25zdCBzdHJ1Y3R1cmUgPSB7XG4gICAgdmFsdWU6IFN0cmluZyxcbiAgICB1bml0OiBTdHJpbmdcbn07XG5cbmZ1bmN0aW9uIHBhcnNlKCkge1xuICAgIGNvbnN0IHN0YXJ0ID0gdGhpcy50b2tlblN0YXJ0O1xuICAgIGNvbnN0IHZhbHVlID0gdGhpcy5jb25zdW1lTnVtYmVyKHR5cGVzLkRpbWVuc2lvbik7XG5cbiAgICByZXR1cm4ge1xuICAgICAgICB0eXBlOiAnRGltZW5zaW9uJyxcbiAgICAgICAgbG9jOiB0aGlzLmdldExvY2F0aW9uKHN0YXJ0LCB0aGlzLnRva2VuU3RhcnQpLFxuICAgICAgICB2YWx1ZSxcbiAgICAgICAgdW5pdDogdGhpcy5zdWJzdHJpbmcoc3RhcnQgKyB2YWx1ZS5sZW5ndGgsIHRoaXMudG9rZW5TdGFydClcbiAgICB9O1xufVxuXG5mdW5jdGlvbiBnZW5lcmF0ZShub2RlKSB7XG4gICAgdGhpcy50b2tlbih0eXBlcy5EaW1lbnNpb24sIG5vZGUudmFsdWUgKyBub2RlLnVuaXQpO1xufVxuXG5leHBvcnRzLmdlbmVyYXRlID0gZ2VuZXJhdGU7XG5leHBvcnRzLm5hbWUgPSBuYW1lO1xuZXhwb3J0cy5wYXJzZSA9IHBhcnNlO1xuZXhwb3J0cy5zdHJ1Y3R1cmUgPSBzdHJ1Y3R1cmU7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///5991\n")},60801:(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";eval("\n\nconst types = __webpack_require__(78783);\n\nconst name = 'Function';\nconst walkContext = 'function';\nconst structure = {\n    name: String,\n    children: [[]]\n};\n\n// <function-token> <sequence> )\nfunction parse(readSequence, recognizer) {\n    const start = this.tokenStart;\n    const name = this.consumeFunctionName();\n    const nameLowerCase = name.toLowerCase();\n    let children;\n\n    children = recognizer.hasOwnProperty(nameLowerCase)\n        ? recognizer[nameLowerCase].call(this, recognizer)\n        : readSequence.call(this, recognizer);\n\n    if (!this.eof) {\n        this.eat(types.RightParenthesis);\n    }\n\n    return {\n        type: 'Function',\n        loc: this.getLocation(start, this.tokenStart),\n        name,\n        children\n    };\n}\n\nfunction generate(node) {\n    this.token(types.Function, node.name + '(');\n    this.children(node);\n    this.token(types.RightParenthesis, ')');\n}\n\nexports.generate = generate;\nexports.name = name;\nexports.parse = parse;\nexports.structure = structure;\nexports.walkContext = walkContext;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNjA4MDEuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsY0FBYyxtQkFBTyxDQUFDLEtBQTJCOztBQUVqRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxnQkFBZ0I7QUFDaEIsWUFBWTtBQUNaLGFBQWE7QUFDYixpQkFBaUI7QUFDakIsbUJBQW1CIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYmxvY2tiaXRlLy4vbm9kZV9tb2R1bGVzL2Nzc28vbm9kZV9tb2R1bGVzL2Nzcy10cmVlL2Nqcy9zeW50YXgvbm9kZS9GdW5jdGlvbi5janM/NDlmMSJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmNvbnN0IHR5cGVzID0gcmVxdWlyZSgnLi4vLi4vdG9rZW5pemVyL3R5cGVzLmNqcycpO1xuXG5jb25zdCBuYW1lID0gJ0Z1bmN0aW9uJztcbmNvbnN0IHdhbGtDb250ZXh0ID0gJ2Z1bmN0aW9uJztcbmNvbnN0IHN0cnVjdHVyZSA9IHtcbiAgICBuYW1lOiBTdHJpbmcsXG4gICAgY2hpbGRyZW46IFtbXV1cbn07XG5cbi8vIDxmdW5jdGlvbi10b2tlbj4gPHNlcXVlbmNlPiApXG5mdW5jdGlvbiBwYXJzZShyZWFkU2VxdWVuY2UsIHJlY29nbml6ZXIpIHtcbiAgICBjb25zdCBzdGFydCA9IHRoaXMudG9rZW5TdGFydDtcbiAgICBjb25zdCBuYW1lID0gdGhpcy5jb25zdW1lRnVuY3Rpb25OYW1lKCk7XG4gICAgY29uc3QgbmFtZUxvd2VyQ2FzZSA9IG5hbWUudG9Mb3dlckNhc2UoKTtcbiAgICBsZXQgY2hpbGRyZW47XG5cbiAgICBjaGlsZHJlbiA9IHJlY29nbml6ZXIuaGFzT3duUHJvcGVydHkobmFtZUxvd2VyQ2FzZSlcbiAgICAgICAgPyByZWNvZ25pemVyW25hbWVMb3dlckNhc2VdLmNhbGwodGhpcywgcmVjb2duaXplcilcbiAgICAgICAgOiByZWFkU2VxdWVuY2UuY2FsbCh0aGlzLCByZWNvZ25pemVyKTtcblxuICAgIGlmICghdGhpcy5lb2YpIHtcbiAgICAgICAgdGhpcy5lYXQodHlwZXMuUmlnaHRQYXJlbnRoZXNpcyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgICAgdHlwZTogJ0Z1bmN0aW9uJyxcbiAgICAgICAgbG9jOiB0aGlzLmdldExvY2F0aW9uKHN0YXJ0LCB0aGlzLnRva2VuU3RhcnQpLFxuICAgICAgICBuYW1lLFxuICAgICAgICBjaGlsZHJlblxuICAgIH07XG59XG5cbmZ1bmN0aW9uIGdlbmVyYXRlKG5vZGUpIHtcbiAgICB0aGlzLnRva2VuKHR5cGVzLkZ1bmN0aW9uLCBub2RlLm5hbWUgKyAnKCcpO1xuICAgIHRoaXMuY2hpbGRyZW4obm9kZSk7XG4gICAgdGhpcy50b2tlbih0eXBlcy5SaWdodFBhcmVudGhlc2lzLCAnKScpO1xufVxuXG5leHBvcnRzLmdlbmVyYXRlID0gZ2VuZXJhdGU7XG5leHBvcnRzLm5hbWUgPSBuYW1lO1xuZXhwb3J0cy5wYXJzZSA9IHBhcnNlO1xuZXhwb3J0cy5zdHJ1Y3R1cmUgPSBzdHJ1Y3R1cmU7XG5leHBvcnRzLndhbGtDb250ZXh0ID0gd2Fsa0NvbnRleHQ7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///60801\n")},85889:(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";eval("\n\nconst types = __webpack_require__(78783);\n\n// '#' ident\nconst xxx = 'XXX';\nconst name = 'Hash';\nconst structure = {\n    value: String\n};\nfunction parse() {\n    const start = this.tokenStart;\n\n    this.eat(types.Hash);\n\n    return {\n        type: 'Hash',\n        loc: this.getLocation(start, this.tokenStart),\n        value: this.substrToCursor(start + 1)\n    };\n}\nfunction generate(node) {\n    this.token(types.Hash, '#' + node.value);\n}\n\nexports.generate = generate;\nexports.name = name;\nexports.parse = parse;\nexports.structure = structure;\nexports.xxx = xxx;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiODU4ODkuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsY0FBYyxtQkFBTyxDQUFDLEtBQTJCOztBQUVqRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxnQkFBZ0I7QUFDaEIsWUFBWTtBQUNaLGFBQWE7QUFDYixpQkFBaUI7QUFDakIsV0FBVyIsInNvdXJjZXMiOlsid2VicGFjazovL2Jsb2NrYml0ZS8uL25vZGVfbW9kdWxlcy9jc3NvL25vZGVfbW9kdWxlcy9jc3MtdHJlZS9janMvc3ludGF4L25vZGUvSGFzaC5janM/YWU5OSJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmNvbnN0IHR5cGVzID0gcmVxdWlyZSgnLi4vLi4vdG9rZW5pemVyL3R5cGVzLmNqcycpO1xuXG4vLyAnIycgaWRlbnRcbmNvbnN0IHh4eCA9ICdYWFgnO1xuY29uc3QgbmFtZSA9ICdIYXNoJztcbmNvbnN0IHN0cnVjdHVyZSA9IHtcbiAgICB2YWx1ZTogU3RyaW5nXG59O1xuZnVuY3Rpb24gcGFyc2UoKSB7XG4gICAgY29uc3Qgc3RhcnQgPSB0aGlzLnRva2VuU3RhcnQ7XG5cbiAgICB0aGlzLmVhdCh0eXBlcy5IYXNoKTtcblxuICAgIHJldHVybiB7XG4gICAgICAgIHR5cGU6ICdIYXNoJyxcbiAgICAgICAgbG9jOiB0aGlzLmdldExvY2F0aW9uKHN0YXJ0LCB0aGlzLnRva2VuU3RhcnQpLFxuICAgICAgICB2YWx1ZTogdGhpcy5zdWJzdHJUb0N1cnNvcihzdGFydCArIDEpXG4gICAgfTtcbn1cbmZ1bmN0aW9uIGdlbmVyYXRlKG5vZGUpIHtcbiAgICB0aGlzLnRva2VuKHR5cGVzLkhhc2gsICcjJyArIG5vZGUudmFsdWUpO1xufVxuXG5leHBvcnRzLmdlbmVyYXRlID0gZ2VuZXJhdGU7XG5leHBvcnRzLm5hbWUgPSBuYW1lO1xuZXhwb3J0cy5wYXJzZSA9IHBhcnNlO1xuZXhwb3J0cy5zdHJ1Y3R1cmUgPSBzdHJ1Y3R1cmU7XG5leHBvcnRzLnh4eCA9IHh4eDtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///85889\n")},11401:(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";eval("\n\nconst types = __webpack_require__(78783);\n\nconst name = 'IdSelector';\nconst structure = {\n    name: String\n};\n\nfunction parse() {\n    const start = this.tokenStart;\n\n    // TODO: check value is an ident\n    this.eat(types.Hash);\n\n    return {\n        type: 'IdSelector',\n        loc: this.getLocation(start, this.tokenStart),\n        name: this.substrToCursor(start + 1)\n    };\n}\n\nfunction generate(node) {\n    // Using Delim instead of Hash is a hack to avoid for a whitespace between ident and id-selector\n    // in safe mode (e.g. \"a#id\"), because IE11 doesn't allow a sequence <ident-token> <hash-token>\n    // without a whitespace in values (e.g. \"1px solid#000\")\n    this.token(types.Delim, '#' + node.name);\n}\n\nexports.generate = generate;\nexports.name = name;\nexports.parse = parse;\nexports.structure = structure;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTE0MDEuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsY0FBYyxtQkFBTyxDQUFDLEtBQTJCOztBQUVqRDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxnQkFBZ0I7QUFDaEIsWUFBWTtBQUNaLGFBQWE7QUFDYixpQkFBaUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ibG9ja2JpdGUvLi9ub2RlX21vZHVsZXMvY3Nzby9ub2RlX21vZHVsZXMvY3NzLXRyZWUvY2pzL3N5bnRheC9ub2RlL0lkU2VsZWN0b3IuY2pzPzM5ZDUiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCB0eXBlcyA9IHJlcXVpcmUoJy4uLy4uL3Rva2VuaXplci90eXBlcy5janMnKTtcblxuY29uc3QgbmFtZSA9ICdJZFNlbGVjdG9yJztcbmNvbnN0IHN0cnVjdHVyZSA9IHtcbiAgICBuYW1lOiBTdHJpbmdcbn07XG5cbmZ1bmN0aW9uIHBhcnNlKCkge1xuICAgIGNvbnN0IHN0YXJ0ID0gdGhpcy50b2tlblN0YXJ0O1xuXG4gICAgLy8gVE9ETzogY2hlY2sgdmFsdWUgaXMgYW4gaWRlbnRcbiAgICB0aGlzLmVhdCh0eXBlcy5IYXNoKTtcblxuICAgIHJldHVybiB7XG4gICAgICAgIHR5cGU6ICdJZFNlbGVjdG9yJyxcbiAgICAgICAgbG9jOiB0aGlzLmdldExvY2F0aW9uKHN0YXJ0LCB0aGlzLnRva2VuU3RhcnQpLFxuICAgICAgICBuYW1lOiB0aGlzLnN1YnN0clRvQ3Vyc29yKHN0YXJ0ICsgMSlcbiAgICB9O1xufVxuXG5mdW5jdGlvbiBnZW5lcmF0ZShub2RlKSB7XG4gICAgLy8gVXNpbmcgRGVsaW0gaW5zdGVhZCBvZiBIYXNoIGlzIGEgaGFjayB0byBhdm9pZCBmb3IgYSB3aGl0ZXNwYWNlIGJldHdlZW4gaWRlbnQgYW5kIGlkLXNlbGVjdG9yXG4gICAgLy8gaW4gc2FmZSBtb2RlIChlLmcuIFwiYSNpZFwiKSwgYmVjYXVzZSBJRTExIGRvZXNuJ3QgYWxsb3cgYSBzZXF1ZW5jZSA8aWRlbnQtdG9rZW4+IDxoYXNoLXRva2VuPlxuICAgIC8vIHdpdGhvdXQgYSB3aGl0ZXNwYWNlIGluIHZhbHVlcyAoZS5nLiBcIjFweCBzb2xpZCMwMDBcIilcbiAgICB0aGlzLnRva2VuKHR5cGVzLkRlbGltLCAnIycgKyBub2RlLm5hbWUpO1xufVxuXG5leHBvcnRzLmdlbmVyYXRlID0gZ2VuZXJhdGU7XG5leHBvcnRzLm5hbWUgPSBuYW1lO1xuZXhwb3J0cy5wYXJzZSA9IHBhcnNlO1xuZXhwb3J0cy5zdHJ1Y3R1cmUgPSBzdHJ1Y3R1cmU7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///11401\n")},66608:(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";eval("\n\nconst types = __webpack_require__(78783);\n\nconst name = 'Identifier';\nconst structure = {\n    name: String\n};\n\nfunction parse() {\n    return {\n        type: 'Identifier',\n        loc: this.getLocation(this.tokenStart, this.tokenEnd),\n        name: this.consume(types.Ident)\n    };\n}\n\nfunction generate(node) {\n    this.token(types.Ident, node.name);\n}\n\nexports.generate = generate;\nexports.name = name;\nexports.parse = parse;\nexports.structure = structure;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNjY2MDguanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsY0FBYyxtQkFBTyxDQUFDLEtBQTJCOztBQUVqRDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUEsZ0JBQWdCO0FBQ2hCLFlBQVk7QUFDWixhQUFhO0FBQ2IsaUJBQWlCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYmxvY2tiaXRlLy4vbm9kZV9tb2R1bGVzL2Nzc28vbm9kZV9tb2R1bGVzL2Nzcy10cmVlL2Nqcy9zeW50YXgvbm9kZS9JZGVudGlmaWVyLmNqcz9iNzc1Il0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuY29uc3QgdHlwZXMgPSByZXF1aXJlKCcuLi8uLi90b2tlbml6ZXIvdHlwZXMuY2pzJyk7XG5cbmNvbnN0IG5hbWUgPSAnSWRlbnRpZmllcic7XG5jb25zdCBzdHJ1Y3R1cmUgPSB7XG4gICAgbmFtZTogU3RyaW5nXG59O1xuXG5mdW5jdGlvbiBwYXJzZSgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICB0eXBlOiAnSWRlbnRpZmllcicsXG4gICAgICAgIGxvYzogdGhpcy5nZXRMb2NhdGlvbih0aGlzLnRva2VuU3RhcnQsIHRoaXMudG9rZW5FbmQpLFxuICAgICAgICBuYW1lOiB0aGlzLmNvbnN1bWUodHlwZXMuSWRlbnQpXG4gICAgfTtcbn1cblxuZnVuY3Rpb24gZ2VuZXJhdGUobm9kZSkge1xuICAgIHRoaXMudG9rZW4odHlwZXMuSWRlbnQsIG5vZGUubmFtZSk7XG59XG5cbmV4cG9ydHMuZ2VuZXJhdGUgPSBnZW5lcmF0ZTtcbmV4cG9ydHMubmFtZSA9IG5hbWU7XG5leHBvcnRzLnBhcnNlID0gcGFyc2U7XG5leHBvcnRzLnN0cnVjdHVyZSA9IHN0cnVjdHVyZTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///66608\n")},26399:(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";eval("\n\nconst types = __webpack_require__(78783);\n\nconst name = 'MediaFeature';\nconst structure = {\n    name: String,\n    value: ['Identifier', 'Number', 'Dimension', 'Ratio', null]\n};\n\nfunction parse() {\n    const start = this.tokenStart;\n    let name;\n    let value = null;\n\n    this.eat(types.LeftParenthesis);\n    this.skipSC();\n\n    name = this.consume(types.Ident);\n    this.skipSC();\n\n    if (this.tokenType !== types.RightParenthesis) {\n        this.eat(types.Colon);\n        this.skipSC();\n\n        switch (this.tokenType) {\n            case types.Number:\n                if (this.lookupNonWSType(1) === types.Delim) {\n                    value = this.Ratio();\n                } else {\n                    value = this.Number();\n                }\n\n                break;\n\n            case types.Dimension:\n                value = this.Dimension();\n                break;\n\n            case types.Ident:\n                value = this.Identifier();\n                break;\n\n            default:\n                this.error('Number, dimension, ratio or identifier is expected');\n        }\n\n        this.skipSC();\n    }\n\n    this.eat(types.RightParenthesis);\n\n    return {\n        type: 'MediaFeature',\n        loc: this.getLocation(start, this.tokenStart),\n        name,\n        value\n    };\n}\n\nfunction generate(node) {\n    this.token(types.LeftParenthesis, '(');\n    this.token(types.Ident, node.name);\n\n    if (node.value !== null) {\n        this.token(types.Colon, ':');\n        this.node(node.value);\n    }\n\n    this.token(types.RightParenthesis, ')');\n}\n\nexports.generate = generate;\nexports.name = name;\nexports.parse = parse;\nexports.structure = structure;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjYzOTkuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsY0FBYyxtQkFBTyxDQUFDLEtBQTJCOztBQUVqRDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0I7QUFDbEI7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBLGdCQUFnQjtBQUNoQixZQUFZO0FBQ1osYUFBYTtBQUNiLGlCQUFpQiIsInNvdXJjZXMiOlsid2VicGFjazovL2Jsb2NrYml0ZS8uL25vZGVfbW9kdWxlcy9jc3NvL25vZGVfbW9kdWxlcy9jc3MtdHJlZS9janMvc3ludGF4L25vZGUvTWVkaWFGZWF0dXJlLmNqcz9lYzFhIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuY29uc3QgdHlwZXMgPSByZXF1aXJlKCcuLi8uLi90b2tlbml6ZXIvdHlwZXMuY2pzJyk7XG5cbmNvbnN0IG5hbWUgPSAnTWVkaWFGZWF0dXJlJztcbmNvbnN0IHN0cnVjdHVyZSA9IHtcbiAgICBuYW1lOiBTdHJpbmcsXG4gICAgdmFsdWU6IFsnSWRlbnRpZmllcicsICdOdW1iZXInLCAnRGltZW5zaW9uJywgJ1JhdGlvJywgbnVsbF1cbn07XG5cbmZ1bmN0aW9uIHBhcnNlKCkge1xuICAgIGNvbnN0IHN0YXJ0ID0gdGhpcy50b2tlblN0YXJ0O1xuICAgIGxldCBuYW1lO1xuICAgIGxldCB2YWx1ZSA9IG51bGw7XG5cbiAgICB0aGlzLmVhdCh0eXBlcy5MZWZ0UGFyZW50aGVzaXMpO1xuICAgIHRoaXMuc2tpcFNDKCk7XG5cbiAgICBuYW1lID0gdGhpcy5jb25zdW1lKHR5cGVzLklkZW50KTtcbiAgICB0aGlzLnNraXBTQygpO1xuXG4gICAgaWYgKHRoaXMudG9rZW5UeXBlICE9PSB0eXBlcy5SaWdodFBhcmVudGhlc2lzKSB7XG4gICAgICAgIHRoaXMuZWF0KHR5cGVzLkNvbG9uKTtcbiAgICAgICAgdGhpcy5za2lwU0MoKTtcblxuICAgICAgICBzd2l0Y2ggKHRoaXMudG9rZW5UeXBlKSB7XG4gICAgICAgICAgICBjYXNlIHR5cGVzLk51bWJlcjpcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5sb29rdXBOb25XU1R5cGUoMSkgPT09IHR5cGVzLkRlbGltKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhbHVlID0gdGhpcy5SYXRpbygpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHZhbHVlID0gdGhpcy5OdW1iZXIoKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgY2FzZSB0eXBlcy5EaW1lbnNpb246XG4gICAgICAgICAgICAgICAgdmFsdWUgPSB0aGlzLkRpbWVuc2lvbigpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICBjYXNlIHR5cGVzLklkZW50OlxuICAgICAgICAgICAgICAgIHZhbHVlID0gdGhpcy5JZGVudGlmaWVyKCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgdGhpcy5lcnJvcignTnVtYmVyLCBkaW1lbnNpb24sIHJhdGlvIG9yIGlkZW50aWZpZXIgaXMgZXhwZWN0ZWQnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuc2tpcFNDKCk7XG4gICAgfVxuXG4gICAgdGhpcy5lYXQodHlwZXMuUmlnaHRQYXJlbnRoZXNpcyk7XG5cbiAgICByZXR1cm4ge1xuICAgICAgICB0eXBlOiAnTWVkaWFGZWF0dXJlJyxcbiAgICAgICAgbG9jOiB0aGlzLmdldExvY2F0aW9uKHN0YXJ0LCB0aGlzLnRva2VuU3RhcnQpLFxuICAgICAgICBuYW1lLFxuICAgICAgICB2YWx1ZVxuICAgIH07XG59XG5cbmZ1bmN0aW9uIGdlbmVyYXRlKG5vZGUpIHtcbiAgICB0aGlzLnRva2VuKHR5cGVzLkxlZnRQYXJlbnRoZXNpcywgJygnKTtcbiAgICB0aGlzLnRva2VuKHR5cGVzLklkZW50LCBub2RlLm5hbWUpO1xuXG4gICAgaWYgKG5vZGUudmFsdWUgIT09IG51bGwpIHtcbiAgICAgICAgdGhpcy50b2tlbih0eXBlcy5Db2xvbiwgJzonKTtcbiAgICAgICAgdGhpcy5ub2RlKG5vZGUudmFsdWUpO1xuICAgIH1cblxuICAgIHRoaXMudG9rZW4odHlwZXMuUmlnaHRQYXJlbnRoZXNpcywgJyknKTtcbn1cblxuZXhwb3J0cy5nZW5lcmF0ZSA9IGdlbmVyYXRlO1xuZXhwb3J0cy5uYW1lID0gbmFtZTtcbmV4cG9ydHMucGFyc2UgPSBwYXJzZTtcbmV4cG9ydHMuc3RydWN0dXJlID0gc3RydWN0dXJlO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///26399\n")},93793:(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";eval("\n\nconst types = __webpack_require__(78783);\n\nconst name = 'MediaQuery';\nconst structure = {\n    children: [[\n        'Identifier',\n        'MediaFeature',\n        'WhiteSpace'\n    ]]\n};\n\nfunction parse() {\n    const children = this.createList();\n    let child = null;\n\n    this.skipSC();\n\n    scan:\n    while (!this.eof) {\n        switch (this.tokenType) {\n            case types.Comment:\n            case types.WhiteSpace:\n                this.next();\n                continue;\n\n            case types.Ident:\n                child = this.Identifier();\n                break;\n\n            case types.LeftParenthesis:\n                child = this.MediaFeature();\n                break;\n\n            default:\n                break scan;\n        }\n\n        children.push(child);\n    }\n\n    if (child === null) {\n        this.error('Identifier or parenthesis is expected');\n    }\n\n    return {\n        type: 'MediaQuery',\n        loc: this.getLocationFromList(children),\n        children\n    };\n}\n\nfunction generate(node) {\n    this.children(node);\n}\n\nexports.generate = generate;\nexports.name = name;\nexports.parse = parse;\nexports.structure = structure;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOTM3OTMuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsY0FBYyxtQkFBTyxDQUFDLEtBQTJCOztBQUVqRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBLGdCQUFnQjtBQUNoQixZQUFZO0FBQ1osYUFBYTtBQUNiLGlCQUFpQiIsInNvdXJjZXMiOlsid2VicGFjazovL2Jsb2NrYml0ZS8uL25vZGVfbW9kdWxlcy9jc3NvL25vZGVfbW9kdWxlcy9jc3MtdHJlZS9janMvc3ludGF4L25vZGUvTWVkaWFRdWVyeS5janM/YzRlNCJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmNvbnN0IHR5cGVzID0gcmVxdWlyZSgnLi4vLi4vdG9rZW5pemVyL3R5cGVzLmNqcycpO1xuXG5jb25zdCBuYW1lID0gJ01lZGlhUXVlcnknO1xuY29uc3Qgc3RydWN0dXJlID0ge1xuICAgIGNoaWxkcmVuOiBbW1xuICAgICAgICAnSWRlbnRpZmllcicsXG4gICAgICAgICdNZWRpYUZlYXR1cmUnLFxuICAgICAgICAnV2hpdGVTcGFjZSdcbiAgICBdXVxufTtcblxuZnVuY3Rpb24gcGFyc2UoKSB7XG4gICAgY29uc3QgY2hpbGRyZW4gPSB0aGlzLmNyZWF0ZUxpc3QoKTtcbiAgICBsZXQgY2hpbGQgPSBudWxsO1xuXG4gICAgdGhpcy5za2lwU0MoKTtcblxuICAgIHNjYW46XG4gICAgd2hpbGUgKCF0aGlzLmVvZikge1xuICAgICAgICBzd2l0Y2ggKHRoaXMudG9rZW5UeXBlKSB7XG4gICAgICAgICAgICBjYXNlIHR5cGVzLkNvbW1lbnQ6XG4gICAgICAgICAgICBjYXNlIHR5cGVzLldoaXRlU3BhY2U6XG4gICAgICAgICAgICAgICAgdGhpcy5uZXh0KCk7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG5cbiAgICAgICAgICAgIGNhc2UgdHlwZXMuSWRlbnQ6XG4gICAgICAgICAgICAgICAgY2hpbGQgPSB0aGlzLklkZW50aWZpZXIoKTtcbiAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgY2FzZSB0eXBlcy5MZWZ0UGFyZW50aGVzaXM6XG4gICAgICAgICAgICAgICAgY2hpbGQgPSB0aGlzLk1lZGlhRmVhdHVyZSgpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIGJyZWFrIHNjYW47XG4gICAgICAgIH1cblxuICAgICAgICBjaGlsZHJlbi5wdXNoKGNoaWxkKTtcbiAgICB9XG5cbiAgICBpZiAoY2hpbGQgPT09IG51bGwpIHtcbiAgICAgICAgdGhpcy5lcnJvcignSWRlbnRpZmllciBvciBwYXJlbnRoZXNpcyBpcyBleHBlY3RlZCcpO1xuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICAgIHR5cGU6ICdNZWRpYVF1ZXJ5JyxcbiAgICAgICAgbG9jOiB0aGlzLmdldExvY2F0aW9uRnJvbUxpc3QoY2hpbGRyZW4pLFxuICAgICAgICBjaGlsZHJlblxuICAgIH07XG59XG5cbmZ1bmN0aW9uIGdlbmVyYXRlKG5vZGUpIHtcbiAgICB0aGlzLmNoaWxkcmVuKG5vZGUpO1xufVxuXG5leHBvcnRzLmdlbmVyYXRlID0gZ2VuZXJhdGU7XG5leHBvcnRzLm5hbWUgPSBuYW1lO1xuZXhwb3J0cy5wYXJzZSA9IHBhcnNlO1xuZXhwb3J0cy5zdHJ1Y3R1cmUgPSBzdHJ1Y3R1cmU7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///93793\n")},72537:(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";eval("\n\nconst types = __webpack_require__(78783);\n\nconst name = 'MediaQueryList';\nconst structure = {\n    children: [[\n        'MediaQuery'\n    ]]\n};\n\nfunction parse() {\n    const children = this.createList();\n\n    this.skipSC();\n\n    while (!this.eof) {\n        children.push(this.MediaQuery());\n\n        if (this.tokenType !== types.Comma) {\n            break;\n        }\n\n        this.next();\n    }\n\n    return {\n        type: 'MediaQueryList',\n        loc: this.getLocationFromList(children),\n        children\n    };\n}\n\nfunction generate(node) {\n    this.children(node, () => this.token(types.Comma, ','));\n}\n\nexports.generate = generate;\nexports.name = name;\nexports.parse = parse;\nexports.structure = structure;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNzI1MzcuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsY0FBYyxtQkFBTyxDQUFDLEtBQTJCOztBQUVqRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUEsZ0JBQWdCO0FBQ2hCLFlBQVk7QUFDWixhQUFhO0FBQ2IsaUJBQWlCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYmxvY2tiaXRlLy4vbm9kZV9tb2R1bGVzL2Nzc28vbm9kZV9tb2R1bGVzL2Nzcy10cmVlL2Nqcy9zeW50YXgvbm9kZS9NZWRpYVF1ZXJ5TGlzdC5janM/NzFkYSJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmNvbnN0IHR5cGVzID0gcmVxdWlyZSgnLi4vLi4vdG9rZW5pemVyL3R5cGVzLmNqcycpO1xuXG5jb25zdCBuYW1lID0gJ01lZGlhUXVlcnlMaXN0JztcbmNvbnN0IHN0cnVjdHVyZSA9IHtcbiAgICBjaGlsZHJlbjogW1tcbiAgICAgICAgJ01lZGlhUXVlcnknXG4gICAgXV1cbn07XG5cbmZ1bmN0aW9uIHBhcnNlKCkge1xuICAgIGNvbnN0IGNoaWxkcmVuID0gdGhpcy5jcmVhdGVMaXN0KCk7XG5cbiAgICB0aGlzLnNraXBTQygpO1xuXG4gICAgd2hpbGUgKCF0aGlzLmVvZikge1xuICAgICAgICBjaGlsZHJlbi5wdXNoKHRoaXMuTWVkaWFRdWVyeSgpKTtcblxuICAgICAgICBpZiAodGhpcy50b2tlblR5cGUgIT09IHR5cGVzLkNvbW1hKSB7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMubmV4dCgpO1xuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICAgIHR5cGU6ICdNZWRpYVF1ZXJ5TGlzdCcsXG4gICAgICAgIGxvYzogdGhpcy5nZXRMb2NhdGlvbkZyb21MaXN0KGNoaWxkcmVuKSxcbiAgICAgICAgY2hpbGRyZW5cbiAgICB9O1xufVxuXG5mdW5jdGlvbiBnZW5lcmF0ZShub2RlKSB7XG4gICAgdGhpcy5jaGlsZHJlbihub2RlLCAoKSA9PiB0aGlzLnRva2VuKHR5cGVzLkNvbW1hLCAnLCcpKTtcbn1cblxuZXhwb3J0cy5nZW5lcmF0ZSA9IGdlbmVyYXRlO1xuZXhwb3J0cy5uYW1lID0gbmFtZTtcbmV4cG9ydHMucGFyc2UgPSBwYXJzZTtcbmV4cG9ydHMuc3RydWN0dXJlID0gc3RydWN0dXJlO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///72537\n")},48689:(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";eval("\n\nconst types = __webpack_require__(78783);\n\nconst name = 'Nth';\nconst structure = {\n    nth: ['AnPlusB', 'Identifier'],\n    selector: ['SelectorList', null]\n};\n\nfunction parse() {\n    this.skipSC();\n\n    const start = this.tokenStart;\n    let end = start;\n    let selector = null;\n    let nth;\n\n    if (this.lookupValue(0, 'odd') || this.lookupValue(0, 'even')) {\n        nth = this.Identifier();\n    } else {\n        nth = this.AnPlusB();\n    }\n\n    end = this.tokenStart;\n    this.skipSC();\n\n    if (this.lookupValue(0, 'of')) {\n        this.next();\n\n        selector = this.SelectorList();\n        end = this.tokenStart;\n    }\n\n    return {\n        type: 'Nth',\n        loc: this.getLocation(start, end),\n        nth,\n        selector\n    };\n}\n\nfunction generate(node) {\n    this.node(node.nth);\n    if (node.selector !== null) {\n        this.token(types.Ident, 'of');\n        this.node(node.selector);\n    }\n}\n\nexports.generate = generate;\nexports.name = name;\nexports.parse = parse;\nexports.structure = structure;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDg2ODkuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsY0FBYyxtQkFBTyxDQUFDLEtBQTJCOztBQUVqRDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsZ0JBQWdCO0FBQ2hCLFlBQVk7QUFDWixhQUFhO0FBQ2IsaUJBQWlCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYmxvY2tiaXRlLy4vbm9kZV9tb2R1bGVzL2Nzc28vbm9kZV9tb2R1bGVzL2Nzcy10cmVlL2Nqcy9zeW50YXgvbm9kZS9OdGguY2pzPzQ3ZTgiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCB0eXBlcyA9IHJlcXVpcmUoJy4uLy4uL3Rva2VuaXplci90eXBlcy5janMnKTtcblxuY29uc3QgbmFtZSA9ICdOdGgnO1xuY29uc3Qgc3RydWN0dXJlID0ge1xuICAgIG50aDogWydBblBsdXNCJywgJ0lkZW50aWZpZXInXSxcbiAgICBzZWxlY3RvcjogWydTZWxlY3Rvckxpc3QnLCBudWxsXVxufTtcblxuZnVuY3Rpb24gcGFyc2UoKSB7XG4gICAgdGhpcy5za2lwU0MoKTtcblxuICAgIGNvbnN0IHN0YXJ0ID0gdGhpcy50b2tlblN0YXJ0O1xuICAgIGxldCBlbmQgPSBzdGFydDtcbiAgICBsZXQgc2VsZWN0b3IgPSBudWxsO1xuICAgIGxldCBudGg7XG5cbiAgICBpZiAodGhpcy5sb29rdXBWYWx1ZSgwLCAnb2RkJykgfHwgdGhpcy5sb29rdXBWYWx1ZSgwLCAnZXZlbicpKSB7XG4gICAgICAgIG50aCA9IHRoaXMuSWRlbnRpZmllcigpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIG50aCA9IHRoaXMuQW5QbHVzQigpO1xuICAgIH1cblxuICAgIGVuZCA9IHRoaXMudG9rZW5TdGFydDtcbiAgICB0aGlzLnNraXBTQygpO1xuXG4gICAgaWYgKHRoaXMubG9va3VwVmFsdWUoMCwgJ29mJykpIHtcbiAgICAgICAgdGhpcy5uZXh0KCk7XG5cbiAgICAgICAgc2VsZWN0b3IgPSB0aGlzLlNlbGVjdG9yTGlzdCgpO1xuICAgICAgICBlbmQgPSB0aGlzLnRva2VuU3RhcnQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgICAgdHlwZTogJ050aCcsXG4gICAgICAgIGxvYzogdGhpcy5nZXRMb2NhdGlvbihzdGFydCwgZW5kKSxcbiAgICAgICAgbnRoLFxuICAgICAgICBzZWxlY3RvclxuICAgIH07XG59XG5cbmZ1bmN0aW9uIGdlbmVyYXRlKG5vZGUpIHtcbiAgICB0aGlzLm5vZGUobm9kZS5udGgpO1xuICAgIGlmIChub2RlLnNlbGVjdG9yICE9PSBudWxsKSB7XG4gICAgICAgIHRoaXMudG9rZW4odHlwZXMuSWRlbnQsICdvZicpO1xuICAgICAgICB0aGlzLm5vZGUobm9kZS5zZWxlY3Rvcik7XG4gICAgfVxufVxuXG5leHBvcnRzLmdlbmVyYXRlID0gZ2VuZXJhdGU7XG5leHBvcnRzLm5hbWUgPSBuYW1lO1xuZXhwb3J0cy5wYXJzZSA9IHBhcnNlO1xuZXhwb3J0cy5zdHJ1Y3R1cmUgPSBzdHJ1Y3R1cmU7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///48689\n")},40646:(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";eval("\n\nconst types = __webpack_require__(78783);\n\nconst name = 'Number';\nconst structure = {\n    value: String\n};\n\nfunction parse() {\n    return {\n        type: 'Number',\n        loc: this.getLocation(this.tokenStart, this.tokenEnd),\n        value: this.consume(types.Number)\n    };\n}\n\nfunction generate(node) {\n    this.token(types.Number, node.value);\n}\n\nexports.generate = generate;\nexports.name = name;\nexports.parse = parse;\nexports.structure = structure;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDA2NDYuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsY0FBYyxtQkFBTyxDQUFDLEtBQTJCOztBQUVqRDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUEsZ0JBQWdCO0FBQ2hCLFlBQVk7QUFDWixhQUFhO0FBQ2IsaUJBQWlCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYmxvY2tiaXRlLy4vbm9kZV9tb2R1bGVzL2Nzc28vbm9kZV9tb2R1bGVzL2Nzcy10cmVlL2Nqcy9zeW50YXgvbm9kZS9OdW1iZXIuY2pzP2MxY2MiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCB0eXBlcyA9IHJlcXVpcmUoJy4uLy4uL3Rva2VuaXplci90eXBlcy5janMnKTtcblxuY29uc3QgbmFtZSA9ICdOdW1iZXInO1xuY29uc3Qgc3RydWN0dXJlID0ge1xuICAgIHZhbHVlOiBTdHJpbmdcbn07XG5cbmZ1bmN0aW9uIHBhcnNlKCkge1xuICAgIHJldHVybiB7XG4gICAgICAgIHR5cGU6ICdOdW1iZXInLFxuICAgICAgICBsb2M6IHRoaXMuZ2V0TG9jYXRpb24odGhpcy50b2tlblN0YXJ0LCB0aGlzLnRva2VuRW5kKSxcbiAgICAgICAgdmFsdWU6IHRoaXMuY29uc3VtZSh0eXBlcy5OdW1iZXIpXG4gICAgfTtcbn1cblxuZnVuY3Rpb24gZ2VuZXJhdGUobm9kZSkge1xuICAgIHRoaXMudG9rZW4odHlwZXMuTnVtYmVyLCBub2RlLnZhbHVlKTtcbn1cblxuZXhwb3J0cy5nZW5lcmF0ZSA9IGdlbmVyYXRlO1xuZXhwb3J0cy5uYW1lID0gbmFtZTtcbmV4cG9ydHMucGFyc2UgPSBwYXJzZTtcbmV4cG9ydHMuc3RydWN0dXJlID0gc3RydWN0dXJlO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///40646\n")},81281:(__unused_webpack_module,exports)=>{"use strict";eval("\n\n// '/' | '*' | ',' | ':' | '+' | '-'\nconst name = 'Operator';\nconst structure = {\n    value: String\n};\n\nfunction parse() {\n    const start = this.tokenStart;\n\n    this.next();\n\n    return {\n        type: 'Operator',\n        loc: this.getLocation(start, this.tokenStart),\n        value: this.substrToCursor(start)\n    };\n}\n\nfunction generate(node) {\n    this.tokenize(node.value);\n}\n\nexports.generate = generate;\nexports.name = name;\nexports.parse = parse;\nexports.structure = structure;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiODEyODEuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWI7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUEsZ0JBQWdCO0FBQ2hCLFlBQVk7QUFDWixhQUFhO0FBQ2IsaUJBQWlCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYmxvY2tiaXRlLy4vbm9kZV9tb2R1bGVzL2Nzc28vbm9kZV9tb2R1bGVzL2Nzcy10cmVlL2Nqcy9zeW50YXgvbm9kZS9PcGVyYXRvci5janM/NTFhMyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbi8vICcvJyB8ICcqJyB8ICcsJyB8ICc6JyB8ICcrJyB8ICctJ1xuY29uc3QgbmFtZSA9ICdPcGVyYXRvcic7XG5jb25zdCBzdHJ1Y3R1cmUgPSB7XG4gICAgdmFsdWU6IFN0cmluZ1xufTtcblxuZnVuY3Rpb24gcGFyc2UoKSB7XG4gICAgY29uc3Qgc3RhcnQgPSB0aGlzLnRva2VuU3RhcnQ7XG5cbiAgICB0aGlzLm5leHQoKTtcblxuICAgIHJldHVybiB7XG4gICAgICAgIHR5cGU6ICdPcGVyYXRvcicsXG4gICAgICAgIGxvYzogdGhpcy5nZXRMb2NhdGlvbihzdGFydCwgdGhpcy50b2tlblN0YXJ0KSxcbiAgICAgICAgdmFsdWU6IHRoaXMuc3Vic3RyVG9DdXJzb3Ioc3RhcnQpXG4gICAgfTtcbn1cblxuZnVuY3Rpb24gZ2VuZXJhdGUobm9kZSkge1xuICAgIHRoaXMudG9rZW5pemUobm9kZS52YWx1ZSk7XG59XG5cbmV4cG9ydHMuZ2VuZXJhdGUgPSBnZW5lcmF0ZTtcbmV4cG9ydHMubmFtZSA9IG5hbWU7XG5leHBvcnRzLnBhcnNlID0gcGFyc2U7XG5leHBvcnRzLnN0cnVjdHVyZSA9IHN0cnVjdHVyZTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///81281\n")},90507:(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";eval("\n\nconst types = __webpack_require__(78783);\n\nconst name = 'Parentheses';\nconst structure = {\n    children: [[]]\n};\n\nfunction parse(readSequence, recognizer) {\n    const start = this.tokenStart;\n    let children = null;\n\n    this.eat(types.LeftParenthesis);\n\n    children = readSequence.call(this, recognizer);\n\n    if (!this.eof) {\n        this.eat(types.RightParenthesis);\n    }\n\n    return {\n        type: 'Parentheses',\n        loc: this.getLocation(start, this.tokenStart),\n        children\n    };\n}\n\nfunction generate(node) {\n    this.token(types.LeftParenthesis, '(');\n    this.children(node);\n    this.token(types.RightParenthesis, ')');\n}\n\nexports.generate = generate;\nexports.name = name;\nexports.parse = parse;\nexports.structure = structure;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOTA1MDcuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsY0FBYyxtQkFBTyxDQUFDLEtBQTJCOztBQUVqRDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLGdCQUFnQjtBQUNoQixZQUFZO0FBQ1osYUFBYTtBQUNiLGlCQUFpQiIsInNvdXJjZXMiOlsid2VicGFjazovL2Jsb2NrYml0ZS8uL25vZGVfbW9kdWxlcy9jc3NvL25vZGVfbW9kdWxlcy9jc3MtdHJlZS9janMvc3ludGF4L25vZGUvUGFyZW50aGVzZXMuY2pzPzNhOGEiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCB0eXBlcyA9IHJlcXVpcmUoJy4uLy4uL3Rva2VuaXplci90eXBlcy5janMnKTtcblxuY29uc3QgbmFtZSA9ICdQYXJlbnRoZXNlcyc7XG5jb25zdCBzdHJ1Y3R1cmUgPSB7XG4gICAgY2hpbGRyZW46IFtbXV1cbn07XG5cbmZ1bmN0aW9uIHBhcnNlKHJlYWRTZXF1ZW5jZSwgcmVjb2duaXplcikge1xuICAgIGNvbnN0IHN0YXJ0ID0gdGhpcy50b2tlblN0YXJ0O1xuICAgIGxldCBjaGlsZHJlbiA9IG51bGw7XG5cbiAgICB0aGlzLmVhdCh0eXBlcy5MZWZ0UGFyZW50aGVzaXMpO1xuXG4gICAgY2hpbGRyZW4gPSByZWFkU2VxdWVuY2UuY2FsbCh0aGlzLCByZWNvZ25pemVyKTtcblxuICAgIGlmICghdGhpcy5lb2YpIHtcbiAgICAgICAgdGhpcy5lYXQodHlwZXMuUmlnaHRQYXJlbnRoZXNpcyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgICAgdHlwZTogJ1BhcmVudGhlc2VzJyxcbiAgICAgICAgbG9jOiB0aGlzLmdldExvY2F0aW9uKHN0YXJ0LCB0aGlzLnRva2VuU3RhcnQpLFxuICAgICAgICBjaGlsZHJlblxuICAgIH07XG59XG5cbmZ1bmN0aW9uIGdlbmVyYXRlKG5vZGUpIHtcbiAgICB0aGlzLnRva2VuKHR5cGVzLkxlZnRQYXJlbnRoZXNpcywgJygnKTtcbiAgICB0aGlzLmNoaWxkcmVuKG5vZGUpO1xuICAgIHRoaXMudG9rZW4odHlwZXMuUmlnaHRQYXJlbnRoZXNpcywgJyknKTtcbn1cblxuZXhwb3J0cy5nZW5lcmF0ZSA9IGdlbmVyYXRlO1xuZXhwb3J0cy5uYW1lID0gbmFtZTtcbmV4cG9ydHMucGFyc2UgPSBwYXJzZTtcbmV4cG9ydHMuc3RydWN0dXJlID0gc3RydWN0dXJlO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///90507\n")},10377:(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";eval("\n\nconst types = __webpack_require__(78783);\n\nconst name = 'Percentage';\nconst structure = {\n    value: String\n};\n\nfunction parse() {\n    return {\n        type: 'Percentage',\n        loc: this.getLocation(this.tokenStart, this.tokenEnd),\n        value: this.consumeNumber(types.Percentage)\n    };\n}\n\nfunction generate(node) {\n    this.token(types.Percentage, node.value + '%');\n}\n\nexports.generate = generate;\nexports.name = name;\nexports.parse = parse;\nexports.structure = structure;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTAzNzcuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsY0FBYyxtQkFBTyxDQUFDLEtBQTJCOztBQUVqRDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUEsZ0JBQWdCO0FBQ2hCLFlBQVk7QUFDWixhQUFhO0FBQ2IsaUJBQWlCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYmxvY2tiaXRlLy4vbm9kZV9tb2R1bGVzL2Nzc28vbm9kZV9tb2R1bGVzL2Nzcy10cmVlL2Nqcy9zeW50YXgvbm9kZS9QZXJjZW50YWdlLmNqcz9lNWYwIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuY29uc3QgdHlwZXMgPSByZXF1aXJlKCcuLi8uLi90b2tlbml6ZXIvdHlwZXMuY2pzJyk7XG5cbmNvbnN0IG5hbWUgPSAnUGVyY2VudGFnZSc7XG5jb25zdCBzdHJ1Y3R1cmUgPSB7XG4gICAgdmFsdWU6IFN0cmluZ1xufTtcblxuZnVuY3Rpb24gcGFyc2UoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgdHlwZTogJ1BlcmNlbnRhZ2UnLFxuICAgICAgICBsb2M6IHRoaXMuZ2V0TG9jYXRpb24odGhpcy50b2tlblN0YXJ0LCB0aGlzLnRva2VuRW5kKSxcbiAgICAgICAgdmFsdWU6IHRoaXMuY29uc3VtZU51bWJlcih0eXBlcy5QZXJjZW50YWdlKVxuICAgIH07XG59XG5cbmZ1bmN0aW9uIGdlbmVyYXRlKG5vZGUpIHtcbiAgICB0aGlzLnRva2VuKHR5cGVzLlBlcmNlbnRhZ2UsIG5vZGUudmFsdWUgKyAnJScpO1xufVxuXG5leHBvcnRzLmdlbmVyYXRlID0gZ2VuZXJhdGU7XG5leHBvcnRzLm5hbWUgPSBuYW1lO1xuZXhwb3J0cy5wYXJzZSA9IHBhcnNlO1xuZXhwb3J0cy5zdHJ1Y3R1cmUgPSBzdHJ1Y3R1cmU7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///10377\n")},52618:(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";eval("\n\nconst types = __webpack_require__(78783);\n\nconst name = 'PseudoClassSelector';\nconst walkContext = 'function';\nconst structure = {\n    name: String,\n    children: [['Raw'], null]\n};\n\n// : [ <ident> | <function-token> <any-value>? ) ]\nfunction parse() {\n    const start = this.tokenStart;\n    let children = null;\n    let name;\n    let nameLowerCase;\n\n    this.eat(types.Colon);\n\n    if (this.tokenType === types.Function) {\n        name = this.consumeFunctionName();\n        nameLowerCase = name.toLowerCase();\n\n        if (hasOwnProperty.call(this.pseudo, nameLowerCase)) {\n            this.skipSC();\n            children = this.pseudo[nameLowerCase].call(this);\n            this.skipSC();\n        } else {\n            children = this.createList();\n            children.push(\n                this.Raw(this.tokenIndex, null, false)\n            );\n        }\n\n        this.eat(types.RightParenthesis);\n    } else {\n        name = this.consume(types.Ident);\n    }\n\n    return {\n        type: 'PseudoClassSelector',\n        loc: this.getLocation(start, this.tokenStart),\n        name,\n        children\n    };\n}\n\nfunction generate(node) {\n    this.token(types.Colon, ':');\n\n    if (node.children === null) {\n        this.token(types.Ident, node.name);\n    } else {\n        this.token(types.Function, node.name + '(');\n        this.children(node);\n        this.token(types.RightParenthesis, ')');\n    }\n}\n\nexports.generate = generate;\nexports.name = name;\nexports.parse = parse;\nexports.structure = structure;\nexports.walkContext = walkContext;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNTI2MTguanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsY0FBYyxtQkFBTyxDQUFDLEtBQTJCOztBQUVqRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsZ0JBQWdCO0FBQ2hCLFlBQVk7QUFDWixhQUFhO0FBQ2IsaUJBQWlCO0FBQ2pCLG1CQUFtQiIsInNvdXJjZXMiOlsid2VicGFjazovL2Jsb2NrYml0ZS8uL25vZGVfbW9kdWxlcy9jc3NvL25vZGVfbW9kdWxlcy9jc3MtdHJlZS9janMvc3ludGF4L25vZGUvUHNldWRvQ2xhc3NTZWxlY3Rvci5janM/ZWJiMCJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmNvbnN0IHR5cGVzID0gcmVxdWlyZSgnLi4vLi4vdG9rZW5pemVyL3R5cGVzLmNqcycpO1xuXG5jb25zdCBuYW1lID0gJ1BzZXVkb0NsYXNzU2VsZWN0b3InO1xuY29uc3Qgd2Fsa0NvbnRleHQgPSAnZnVuY3Rpb24nO1xuY29uc3Qgc3RydWN0dXJlID0ge1xuICAgIG5hbWU6IFN0cmluZyxcbiAgICBjaGlsZHJlbjogW1snUmF3J10sIG51bGxdXG59O1xuXG4vLyA6IFsgPGlkZW50PiB8IDxmdW5jdGlvbi10b2tlbj4gPGFueS12YWx1ZT4/ICkgXVxuZnVuY3Rpb24gcGFyc2UoKSB7XG4gICAgY29uc3Qgc3RhcnQgPSB0aGlzLnRva2VuU3RhcnQ7XG4gICAgbGV0IGNoaWxkcmVuID0gbnVsbDtcbiAgICBsZXQgbmFtZTtcbiAgICBsZXQgbmFtZUxvd2VyQ2FzZTtcblxuICAgIHRoaXMuZWF0KHR5cGVzLkNvbG9uKTtcblxuICAgIGlmICh0aGlzLnRva2VuVHlwZSA9PT0gdHlwZXMuRnVuY3Rpb24pIHtcbiAgICAgICAgbmFtZSA9IHRoaXMuY29uc3VtZUZ1bmN0aW9uTmFtZSgpO1xuICAgICAgICBuYW1lTG93ZXJDYXNlID0gbmFtZS50b0xvd2VyQ2FzZSgpO1xuXG4gICAgICAgIGlmIChoYXNPd25Qcm9wZXJ0eS5jYWxsKHRoaXMucHNldWRvLCBuYW1lTG93ZXJDYXNlKSkge1xuICAgICAgICAgICAgdGhpcy5za2lwU0MoKTtcbiAgICAgICAgICAgIGNoaWxkcmVuID0gdGhpcy5wc2V1ZG9bbmFtZUxvd2VyQ2FzZV0uY2FsbCh0aGlzKTtcbiAgICAgICAgICAgIHRoaXMuc2tpcFNDKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjaGlsZHJlbiA9IHRoaXMuY3JlYXRlTGlzdCgpO1xuICAgICAgICAgICAgY2hpbGRyZW4ucHVzaChcbiAgICAgICAgICAgICAgICB0aGlzLlJhdyh0aGlzLnRva2VuSW5kZXgsIG51bGwsIGZhbHNlKVxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuZWF0KHR5cGVzLlJpZ2h0UGFyZW50aGVzaXMpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIG5hbWUgPSB0aGlzLmNvbnN1bWUodHlwZXMuSWRlbnQpO1xuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICAgIHR5cGU6ICdQc2V1ZG9DbGFzc1NlbGVjdG9yJyxcbiAgICAgICAgbG9jOiB0aGlzLmdldExvY2F0aW9uKHN0YXJ0LCB0aGlzLnRva2VuU3RhcnQpLFxuICAgICAgICBuYW1lLFxuICAgICAgICBjaGlsZHJlblxuICAgIH07XG59XG5cbmZ1bmN0aW9uIGdlbmVyYXRlKG5vZGUpIHtcbiAgICB0aGlzLnRva2VuKHR5cGVzLkNvbG9uLCAnOicpO1xuXG4gICAgaWYgKG5vZGUuY2hpbGRyZW4gPT09IG51bGwpIHtcbiAgICAgICAgdGhpcy50b2tlbih0eXBlcy5JZGVudCwgbm9kZS5uYW1lKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLnRva2VuKHR5cGVzLkZ1bmN0aW9uLCBub2RlLm5hbWUgKyAnKCcpO1xuICAgICAgICB0aGlzLmNoaWxkcmVuKG5vZGUpO1xuICAgICAgICB0aGlzLnRva2VuKHR5cGVzLlJpZ2h0UGFyZW50aGVzaXMsICcpJyk7XG4gICAgfVxufVxuXG5leHBvcnRzLmdlbmVyYXRlID0gZ2VuZXJhdGU7XG5leHBvcnRzLm5hbWUgPSBuYW1lO1xuZXhwb3J0cy5wYXJzZSA9IHBhcnNlO1xuZXhwb3J0cy5zdHJ1Y3R1cmUgPSBzdHJ1Y3R1cmU7XG5leHBvcnRzLndhbGtDb250ZXh0ID0gd2Fsa0NvbnRleHQ7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///52618\n")},54866:(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";eval("\n\nconst types = __webpack_require__(78783);\n\nconst name = 'PseudoElementSelector';\nconst walkContext = 'function';\nconst structure = {\n    name: String,\n    children: [['Raw'], null]\n};\n\n// :: [ <ident> | <function-token> <any-value>? ) ]\nfunction parse() {\n    const start = this.tokenStart;\n    let children = null;\n    let name;\n    let nameLowerCase;\n\n    this.eat(types.Colon);\n    this.eat(types.Colon);\n\n    if (this.tokenType === types.Function) {\n        name = this.consumeFunctionName();\n        nameLowerCase = name.toLowerCase();\n\n        if (hasOwnProperty.call(this.pseudo, nameLowerCase)) {\n            this.skipSC();\n            children = this.pseudo[nameLowerCase].call(this);\n            this.skipSC();\n        } else {\n            children = this.createList();\n            children.push(\n                this.Raw(this.tokenIndex, null, false)\n            );\n        }\n\n        this.eat(types.RightParenthesis);\n    } else {\n        name = this.consume(types.Ident);\n    }\n\n    return {\n        type: 'PseudoElementSelector',\n        loc: this.getLocation(start, this.tokenStart),\n        name,\n        children\n    };\n}\n\nfunction generate(node) {\n    this.token(types.Colon, ':');\n    this.token(types.Colon, ':');\n\n    if (node.children === null) {\n        this.token(types.Ident, node.name);\n    } else {\n        this.token(types.Function, node.name + '(');\n        this.children(node);\n        this.token(types.RightParenthesis, ')');\n    }\n}\n\nexports.generate = generate;\nexports.name = name;\nexports.parse = parse;\nexports.structure = structure;\nexports.walkContext = walkContext;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNTQ4NjYuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsY0FBYyxtQkFBTyxDQUFDLEtBQTJCOztBQUVqRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxNQUFNO0FBQ047QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLGdCQUFnQjtBQUNoQixZQUFZO0FBQ1osYUFBYTtBQUNiLGlCQUFpQjtBQUNqQixtQkFBbUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ibG9ja2JpdGUvLi9ub2RlX21vZHVsZXMvY3Nzby9ub2RlX21vZHVsZXMvY3NzLXRyZWUvY2pzL3N5bnRheC9ub2RlL1BzZXVkb0VsZW1lbnRTZWxlY3Rvci5janM/ZGRlYyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmNvbnN0IHR5cGVzID0gcmVxdWlyZSgnLi4vLi4vdG9rZW5pemVyL3R5cGVzLmNqcycpO1xuXG5jb25zdCBuYW1lID0gJ1BzZXVkb0VsZW1lbnRTZWxlY3Rvcic7XG5jb25zdCB3YWxrQ29udGV4dCA9ICdmdW5jdGlvbic7XG5jb25zdCBzdHJ1Y3R1cmUgPSB7XG4gICAgbmFtZTogU3RyaW5nLFxuICAgIGNoaWxkcmVuOiBbWydSYXcnXSwgbnVsbF1cbn07XG5cbi8vIDo6IFsgPGlkZW50PiB8IDxmdW5jdGlvbi10b2tlbj4gPGFueS12YWx1ZT4/ICkgXVxuZnVuY3Rpb24gcGFyc2UoKSB7XG4gICAgY29uc3Qgc3RhcnQgPSB0aGlzLnRva2VuU3RhcnQ7XG4gICAgbGV0IGNoaWxkcmVuID0gbnVsbDtcbiAgICBsZXQgbmFtZTtcbiAgICBsZXQgbmFtZUxvd2VyQ2FzZTtcblxuICAgIHRoaXMuZWF0KHR5cGVzLkNvbG9uKTtcbiAgICB0aGlzLmVhdCh0eXBlcy5Db2xvbik7XG5cbiAgICBpZiAodGhpcy50b2tlblR5cGUgPT09IHR5cGVzLkZ1bmN0aW9uKSB7XG4gICAgICAgIG5hbWUgPSB0aGlzLmNvbnN1bWVGdW5jdGlvbk5hbWUoKTtcbiAgICAgICAgbmFtZUxvd2VyQ2FzZSA9IG5hbWUudG9Mb3dlckNhc2UoKTtcblxuICAgICAgICBpZiAoaGFzT3duUHJvcGVydHkuY2FsbCh0aGlzLnBzZXVkbywgbmFtZUxvd2VyQ2FzZSkpIHtcbiAgICAgICAgICAgIHRoaXMuc2tpcFNDKCk7XG4gICAgICAgICAgICBjaGlsZHJlbiA9IHRoaXMucHNldWRvW25hbWVMb3dlckNhc2VdLmNhbGwodGhpcyk7XG4gICAgICAgICAgICB0aGlzLnNraXBTQygpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY2hpbGRyZW4gPSB0aGlzLmNyZWF0ZUxpc3QoKTtcbiAgICAgICAgICAgIGNoaWxkcmVuLnB1c2goXG4gICAgICAgICAgICAgICAgdGhpcy5SYXcodGhpcy50b2tlbkluZGV4LCBudWxsLCBmYWxzZSlcbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLmVhdCh0eXBlcy5SaWdodFBhcmVudGhlc2lzKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBuYW1lID0gdGhpcy5jb25zdW1lKHR5cGVzLklkZW50KTtcbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgICB0eXBlOiAnUHNldWRvRWxlbWVudFNlbGVjdG9yJyxcbiAgICAgICAgbG9jOiB0aGlzLmdldExvY2F0aW9uKHN0YXJ0LCB0aGlzLnRva2VuU3RhcnQpLFxuICAgICAgICBuYW1lLFxuICAgICAgICBjaGlsZHJlblxuICAgIH07XG59XG5cbmZ1bmN0aW9uIGdlbmVyYXRlKG5vZGUpIHtcbiAgICB0aGlzLnRva2VuKHR5cGVzLkNvbG9uLCAnOicpO1xuICAgIHRoaXMudG9rZW4odHlwZXMuQ29sb24sICc6Jyk7XG5cbiAgICBpZiAobm9kZS5jaGlsZHJlbiA9PT0gbnVsbCkge1xuICAgICAgICB0aGlzLnRva2VuKHR5cGVzLklkZW50LCBub2RlLm5hbWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMudG9rZW4odHlwZXMuRnVuY3Rpb24sIG5vZGUubmFtZSArICcoJyk7XG4gICAgICAgIHRoaXMuY2hpbGRyZW4obm9kZSk7XG4gICAgICAgIHRoaXMudG9rZW4odHlwZXMuUmlnaHRQYXJlbnRoZXNpcywgJyknKTtcbiAgICB9XG59XG5cbmV4cG9ydHMuZ2VuZXJhdGUgPSBnZW5lcmF0ZTtcbmV4cG9ydHMubmFtZSA9IG5hbWU7XG5leHBvcnRzLnBhcnNlID0gcGFyc2U7XG5leHBvcnRzLnN0cnVjdHVyZSA9IHN0cnVjdHVyZTtcbmV4cG9ydHMud2Fsa0NvbnRleHQgPSB3YWxrQ29udGV4dDtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///54866\n")},92042:(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";eval("\n\nconst types = __webpack_require__(78783);\nconst charCodeDefinitions = __webpack_require__(87351);\n\nconst SOLIDUS = 0x002F;  // U+002F SOLIDUS (/)\nconst FULLSTOP = 0x002E; // U+002E FULL STOP (.)\n\n// Terms of <ratio> should be a positive numbers (not zero or negative)\n// (see https://drafts.csswg.org/mediaqueries-3/#values)\n// However, -o-min-device-pixel-ratio takes fractional values as a ratio's term\n// and this is using by various sites. Therefore we relax checking on parse\n// to test a term is unsigned number without an exponent part.\n// Additional checking may be applied on lexer validation.\nfunction consumeNumber() {\n    this.skipSC();\n\n    const value = this.consume(types.Number);\n\n    for (let i = 0; i < value.length; i++) {\n        const code = value.charCodeAt(i);\n        if (!charCodeDefinitions.isDigit(code) && code !== FULLSTOP) {\n            this.error('Unsigned number is expected', this.tokenStart - value.length + i);\n        }\n    }\n\n    if (Number(value) === 0) {\n        this.error('Zero number is not allowed', this.tokenStart - value.length);\n    }\n\n    return value;\n}\n\nconst name = 'Ratio';\nconst structure = {\n    left: String,\n    right: String\n};\n\n// <positive-integer> S* '/' S* <positive-integer>\nfunction parse() {\n    const start = this.tokenStart;\n    const left = consumeNumber.call(this);\n    let right;\n\n    this.skipSC();\n    this.eatDelim(SOLIDUS);\n    right = consumeNumber.call(this);\n\n    return {\n        type: 'Ratio',\n        loc: this.getLocation(start, this.tokenStart),\n        left,\n        right\n    };\n}\n\nfunction generate(node) {\n    this.token(types.Number, node.left);\n    this.token(types.Delim, '/');\n    this.token(types.Number, node.right);\n}\n\nexports.generate = generate;\nexports.name = name;\nexports.parse = parse;\nexports.structure = structure;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOTIwNDIuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsY0FBYyxtQkFBTyxDQUFDLEtBQTJCO0FBQ2pELDRCQUE0QixtQkFBTyxDQUFDLEtBQTJDOztBQUUvRSx5QkFBeUI7QUFDekIseUJBQXlCOztBQUV6QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBLG9CQUFvQixrQkFBa0I7QUFDdEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsZ0JBQWdCO0FBQ2hCLFlBQVk7QUFDWixhQUFhO0FBQ2IsaUJBQWlCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYmxvY2tiaXRlLy4vbm9kZV9tb2R1bGVzL2Nzc28vbm9kZV9tb2R1bGVzL2Nzcy10cmVlL2Nqcy9zeW50YXgvbm9kZS9SYXRpby5janM/ZWIwOSJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmNvbnN0IHR5cGVzID0gcmVxdWlyZSgnLi4vLi4vdG9rZW5pemVyL3R5cGVzLmNqcycpO1xuY29uc3QgY2hhckNvZGVEZWZpbml0aW9ucyA9IHJlcXVpcmUoJy4uLy4uL3Rva2VuaXplci9jaGFyLWNvZGUtZGVmaW5pdGlvbnMuY2pzJyk7XG5cbmNvbnN0IFNPTElEVVMgPSAweDAwMkY7ICAvLyBVKzAwMkYgU09MSURVUyAoLylcbmNvbnN0IEZVTExTVE9QID0gMHgwMDJFOyAvLyBVKzAwMkUgRlVMTCBTVE9QICguKVxuXG4vLyBUZXJtcyBvZiA8cmF0aW8+IHNob3VsZCBiZSBhIHBvc2l0aXZlIG51bWJlcnMgKG5vdCB6ZXJvIG9yIG5lZ2F0aXZlKVxuLy8gKHNlZSBodHRwczovL2RyYWZ0cy5jc3N3Zy5vcmcvbWVkaWFxdWVyaWVzLTMvI3ZhbHVlcylcbi8vIEhvd2V2ZXIsIC1vLW1pbi1kZXZpY2UtcGl4ZWwtcmF0aW8gdGFrZXMgZnJhY3Rpb25hbCB2YWx1ZXMgYXMgYSByYXRpbydzIHRlcm1cbi8vIGFuZCB0aGlzIGlzIHVzaW5nIGJ5IHZhcmlvdXMgc2l0ZXMuIFRoZXJlZm9yZSB3ZSByZWxheCBjaGVja2luZyBvbiBwYXJzZVxuLy8gdG8gdGVzdCBhIHRlcm0gaXMgdW5zaWduZWQgbnVtYmVyIHdpdGhvdXQgYW4gZXhwb25lbnQgcGFydC5cbi8vIEFkZGl0aW9uYWwgY2hlY2tpbmcgbWF5IGJlIGFwcGxpZWQgb24gbGV4ZXIgdmFsaWRhdGlvbi5cbmZ1bmN0aW9uIGNvbnN1bWVOdW1iZXIoKSB7XG4gICAgdGhpcy5za2lwU0MoKTtcblxuICAgIGNvbnN0IHZhbHVlID0gdGhpcy5jb25zdW1lKHR5cGVzLk51bWJlcik7XG5cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHZhbHVlLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGNvbnN0IGNvZGUgPSB2YWx1ZS5jaGFyQ29kZUF0KGkpO1xuICAgICAgICBpZiAoIWNoYXJDb2RlRGVmaW5pdGlvbnMuaXNEaWdpdChjb2RlKSAmJiBjb2RlICE9PSBGVUxMU1RPUCkge1xuICAgICAgICAgICAgdGhpcy5lcnJvcignVW5zaWduZWQgbnVtYmVyIGlzIGV4cGVjdGVkJywgdGhpcy50b2tlblN0YXJ0IC0gdmFsdWUubGVuZ3RoICsgaSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoTnVtYmVyKHZhbHVlKSA9PT0gMCkge1xuICAgICAgICB0aGlzLmVycm9yKCdaZXJvIG51bWJlciBpcyBub3QgYWxsb3dlZCcsIHRoaXMudG9rZW5TdGFydCAtIHZhbHVlLmxlbmd0aCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHZhbHVlO1xufVxuXG5jb25zdCBuYW1lID0gJ1JhdGlvJztcbmNvbnN0IHN0cnVjdHVyZSA9IHtcbiAgICBsZWZ0OiBTdHJpbmcsXG4gICAgcmlnaHQ6IFN0cmluZ1xufTtcblxuLy8gPHBvc2l0aXZlLWludGVnZXI+IFMqICcvJyBTKiA8cG9zaXRpdmUtaW50ZWdlcj5cbmZ1bmN0aW9uIHBhcnNlKCkge1xuICAgIGNvbnN0IHN0YXJ0ID0gdGhpcy50b2tlblN0YXJ0O1xuICAgIGNvbnN0IGxlZnQgPSBjb25zdW1lTnVtYmVyLmNhbGwodGhpcyk7XG4gICAgbGV0IHJpZ2h0O1xuXG4gICAgdGhpcy5za2lwU0MoKTtcbiAgICB0aGlzLmVhdERlbGltKFNPTElEVVMpO1xuICAgIHJpZ2h0ID0gY29uc3VtZU51bWJlci5jYWxsKHRoaXMpO1xuXG4gICAgcmV0dXJuIHtcbiAgICAgICAgdHlwZTogJ1JhdGlvJyxcbiAgICAgICAgbG9jOiB0aGlzLmdldExvY2F0aW9uKHN0YXJ0LCB0aGlzLnRva2VuU3RhcnQpLFxuICAgICAgICBsZWZ0LFxuICAgICAgICByaWdodFxuICAgIH07XG59XG5cbmZ1bmN0aW9uIGdlbmVyYXRlKG5vZGUpIHtcbiAgICB0aGlzLnRva2VuKHR5cGVzLk51bWJlciwgbm9kZS5sZWZ0KTtcbiAgICB0aGlzLnRva2VuKHR5cGVzLkRlbGltLCAnLycpO1xuICAgIHRoaXMudG9rZW4odHlwZXMuTnVtYmVyLCBub2RlLnJpZ2h0KTtcbn1cblxuZXhwb3J0cy5nZW5lcmF0ZSA9IGdlbmVyYXRlO1xuZXhwb3J0cy5uYW1lID0gbmFtZTtcbmV4cG9ydHMucGFyc2UgPSBwYXJzZTtcbmV4cG9ydHMuc3RydWN0dXJlID0gc3RydWN0dXJlO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///92042\n")},65617:(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";eval("\n\nconst types = __webpack_require__(78783);\n\nfunction getOffsetExcludeWS() {\n    if (this.tokenIndex > 0) {\n        if (this.lookupType(-1) === types.WhiteSpace) {\n            return this.tokenIndex > 1\n                ? this.getTokenStart(this.tokenIndex - 1)\n                : this.firstCharOffset;\n        }\n    }\n\n    return this.tokenStart;\n}\n\nconst name = 'Raw';\nconst structure = {\n    value: String\n};\n\nfunction parse(startToken, consumeUntil, excludeWhiteSpace) {\n    const startOffset = this.getTokenStart(startToken);\n    let endOffset;\n\n    this.skipUntilBalanced(startToken, consumeUntil || this.consumeUntilBalanceEnd);\n\n    if (excludeWhiteSpace && this.tokenStart > startOffset) {\n        endOffset = getOffsetExcludeWS.call(this);\n    } else {\n        endOffset = this.tokenStart;\n    }\n\n    return {\n        type: 'Raw',\n        loc: this.getLocation(startOffset, endOffset),\n        value: this.substring(startOffset, endOffset)\n    };\n}\n\nfunction generate(node) {\n    this.tokenize(node.value);\n}\n\nexports.generate = generate;\nexports.name = name;\nexports.parse = parse;\nexports.structure = structure;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNjU2MTcuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsY0FBYyxtQkFBTyxDQUFDLEtBQTJCOztBQUVqRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBLGdCQUFnQjtBQUNoQixZQUFZO0FBQ1osYUFBYTtBQUNiLGlCQUFpQiIsInNvdXJjZXMiOlsid2VicGFjazovL2Jsb2NrYml0ZS8uL25vZGVfbW9kdWxlcy9jc3NvL25vZGVfbW9kdWxlcy9jc3MtdHJlZS9janMvc3ludGF4L25vZGUvUmF3LmNqcz80YzBiIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuY29uc3QgdHlwZXMgPSByZXF1aXJlKCcuLi8uLi90b2tlbml6ZXIvdHlwZXMuY2pzJyk7XG5cbmZ1bmN0aW9uIGdldE9mZnNldEV4Y2x1ZGVXUygpIHtcbiAgICBpZiAodGhpcy50b2tlbkluZGV4ID4gMCkge1xuICAgICAgICBpZiAodGhpcy5sb29rdXBUeXBlKC0xKSA9PT0gdHlwZXMuV2hpdGVTcGFjZSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMudG9rZW5JbmRleCA+IDFcbiAgICAgICAgICAgICAgICA/IHRoaXMuZ2V0VG9rZW5TdGFydCh0aGlzLnRva2VuSW5kZXggLSAxKVxuICAgICAgICAgICAgICAgIDogdGhpcy5maXJzdENoYXJPZmZzZXQ7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy50b2tlblN0YXJ0O1xufVxuXG5jb25zdCBuYW1lID0gJ1Jhdyc7XG5jb25zdCBzdHJ1Y3R1cmUgPSB7XG4gICAgdmFsdWU6IFN0cmluZ1xufTtcblxuZnVuY3Rpb24gcGFyc2Uoc3RhcnRUb2tlbiwgY29uc3VtZVVudGlsLCBleGNsdWRlV2hpdGVTcGFjZSkge1xuICAgIGNvbnN0IHN0YXJ0T2Zmc2V0ID0gdGhpcy5nZXRUb2tlblN0YXJ0KHN0YXJ0VG9rZW4pO1xuICAgIGxldCBlbmRPZmZzZXQ7XG5cbiAgICB0aGlzLnNraXBVbnRpbEJhbGFuY2VkKHN0YXJ0VG9rZW4sIGNvbnN1bWVVbnRpbCB8fCB0aGlzLmNvbnN1bWVVbnRpbEJhbGFuY2VFbmQpO1xuXG4gICAgaWYgKGV4Y2x1ZGVXaGl0ZVNwYWNlICYmIHRoaXMudG9rZW5TdGFydCA+IHN0YXJ0T2Zmc2V0KSB7XG4gICAgICAgIGVuZE9mZnNldCA9IGdldE9mZnNldEV4Y2x1ZGVXUy5jYWxsKHRoaXMpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIGVuZE9mZnNldCA9IHRoaXMudG9rZW5TdGFydDtcbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgICB0eXBlOiAnUmF3JyxcbiAgICAgICAgbG9jOiB0aGlzLmdldExvY2F0aW9uKHN0YXJ0T2Zmc2V0LCBlbmRPZmZzZXQpLFxuICAgICAgICB2YWx1ZTogdGhpcy5zdWJzdHJpbmcoc3RhcnRPZmZzZXQsIGVuZE9mZnNldClcbiAgICB9O1xufVxuXG5mdW5jdGlvbiBnZW5lcmF0ZShub2RlKSB7XG4gICAgdGhpcy50b2tlbml6ZShub2RlLnZhbHVlKTtcbn1cblxuZXhwb3J0cy5nZW5lcmF0ZSA9IGdlbmVyYXRlO1xuZXhwb3J0cy5uYW1lID0gbmFtZTtcbmV4cG9ydHMucGFyc2UgPSBwYXJzZTtcbmV4cG9ydHMuc3RydWN0dXJlID0gc3RydWN0dXJlO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///65617\n")},85791:(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";eval("\n\nconst types = __webpack_require__(78783);\n\nfunction consumeRaw(startToken) {\n    return this.Raw(startToken, this.consumeUntilLeftCurlyBracket, true);\n}\n\nfunction consumePrelude() {\n    const prelude = this.SelectorList();\n\n    if (prelude.type !== 'Raw' &&\n        this.eof === false &&\n        this.tokenType !== types.LeftCurlyBracket) {\n        this.error();\n    }\n\n    return prelude;\n}\n\nconst name = 'Rule';\nconst walkContext = 'rule';\nconst structure = {\n    prelude: ['SelectorList', 'Raw'],\n    block: ['Block']\n};\n\nfunction parse() {\n    const startToken = this.tokenIndex;\n    const startOffset = this.tokenStart;\n    let prelude;\n    let block;\n\n    if (this.parseRulePrelude) {\n        prelude = this.parseWithFallback(consumePrelude, consumeRaw);\n    } else {\n        prelude = consumeRaw.call(this, startToken);\n    }\n\n    block = this.Block(true);\n\n    return {\n        type: 'Rule',\n        loc: this.getLocation(startOffset, this.tokenStart),\n        prelude,\n        block\n    };\n}\nfunction generate(node) {\n    this.node(node.prelude);\n    this.node(node.block);\n}\n\nexports.generate = generate;\nexports.name = name;\nexports.parse = parse;\nexports.structure = structure;\nexports.walkContext = walkContext;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiODU3OTEuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsY0FBYyxtQkFBTyxDQUFDLEtBQTJCOztBQUVqRDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsZ0JBQWdCO0FBQ2hCLFlBQVk7QUFDWixhQUFhO0FBQ2IsaUJBQWlCO0FBQ2pCLG1CQUFtQiIsInNvdXJjZXMiOlsid2VicGFjazovL2Jsb2NrYml0ZS8uL25vZGVfbW9kdWxlcy9jc3NvL25vZGVfbW9kdWxlcy9jc3MtdHJlZS9janMvc3ludGF4L25vZGUvUnVsZS5janM/ZmYwMiJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmNvbnN0IHR5cGVzID0gcmVxdWlyZSgnLi4vLi4vdG9rZW5pemVyL3R5cGVzLmNqcycpO1xuXG5mdW5jdGlvbiBjb25zdW1lUmF3KHN0YXJ0VG9rZW4pIHtcbiAgICByZXR1cm4gdGhpcy5SYXcoc3RhcnRUb2tlbiwgdGhpcy5jb25zdW1lVW50aWxMZWZ0Q3VybHlCcmFja2V0LCB0cnVlKTtcbn1cblxuZnVuY3Rpb24gY29uc3VtZVByZWx1ZGUoKSB7XG4gICAgY29uc3QgcHJlbHVkZSA9IHRoaXMuU2VsZWN0b3JMaXN0KCk7XG5cbiAgICBpZiAocHJlbHVkZS50eXBlICE9PSAnUmF3JyAmJlxuICAgICAgICB0aGlzLmVvZiA9PT0gZmFsc2UgJiZcbiAgICAgICAgdGhpcy50b2tlblR5cGUgIT09IHR5cGVzLkxlZnRDdXJseUJyYWNrZXQpIHtcbiAgICAgICAgdGhpcy5lcnJvcigpO1xuICAgIH1cblxuICAgIHJldHVybiBwcmVsdWRlO1xufVxuXG5jb25zdCBuYW1lID0gJ1J1bGUnO1xuY29uc3Qgd2Fsa0NvbnRleHQgPSAncnVsZSc7XG5jb25zdCBzdHJ1Y3R1cmUgPSB7XG4gICAgcHJlbHVkZTogWydTZWxlY3Rvckxpc3QnLCAnUmF3J10sXG4gICAgYmxvY2s6IFsnQmxvY2snXVxufTtcblxuZnVuY3Rpb24gcGFyc2UoKSB7XG4gICAgY29uc3Qgc3RhcnRUb2tlbiA9IHRoaXMudG9rZW5JbmRleDtcbiAgICBjb25zdCBzdGFydE9mZnNldCA9IHRoaXMudG9rZW5TdGFydDtcbiAgICBsZXQgcHJlbHVkZTtcbiAgICBsZXQgYmxvY2s7XG5cbiAgICBpZiAodGhpcy5wYXJzZVJ1bGVQcmVsdWRlKSB7XG4gICAgICAgIHByZWx1ZGUgPSB0aGlzLnBhcnNlV2l0aEZhbGxiYWNrKGNvbnN1bWVQcmVsdWRlLCBjb25zdW1lUmF3KTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBwcmVsdWRlID0gY29uc3VtZVJhdy5jYWxsKHRoaXMsIHN0YXJ0VG9rZW4pO1xuICAgIH1cblxuICAgIGJsb2NrID0gdGhpcy5CbG9jayh0cnVlKTtcblxuICAgIHJldHVybiB7XG4gICAgICAgIHR5cGU6ICdSdWxlJyxcbiAgICAgICAgbG9jOiB0aGlzLmdldExvY2F0aW9uKHN0YXJ0T2Zmc2V0LCB0aGlzLnRva2VuU3RhcnQpLFxuICAgICAgICBwcmVsdWRlLFxuICAgICAgICBibG9ja1xuICAgIH07XG59XG5mdW5jdGlvbiBnZW5lcmF0ZShub2RlKSB7XG4gICAgdGhpcy5ub2RlKG5vZGUucHJlbHVkZSk7XG4gICAgdGhpcy5ub2RlKG5vZGUuYmxvY2spO1xufVxuXG5leHBvcnRzLmdlbmVyYXRlID0gZ2VuZXJhdGU7XG5leHBvcnRzLm5hbWUgPSBuYW1lO1xuZXhwb3J0cy5wYXJzZSA9IHBhcnNlO1xuZXhwb3J0cy5zdHJ1Y3R1cmUgPSBzdHJ1Y3R1cmU7XG5leHBvcnRzLndhbGtDb250ZXh0ID0gd2Fsa0NvbnRleHQ7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///85791\n")},84790:(__unused_webpack_module,exports)=>{"use strict";eval("\n\nconst name = 'Selector';\nconst structure = {\n    children: [[\n        'TypeSelector',\n        'IdSelector',\n        'ClassSelector',\n        'AttributeSelector',\n        'PseudoClassSelector',\n        'PseudoElementSelector',\n        'Combinator',\n        'WhiteSpace'\n    ]]\n};\n\nfunction parse() {\n    const children = this.readSequence(this.scope.Selector);\n\n    // nothing were consumed\n    if (this.getFirstListNode(children) === null) {\n        this.error('Selector is expected');\n    }\n\n    return {\n        type: 'Selector',\n        loc: this.getLocationFromList(children),\n        children\n    };\n}\n\nfunction generate(node) {\n    this.children(node);\n}\n\nexports.generate = generate;\nexports.name = name;\nexports.parse = parse;\nexports.structure = structure;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiODQ3OTAuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBLGdCQUFnQjtBQUNoQixZQUFZO0FBQ1osYUFBYTtBQUNiLGlCQUFpQiIsInNvdXJjZXMiOlsid2VicGFjazovL2Jsb2NrYml0ZS8uL25vZGVfbW9kdWxlcy9jc3NvL25vZGVfbW9kdWxlcy9jc3MtdHJlZS9janMvc3ludGF4L25vZGUvU2VsZWN0b3IuY2pzPzFlY2QiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBuYW1lID0gJ1NlbGVjdG9yJztcbmNvbnN0IHN0cnVjdHVyZSA9IHtcbiAgICBjaGlsZHJlbjogW1tcbiAgICAgICAgJ1R5cGVTZWxlY3RvcicsXG4gICAgICAgICdJZFNlbGVjdG9yJyxcbiAgICAgICAgJ0NsYXNzU2VsZWN0b3InLFxuICAgICAgICAnQXR0cmlidXRlU2VsZWN0b3InLFxuICAgICAgICAnUHNldWRvQ2xhc3NTZWxlY3RvcicsXG4gICAgICAgICdQc2V1ZG9FbGVtZW50U2VsZWN0b3InLFxuICAgICAgICAnQ29tYmluYXRvcicsXG4gICAgICAgICdXaGl0ZVNwYWNlJ1xuICAgIF1dXG59O1xuXG5mdW5jdGlvbiBwYXJzZSgpIHtcbiAgICBjb25zdCBjaGlsZHJlbiA9IHRoaXMucmVhZFNlcXVlbmNlKHRoaXMuc2NvcGUuU2VsZWN0b3IpO1xuXG4gICAgLy8gbm90aGluZyB3ZXJlIGNvbnN1bWVkXG4gICAgaWYgKHRoaXMuZ2V0Rmlyc3RMaXN0Tm9kZShjaGlsZHJlbikgPT09IG51bGwpIHtcbiAgICAgICAgdGhpcy5lcnJvcignU2VsZWN0b3IgaXMgZXhwZWN0ZWQnKTtcbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgICB0eXBlOiAnU2VsZWN0b3InLFxuICAgICAgICBsb2M6IHRoaXMuZ2V0TG9jYXRpb25Gcm9tTGlzdChjaGlsZHJlbiksXG4gICAgICAgIGNoaWxkcmVuXG4gICAgfTtcbn1cblxuZnVuY3Rpb24gZ2VuZXJhdGUobm9kZSkge1xuICAgIHRoaXMuY2hpbGRyZW4obm9kZSk7XG59XG5cbmV4cG9ydHMuZ2VuZXJhdGUgPSBnZW5lcmF0ZTtcbmV4cG9ydHMubmFtZSA9IG5hbWU7XG5leHBvcnRzLnBhcnNlID0gcGFyc2U7XG5leHBvcnRzLnN0cnVjdHVyZSA9IHN0cnVjdHVyZTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///84790\n")},33362:(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";eval("\n\nconst types = __webpack_require__(78783);\n\nconst name = 'SelectorList';\nconst walkContext = 'selector';\nconst structure = {\n    children: [[\n        'Selector',\n        'Raw'\n    ]]\n};\n\nfunction parse() {\n    const children = this.createList();\n\n    while (!this.eof) {\n        children.push(this.Selector());\n\n        if (this.tokenType === types.Comma) {\n            this.next();\n            continue;\n        }\n\n        break;\n    }\n\n    return {\n        type: 'SelectorList',\n        loc: this.getLocationFromList(children),\n        children\n    };\n}\n\nfunction generate(node) {\n    this.children(node, () => this.token(types.Comma, ','));\n}\n\nexports.generate = generate;\nexports.name = name;\nexports.parse = parse;\nexports.structure = structure;\nexports.walkContext = walkContext;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzMzNjIuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsY0FBYyxtQkFBTyxDQUFDLEtBQTJCOztBQUVqRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUEsZ0JBQWdCO0FBQ2hCLFlBQVk7QUFDWixhQUFhO0FBQ2IsaUJBQWlCO0FBQ2pCLG1CQUFtQiIsInNvdXJjZXMiOlsid2VicGFjazovL2Jsb2NrYml0ZS8uL25vZGVfbW9kdWxlcy9jc3NvL25vZGVfbW9kdWxlcy9jc3MtdHJlZS9janMvc3ludGF4L25vZGUvU2VsZWN0b3JMaXN0LmNqcz84NDMzIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuY29uc3QgdHlwZXMgPSByZXF1aXJlKCcuLi8uLi90b2tlbml6ZXIvdHlwZXMuY2pzJyk7XG5cbmNvbnN0IG5hbWUgPSAnU2VsZWN0b3JMaXN0JztcbmNvbnN0IHdhbGtDb250ZXh0ID0gJ3NlbGVjdG9yJztcbmNvbnN0IHN0cnVjdHVyZSA9IHtcbiAgICBjaGlsZHJlbjogW1tcbiAgICAgICAgJ1NlbGVjdG9yJyxcbiAgICAgICAgJ1JhdydcbiAgICBdXVxufTtcblxuZnVuY3Rpb24gcGFyc2UoKSB7XG4gICAgY29uc3QgY2hpbGRyZW4gPSB0aGlzLmNyZWF0ZUxpc3QoKTtcblxuICAgIHdoaWxlICghdGhpcy5lb2YpIHtcbiAgICAgICAgY2hpbGRyZW4ucHVzaCh0aGlzLlNlbGVjdG9yKCkpO1xuXG4gICAgICAgIGlmICh0aGlzLnRva2VuVHlwZSA9PT0gdHlwZXMuQ29tbWEpIHtcbiAgICAgICAgICAgIHRoaXMubmV4dCgpO1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cblxuICAgICAgICBicmVhaztcbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgICB0eXBlOiAnU2VsZWN0b3JMaXN0JyxcbiAgICAgICAgbG9jOiB0aGlzLmdldExvY2F0aW9uRnJvbUxpc3QoY2hpbGRyZW4pLFxuICAgICAgICBjaGlsZHJlblxuICAgIH07XG59XG5cbmZ1bmN0aW9uIGdlbmVyYXRlKG5vZGUpIHtcbiAgICB0aGlzLmNoaWxkcmVuKG5vZGUsICgpID0+IHRoaXMudG9rZW4odHlwZXMuQ29tbWEsICcsJykpO1xufVxuXG5leHBvcnRzLmdlbmVyYXRlID0gZ2VuZXJhdGU7XG5leHBvcnRzLm5hbWUgPSBuYW1lO1xuZXhwb3J0cy5wYXJzZSA9IHBhcnNlO1xuZXhwb3J0cy5zdHJ1Y3R1cmUgPSBzdHJ1Y3R1cmU7XG5leHBvcnRzLndhbGtDb250ZXh0ID0gd2Fsa0NvbnRleHQ7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///33362\n")},41338:(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";eval("\n\nconst string = __webpack_require__(83500);\nconst types = __webpack_require__(78783);\n\nconst name = 'String';\nconst structure = {\n    value: String\n};\n\nfunction parse() {\n    return {\n        type: 'String',\n        loc: this.getLocation(this.tokenStart, this.tokenEnd),\n        value: string.decode(this.consume(types.String))\n    };\n}\n\nfunction generate(node) {\n    this.token(types.String, string.encode(node.value));\n}\n\nexports.generate = generate;\nexports.name = name;\nexports.parse = parse;\nexports.structure = structure;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDEzMzguanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsZUFBZSxtQkFBTyxDQUFDLEtBQXdCO0FBQy9DLGNBQWMsbUJBQU8sQ0FBQyxLQUEyQjs7QUFFakQ7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBLGdCQUFnQjtBQUNoQixZQUFZO0FBQ1osYUFBYTtBQUNiLGlCQUFpQiIsInNvdXJjZXMiOlsid2VicGFjazovL2Jsb2NrYml0ZS8uL25vZGVfbW9kdWxlcy9jc3NvL25vZGVfbW9kdWxlcy9jc3MtdHJlZS9janMvc3ludGF4L25vZGUvU3RyaW5nLmNqcz84ZTlmIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuY29uc3Qgc3RyaW5nID0gcmVxdWlyZSgnLi4vLi4vdXRpbHMvc3RyaW5nLmNqcycpO1xuY29uc3QgdHlwZXMgPSByZXF1aXJlKCcuLi8uLi90b2tlbml6ZXIvdHlwZXMuY2pzJyk7XG5cbmNvbnN0IG5hbWUgPSAnU3RyaW5nJztcbmNvbnN0IHN0cnVjdHVyZSA9IHtcbiAgICB2YWx1ZTogU3RyaW5nXG59O1xuXG5mdW5jdGlvbiBwYXJzZSgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICB0eXBlOiAnU3RyaW5nJyxcbiAgICAgICAgbG9jOiB0aGlzLmdldExvY2F0aW9uKHRoaXMudG9rZW5TdGFydCwgdGhpcy50b2tlbkVuZCksXG4gICAgICAgIHZhbHVlOiBzdHJpbmcuZGVjb2RlKHRoaXMuY29uc3VtZSh0eXBlcy5TdHJpbmcpKVxuICAgIH07XG59XG5cbmZ1bmN0aW9uIGdlbmVyYXRlKG5vZGUpIHtcbiAgICB0aGlzLnRva2VuKHR5cGVzLlN0cmluZywgc3RyaW5nLmVuY29kZShub2RlLnZhbHVlKSk7XG59XG5cbmV4cG9ydHMuZ2VuZXJhdGUgPSBnZW5lcmF0ZTtcbmV4cG9ydHMubmFtZSA9IG5hbWU7XG5leHBvcnRzLnBhcnNlID0gcGFyc2U7XG5leHBvcnRzLnN0cnVjdHVyZSA9IHN0cnVjdHVyZTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///41338\n")},45349:(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";eval("\n\nconst types = __webpack_require__(78783);\n\nconst EXCLAMATIONMARK = 0x0021; // U+0021 EXCLAMATION MARK (!)\n\nfunction consumeRaw(startToken) {\n    return this.Raw(startToken, null, false);\n}\n\nconst name = 'StyleSheet';\nconst walkContext = 'stylesheet';\nconst structure = {\n    children: [[\n        'Comment',\n        'CDO',\n        'CDC',\n        'Atrule',\n        'Rule',\n        'Raw'\n    ]]\n};\n\nfunction parse() {\n    const start = this.tokenStart;\n    const children = this.createList();\n    let child;\n\n    while (!this.eof) {\n        switch (this.tokenType) {\n            case types.WhiteSpace:\n                this.next();\n                continue;\n\n            case types.Comment:\n                // ignore comments except exclamation comments (i.e. /*! .. */) on top level\n                if (this.charCodeAt(this.tokenStart + 2) !== EXCLAMATIONMARK) {\n                    this.next();\n                    continue;\n                }\n\n                child = this.Comment();\n                break;\n\n            case types.CDO: // \x3c!--\n                child = this.CDO();\n                break;\n\n            case types.CDC: // --\x3e\n                child = this.CDC();\n                break;\n\n            // CSS Syntax Module Level 3\n            // §2.2 Error handling\n            // At the \"top level\" of a stylesheet, an <at-keyword-token> starts an at-rule.\n            case types.AtKeyword:\n                child = this.parseWithFallback(this.Atrule, consumeRaw);\n                break;\n\n            // Anything else starts a qualified rule ...\n            default:\n                child = this.parseWithFallback(this.Rule, consumeRaw);\n        }\n\n        children.push(child);\n    }\n\n    return {\n        type: 'StyleSheet',\n        loc: this.getLocation(start, this.tokenStart),\n        children\n    };\n}\n\nfunction generate(node) {\n    this.children(node);\n}\n\nexports.generate = generate;\nexports.name = name;\nexports.parse = parse;\nexports.structure = structure;\nexports.walkContext = walkContext;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDUzNDkuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsY0FBYyxtQkFBTyxDQUFDLEtBQTJCOztBQUVqRCxnQ0FBZ0M7O0FBRWhDO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUEsZ0JBQWdCO0FBQ2hCLFlBQVk7QUFDWixhQUFhO0FBQ2IsaUJBQWlCO0FBQ2pCLG1CQUFtQiIsInNvdXJjZXMiOlsid2VicGFjazovL2Jsb2NrYml0ZS8uL25vZGVfbW9kdWxlcy9jc3NvL25vZGVfbW9kdWxlcy9jc3MtdHJlZS9janMvc3ludGF4L25vZGUvU3R5bGVTaGVldC5janM/NjRjYSJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmNvbnN0IHR5cGVzID0gcmVxdWlyZSgnLi4vLi4vdG9rZW5pemVyL3R5cGVzLmNqcycpO1xuXG5jb25zdCBFWENMQU1BVElPTk1BUksgPSAweDAwMjE7IC8vIFUrMDAyMSBFWENMQU1BVElPTiBNQVJLICghKVxuXG5mdW5jdGlvbiBjb25zdW1lUmF3KHN0YXJ0VG9rZW4pIHtcbiAgICByZXR1cm4gdGhpcy5SYXcoc3RhcnRUb2tlbiwgbnVsbCwgZmFsc2UpO1xufVxuXG5jb25zdCBuYW1lID0gJ1N0eWxlU2hlZXQnO1xuY29uc3Qgd2Fsa0NvbnRleHQgPSAnc3R5bGVzaGVldCc7XG5jb25zdCBzdHJ1Y3R1cmUgPSB7XG4gICAgY2hpbGRyZW46IFtbXG4gICAgICAgICdDb21tZW50JyxcbiAgICAgICAgJ0NETycsXG4gICAgICAgICdDREMnLFxuICAgICAgICAnQXRydWxlJyxcbiAgICAgICAgJ1J1bGUnLFxuICAgICAgICAnUmF3J1xuICAgIF1dXG59O1xuXG5mdW5jdGlvbiBwYXJzZSgpIHtcbiAgICBjb25zdCBzdGFydCA9IHRoaXMudG9rZW5TdGFydDtcbiAgICBjb25zdCBjaGlsZHJlbiA9IHRoaXMuY3JlYXRlTGlzdCgpO1xuICAgIGxldCBjaGlsZDtcblxuICAgIHdoaWxlICghdGhpcy5lb2YpIHtcbiAgICAgICAgc3dpdGNoICh0aGlzLnRva2VuVHlwZSkge1xuICAgICAgICAgICAgY2FzZSB0eXBlcy5XaGl0ZVNwYWNlOlxuICAgICAgICAgICAgICAgIHRoaXMubmV4dCgpO1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuXG4gICAgICAgICAgICBjYXNlIHR5cGVzLkNvbW1lbnQ6XG4gICAgICAgICAgICAgICAgLy8gaWdub3JlIGNvbW1lbnRzIGV4Y2VwdCBleGNsYW1hdGlvbiBjb21tZW50cyAoaS5lLiAvKiEgLi4gKi8pIG9uIHRvcCBsZXZlbFxuICAgICAgICAgICAgICAgIGlmICh0aGlzLmNoYXJDb2RlQXQodGhpcy50b2tlblN0YXJ0ICsgMikgIT09IEVYQ0xBTUFUSU9OTUFSSykge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLm5leHQoKTtcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgY2hpbGQgPSB0aGlzLkNvbW1lbnQoKTtcbiAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgY2FzZSB0eXBlcy5DRE86IC8vIDwhLS1cbiAgICAgICAgICAgICAgICBjaGlsZCA9IHRoaXMuQ0RPKCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgIGNhc2UgdHlwZXMuQ0RDOiAvLyAtLT5cbiAgICAgICAgICAgICAgICBjaGlsZCA9IHRoaXMuQ0RDKCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgIC8vIENTUyBTeW50YXggTW9kdWxlIExldmVsIDNcbiAgICAgICAgICAgIC8vIMKnMi4yIEVycm9yIGhhbmRsaW5nXG4gICAgICAgICAgICAvLyBBdCB0aGUgXCJ0b3AgbGV2ZWxcIiBvZiBhIHN0eWxlc2hlZXQsIGFuIDxhdC1rZXl3b3JkLXRva2VuPiBzdGFydHMgYW4gYXQtcnVsZS5cbiAgICAgICAgICAgIGNhc2UgdHlwZXMuQXRLZXl3b3JkOlxuICAgICAgICAgICAgICAgIGNoaWxkID0gdGhpcy5wYXJzZVdpdGhGYWxsYmFjayh0aGlzLkF0cnVsZSwgY29uc3VtZVJhdyk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgIC8vIEFueXRoaW5nIGVsc2Ugc3RhcnRzIGEgcXVhbGlmaWVkIHJ1bGUgLi4uXG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIGNoaWxkID0gdGhpcy5wYXJzZVdpdGhGYWxsYmFjayh0aGlzLlJ1bGUsIGNvbnN1bWVSYXcpO1xuICAgICAgICB9XG5cbiAgICAgICAgY2hpbGRyZW4ucHVzaChjaGlsZCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgICAgdHlwZTogJ1N0eWxlU2hlZXQnLFxuICAgICAgICBsb2M6IHRoaXMuZ2V0TG9jYXRpb24oc3RhcnQsIHRoaXMudG9rZW5TdGFydCksXG4gICAgICAgIGNoaWxkcmVuXG4gICAgfTtcbn1cblxuZnVuY3Rpb24gZ2VuZXJhdGUobm9kZSkge1xuICAgIHRoaXMuY2hpbGRyZW4obm9kZSk7XG59XG5cbmV4cG9ydHMuZ2VuZXJhdGUgPSBnZW5lcmF0ZTtcbmV4cG9ydHMubmFtZSA9IG5hbWU7XG5leHBvcnRzLnBhcnNlID0gcGFyc2U7XG5leHBvcnRzLnN0cnVjdHVyZSA9IHN0cnVjdHVyZTtcbmV4cG9ydHMud2Fsa0NvbnRleHQgPSB3YWxrQ29udGV4dDtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///45349\n")},90126:(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";eval("\n\nconst types = __webpack_require__(78783);\n\nconst ASTERISK = 0x002A;     // U+002A ASTERISK (*)\nconst VERTICALLINE = 0x007C; // U+007C VERTICAL LINE (|)\n\nfunction eatIdentifierOrAsterisk() {\n    if (this.tokenType !== types.Ident &&\n        this.isDelim(ASTERISK) === false) {\n        this.error('Identifier or asterisk is expected');\n    }\n\n    this.next();\n}\n\nconst name = 'TypeSelector';\nconst structure = {\n    name: String\n};\n\n// ident\n// ident|ident\n// ident|*\n// *\n// *|ident\n// *|*\n// |ident\n// |*\nfunction parse() {\n    const start = this.tokenStart;\n\n    if (this.isDelim(VERTICALLINE)) {\n        this.next();\n        eatIdentifierOrAsterisk.call(this);\n    } else {\n        eatIdentifierOrAsterisk.call(this);\n\n        if (this.isDelim(VERTICALLINE)) {\n            this.next();\n            eatIdentifierOrAsterisk.call(this);\n        }\n    }\n\n    return {\n        type: 'TypeSelector',\n        loc: this.getLocation(start, this.tokenStart),\n        name: this.substrToCursor(start)\n    };\n}\n\nfunction generate(node) {\n    this.tokenize(node.name);\n}\n\nexports.generate = generate;\nexports.name = name;\nexports.parse = parse;\nexports.structure = structure;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOTAxMjYuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsY0FBYyxtQkFBTyxDQUFDLEtBQTJCOztBQUVqRCw2QkFBNkI7QUFDN0IsNkJBQTZCOztBQUU3QjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQSxnQkFBZ0I7QUFDaEIsWUFBWTtBQUNaLGFBQWE7QUFDYixpQkFBaUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ibG9ja2JpdGUvLi9ub2RlX21vZHVsZXMvY3Nzby9ub2RlX21vZHVsZXMvY3NzLXRyZWUvY2pzL3N5bnRheC9ub2RlL1R5cGVTZWxlY3Rvci5janM/YWRiZSJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmNvbnN0IHR5cGVzID0gcmVxdWlyZSgnLi4vLi4vdG9rZW5pemVyL3R5cGVzLmNqcycpO1xuXG5jb25zdCBBU1RFUklTSyA9IDB4MDAyQTsgICAgIC8vIFUrMDAyQSBBU1RFUklTSyAoKilcbmNvbnN0IFZFUlRJQ0FMTElORSA9IDB4MDA3QzsgLy8gVSswMDdDIFZFUlRJQ0FMIExJTkUgKHwpXG5cbmZ1bmN0aW9uIGVhdElkZW50aWZpZXJPckFzdGVyaXNrKCkge1xuICAgIGlmICh0aGlzLnRva2VuVHlwZSAhPT0gdHlwZXMuSWRlbnQgJiZcbiAgICAgICAgdGhpcy5pc0RlbGltKEFTVEVSSVNLKSA9PT0gZmFsc2UpIHtcbiAgICAgICAgdGhpcy5lcnJvcignSWRlbnRpZmllciBvciBhc3RlcmlzayBpcyBleHBlY3RlZCcpO1xuICAgIH1cblxuICAgIHRoaXMubmV4dCgpO1xufVxuXG5jb25zdCBuYW1lID0gJ1R5cGVTZWxlY3Rvcic7XG5jb25zdCBzdHJ1Y3R1cmUgPSB7XG4gICAgbmFtZTogU3RyaW5nXG59O1xuXG4vLyBpZGVudFxuLy8gaWRlbnR8aWRlbnRcbi8vIGlkZW50fCpcbi8vICpcbi8vICp8aWRlbnRcbi8vICp8KlxuLy8gfGlkZW50XG4vLyB8KlxuZnVuY3Rpb24gcGFyc2UoKSB7XG4gICAgY29uc3Qgc3RhcnQgPSB0aGlzLnRva2VuU3RhcnQ7XG5cbiAgICBpZiAodGhpcy5pc0RlbGltKFZFUlRJQ0FMTElORSkpIHtcbiAgICAgICAgdGhpcy5uZXh0KCk7XG4gICAgICAgIGVhdElkZW50aWZpZXJPckFzdGVyaXNrLmNhbGwodGhpcyk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgZWF0SWRlbnRpZmllck9yQXN0ZXJpc2suY2FsbCh0aGlzKTtcblxuICAgICAgICBpZiAodGhpcy5pc0RlbGltKFZFUlRJQ0FMTElORSkpIHtcbiAgICAgICAgICAgIHRoaXMubmV4dCgpO1xuICAgICAgICAgICAgZWF0SWRlbnRpZmllck9yQXN0ZXJpc2suY2FsbCh0aGlzKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICAgIHR5cGU6ICdUeXBlU2VsZWN0b3InLFxuICAgICAgICBsb2M6IHRoaXMuZ2V0TG9jYXRpb24oc3RhcnQsIHRoaXMudG9rZW5TdGFydCksXG4gICAgICAgIG5hbWU6IHRoaXMuc3Vic3RyVG9DdXJzb3Ioc3RhcnQpXG4gICAgfTtcbn1cblxuZnVuY3Rpb24gZ2VuZXJhdGUobm9kZSkge1xuICAgIHRoaXMudG9rZW5pemUobm9kZS5uYW1lKTtcbn1cblxuZXhwb3J0cy5nZW5lcmF0ZSA9IGdlbmVyYXRlO1xuZXhwb3J0cy5uYW1lID0gbmFtZTtcbmV4cG9ydHMucGFyc2UgPSBwYXJzZTtcbmV4cG9ydHMuc3RydWN0dXJlID0gc3RydWN0dXJlO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///90126\n")},72673:(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";eval("\n\nconst types = __webpack_require__(78783);\nconst charCodeDefinitions = __webpack_require__(87351);\n\nconst PLUSSIGN = 0x002B;     // U+002B PLUS SIGN (+)\nconst HYPHENMINUS = 0x002D;  // U+002D HYPHEN-MINUS (-)\nconst QUESTIONMARK = 0x003F; // U+003F QUESTION MARK (?)\n\nfunction eatHexSequence(offset, allowDash) {\n    let len = 0;\n\n    for (let pos = this.tokenStart + offset; pos < this.tokenEnd; pos++) {\n        const code = this.charCodeAt(pos);\n\n        if (code === HYPHENMINUS && allowDash && len !== 0) {\n            eatHexSequence.call(this, offset + len + 1, false);\n            return -1;\n        }\n\n        if (!charCodeDefinitions.isHexDigit(code)) {\n            this.error(\n                allowDash && len !== 0\n                    ? 'Hyphen minus' + (len < 6 ? ' or hex digit' : '') + ' is expected'\n                    : (len < 6 ? 'Hex digit is expected' : 'Unexpected input'),\n                pos\n            );\n        }\n\n        if (++len > 6) {\n            this.error('Too many hex digits', pos);\n        }    }\n\n    this.next();\n    return len;\n}\n\nfunction eatQuestionMarkSequence(max) {\n    let count = 0;\n\n    while (this.isDelim(QUESTIONMARK)) {\n        if (++count > max) {\n            this.error('Too many question marks');\n        }\n\n        this.next();\n    }\n}\n\nfunction startsWith(code) {\n    if (this.charCodeAt(this.tokenStart) !== code) {\n        this.error((code === PLUSSIGN ? 'Plus sign' : 'Hyphen minus') + ' is expected');\n    }\n}\n\n// https://drafts.csswg.org/css-syntax/#urange\n// Informally, the <urange> production has three forms:\n// U+0001\n//      Defines a range consisting of a single code point, in this case the code point \"1\".\n// U+0001-00ff\n//      Defines a range of codepoints between the first and the second value, in this case\n//      the range between \"1\" and \"ff\" (255 in decimal) inclusive.\n// U+00??\n//      Defines a range of codepoints where the \"?\" characters range over all hex digits,\n//      in this case defining the same as the value U+0000-00ff.\n// In each form, a maximum of 6 digits is allowed for each hexadecimal number (if you treat \"?\" as a hexadecimal digit).\n//\n// <urange> =\n//   u '+' <ident-token> '?'* |\n//   u <dimension-token> '?'* |\n//   u <number-token> '?'* |\n//   u <number-token> <dimension-token> |\n//   u <number-token> <number-token> |\n//   u '+' '?'+\nfunction scanUnicodeRange() {\n    let hexLength = 0;\n\n    switch (this.tokenType) {\n        case types.Number:\n            // u <number-token> '?'*\n            // u <number-token> <dimension-token>\n            // u <number-token> <number-token>\n            hexLength = eatHexSequence.call(this, 1, true);\n\n            if (this.isDelim(QUESTIONMARK)) {\n                eatQuestionMarkSequence.call(this, 6 - hexLength);\n                break;\n            }\n\n            if (this.tokenType === types.Dimension ||\n                this.tokenType === types.Number) {\n                startsWith.call(this, HYPHENMINUS);\n                eatHexSequence.call(this, 1, false);\n                break;\n            }\n\n            break;\n\n        case types.Dimension:\n            // u <dimension-token> '?'*\n            hexLength = eatHexSequence.call(this, 1, true);\n\n            if (hexLength > 0) {\n                eatQuestionMarkSequence.call(this, 6 - hexLength);\n            }\n\n            break;\n\n        default:\n            // u '+' <ident-token> '?'*\n            // u '+' '?'+\n            this.eatDelim(PLUSSIGN);\n\n            if (this.tokenType === types.Ident) {\n                hexLength = eatHexSequence.call(this, 0, true);\n                if (hexLength > 0) {\n                    eatQuestionMarkSequence.call(this, 6 - hexLength);\n                }\n                break;\n            }\n\n            if (this.isDelim(QUESTIONMARK)) {\n                this.next();\n                eatQuestionMarkSequence.call(this, 5);\n                break;\n            }\n\n            this.error('Hex digit or question mark is expected');\n    }\n}\n\nconst name = 'UnicodeRange';\nconst structure = {\n    value: String\n};\n\nfunction parse() {\n    const start = this.tokenStart;\n\n    // U or u\n    this.eatIdent('u');\n    scanUnicodeRange.call(this);\n\n    return {\n        type: 'UnicodeRange',\n        loc: this.getLocation(start, this.tokenStart),\n        value: this.substrToCursor(start)\n    };\n}\n\nfunction generate(node) {\n    this.tokenize(node.value);\n}\n\nexports.generate = generate;\nexports.name = name;\nexports.parse = parse;\nexports.structure = structure;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNzI2NzMuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsY0FBYyxtQkFBTyxDQUFDLEtBQTJCO0FBQ2pELDRCQUE0QixtQkFBTyxDQUFDLEtBQTJDOztBQUUvRSw2QkFBNkI7QUFDN0IsNkJBQTZCO0FBQzdCLDZCQUE2Qjs7QUFFN0I7QUFDQTs7QUFFQSw2Q0FBNkMscUJBQXFCO0FBQ2xFOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQSxnQkFBZ0I7QUFDaEIsWUFBWTtBQUNaLGFBQWE7QUFDYixpQkFBaUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ibG9ja2JpdGUvLi9ub2RlX21vZHVsZXMvY3Nzby9ub2RlX21vZHVsZXMvY3NzLXRyZWUvY2pzL3N5bnRheC9ub2RlL1VuaWNvZGVSYW5nZS5janM/MDA2NyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmNvbnN0IHR5cGVzID0gcmVxdWlyZSgnLi4vLi4vdG9rZW5pemVyL3R5cGVzLmNqcycpO1xuY29uc3QgY2hhckNvZGVEZWZpbml0aW9ucyA9IHJlcXVpcmUoJy4uLy4uL3Rva2VuaXplci9jaGFyLWNvZGUtZGVmaW5pdGlvbnMuY2pzJyk7XG5cbmNvbnN0IFBMVVNTSUdOID0gMHgwMDJCOyAgICAgLy8gVSswMDJCIFBMVVMgU0lHTiAoKylcbmNvbnN0IEhZUEhFTk1JTlVTID0gMHgwMDJEOyAgLy8gVSswMDJEIEhZUEhFTi1NSU5VUyAoLSlcbmNvbnN0IFFVRVNUSU9OTUFSSyA9IDB4MDAzRjsgLy8gVSswMDNGIFFVRVNUSU9OIE1BUksgKD8pXG5cbmZ1bmN0aW9uIGVhdEhleFNlcXVlbmNlKG9mZnNldCwgYWxsb3dEYXNoKSB7XG4gICAgbGV0IGxlbiA9IDA7XG5cbiAgICBmb3IgKGxldCBwb3MgPSB0aGlzLnRva2VuU3RhcnQgKyBvZmZzZXQ7IHBvcyA8IHRoaXMudG9rZW5FbmQ7IHBvcysrKSB7XG4gICAgICAgIGNvbnN0IGNvZGUgPSB0aGlzLmNoYXJDb2RlQXQocG9zKTtcblxuICAgICAgICBpZiAoY29kZSA9PT0gSFlQSEVOTUlOVVMgJiYgYWxsb3dEYXNoICYmIGxlbiAhPT0gMCkge1xuICAgICAgICAgICAgZWF0SGV4U2VxdWVuY2UuY2FsbCh0aGlzLCBvZmZzZXQgKyBsZW4gKyAxLCBmYWxzZSk7XG4gICAgICAgICAgICByZXR1cm4gLTE7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIWNoYXJDb2RlRGVmaW5pdGlvbnMuaXNIZXhEaWdpdChjb2RlKSkge1xuICAgICAgICAgICAgdGhpcy5lcnJvcihcbiAgICAgICAgICAgICAgICBhbGxvd0Rhc2ggJiYgbGVuICE9PSAwXG4gICAgICAgICAgICAgICAgICAgID8gJ0h5cGhlbiBtaW51cycgKyAobGVuIDwgNiA/ICcgb3IgaGV4IGRpZ2l0JyA6ICcnKSArICcgaXMgZXhwZWN0ZWQnXG4gICAgICAgICAgICAgICAgICAgIDogKGxlbiA8IDYgPyAnSGV4IGRpZ2l0IGlzIGV4cGVjdGVkJyA6ICdVbmV4cGVjdGVkIGlucHV0JyksXG4gICAgICAgICAgICAgICAgcG9zXG4gICAgICAgICAgICApO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCsrbGVuID4gNikge1xuICAgICAgICAgICAgdGhpcy5lcnJvcignVG9vIG1hbnkgaGV4IGRpZ2l0cycsIHBvcyk7XG4gICAgICAgIH0gICAgfVxuXG4gICAgdGhpcy5uZXh0KCk7XG4gICAgcmV0dXJuIGxlbjtcbn1cblxuZnVuY3Rpb24gZWF0UXVlc3Rpb25NYXJrU2VxdWVuY2UobWF4KSB7XG4gICAgbGV0IGNvdW50ID0gMDtcblxuICAgIHdoaWxlICh0aGlzLmlzRGVsaW0oUVVFU1RJT05NQVJLKSkge1xuICAgICAgICBpZiAoKytjb3VudCA+IG1heCkge1xuICAgICAgICAgICAgdGhpcy5lcnJvcignVG9vIG1hbnkgcXVlc3Rpb24gbWFya3MnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMubmV4dCgpO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gc3RhcnRzV2l0aChjb2RlKSB7XG4gICAgaWYgKHRoaXMuY2hhckNvZGVBdCh0aGlzLnRva2VuU3RhcnQpICE9PSBjb2RlKSB7XG4gICAgICAgIHRoaXMuZXJyb3IoKGNvZGUgPT09IFBMVVNTSUdOID8gJ1BsdXMgc2lnbicgOiAnSHlwaGVuIG1pbnVzJykgKyAnIGlzIGV4cGVjdGVkJyk7XG4gICAgfVxufVxuXG4vLyBodHRwczovL2RyYWZ0cy5jc3N3Zy5vcmcvY3NzLXN5bnRheC8jdXJhbmdlXG4vLyBJbmZvcm1hbGx5LCB0aGUgPHVyYW5nZT4gcHJvZHVjdGlvbiBoYXMgdGhyZWUgZm9ybXM6XG4vLyBVKzAwMDFcbi8vICAgICAgRGVmaW5lcyBhIHJhbmdlIGNvbnNpc3Rpbmcgb2YgYSBzaW5nbGUgY29kZSBwb2ludCwgaW4gdGhpcyBjYXNlIHRoZSBjb2RlIHBvaW50IFwiMVwiLlxuLy8gVSswMDAxLTAwZmZcbi8vICAgICAgRGVmaW5lcyBhIHJhbmdlIG9mIGNvZGVwb2ludHMgYmV0d2VlbiB0aGUgZmlyc3QgYW5kIHRoZSBzZWNvbmQgdmFsdWUsIGluIHRoaXMgY2FzZVxuLy8gICAgICB0aGUgcmFuZ2UgYmV0d2VlbiBcIjFcIiBhbmQgXCJmZlwiICgyNTUgaW4gZGVjaW1hbCkgaW5jbHVzaXZlLlxuLy8gVSswMD8/XG4vLyAgICAgIERlZmluZXMgYSByYW5nZSBvZiBjb2RlcG9pbnRzIHdoZXJlIHRoZSBcIj9cIiBjaGFyYWN0ZXJzIHJhbmdlIG92ZXIgYWxsIGhleCBkaWdpdHMsXG4vLyAgICAgIGluIHRoaXMgY2FzZSBkZWZpbmluZyB0aGUgc2FtZSBhcyB0aGUgdmFsdWUgVSswMDAwLTAwZmYuXG4vLyBJbiBlYWNoIGZvcm0sIGEgbWF4aW11bSBvZiA2IGRpZ2l0cyBpcyBhbGxvd2VkIGZvciBlYWNoIGhleGFkZWNpbWFsIG51bWJlciAoaWYgeW91IHRyZWF0IFwiP1wiIGFzIGEgaGV4YWRlY2ltYWwgZGlnaXQpLlxuLy9cbi8vIDx1cmFuZ2U+ID1cbi8vICAgdSAnKycgPGlkZW50LXRva2VuPiAnPycqIHxcbi8vICAgdSA8ZGltZW5zaW9uLXRva2VuPiAnPycqIHxcbi8vICAgdSA8bnVtYmVyLXRva2VuPiAnPycqIHxcbi8vICAgdSA8bnVtYmVyLXRva2VuPiA8ZGltZW5zaW9uLXRva2VuPiB8XG4vLyAgIHUgPG51bWJlci10b2tlbj4gPG51bWJlci10b2tlbj4gfFxuLy8gICB1ICcrJyAnPycrXG5mdW5jdGlvbiBzY2FuVW5pY29kZVJhbmdlKCkge1xuICAgIGxldCBoZXhMZW5ndGggPSAwO1xuXG4gICAgc3dpdGNoICh0aGlzLnRva2VuVHlwZSkge1xuICAgICAgICBjYXNlIHR5cGVzLk51bWJlcjpcbiAgICAgICAgICAgIC8vIHUgPG51bWJlci10b2tlbj4gJz8nKlxuICAgICAgICAgICAgLy8gdSA8bnVtYmVyLXRva2VuPiA8ZGltZW5zaW9uLXRva2VuPlxuICAgICAgICAgICAgLy8gdSA8bnVtYmVyLXRva2VuPiA8bnVtYmVyLXRva2VuPlxuICAgICAgICAgICAgaGV4TGVuZ3RoID0gZWF0SGV4U2VxdWVuY2UuY2FsbCh0aGlzLCAxLCB0cnVlKTtcblxuICAgICAgICAgICAgaWYgKHRoaXMuaXNEZWxpbShRVUVTVElPTk1BUkspKSB7XG4gICAgICAgICAgICAgICAgZWF0UXVlc3Rpb25NYXJrU2VxdWVuY2UuY2FsbCh0aGlzLCA2IC0gaGV4TGVuZ3RoKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKHRoaXMudG9rZW5UeXBlID09PSB0eXBlcy5EaW1lbnNpb24gfHxcbiAgICAgICAgICAgICAgICB0aGlzLnRva2VuVHlwZSA9PT0gdHlwZXMuTnVtYmVyKSB7XG4gICAgICAgICAgICAgICAgc3RhcnRzV2l0aC5jYWxsKHRoaXMsIEhZUEhFTk1JTlVTKTtcbiAgICAgICAgICAgICAgICBlYXRIZXhTZXF1ZW5jZS5jYWxsKHRoaXMsIDEsIGZhbHNlKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSB0eXBlcy5EaW1lbnNpb246XG4gICAgICAgICAgICAvLyB1IDxkaW1lbnNpb24tdG9rZW4+ICc/JypcbiAgICAgICAgICAgIGhleExlbmd0aCA9IGVhdEhleFNlcXVlbmNlLmNhbGwodGhpcywgMSwgdHJ1ZSk7XG5cbiAgICAgICAgICAgIGlmIChoZXhMZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgZWF0UXVlc3Rpb25NYXJrU2VxdWVuY2UuY2FsbCh0aGlzLCA2IC0gaGV4TGVuZ3RoKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIC8vIHUgJysnIDxpZGVudC10b2tlbj4gJz8nKlxuICAgICAgICAgICAgLy8gdSAnKycgJz8nK1xuICAgICAgICAgICAgdGhpcy5lYXREZWxpbShQTFVTU0lHTik7XG5cbiAgICAgICAgICAgIGlmICh0aGlzLnRva2VuVHlwZSA9PT0gdHlwZXMuSWRlbnQpIHtcbiAgICAgICAgICAgICAgICBoZXhMZW5ndGggPSBlYXRIZXhTZXF1ZW5jZS5jYWxsKHRoaXMsIDAsIHRydWUpO1xuICAgICAgICAgICAgICAgIGlmIChoZXhMZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgIGVhdFF1ZXN0aW9uTWFya1NlcXVlbmNlLmNhbGwodGhpcywgNiAtIGhleExlbmd0aCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAodGhpcy5pc0RlbGltKFFVRVNUSU9OTUFSSykpIHtcbiAgICAgICAgICAgICAgICB0aGlzLm5leHQoKTtcbiAgICAgICAgICAgICAgICBlYXRRdWVzdGlvbk1hcmtTZXF1ZW5jZS5jYWxsKHRoaXMsIDUpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0aGlzLmVycm9yKCdIZXggZGlnaXQgb3IgcXVlc3Rpb24gbWFyayBpcyBleHBlY3RlZCcpO1xuICAgIH1cbn1cblxuY29uc3QgbmFtZSA9ICdVbmljb2RlUmFuZ2UnO1xuY29uc3Qgc3RydWN0dXJlID0ge1xuICAgIHZhbHVlOiBTdHJpbmdcbn07XG5cbmZ1bmN0aW9uIHBhcnNlKCkge1xuICAgIGNvbnN0IHN0YXJ0ID0gdGhpcy50b2tlblN0YXJ0O1xuXG4gICAgLy8gVSBvciB1XG4gICAgdGhpcy5lYXRJZGVudCgndScpO1xuICAgIHNjYW5Vbmljb2RlUmFuZ2UuY2FsbCh0aGlzKTtcblxuICAgIHJldHVybiB7XG4gICAgICAgIHR5cGU6ICdVbmljb2RlUmFuZ2UnLFxuICAgICAgICBsb2M6IHRoaXMuZ2V0TG9jYXRpb24oc3RhcnQsIHRoaXMudG9rZW5TdGFydCksXG4gICAgICAgIHZhbHVlOiB0aGlzLnN1YnN0clRvQ3Vyc29yKHN0YXJ0KVxuICAgIH07XG59XG5cbmZ1bmN0aW9uIGdlbmVyYXRlKG5vZGUpIHtcbiAgICB0aGlzLnRva2VuaXplKG5vZGUudmFsdWUpO1xufVxuXG5leHBvcnRzLmdlbmVyYXRlID0gZ2VuZXJhdGU7XG5leHBvcnRzLm5hbWUgPSBuYW1lO1xuZXhwb3J0cy5wYXJzZSA9IHBhcnNlO1xuZXhwb3J0cy5zdHJ1Y3R1cmUgPSBzdHJ1Y3R1cmU7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///72673\n")},86972:(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";eval("\n\nconst url = __webpack_require__(84135);\nconst string = __webpack_require__(83500);\nconst types = __webpack_require__(78783);\n\nconst name = 'Url';\nconst structure = {\n    value: String\n};\n\n// <url-token> | <function-token> <string> )\nfunction parse() {\n    const start = this.tokenStart;\n    let value;\n\n    switch (this.tokenType) {\n        case types.Url:\n            value = url.decode(this.consume(types.Url));\n            break;\n\n        case types.Function:\n            if (!this.cmpStr(this.tokenStart, this.tokenEnd, 'url(')) {\n                this.error('Function name must be `url`');\n            }\n\n            this.eat(types.Function);\n            this.skipSC();\n            value = string.decode(this.consume(types.String));\n            this.skipSC();\n            if (!this.eof) {\n                this.eat(types.RightParenthesis);\n            }\n            break;\n\n        default:\n            this.error('Url or Function is expected');\n    }\n\n    return {\n        type: 'Url',\n        loc: this.getLocation(start, this.tokenStart),\n        value\n    };\n}\n\nfunction generate(node) {\n    this.token(types.Url, url.encode(node.value));\n}\n\nexports.generate = generate;\nexports.name = name;\nexports.parse = parse;\nexports.structure = structure;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiODY5NzIuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsWUFBWSxtQkFBTyxDQUFDLEtBQXFCO0FBQ3pDLGVBQWUsbUJBQU8sQ0FBQyxLQUF3QjtBQUMvQyxjQUFjLG1CQUFPLENBQUMsS0FBMkI7O0FBRWpEO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUEsZ0JBQWdCO0FBQ2hCLFlBQVk7QUFDWixhQUFhO0FBQ2IsaUJBQWlCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYmxvY2tiaXRlLy4vbm9kZV9tb2R1bGVzL2Nzc28vbm9kZV9tb2R1bGVzL2Nzcy10cmVlL2Nqcy9zeW50YXgvbm9kZS9VcmwuY2pzPzMxNzkiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCB1cmwgPSByZXF1aXJlKCcuLi8uLi91dGlscy91cmwuY2pzJyk7XG5jb25zdCBzdHJpbmcgPSByZXF1aXJlKCcuLi8uLi91dGlscy9zdHJpbmcuY2pzJyk7XG5jb25zdCB0eXBlcyA9IHJlcXVpcmUoJy4uLy4uL3Rva2VuaXplci90eXBlcy5janMnKTtcblxuY29uc3QgbmFtZSA9ICdVcmwnO1xuY29uc3Qgc3RydWN0dXJlID0ge1xuICAgIHZhbHVlOiBTdHJpbmdcbn07XG5cbi8vIDx1cmwtdG9rZW4+IHwgPGZ1bmN0aW9uLXRva2VuPiA8c3RyaW5nPiApXG5mdW5jdGlvbiBwYXJzZSgpIHtcbiAgICBjb25zdCBzdGFydCA9IHRoaXMudG9rZW5TdGFydDtcbiAgICBsZXQgdmFsdWU7XG5cbiAgICBzd2l0Y2ggKHRoaXMudG9rZW5UeXBlKSB7XG4gICAgICAgIGNhc2UgdHlwZXMuVXJsOlxuICAgICAgICAgICAgdmFsdWUgPSB1cmwuZGVjb2RlKHRoaXMuY29uc3VtZSh0eXBlcy5VcmwpKTtcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgdHlwZXMuRnVuY3Rpb246XG4gICAgICAgICAgICBpZiAoIXRoaXMuY21wU3RyKHRoaXMudG9rZW5TdGFydCwgdGhpcy50b2tlbkVuZCwgJ3VybCgnKSkge1xuICAgICAgICAgICAgICAgIHRoaXMuZXJyb3IoJ0Z1bmN0aW9uIG5hbWUgbXVzdCBiZSBgdXJsYCcpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0aGlzLmVhdCh0eXBlcy5GdW5jdGlvbik7XG4gICAgICAgICAgICB0aGlzLnNraXBTQygpO1xuICAgICAgICAgICAgdmFsdWUgPSBzdHJpbmcuZGVjb2RlKHRoaXMuY29uc3VtZSh0eXBlcy5TdHJpbmcpKTtcbiAgICAgICAgICAgIHRoaXMuc2tpcFNDKCk7XG4gICAgICAgICAgICBpZiAoIXRoaXMuZW9mKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5lYXQodHlwZXMuUmlnaHRQYXJlbnRoZXNpcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgdGhpcy5lcnJvcignVXJsIG9yIEZ1bmN0aW9uIGlzIGV4cGVjdGVkJyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgICAgdHlwZTogJ1VybCcsXG4gICAgICAgIGxvYzogdGhpcy5nZXRMb2NhdGlvbihzdGFydCwgdGhpcy50b2tlblN0YXJ0KSxcbiAgICAgICAgdmFsdWVcbiAgICB9O1xufVxuXG5mdW5jdGlvbiBnZW5lcmF0ZShub2RlKSB7XG4gICAgdGhpcy50b2tlbih0eXBlcy5VcmwsIHVybC5lbmNvZGUobm9kZS52YWx1ZSkpO1xufVxuXG5leHBvcnRzLmdlbmVyYXRlID0gZ2VuZXJhdGU7XG5leHBvcnRzLm5hbWUgPSBuYW1lO1xuZXhwb3J0cy5wYXJzZSA9IHBhcnNlO1xuZXhwb3J0cy5zdHJ1Y3R1cmUgPSBzdHJ1Y3R1cmU7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///86972\n")},87944:(__unused_webpack_module,exports)=>{"use strict";eval("\n\nconst name = 'Value';\nconst structure = {\n    children: [[]]\n};\n\nfunction parse() {\n    const start = this.tokenStart;\n    const children = this.readSequence(this.scope.Value);\n\n    return {\n        type: 'Value',\n        loc: this.getLocation(start, this.tokenStart),\n        children\n    };\n}\n\nfunction generate(node) {\n    this.children(node);\n}\n\nexports.generate = generate;\nexports.name = name;\nexports.parse = parse;\nexports.structure = structure;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiODc5NDQuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWI7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUEsZ0JBQWdCO0FBQ2hCLFlBQVk7QUFDWixhQUFhO0FBQ2IsaUJBQWlCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYmxvY2tiaXRlLy4vbm9kZV9tb2R1bGVzL2Nzc28vbm9kZV9tb2R1bGVzL2Nzcy10cmVlL2Nqcy9zeW50YXgvbm9kZS9WYWx1ZS5janM/ZWNmYyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmNvbnN0IG5hbWUgPSAnVmFsdWUnO1xuY29uc3Qgc3RydWN0dXJlID0ge1xuICAgIGNoaWxkcmVuOiBbW11dXG59O1xuXG5mdW5jdGlvbiBwYXJzZSgpIHtcbiAgICBjb25zdCBzdGFydCA9IHRoaXMudG9rZW5TdGFydDtcbiAgICBjb25zdCBjaGlsZHJlbiA9IHRoaXMucmVhZFNlcXVlbmNlKHRoaXMuc2NvcGUuVmFsdWUpO1xuXG4gICAgcmV0dXJuIHtcbiAgICAgICAgdHlwZTogJ1ZhbHVlJyxcbiAgICAgICAgbG9jOiB0aGlzLmdldExvY2F0aW9uKHN0YXJ0LCB0aGlzLnRva2VuU3RhcnQpLFxuICAgICAgICBjaGlsZHJlblxuICAgIH07XG59XG5cbmZ1bmN0aW9uIGdlbmVyYXRlKG5vZGUpIHtcbiAgICB0aGlzLmNoaWxkcmVuKG5vZGUpO1xufVxuXG5leHBvcnRzLmdlbmVyYXRlID0gZ2VuZXJhdGU7XG5leHBvcnRzLm5hbWUgPSBuYW1lO1xuZXhwb3J0cy5wYXJzZSA9IHBhcnNlO1xuZXhwb3J0cy5zdHJ1Y3R1cmUgPSBzdHJ1Y3R1cmU7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///87944\n")},71830:(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";eval("\n\nconst types = __webpack_require__(78783);\n\nconst SPACE = Object.freeze({\n    type: 'WhiteSpace',\n    loc: null,\n    value: ' '\n});\n\nconst name = 'WhiteSpace';\nconst structure = {\n    value: String\n};\n\nfunction parse() {\n    this.eat(types.WhiteSpace);\n    return SPACE;\n\n    // return {\n    //     type: 'WhiteSpace',\n    //     loc: this.getLocation(this.tokenStart, this.tokenEnd),\n    //     value: this.consume(WHITESPACE)\n    // };\n}\n\nfunction generate(node) {\n    this.token(types.WhiteSpace, node.value);\n}\n\nexports.generate = generate;\nexports.name = name;\nexports.parse = parse;\nexports.structure = structure;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNzE4MzAuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsY0FBYyxtQkFBTyxDQUFDLEtBQTJCOztBQUVqRDtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUEsZ0JBQWdCO0FBQ2hCLFlBQVk7QUFDWixhQUFhO0FBQ2IsaUJBQWlCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYmxvY2tiaXRlLy4vbm9kZV9tb2R1bGVzL2Nzc28vbm9kZV9tb2R1bGVzL2Nzcy10cmVlL2Nqcy9zeW50YXgvbm9kZS9XaGl0ZVNwYWNlLmNqcz82YWE1Il0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuY29uc3QgdHlwZXMgPSByZXF1aXJlKCcuLi8uLi90b2tlbml6ZXIvdHlwZXMuY2pzJyk7XG5cbmNvbnN0IFNQQUNFID0gT2JqZWN0LmZyZWV6ZSh7XG4gICAgdHlwZTogJ1doaXRlU3BhY2UnLFxuICAgIGxvYzogbnVsbCxcbiAgICB2YWx1ZTogJyAnXG59KTtcblxuY29uc3QgbmFtZSA9ICdXaGl0ZVNwYWNlJztcbmNvbnN0IHN0cnVjdHVyZSA9IHtcbiAgICB2YWx1ZTogU3RyaW5nXG59O1xuXG5mdW5jdGlvbiBwYXJzZSgpIHtcbiAgICB0aGlzLmVhdCh0eXBlcy5XaGl0ZVNwYWNlKTtcbiAgICByZXR1cm4gU1BBQ0U7XG5cbiAgICAvLyByZXR1cm4ge1xuICAgIC8vICAgICB0eXBlOiAnV2hpdGVTcGFjZScsXG4gICAgLy8gICAgIGxvYzogdGhpcy5nZXRMb2NhdGlvbih0aGlzLnRva2VuU3RhcnQsIHRoaXMudG9rZW5FbmQpLFxuICAgIC8vICAgICB2YWx1ZTogdGhpcy5jb25zdW1lKFdISVRFU1BBQ0UpXG4gICAgLy8gfTtcbn1cblxuZnVuY3Rpb24gZ2VuZXJhdGUobm9kZSkge1xuICAgIHRoaXMudG9rZW4odHlwZXMuV2hpdGVTcGFjZSwgbm9kZS52YWx1ZSk7XG59XG5cbmV4cG9ydHMuZ2VuZXJhdGUgPSBnZW5lcmF0ZTtcbmV4cG9ydHMubmFtZSA9IG5hbWU7XG5leHBvcnRzLnBhcnNlID0gcGFyc2U7XG5leHBvcnRzLnN0cnVjdHVyZSA9IHN0cnVjdHVyZTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///71830\n")},44713:(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";eval("\n\nconst AnPlusB = __webpack_require__(3826);\nconst Atrule = __webpack_require__(42344);\nconst AtrulePrelude = __webpack_require__(931);\nconst AttributeSelector = __webpack_require__(79152);\nconst Block = __webpack_require__(94516);\nconst Brackets = __webpack_require__(94462);\nconst CDC = __webpack_require__(36319);\nconst CDO = __webpack_require__(46987);\nconst ClassSelector = __webpack_require__(40260);\nconst Combinator = __webpack_require__(88907);\nconst Comment = __webpack_require__(85500);\nconst Declaration = __webpack_require__(68071);\nconst DeclarationList = __webpack_require__(74499);\nconst Dimension = __webpack_require__(5991);\nconst Function = __webpack_require__(60801);\nconst Hash = __webpack_require__(85889);\nconst Identifier = __webpack_require__(66608);\nconst IdSelector = __webpack_require__(11401);\nconst MediaFeature = __webpack_require__(26399);\nconst MediaQuery = __webpack_require__(93793);\nconst MediaQueryList = __webpack_require__(72537);\nconst Nth = __webpack_require__(48689);\nconst Number = __webpack_require__(40646);\nconst Operator = __webpack_require__(81281);\nconst Parentheses = __webpack_require__(90507);\nconst Percentage = __webpack_require__(10377);\nconst PseudoClassSelector = __webpack_require__(52618);\nconst PseudoElementSelector = __webpack_require__(54866);\nconst Ratio = __webpack_require__(92042);\nconst Raw = __webpack_require__(65617);\nconst Rule = __webpack_require__(85791);\nconst Selector = __webpack_require__(84790);\nconst SelectorList = __webpack_require__(33362);\nconst String = __webpack_require__(41338);\nconst StyleSheet = __webpack_require__(45349);\nconst TypeSelector = __webpack_require__(90126);\nconst UnicodeRange = __webpack_require__(72673);\nconst Url = __webpack_require__(86972);\nconst Value = __webpack_require__(87944);\nconst WhiteSpace = __webpack_require__(71830);\n\n\n\nexports.AnPlusB = AnPlusB.parse;\nexports.Atrule = Atrule.parse;\nexports.AtrulePrelude = AtrulePrelude.parse;\nexports.AttributeSelector = AttributeSelector.parse;\nexports.Block = Block.parse;\nexports.Brackets = Brackets.parse;\nexports.CDC = CDC.parse;\nexports.CDO = CDO.parse;\nexports.ClassSelector = ClassSelector.parse;\nexports.Combinator = Combinator.parse;\nexports.Comment = Comment.parse;\nexports.Declaration = Declaration.parse;\nexports.DeclarationList = DeclarationList.parse;\nexports.Dimension = Dimension.parse;\nexports.Function = Function.parse;\nexports.Hash = Hash.parse;\nexports.Identifier = Identifier.parse;\nexports.IdSelector = IdSelector.parse;\nexports.MediaFeature = MediaFeature.parse;\nexports.MediaQuery = MediaQuery.parse;\nexports.MediaQueryList = MediaQueryList.parse;\nexports.Nth = Nth.parse;\nexports.Number = Number.parse;\nexports.Operator = Operator.parse;\nexports.Parentheses = Parentheses.parse;\nexports.Percentage = Percentage.parse;\nexports.PseudoClassSelector = PseudoClassSelector.parse;\nexports.PseudoElementSelector = PseudoElementSelector.parse;\nexports.Ratio = Ratio.parse;\nexports.Raw = Raw.parse;\nexports.Rule = Rule.parse;\nexports.Selector = Selector.parse;\nexports.SelectorList = SelectorList.parse;\nexports.String = String.parse;\nexports.StyleSheet = StyleSheet.parse;\nexports.TypeSelector = TypeSelector.parse;\nexports.UnicodeRange = UnicodeRange.parse;\nexports.Url = Url.parse;\nexports.Value = Value.parse;\nexports.WhiteSpace = WhiteSpace.parse;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDQ3MTMuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsZ0JBQWdCLG1CQUFPLENBQUMsSUFBZTtBQUN2QyxlQUFlLG1CQUFPLENBQUMsS0FBYztBQUNyQyxzQkFBc0IsbUJBQU8sQ0FBQyxHQUFxQjtBQUNuRCwwQkFBMEIsbUJBQU8sQ0FBQyxLQUF5QjtBQUMzRCxjQUFjLG1CQUFPLENBQUMsS0FBYTtBQUNuQyxpQkFBaUIsbUJBQU8sQ0FBQyxLQUFnQjtBQUN6QyxZQUFZLG1CQUFPLENBQUMsS0FBVztBQUMvQixZQUFZLG1CQUFPLENBQUMsS0FBVztBQUMvQixzQkFBc0IsbUJBQU8sQ0FBQyxLQUFxQjtBQUNuRCxtQkFBbUIsbUJBQU8sQ0FBQyxLQUFrQjtBQUM3QyxnQkFBZ0IsbUJBQU8sQ0FBQyxLQUFlO0FBQ3ZDLG9CQUFvQixtQkFBTyxDQUFDLEtBQW1CO0FBQy9DLHdCQUF3QixtQkFBTyxDQUFDLEtBQXVCO0FBQ3ZELGtCQUFrQixtQkFBTyxDQUFDLElBQWlCO0FBQzNDLGlCQUFpQixtQkFBTyxDQUFDLEtBQWdCO0FBQ3pDLGFBQWEsbUJBQU8sQ0FBQyxLQUFZO0FBQ2pDLG1CQUFtQixtQkFBTyxDQUFDLEtBQWtCO0FBQzdDLG1CQUFtQixtQkFBTyxDQUFDLEtBQWtCO0FBQzdDLHFCQUFxQixtQkFBTyxDQUFDLEtBQW9CO0FBQ2pELG1CQUFtQixtQkFBTyxDQUFDLEtBQWtCO0FBQzdDLHVCQUF1QixtQkFBTyxDQUFDLEtBQXNCO0FBQ3JELFlBQVksbUJBQU8sQ0FBQyxLQUFXO0FBQy9CLGVBQWUsbUJBQU8sQ0FBQyxLQUFjO0FBQ3JDLGlCQUFpQixtQkFBTyxDQUFDLEtBQWdCO0FBQ3pDLG9CQUFvQixtQkFBTyxDQUFDLEtBQW1CO0FBQy9DLG1CQUFtQixtQkFBTyxDQUFDLEtBQWtCO0FBQzdDLDRCQUE0QixtQkFBTyxDQUFDLEtBQTJCO0FBQy9ELDhCQUE4QixtQkFBTyxDQUFDLEtBQTZCO0FBQ25FLGNBQWMsbUJBQU8sQ0FBQyxLQUFhO0FBQ25DLFlBQVksbUJBQU8sQ0FBQyxLQUFXO0FBQy9CLGFBQWEsbUJBQU8sQ0FBQyxLQUFZO0FBQ2pDLGlCQUFpQixtQkFBTyxDQUFDLEtBQWdCO0FBQ3pDLHFCQUFxQixtQkFBTyxDQUFDLEtBQW9CO0FBQ2pELGVBQWUsbUJBQU8sQ0FBQyxLQUFjO0FBQ3JDLG1CQUFtQixtQkFBTyxDQUFDLEtBQWtCO0FBQzdDLHFCQUFxQixtQkFBTyxDQUFDLEtBQW9CO0FBQ2pELHFCQUFxQixtQkFBTyxDQUFDLEtBQW9CO0FBQ2pELFlBQVksbUJBQU8sQ0FBQyxLQUFXO0FBQy9CLGNBQWMsbUJBQU8sQ0FBQyxLQUFhO0FBQ25DLG1CQUFtQixtQkFBTyxDQUFDLEtBQWtCOzs7O0FBSTdDLGVBQWU7QUFDZixjQUFjO0FBQ2QscUJBQXFCO0FBQ3JCLHlCQUF5QjtBQUN6QixhQUFhO0FBQ2IsZ0JBQWdCO0FBQ2hCLFdBQVc7QUFDWCxXQUFXO0FBQ1gscUJBQXFCO0FBQ3JCLGtCQUFrQjtBQUNsQixlQUFlO0FBQ2YsbUJBQW1CO0FBQ25CLHVCQUF1QjtBQUN2QixpQkFBaUI7QUFDakIsZ0JBQWdCO0FBQ2hCLFlBQVk7QUFDWixrQkFBa0I7QUFDbEIsa0JBQWtCO0FBQ2xCLG9CQUFvQjtBQUNwQixrQkFBa0I7QUFDbEIsc0JBQXNCO0FBQ3RCLFdBQVc7QUFDWCxjQUFjO0FBQ2QsZ0JBQWdCO0FBQ2hCLG1CQUFtQjtBQUNuQixrQkFBa0I7QUFDbEIsMkJBQTJCO0FBQzNCLDZCQUE2QjtBQUM3QixhQUFhO0FBQ2IsV0FBVztBQUNYLFlBQVk7QUFDWixnQkFBZ0I7QUFDaEIsb0JBQW9CO0FBQ3BCLGNBQWM7QUFDZCxrQkFBa0I7QUFDbEIsb0JBQW9CO0FBQ3BCLG9CQUFvQjtBQUNwQixXQUFXO0FBQ1gsYUFBYTtBQUNiLGtCQUFrQiIsInNvdXJjZXMiOlsid2VicGFjazovL2Jsb2NrYml0ZS8uL25vZGVfbW9kdWxlcy9jc3NvL25vZGVfbW9kdWxlcy9jc3MtdHJlZS9janMvc3ludGF4L25vZGUvaW5kZXgtcGFyc2UuY2pzP2QwNTUiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBBblBsdXNCID0gcmVxdWlyZSgnLi9BblBsdXNCLmNqcycpO1xuY29uc3QgQXRydWxlID0gcmVxdWlyZSgnLi9BdHJ1bGUuY2pzJyk7XG5jb25zdCBBdHJ1bGVQcmVsdWRlID0gcmVxdWlyZSgnLi9BdHJ1bGVQcmVsdWRlLmNqcycpO1xuY29uc3QgQXR0cmlidXRlU2VsZWN0b3IgPSByZXF1aXJlKCcuL0F0dHJpYnV0ZVNlbGVjdG9yLmNqcycpO1xuY29uc3QgQmxvY2sgPSByZXF1aXJlKCcuL0Jsb2NrLmNqcycpO1xuY29uc3QgQnJhY2tldHMgPSByZXF1aXJlKCcuL0JyYWNrZXRzLmNqcycpO1xuY29uc3QgQ0RDID0gcmVxdWlyZSgnLi9DREMuY2pzJyk7XG5jb25zdCBDRE8gPSByZXF1aXJlKCcuL0NETy5janMnKTtcbmNvbnN0IENsYXNzU2VsZWN0b3IgPSByZXF1aXJlKCcuL0NsYXNzU2VsZWN0b3IuY2pzJyk7XG5jb25zdCBDb21iaW5hdG9yID0gcmVxdWlyZSgnLi9Db21iaW5hdG9yLmNqcycpO1xuY29uc3QgQ29tbWVudCA9IHJlcXVpcmUoJy4vQ29tbWVudC5janMnKTtcbmNvbnN0IERlY2xhcmF0aW9uID0gcmVxdWlyZSgnLi9EZWNsYXJhdGlvbi5janMnKTtcbmNvbnN0IERlY2xhcmF0aW9uTGlzdCA9IHJlcXVpcmUoJy4vRGVjbGFyYXRpb25MaXN0LmNqcycpO1xuY29uc3QgRGltZW5zaW9uID0gcmVxdWlyZSgnLi9EaW1lbnNpb24uY2pzJyk7XG5jb25zdCBGdW5jdGlvbiA9IHJlcXVpcmUoJy4vRnVuY3Rpb24uY2pzJyk7XG5jb25zdCBIYXNoID0gcmVxdWlyZSgnLi9IYXNoLmNqcycpO1xuY29uc3QgSWRlbnRpZmllciA9IHJlcXVpcmUoJy4vSWRlbnRpZmllci5janMnKTtcbmNvbnN0IElkU2VsZWN0b3IgPSByZXF1aXJlKCcuL0lkU2VsZWN0b3IuY2pzJyk7XG5jb25zdCBNZWRpYUZlYXR1cmUgPSByZXF1aXJlKCcuL01lZGlhRmVhdHVyZS5janMnKTtcbmNvbnN0IE1lZGlhUXVlcnkgPSByZXF1aXJlKCcuL01lZGlhUXVlcnkuY2pzJyk7XG5jb25zdCBNZWRpYVF1ZXJ5TGlzdCA9IHJlcXVpcmUoJy4vTWVkaWFRdWVyeUxpc3QuY2pzJyk7XG5jb25zdCBOdGggPSByZXF1aXJlKCcuL050aC5janMnKTtcbmNvbnN0IE51bWJlciA9IHJlcXVpcmUoJy4vTnVtYmVyLmNqcycpO1xuY29uc3QgT3BlcmF0b3IgPSByZXF1aXJlKCcuL09wZXJhdG9yLmNqcycpO1xuY29uc3QgUGFyZW50aGVzZXMgPSByZXF1aXJlKCcuL1BhcmVudGhlc2VzLmNqcycpO1xuY29uc3QgUGVyY2VudGFnZSA9IHJlcXVpcmUoJy4vUGVyY2VudGFnZS5janMnKTtcbmNvbnN0IFBzZXVkb0NsYXNzU2VsZWN0b3IgPSByZXF1aXJlKCcuL1BzZXVkb0NsYXNzU2VsZWN0b3IuY2pzJyk7XG5jb25zdCBQc2V1ZG9FbGVtZW50U2VsZWN0b3IgPSByZXF1aXJlKCcuL1BzZXVkb0VsZW1lbnRTZWxlY3Rvci5janMnKTtcbmNvbnN0IFJhdGlvID0gcmVxdWlyZSgnLi9SYXRpby5janMnKTtcbmNvbnN0IFJhdyA9IHJlcXVpcmUoJy4vUmF3LmNqcycpO1xuY29uc3QgUnVsZSA9IHJlcXVpcmUoJy4vUnVsZS5janMnKTtcbmNvbnN0IFNlbGVjdG9yID0gcmVxdWlyZSgnLi9TZWxlY3Rvci5janMnKTtcbmNvbnN0IFNlbGVjdG9yTGlzdCA9IHJlcXVpcmUoJy4vU2VsZWN0b3JMaXN0LmNqcycpO1xuY29uc3QgU3RyaW5nID0gcmVxdWlyZSgnLi9TdHJpbmcuY2pzJyk7XG5jb25zdCBTdHlsZVNoZWV0ID0gcmVxdWlyZSgnLi9TdHlsZVNoZWV0LmNqcycpO1xuY29uc3QgVHlwZVNlbGVjdG9yID0gcmVxdWlyZSgnLi9UeXBlU2VsZWN0b3IuY2pzJyk7XG5jb25zdCBVbmljb2RlUmFuZ2UgPSByZXF1aXJlKCcuL1VuaWNvZGVSYW5nZS5janMnKTtcbmNvbnN0IFVybCA9IHJlcXVpcmUoJy4vVXJsLmNqcycpO1xuY29uc3QgVmFsdWUgPSByZXF1aXJlKCcuL1ZhbHVlLmNqcycpO1xuY29uc3QgV2hpdGVTcGFjZSA9IHJlcXVpcmUoJy4vV2hpdGVTcGFjZS5janMnKTtcblxuXG5cbmV4cG9ydHMuQW5QbHVzQiA9IEFuUGx1c0IucGFyc2U7XG5leHBvcnRzLkF0cnVsZSA9IEF0cnVsZS5wYXJzZTtcbmV4cG9ydHMuQXRydWxlUHJlbHVkZSA9IEF0cnVsZVByZWx1ZGUucGFyc2U7XG5leHBvcnRzLkF0dHJpYnV0ZVNlbGVjdG9yID0gQXR0cmlidXRlU2VsZWN0b3IucGFyc2U7XG5leHBvcnRzLkJsb2NrID0gQmxvY2sucGFyc2U7XG5leHBvcnRzLkJyYWNrZXRzID0gQnJhY2tldHMucGFyc2U7XG5leHBvcnRzLkNEQyA9IENEQy5wYXJzZTtcbmV4cG9ydHMuQ0RPID0gQ0RPLnBhcnNlO1xuZXhwb3J0cy5DbGFzc1NlbGVjdG9yID0gQ2xhc3NTZWxlY3Rvci5wYXJzZTtcbmV4cG9ydHMuQ29tYmluYXRvciA9IENvbWJpbmF0b3IucGFyc2U7XG5leHBvcnRzLkNvbW1lbnQgPSBDb21tZW50LnBhcnNlO1xuZXhwb3J0cy5EZWNsYXJhdGlvbiA9IERlY2xhcmF0aW9uLnBhcnNlO1xuZXhwb3J0cy5EZWNsYXJhdGlvbkxpc3QgPSBEZWNsYXJhdGlvbkxpc3QucGFyc2U7XG5leHBvcnRzLkRpbWVuc2lvbiA9IERpbWVuc2lvbi5wYXJzZTtcbmV4cG9ydHMuRnVuY3Rpb24gPSBGdW5jdGlvbi5wYXJzZTtcbmV4cG9ydHMuSGFzaCA9IEhhc2gucGFyc2U7XG5leHBvcnRzLklkZW50aWZpZXIgPSBJZGVudGlmaWVyLnBhcnNlO1xuZXhwb3J0cy5JZFNlbGVjdG9yID0gSWRTZWxlY3Rvci5wYXJzZTtcbmV4cG9ydHMuTWVkaWFGZWF0dXJlID0gTWVkaWFGZWF0dXJlLnBhcnNlO1xuZXhwb3J0cy5NZWRpYVF1ZXJ5ID0gTWVkaWFRdWVyeS5wYXJzZTtcbmV4cG9ydHMuTWVkaWFRdWVyeUxpc3QgPSBNZWRpYVF1ZXJ5TGlzdC5wYXJzZTtcbmV4cG9ydHMuTnRoID0gTnRoLnBhcnNlO1xuZXhwb3J0cy5OdW1iZXIgPSBOdW1iZXIucGFyc2U7XG5leHBvcnRzLk9wZXJhdG9yID0gT3BlcmF0b3IucGFyc2U7XG5leHBvcnRzLlBhcmVudGhlc2VzID0gUGFyZW50aGVzZXMucGFyc2U7XG5leHBvcnRzLlBlcmNlbnRhZ2UgPSBQZXJjZW50YWdlLnBhcnNlO1xuZXhwb3J0cy5Qc2V1ZG9DbGFzc1NlbGVjdG9yID0gUHNldWRvQ2xhc3NTZWxlY3Rvci5wYXJzZTtcbmV4cG9ydHMuUHNldWRvRWxlbWVudFNlbGVjdG9yID0gUHNldWRvRWxlbWVudFNlbGVjdG9yLnBhcnNlO1xuZXhwb3J0cy5SYXRpbyA9IFJhdGlvLnBhcnNlO1xuZXhwb3J0cy5SYXcgPSBSYXcucGFyc2U7XG5leHBvcnRzLlJ1bGUgPSBSdWxlLnBhcnNlO1xuZXhwb3J0cy5TZWxlY3RvciA9IFNlbGVjdG9yLnBhcnNlO1xuZXhwb3J0cy5TZWxlY3Rvckxpc3QgPSBTZWxlY3Rvckxpc3QucGFyc2U7XG5leHBvcnRzLlN0cmluZyA9IFN0cmluZy5wYXJzZTtcbmV4cG9ydHMuU3R5bGVTaGVldCA9IFN0eWxlU2hlZXQucGFyc2U7XG5leHBvcnRzLlR5cGVTZWxlY3RvciA9IFR5cGVTZWxlY3Rvci5wYXJzZTtcbmV4cG9ydHMuVW5pY29kZVJhbmdlID0gVW5pY29kZVJhbmdlLnBhcnNlO1xuZXhwb3J0cy5VcmwgPSBVcmwucGFyc2U7XG5leHBvcnRzLlZhbHVlID0gVmFsdWUucGFyc2U7XG5leHBvcnRzLldoaXRlU3BhY2UgPSBXaGl0ZVNwYWNlLnBhcnNlO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///44713\n")},38603:(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";eval("\n\nconst AnPlusB = __webpack_require__(3826);\nconst Atrule = __webpack_require__(42344);\nconst AtrulePrelude = __webpack_require__(931);\nconst AttributeSelector = __webpack_require__(79152);\nconst Block = __webpack_require__(94516);\nconst Brackets = __webpack_require__(94462);\nconst CDC = __webpack_require__(36319);\nconst CDO = __webpack_require__(46987);\nconst ClassSelector = __webpack_require__(40260);\nconst Combinator = __webpack_require__(88907);\nconst Comment = __webpack_require__(85500);\nconst Declaration = __webpack_require__(68071);\nconst DeclarationList = __webpack_require__(74499);\nconst Dimension = __webpack_require__(5991);\nconst Function = __webpack_require__(60801);\nconst Hash = __webpack_require__(85889);\nconst Identifier = __webpack_require__(66608);\nconst IdSelector = __webpack_require__(11401);\nconst MediaFeature = __webpack_require__(26399);\nconst MediaQuery = __webpack_require__(93793);\nconst MediaQueryList = __webpack_require__(72537);\nconst Nth = __webpack_require__(48689);\nconst Number$1 = __webpack_require__(40646);\nconst Operator = __webpack_require__(81281);\nconst Parentheses = __webpack_require__(90507);\nconst Percentage = __webpack_require__(10377);\nconst PseudoClassSelector = __webpack_require__(52618);\nconst PseudoElementSelector = __webpack_require__(54866);\nconst Ratio = __webpack_require__(92042);\nconst Raw = __webpack_require__(65617);\nconst Rule = __webpack_require__(85791);\nconst Selector = __webpack_require__(84790);\nconst SelectorList = __webpack_require__(33362);\nconst String$1 = __webpack_require__(41338);\nconst StyleSheet = __webpack_require__(45349);\nconst TypeSelector = __webpack_require__(90126);\nconst UnicodeRange = __webpack_require__(72673);\nconst Url = __webpack_require__(86972);\nconst Value = __webpack_require__(87944);\nconst WhiteSpace = __webpack_require__(71830);\n\n\n\nexports.AnPlusB = AnPlusB;\nexports.Atrule = Atrule;\nexports.AtrulePrelude = AtrulePrelude;\nexports.AttributeSelector = AttributeSelector;\nexports.Block = Block;\nexports.Brackets = Brackets;\nexports.CDC = CDC;\nexports.CDO = CDO;\nexports.ClassSelector = ClassSelector;\nexports.Combinator = Combinator;\nexports.Comment = Comment;\nexports.Declaration = Declaration;\nexports.DeclarationList = DeclarationList;\nexports.Dimension = Dimension;\nexports.Function = Function;\nexports.Hash = Hash;\nexports.Identifier = Identifier;\nexports.IdSelector = IdSelector;\nexports.MediaFeature = MediaFeature;\nexports.MediaQuery = MediaQuery;\nexports.MediaQueryList = MediaQueryList;\nexports.Nth = Nth;\nexports.Number = Number$1;\nexports.Operator = Operator;\nexports.Parentheses = Parentheses;\nexports.Percentage = Percentage;\nexports.PseudoClassSelector = PseudoClassSelector;\nexports.PseudoElementSelector = PseudoElementSelector;\nexports.Ratio = Ratio;\nexports.Raw = Raw;\nexports.Rule = Rule;\nexports.Selector = Selector;\nexports.SelectorList = SelectorList;\nexports.String = String$1;\nexports.StyleSheet = StyleSheet;\nexports.TypeSelector = TypeSelector;\nexports.UnicodeRange = UnicodeRange;\nexports.Url = Url;\nexports.Value = Value;\nexports.WhiteSpace = WhiteSpace;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzg2MDMuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsZ0JBQWdCLG1CQUFPLENBQUMsSUFBZTtBQUN2QyxlQUFlLG1CQUFPLENBQUMsS0FBYztBQUNyQyxzQkFBc0IsbUJBQU8sQ0FBQyxHQUFxQjtBQUNuRCwwQkFBMEIsbUJBQU8sQ0FBQyxLQUF5QjtBQUMzRCxjQUFjLG1CQUFPLENBQUMsS0FBYTtBQUNuQyxpQkFBaUIsbUJBQU8sQ0FBQyxLQUFnQjtBQUN6QyxZQUFZLG1CQUFPLENBQUMsS0FBVztBQUMvQixZQUFZLG1CQUFPLENBQUMsS0FBVztBQUMvQixzQkFBc0IsbUJBQU8sQ0FBQyxLQUFxQjtBQUNuRCxtQkFBbUIsbUJBQU8sQ0FBQyxLQUFrQjtBQUM3QyxnQkFBZ0IsbUJBQU8sQ0FBQyxLQUFlO0FBQ3ZDLG9CQUFvQixtQkFBTyxDQUFDLEtBQW1CO0FBQy9DLHdCQUF3QixtQkFBTyxDQUFDLEtBQXVCO0FBQ3ZELGtCQUFrQixtQkFBTyxDQUFDLElBQWlCO0FBQzNDLGlCQUFpQixtQkFBTyxDQUFDLEtBQWdCO0FBQ3pDLGFBQWEsbUJBQU8sQ0FBQyxLQUFZO0FBQ2pDLG1CQUFtQixtQkFBTyxDQUFDLEtBQWtCO0FBQzdDLG1CQUFtQixtQkFBTyxDQUFDLEtBQWtCO0FBQzdDLHFCQUFxQixtQkFBTyxDQUFDLEtBQW9CO0FBQ2pELG1CQUFtQixtQkFBTyxDQUFDLEtBQWtCO0FBQzdDLHVCQUF1QixtQkFBTyxDQUFDLEtBQXNCO0FBQ3JELFlBQVksbUJBQU8sQ0FBQyxLQUFXO0FBQy9CLGlCQUFpQixtQkFBTyxDQUFDLEtBQWM7QUFDdkMsaUJBQWlCLG1CQUFPLENBQUMsS0FBZ0I7QUFDekMsb0JBQW9CLG1CQUFPLENBQUMsS0FBbUI7QUFDL0MsbUJBQW1CLG1CQUFPLENBQUMsS0FBa0I7QUFDN0MsNEJBQTRCLG1CQUFPLENBQUMsS0FBMkI7QUFDL0QsOEJBQThCLG1CQUFPLENBQUMsS0FBNkI7QUFDbkUsY0FBYyxtQkFBTyxDQUFDLEtBQWE7QUFDbkMsWUFBWSxtQkFBTyxDQUFDLEtBQVc7QUFDL0IsYUFBYSxtQkFBTyxDQUFDLEtBQVk7QUFDakMsaUJBQWlCLG1CQUFPLENBQUMsS0FBZ0I7QUFDekMscUJBQXFCLG1CQUFPLENBQUMsS0FBb0I7QUFDakQsaUJBQWlCLG1CQUFPLENBQUMsS0FBYztBQUN2QyxtQkFBbUIsbUJBQU8sQ0FBQyxLQUFrQjtBQUM3QyxxQkFBcUIsbUJBQU8sQ0FBQyxLQUFvQjtBQUNqRCxxQkFBcUIsbUJBQU8sQ0FBQyxLQUFvQjtBQUNqRCxZQUFZLG1CQUFPLENBQUMsS0FBVztBQUMvQixjQUFjLG1CQUFPLENBQUMsS0FBYTtBQUNuQyxtQkFBbUIsbUJBQU8sQ0FBQyxLQUFrQjs7OztBQUk3QyxlQUFlO0FBQ2YsY0FBYztBQUNkLHFCQUFxQjtBQUNyQix5QkFBeUI7QUFDekIsYUFBYTtBQUNiLGdCQUFnQjtBQUNoQixXQUFXO0FBQ1gsV0FBVztBQUNYLHFCQUFxQjtBQUNyQixrQkFBa0I7QUFDbEIsZUFBZTtBQUNmLG1CQUFtQjtBQUNuQix1QkFBdUI7QUFDdkIsaUJBQWlCO0FBQ2pCLGdCQUFnQjtBQUNoQixZQUFZO0FBQ1osa0JBQWtCO0FBQ2xCLGtCQUFrQjtBQUNsQixvQkFBb0I7QUFDcEIsa0JBQWtCO0FBQ2xCLHNCQUFzQjtBQUN0QixXQUFXO0FBQ1gsY0FBYztBQUNkLGdCQUFnQjtBQUNoQixtQkFBbUI7QUFDbkIsa0JBQWtCO0FBQ2xCLDJCQUEyQjtBQUMzQiw2QkFBNkI7QUFDN0IsYUFBYTtBQUNiLFdBQVc7QUFDWCxZQUFZO0FBQ1osZ0JBQWdCO0FBQ2hCLG9CQUFvQjtBQUNwQixjQUFjO0FBQ2Qsa0JBQWtCO0FBQ2xCLG9CQUFvQjtBQUNwQixvQkFBb0I7QUFDcEIsV0FBVztBQUNYLGFBQWE7QUFDYixrQkFBa0IiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ibG9ja2JpdGUvLi9ub2RlX21vZHVsZXMvY3Nzby9ub2RlX21vZHVsZXMvY3NzLXRyZWUvY2pzL3N5bnRheC9ub2RlL2luZGV4LmNqcz84ZjU2Il0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuY29uc3QgQW5QbHVzQiA9IHJlcXVpcmUoJy4vQW5QbHVzQi5janMnKTtcbmNvbnN0IEF0cnVsZSA9IHJlcXVpcmUoJy4vQXRydWxlLmNqcycpO1xuY29uc3QgQXRydWxlUHJlbHVkZSA9IHJlcXVpcmUoJy4vQXRydWxlUHJlbHVkZS5janMnKTtcbmNvbnN0IEF0dHJpYnV0ZVNlbGVjdG9yID0gcmVxdWlyZSgnLi9BdHRyaWJ1dGVTZWxlY3Rvci5janMnKTtcbmNvbnN0IEJsb2NrID0gcmVxdWlyZSgnLi9CbG9jay5janMnKTtcbmNvbnN0IEJyYWNrZXRzID0gcmVxdWlyZSgnLi9CcmFja2V0cy5janMnKTtcbmNvbnN0IENEQyA9IHJlcXVpcmUoJy4vQ0RDLmNqcycpO1xuY29uc3QgQ0RPID0gcmVxdWlyZSgnLi9DRE8uY2pzJyk7XG5jb25zdCBDbGFzc1NlbGVjdG9yID0gcmVxdWlyZSgnLi9DbGFzc1NlbGVjdG9yLmNqcycpO1xuY29uc3QgQ29tYmluYXRvciA9IHJlcXVpcmUoJy4vQ29tYmluYXRvci5janMnKTtcbmNvbnN0IENvbW1lbnQgPSByZXF1aXJlKCcuL0NvbW1lbnQuY2pzJyk7XG5jb25zdCBEZWNsYXJhdGlvbiA9IHJlcXVpcmUoJy4vRGVjbGFyYXRpb24uY2pzJyk7XG5jb25zdCBEZWNsYXJhdGlvbkxpc3QgPSByZXF1aXJlKCcuL0RlY2xhcmF0aW9uTGlzdC5janMnKTtcbmNvbnN0IERpbWVuc2lvbiA9IHJlcXVpcmUoJy4vRGltZW5zaW9uLmNqcycpO1xuY29uc3QgRnVuY3Rpb24gPSByZXF1aXJlKCcuL0Z1bmN0aW9uLmNqcycpO1xuY29uc3QgSGFzaCA9IHJlcXVpcmUoJy4vSGFzaC5janMnKTtcbmNvbnN0IElkZW50aWZpZXIgPSByZXF1aXJlKCcuL0lkZW50aWZpZXIuY2pzJyk7XG5jb25zdCBJZFNlbGVjdG9yID0gcmVxdWlyZSgnLi9JZFNlbGVjdG9yLmNqcycpO1xuY29uc3QgTWVkaWFGZWF0dXJlID0gcmVxdWlyZSgnLi9NZWRpYUZlYXR1cmUuY2pzJyk7XG5jb25zdCBNZWRpYVF1ZXJ5ID0gcmVxdWlyZSgnLi9NZWRpYVF1ZXJ5LmNqcycpO1xuY29uc3QgTWVkaWFRdWVyeUxpc3QgPSByZXF1aXJlKCcuL01lZGlhUXVlcnlMaXN0LmNqcycpO1xuY29uc3QgTnRoID0gcmVxdWlyZSgnLi9OdGguY2pzJyk7XG5jb25zdCBOdW1iZXIkMSA9IHJlcXVpcmUoJy4vTnVtYmVyLmNqcycpO1xuY29uc3QgT3BlcmF0b3IgPSByZXF1aXJlKCcuL09wZXJhdG9yLmNqcycpO1xuY29uc3QgUGFyZW50aGVzZXMgPSByZXF1aXJlKCcuL1BhcmVudGhlc2VzLmNqcycpO1xuY29uc3QgUGVyY2VudGFnZSA9IHJlcXVpcmUoJy4vUGVyY2VudGFnZS5janMnKTtcbmNvbnN0IFBzZXVkb0NsYXNzU2VsZWN0b3IgPSByZXF1aXJlKCcuL1BzZXVkb0NsYXNzU2VsZWN0b3IuY2pzJyk7XG5jb25zdCBQc2V1ZG9FbGVtZW50U2VsZWN0b3IgPSByZXF1aXJlKCcuL1BzZXVkb0VsZW1lbnRTZWxlY3Rvci5janMnKTtcbmNvbnN0IFJhdGlvID0gcmVxdWlyZSgnLi9SYXRpby5janMnKTtcbmNvbnN0IFJhdyA9IHJlcXVpcmUoJy4vUmF3LmNqcycpO1xuY29uc3QgUnVsZSA9IHJlcXVpcmUoJy4vUnVsZS5janMnKTtcbmNvbnN0IFNlbGVjdG9yID0gcmVxdWlyZSgnLi9TZWxlY3Rvci5janMnKTtcbmNvbnN0IFNlbGVjdG9yTGlzdCA9IHJlcXVpcmUoJy4vU2VsZWN0b3JMaXN0LmNqcycpO1xuY29uc3QgU3RyaW5nJDEgPSByZXF1aXJlKCcuL1N0cmluZy5janMnKTtcbmNvbnN0IFN0eWxlU2hlZXQgPSByZXF1aXJlKCcuL1N0eWxlU2hlZXQuY2pzJyk7XG5jb25zdCBUeXBlU2VsZWN0b3IgPSByZXF1aXJlKCcuL1R5cGVTZWxlY3Rvci5janMnKTtcbmNvbnN0IFVuaWNvZGVSYW5nZSA9IHJlcXVpcmUoJy4vVW5pY29kZVJhbmdlLmNqcycpO1xuY29uc3QgVXJsID0gcmVxdWlyZSgnLi9VcmwuY2pzJyk7XG5jb25zdCBWYWx1ZSA9IHJlcXVpcmUoJy4vVmFsdWUuY2pzJyk7XG5jb25zdCBXaGl0ZVNwYWNlID0gcmVxdWlyZSgnLi9XaGl0ZVNwYWNlLmNqcycpO1xuXG5cblxuZXhwb3J0cy5BblBsdXNCID0gQW5QbHVzQjtcbmV4cG9ydHMuQXRydWxlID0gQXRydWxlO1xuZXhwb3J0cy5BdHJ1bGVQcmVsdWRlID0gQXRydWxlUHJlbHVkZTtcbmV4cG9ydHMuQXR0cmlidXRlU2VsZWN0b3IgPSBBdHRyaWJ1dGVTZWxlY3RvcjtcbmV4cG9ydHMuQmxvY2sgPSBCbG9jaztcbmV4cG9ydHMuQnJhY2tldHMgPSBCcmFja2V0cztcbmV4cG9ydHMuQ0RDID0gQ0RDO1xuZXhwb3J0cy5DRE8gPSBDRE87XG5leHBvcnRzLkNsYXNzU2VsZWN0b3IgPSBDbGFzc1NlbGVjdG9yO1xuZXhwb3J0cy5Db21iaW5hdG9yID0gQ29tYmluYXRvcjtcbmV4cG9ydHMuQ29tbWVudCA9IENvbW1lbnQ7XG5leHBvcnRzLkRlY2xhcmF0aW9uID0gRGVjbGFyYXRpb247XG5leHBvcnRzLkRlY2xhcmF0aW9uTGlzdCA9IERlY2xhcmF0aW9uTGlzdDtcbmV4cG9ydHMuRGltZW5zaW9uID0gRGltZW5zaW9uO1xuZXhwb3J0cy5GdW5jdGlvbiA9IEZ1bmN0aW9uO1xuZXhwb3J0cy5IYXNoID0gSGFzaDtcbmV4cG9ydHMuSWRlbnRpZmllciA9IElkZW50aWZpZXI7XG5leHBvcnRzLklkU2VsZWN0b3IgPSBJZFNlbGVjdG9yO1xuZXhwb3J0cy5NZWRpYUZlYXR1cmUgPSBNZWRpYUZlYXR1cmU7XG5leHBvcnRzLk1lZGlhUXVlcnkgPSBNZWRpYVF1ZXJ5O1xuZXhwb3J0cy5NZWRpYVF1ZXJ5TGlzdCA9IE1lZGlhUXVlcnlMaXN0O1xuZXhwb3J0cy5OdGggPSBOdGg7XG5leHBvcnRzLk51bWJlciA9IE51bWJlciQxO1xuZXhwb3J0cy5PcGVyYXRvciA9IE9wZXJhdG9yO1xuZXhwb3J0cy5QYXJlbnRoZXNlcyA9IFBhcmVudGhlc2VzO1xuZXhwb3J0cy5QZXJjZW50YWdlID0gUGVyY2VudGFnZTtcbmV4cG9ydHMuUHNldWRvQ2xhc3NTZWxlY3RvciA9IFBzZXVkb0NsYXNzU2VsZWN0b3I7XG5leHBvcnRzLlBzZXVkb0VsZW1lbnRTZWxlY3RvciA9IFBzZXVkb0VsZW1lbnRTZWxlY3RvcjtcbmV4cG9ydHMuUmF0aW8gPSBSYXRpbztcbmV4cG9ydHMuUmF3ID0gUmF3O1xuZXhwb3J0cy5SdWxlID0gUnVsZTtcbmV4cG9ydHMuU2VsZWN0b3IgPSBTZWxlY3RvcjtcbmV4cG9ydHMuU2VsZWN0b3JMaXN0ID0gU2VsZWN0b3JMaXN0O1xuZXhwb3J0cy5TdHJpbmcgPSBTdHJpbmckMTtcbmV4cG9ydHMuU3R5bGVTaGVldCA9IFN0eWxlU2hlZXQ7XG5leHBvcnRzLlR5cGVTZWxlY3RvciA9IFR5cGVTZWxlY3RvcjtcbmV4cG9ydHMuVW5pY29kZVJhbmdlID0gVW5pY29kZVJhbmdlO1xuZXhwb3J0cy5VcmwgPSBVcmw7XG5leHBvcnRzLlZhbHVlID0gVmFsdWU7XG5leHBvcnRzLldoaXRlU3BhY2UgPSBXaGl0ZVNwYWNlO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///38603\n")},56225:module=>{"use strict";eval("\n\nconst selectorList = {\n    parse() {\n        return this.createSingleNodeList(\n            this.SelectorList()\n        );\n    }\n};\n\nconst selector = {\n    parse() {\n        return this.createSingleNodeList(\n            this.Selector()\n        );\n    }\n};\n\nconst identList = {\n    parse() {\n        return this.createSingleNodeList(\n            this.Identifier()\n        );\n    }\n};\n\nconst nth = {\n    parse() {\n        return this.createSingleNodeList(\n            this.Nth()\n        );\n    }\n};\n\nconst pseudo = {\n    'dir': identList,\n    'has': selectorList,\n    'lang': identList,\n    'matches': selectorList,\n    'is': selectorList,\n    '-moz-any': selectorList,\n    '-webkit-any': selectorList,\n    'where': selectorList,\n    'not': selectorList,\n    'nth-child': nth,\n    'nth-last-child': nth,\n    'nth-last-of-type': nth,\n    'nth-of-type': nth,\n    'slotted': selector\n};\n\nmodule.exports = pseudo;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNTYyMjUuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ibG9ja2JpdGUvLi9ub2RlX21vZHVsZXMvY3Nzby9ub2RlX21vZHVsZXMvY3NzLXRyZWUvY2pzL3N5bnRheC9wc2V1ZG8vaW5kZXguY2pzP2FhNGEiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBzZWxlY3Rvckxpc3QgPSB7XG4gICAgcGFyc2UoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNyZWF0ZVNpbmdsZU5vZGVMaXN0KFxuICAgICAgICAgICAgdGhpcy5TZWxlY3Rvckxpc3QoKVxuICAgICAgICApO1xuICAgIH1cbn07XG5cbmNvbnN0IHNlbGVjdG9yID0ge1xuICAgIHBhcnNlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5jcmVhdGVTaW5nbGVOb2RlTGlzdChcbiAgICAgICAgICAgIHRoaXMuU2VsZWN0b3IoKVxuICAgICAgICApO1xuICAgIH1cbn07XG5cbmNvbnN0IGlkZW50TGlzdCA9IHtcbiAgICBwYXJzZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY3JlYXRlU2luZ2xlTm9kZUxpc3QoXG4gICAgICAgICAgICB0aGlzLklkZW50aWZpZXIoKVxuICAgICAgICApO1xuICAgIH1cbn07XG5cbmNvbnN0IG50aCA9IHtcbiAgICBwYXJzZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY3JlYXRlU2luZ2xlTm9kZUxpc3QoXG4gICAgICAgICAgICB0aGlzLk50aCgpXG4gICAgICAgICk7XG4gICAgfVxufTtcblxuY29uc3QgcHNldWRvID0ge1xuICAgICdkaXInOiBpZGVudExpc3QsXG4gICAgJ2hhcyc6IHNlbGVjdG9yTGlzdCxcbiAgICAnbGFuZyc6IGlkZW50TGlzdCxcbiAgICAnbWF0Y2hlcyc6IHNlbGVjdG9yTGlzdCxcbiAgICAnaXMnOiBzZWxlY3Rvckxpc3QsXG4gICAgJy1tb3otYW55Jzogc2VsZWN0b3JMaXN0LFxuICAgICctd2Via2l0LWFueSc6IHNlbGVjdG9yTGlzdCxcbiAgICAnd2hlcmUnOiBzZWxlY3Rvckxpc3QsXG4gICAgJ25vdCc6IHNlbGVjdG9yTGlzdCxcbiAgICAnbnRoLWNoaWxkJzogbnRoLFxuICAgICdudGgtbGFzdC1jaGlsZCc6IG50aCxcbiAgICAnbnRoLWxhc3Qtb2YtdHlwZSc6IG50aCxcbiAgICAnbnRoLW9mLXR5cGUnOiBudGgsXG4gICAgJ3Nsb3R0ZWQnOiBzZWxlY3RvclxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBwc2V1ZG87XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///56225\n")},94075:(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval("\n\nconst _default = __webpack_require__(62756);\n\nconst atrulePrelude = {\n    getNode: _default\n};\n\nmodule.exports = atrulePrelude;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOTQwNzUuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsaUJBQWlCLG1CQUFPLENBQUMsS0FBZTs7QUFFeEM7QUFDQTtBQUNBOztBQUVBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYmxvY2tiaXRlLy4vbm9kZV9tb2R1bGVzL2Nzc28vbm9kZV9tb2R1bGVzL2Nzcy10cmVlL2Nqcy9zeW50YXgvc2NvcGUvYXRydWxlUHJlbHVkZS5janM/NmJkYiJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmNvbnN0IF9kZWZhdWx0ID0gcmVxdWlyZSgnLi9kZWZhdWx0LmNqcycpO1xuXG5jb25zdCBhdHJ1bGVQcmVsdWRlID0ge1xuICAgIGdldE5vZGU6IF9kZWZhdWx0XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGF0cnVsZVByZWx1ZGU7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///94075\n")},62756:(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval("\n\nconst types = __webpack_require__(78783);\n\nconst NUMBERSIGN = 0x0023;  // U+0023 NUMBER SIGN (#)\nconst ASTERISK = 0x002A;    // U+002A ASTERISK (*)\nconst PLUSSIGN = 0x002B;    // U+002B PLUS SIGN (+)\nconst HYPHENMINUS = 0x002D; // U+002D HYPHEN-MINUS (-)\nconst SOLIDUS = 0x002F;     // U+002F SOLIDUS (/)\nconst U = 0x0075;           // U+0075 LATIN SMALL LETTER U (u)\n\nfunction defaultRecognizer(context) {\n    switch (this.tokenType) {\n        case types.Hash:\n            return this.Hash();\n\n        case types.Comma:\n            return this.Operator();\n\n        case types.LeftParenthesis:\n            return this.Parentheses(this.readSequence, context.recognizer);\n\n        case types.LeftSquareBracket:\n            return this.Brackets(this.readSequence, context.recognizer);\n\n        case types.String:\n            return this.String();\n\n        case types.Dimension:\n            return this.Dimension();\n\n        case types.Percentage:\n            return this.Percentage();\n\n        case types.Number:\n            return this.Number();\n\n        case types.Function:\n            return this.cmpStr(this.tokenStart, this.tokenEnd, 'url(')\n                ? this.Url()\n                : this.Function(this.readSequence, context.recognizer);\n\n        case types.Url:\n            return this.Url();\n\n        case types.Ident:\n            // check for unicode range, it should start with u+ or U+\n            if (this.cmpChar(this.tokenStart, U) &&\n                this.cmpChar(this.tokenStart + 1, PLUSSIGN)) {\n                return this.UnicodeRange();\n            } else {\n                return this.Identifier();\n            }\n\n        case types.Delim: {\n            const code = this.charCodeAt(this.tokenStart);\n\n            if (code === SOLIDUS ||\n                code === ASTERISK ||\n                code === PLUSSIGN ||\n                code === HYPHENMINUS) {\n                return this.Operator(); // TODO: replace with Delim\n            }\n\n            // TODO: produce a node with Delim node type\n\n            if (code === NUMBERSIGN) {\n                this.error('Hex or identifier is expected', this.tokenStart + 1);\n            }\n\n            break;\n        }\n    }\n}\n\nmodule.exports = defaultRecognizer;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNjI3NTYuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsY0FBYyxtQkFBTyxDQUFDLEtBQTJCOztBQUVqRCw0QkFBNEI7QUFDNUIsNEJBQTRCO0FBQzVCLDRCQUE0QjtBQUM1Qiw0QkFBNEI7QUFDNUIsNEJBQTRCO0FBQzVCLDRCQUE0Qjs7QUFFNUI7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjO0FBQ2Q7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0NBQXdDO0FBQ3hDOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSIsInNvdXJjZXMiOlsid2VicGFjazovL2Jsb2NrYml0ZS8uL25vZGVfbW9kdWxlcy9jc3NvL25vZGVfbW9kdWxlcy9jc3MtdHJlZS9janMvc3ludGF4L3Njb3BlL2RlZmF1bHQuY2pzP2U0MDQiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCB0eXBlcyA9IHJlcXVpcmUoJy4uLy4uL3Rva2VuaXplci90eXBlcy5janMnKTtcblxuY29uc3QgTlVNQkVSU0lHTiA9IDB4MDAyMzsgIC8vIFUrMDAyMyBOVU1CRVIgU0lHTiAoIylcbmNvbnN0IEFTVEVSSVNLID0gMHgwMDJBOyAgICAvLyBVKzAwMkEgQVNURVJJU0sgKCopXG5jb25zdCBQTFVTU0lHTiA9IDB4MDAyQjsgICAgLy8gVSswMDJCIFBMVVMgU0lHTiAoKylcbmNvbnN0IEhZUEhFTk1JTlVTID0gMHgwMDJEOyAvLyBVKzAwMkQgSFlQSEVOLU1JTlVTICgtKVxuY29uc3QgU09MSURVUyA9IDB4MDAyRjsgICAgIC8vIFUrMDAyRiBTT0xJRFVTICgvKVxuY29uc3QgVSA9IDB4MDA3NTsgICAgICAgICAgIC8vIFUrMDA3NSBMQVRJTiBTTUFMTCBMRVRURVIgVSAodSlcblxuZnVuY3Rpb24gZGVmYXVsdFJlY29nbml6ZXIoY29udGV4dCkge1xuICAgIHN3aXRjaCAodGhpcy50b2tlblR5cGUpIHtcbiAgICAgICAgY2FzZSB0eXBlcy5IYXNoOlxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuSGFzaCgpO1xuXG4gICAgICAgIGNhc2UgdHlwZXMuQ29tbWE6XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5PcGVyYXRvcigpO1xuXG4gICAgICAgIGNhc2UgdHlwZXMuTGVmdFBhcmVudGhlc2lzOlxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuUGFyZW50aGVzZXModGhpcy5yZWFkU2VxdWVuY2UsIGNvbnRleHQucmVjb2duaXplcik7XG5cbiAgICAgICAgY2FzZSB0eXBlcy5MZWZ0U3F1YXJlQnJhY2tldDpcbiAgICAgICAgICAgIHJldHVybiB0aGlzLkJyYWNrZXRzKHRoaXMucmVhZFNlcXVlbmNlLCBjb250ZXh0LnJlY29nbml6ZXIpO1xuXG4gICAgICAgIGNhc2UgdHlwZXMuU3RyaW5nOlxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuU3RyaW5nKCk7XG5cbiAgICAgICAgY2FzZSB0eXBlcy5EaW1lbnNpb246XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5EaW1lbnNpb24oKTtcblxuICAgICAgICBjYXNlIHR5cGVzLlBlcmNlbnRhZ2U6XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5QZXJjZW50YWdlKCk7XG5cbiAgICAgICAgY2FzZSB0eXBlcy5OdW1iZXI6XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5OdW1iZXIoKTtcblxuICAgICAgICBjYXNlIHR5cGVzLkZ1bmN0aW9uOlxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuY21wU3RyKHRoaXMudG9rZW5TdGFydCwgdGhpcy50b2tlbkVuZCwgJ3VybCgnKVxuICAgICAgICAgICAgICAgID8gdGhpcy5VcmwoKVxuICAgICAgICAgICAgICAgIDogdGhpcy5GdW5jdGlvbih0aGlzLnJlYWRTZXF1ZW5jZSwgY29udGV4dC5yZWNvZ25pemVyKTtcblxuICAgICAgICBjYXNlIHR5cGVzLlVybDpcbiAgICAgICAgICAgIHJldHVybiB0aGlzLlVybCgpO1xuXG4gICAgICAgIGNhc2UgdHlwZXMuSWRlbnQ6XG4gICAgICAgICAgICAvLyBjaGVjayBmb3IgdW5pY29kZSByYW5nZSwgaXQgc2hvdWxkIHN0YXJ0IHdpdGggdSsgb3IgVStcbiAgICAgICAgICAgIGlmICh0aGlzLmNtcENoYXIodGhpcy50b2tlblN0YXJ0LCBVKSAmJlxuICAgICAgICAgICAgICAgIHRoaXMuY21wQ2hhcih0aGlzLnRva2VuU3RhcnQgKyAxLCBQTFVTU0lHTikpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5Vbmljb2RlUmFuZ2UoKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuSWRlbnRpZmllcigpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgIGNhc2UgdHlwZXMuRGVsaW06IHtcbiAgICAgICAgICAgIGNvbnN0IGNvZGUgPSB0aGlzLmNoYXJDb2RlQXQodGhpcy50b2tlblN0YXJ0KTtcblxuICAgICAgICAgICAgaWYgKGNvZGUgPT09IFNPTElEVVMgfHxcbiAgICAgICAgICAgICAgICBjb2RlID09PSBBU1RFUklTSyB8fFxuICAgICAgICAgICAgICAgIGNvZGUgPT09IFBMVVNTSUdOIHx8XG4gICAgICAgICAgICAgICAgY29kZSA9PT0gSFlQSEVOTUlOVVMpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5PcGVyYXRvcigpOyAvLyBUT0RPOiByZXBsYWNlIHdpdGggRGVsaW1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gVE9ETzogcHJvZHVjZSBhIG5vZGUgd2l0aCBEZWxpbSBub2RlIHR5cGVcblxuICAgICAgICAgICAgaWYgKGNvZGUgPT09IE5VTUJFUlNJR04pIHtcbiAgICAgICAgICAgICAgICB0aGlzLmVycm9yKCdIZXggb3IgaWRlbnRpZmllciBpcyBleHBlY3RlZCcsIHRoaXMudG9rZW5TdGFydCArIDEpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBkZWZhdWx0UmVjb2duaXplcjtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///62756\n")},1075:(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";eval("\n\nconst atrulePrelude = __webpack_require__(94075);\nconst selector = __webpack_require__(95966);\nconst value = __webpack_require__(15504);\n\n\n\nexports.AtrulePrelude = atrulePrelude;\nexports.Selector = selector;\nexports.Value = value;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTA3NS5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYixzQkFBc0IsbUJBQU8sQ0FBQyxLQUFxQjtBQUNuRCxpQkFBaUIsbUJBQU8sQ0FBQyxLQUFnQjtBQUN6QyxjQUFjLG1CQUFPLENBQUMsS0FBYTs7OztBQUluQyxxQkFBcUI7QUFDckIsZ0JBQWdCO0FBQ2hCLGFBQWEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ibG9ja2JpdGUvLi9ub2RlX21vZHVsZXMvY3Nzby9ub2RlX21vZHVsZXMvY3NzLXRyZWUvY2pzL3N5bnRheC9zY29wZS9pbmRleC5janM/MTEwZiJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmNvbnN0IGF0cnVsZVByZWx1ZGUgPSByZXF1aXJlKCcuL2F0cnVsZVByZWx1ZGUuY2pzJyk7XG5jb25zdCBzZWxlY3RvciA9IHJlcXVpcmUoJy4vc2VsZWN0b3IuY2pzJyk7XG5jb25zdCB2YWx1ZSA9IHJlcXVpcmUoJy4vdmFsdWUuY2pzJyk7XG5cblxuXG5leHBvcnRzLkF0cnVsZVByZWx1ZGUgPSBhdHJ1bGVQcmVsdWRlO1xuZXhwb3J0cy5TZWxlY3RvciA9IHNlbGVjdG9yO1xuZXhwb3J0cy5WYWx1ZSA9IHZhbHVlO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///1075\n")},95966:(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval("\n\nconst types = __webpack_require__(78783);\n\nconst NUMBERSIGN = 0x0023;      // U+0023 NUMBER SIGN (#)\nconst ASTERISK = 0x002A;        // U+002A ASTERISK (*)\nconst PLUSSIGN = 0x002B;        // U+002B PLUS SIGN (+)\nconst SOLIDUS = 0x002F;         // U+002F SOLIDUS (/)\nconst FULLSTOP = 0x002E;        // U+002E FULL STOP (.)\nconst GREATERTHANSIGN = 0x003E; // U+003E GREATER-THAN SIGN (>)\nconst VERTICALLINE = 0x007C;    // U+007C VERTICAL LINE (|)\nconst TILDE = 0x007E;           // U+007E TILDE (~)\n\nfunction onWhiteSpace(next, children) {\n    if (children.last !== null && children.last.type !== 'Combinator' &&\n        next !== null && next.type !== 'Combinator') {\n        children.push({  // FIXME: this.Combinator() should be used instead\n            type: 'Combinator',\n            loc: null,\n            name: ' '\n        });\n    }\n}\n\nfunction getNode() {\n    switch (this.tokenType) {\n        case types.LeftSquareBracket:\n            return this.AttributeSelector();\n\n        case types.Hash:\n            return this.IdSelector();\n\n        case types.Colon:\n            if (this.lookupType(1) === types.Colon) {\n                return this.PseudoElementSelector();\n            } else {\n                return this.PseudoClassSelector();\n            }\n\n        case types.Ident:\n            return this.TypeSelector();\n\n        case types.Number:\n        case types.Percentage:\n            return this.Percentage();\n\n        case types.Dimension:\n            // throws when .123ident\n            if (this.charCodeAt(this.tokenStart) === FULLSTOP) {\n                this.error('Identifier is expected', this.tokenStart + 1);\n            }\n            break;\n\n        case types.Delim: {\n            const code = this.charCodeAt(this.tokenStart);\n\n            switch (code) {\n                case PLUSSIGN:\n                case GREATERTHANSIGN:\n                case TILDE:\n                case SOLIDUS:  // /deep/\n                    return this.Combinator();\n\n                case FULLSTOP:\n                    return this.ClassSelector();\n\n                case ASTERISK:\n                case VERTICALLINE:\n                    return this.TypeSelector();\n\n                case NUMBERSIGN:\n                    return this.IdSelector();\n            }\n\n            break;\n        }\n    }\n}\nconst Selector = {\n    onWhiteSpace,\n    getNode\n};\n\nmodule.exports = Selector;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOTU5NjYuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsY0FBYyxtQkFBTyxDQUFDLEtBQTJCOztBQUVqRCxnQ0FBZ0M7QUFDaEMsZ0NBQWdDO0FBQ2hDLGdDQUFnQztBQUNoQyxnQ0FBZ0M7QUFDaEMsZ0NBQWdDO0FBQ2hDLGdDQUFnQztBQUNoQyxnQ0FBZ0M7QUFDaEMsZ0NBQWdDOztBQUVoQztBQUNBO0FBQ0E7QUFDQSx5QkFBeUI7QUFDekI7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxjQUFjO0FBQ2Q7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ibG9ja2JpdGUvLi9ub2RlX21vZHVsZXMvY3Nzby9ub2RlX21vZHVsZXMvY3NzLXRyZWUvY2pzL3N5bnRheC9zY29wZS9zZWxlY3Rvci5janM/ZDhlNCJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmNvbnN0IHR5cGVzID0gcmVxdWlyZSgnLi4vLi4vdG9rZW5pemVyL3R5cGVzLmNqcycpO1xuXG5jb25zdCBOVU1CRVJTSUdOID0gMHgwMDIzOyAgICAgIC8vIFUrMDAyMyBOVU1CRVIgU0lHTiAoIylcbmNvbnN0IEFTVEVSSVNLID0gMHgwMDJBOyAgICAgICAgLy8gVSswMDJBIEFTVEVSSVNLICgqKVxuY29uc3QgUExVU1NJR04gPSAweDAwMkI7ICAgICAgICAvLyBVKzAwMkIgUExVUyBTSUdOICgrKVxuY29uc3QgU09MSURVUyA9IDB4MDAyRjsgICAgICAgICAvLyBVKzAwMkYgU09MSURVUyAoLylcbmNvbnN0IEZVTExTVE9QID0gMHgwMDJFOyAgICAgICAgLy8gVSswMDJFIEZVTEwgU1RPUCAoLilcbmNvbnN0IEdSRUFURVJUSEFOU0lHTiA9IDB4MDAzRTsgLy8gVSswMDNFIEdSRUFURVItVEhBTiBTSUdOICg+KVxuY29uc3QgVkVSVElDQUxMSU5FID0gMHgwMDdDOyAgICAvLyBVKzAwN0MgVkVSVElDQUwgTElORSAofClcbmNvbnN0IFRJTERFID0gMHgwMDdFOyAgICAgICAgICAgLy8gVSswMDdFIFRJTERFICh+KVxuXG5mdW5jdGlvbiBvbldoaXRlU3BhY2UobmV4dCwgY2hpbGRyZW4pIHtcbiAgICBpZiAoY2hpbGRyZW4ubGFzdCAhPT0gbnVsbCAmJiBjaGlsZHJlbi5sYXN0LnR5cGUgIT09ICdDb21iaW5hdG9yJyAmJlxuICAgICAgICBuZXh0ICE9PSBudWxsICYmIG5leHQudHlwZSAhPT0gJ0NvbWJpbmF0b3InKSB7XG4gICAgICAgIGNoaWxkcmVuLnB1c2goeyAgLy8gRklYTUU6IHRoaXMuQ29tYmluYXRvcigpIHNob3VsZCBiZSB1c2VkIGluc3RlYWRcbiAgICAgICAgICAgIHR5cGU6ICdDb21iaW5hdG9yJyxcbiAgICAgICAgICAgIGxvYzogbnVsbCxcbiAgICAgICAgICAgIG5hbWU6ICcgJ1xuICAgICAgICB9KTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIGdldE5vZGUoKSB7XG4gICAgc3dpdGNoICh0aGlzLnRva2VuVHlwZSkge1xuICAgICAgICBjYXNlIHR5cGVzLkxlZnRTcXVhcmVCcmFja2V0OlxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuQXR0cmlidXRlU2VsZWN0b3IoKTtcblxuICAgICAgICBjYXNlIHR5cGVzLkhhc2g6XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5JZFNlbGVjdG9yKCk7XG5cbiAgICAgICAgY2FzZSB0eXBlcy5Db2xvbjpcbiAgICAgICAgICAgIGlmICh0aGlzLmxvb2t1cFR5cGUoMSkgPT09IHR5cGVzLkNvbG9uKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuUHNldWRvRWxlbWVudFNlbGVjdG9yKCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLlBzZXVkb0NsYXNzU2VsZWN0b3IoKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICBjYXNlIHR5cGVzLklkZW50OlxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuVHlwZVNlbGVjdG9yKCk7XG5cbiAgICAgICAgY2FzZSB0eXBlcy5OdW1iZXI6XG4gICAgICAgIGNhc2UgdHlwZXMuUGVyY2VudGFnZTpcbiAgICAgICAgICAgIHJldHVybiB0aGlzLlBlcmNlbnRhZ2UoKTtcblxuICAgICAgICBjYXNlIHR5cGVzLkRpbWVuc2lvbjpcbiAgICAgICAgICAgIC8vIHRocm93cyB3aGVuIC4xMjNpZGVudFxuICAgICAgICAgICAgaWYgKHRoaXMuY2hhckNvZGVBdCh0aGlzLnRva2VuU3RhcnQpID09PSBGVUxMU1RPUCkge1xuICAgICAgICAgICAgICAgIHRoaXMuZXJyb3IoJ0lkZW50aWZpZXIgaXMgZXhwZWN0ZWQnLCB0aGlzLnRva2VuU3RhcnQgKyAxKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgdHlwZXMuRGVsaW06IHtcbiAgICAgICAgICAgIGNvbnN0IGNvZGUgPSB0aGlzLmNoYXJDb2RlQXQodGhpcy50b2tlblN0YXJ0KTtcblxuICAgICAgICAgICAgc3dpdGNoIChjb2RlKSB7XG4gICAgICAgICAgICAgICAgY2FzZSBQTFVTU0lHTjpcbiAgICAgICAgICAgICAgICBjYXNlIEdSRUFURVJUSEFOU0lHTjpcbiAgICAgICAgICAgICAgICBjYXNlIFRJTERFOlxuICAgICAgICAgICAgICAgIGNhc2UgU09MSURVUzogIC8vIC9kZWVwL1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5Db21iaW5hdG9yKCk7XG5cbiAgICAgICAgICAgICAgICBjYXNlIEZVTExTVE9QOlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5DbGFzc1NlbGVjdG9yKCk7XG5cbiAgICAgICAgICAgICAgICBjYXNlIEFTVEVSSVNLOlxuICAgICAgICAgICAgICAgIGNhc2UgVkVSVElDQUxMSU5FOlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5UeXBlU2VsZWN0b3IoKTtcblxuICAgICAgICAgICAgICAgIGNhc2UgTlVNQkVSU0lHTjpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuSWRTZWxlY3RvcigpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgIH1cbn1cbmNvbnN0IFNlbGVjdG9yID0ge1xuICAgIG9uV2hpdGVTcGFjZSxcbiAgICBnZXROb2RlXG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFNlbGVjdG9yO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///95966\n")},15504:(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval("\n\nconst _default = __webpack_require__(62756);\nconst expression = __webpack_require__(49023);\nconst _var = __webpack_require__(32040);\n\nfunction isPlusMinusOperator(node) {\n    return (\n        node !== null &&\n        node.type === 'Operator' &&\n        (node.value[node.value.length - 1] === '-' || node.value[node.value.length - 1] === '+')\n    );\n}\n\nconst value = {\n    getNode: _default,\n    onWhiteSpace(next, children) {\n        if (isPlusMinusOperator(next)) {\n            next.value = ' ' + next.value;\n        }\n        if (isPlusMinusOperator(children.last)) {\n            children.last.value += ' ';\n        }\n    },\n    'expression': expression,\n    'var': _var\n};\n\nmodule.exports = value;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTU1MDQuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsaUJBQWlCLG1CQUFPLENBQUMsS0FBZTtBQUN4QyxtQkFBbUIsbUJBQU8sQ0FBQyxLQUE0QjtBQUN2RCxhQUFhLG1CQUFPLENBQUMsS0FBcUI7O0FBRTFDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7O0FBRUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ibG9ja2JpdGUvLi9ub2RlX21vZHVsZXMvY3Nzby9ub2RlX21vZHVsZXMvY3NzLXRyZWUvY2pzL3N5bnRheC9zY29wZS92YWx1ZS5janM/YWI4MyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmNvbnN0IF9kZWZhdWx0ID0gcmVxdWlyZSgnLi9kZWZhdWx0LmNqcycpO1xuY29uc3QgZXhwcmVzc2lvbiA9IHJlcXVpcmUoJy4uL2Z1bmN0aW9uL2V4cHJlc3Npb24uY2pzJyk7XG5jb25zdCBfdmFyID0gcmVxdWlyZSgnLi4vZnVuY3Rpb24vdmFyLmNqcycpO1xuXG5mdW5jdGlvbiBpc1BsdXNNaW51c09wZXJhdG9yKG5vZGUpIHtcbiAgICByZXR1cm4gKFxuICAgICAgICBub2RlICE9PSBudWxsICYmXG4gICAgICAgIG5vZGUudHlwZSA9PT0gJ09wZXJhdG9yJyAmJlxuICAgICAgICAobm9kZS52YWx1ZVtub2RlLnZhbHVlLmxlbmd0aCAtIDFdID09PSAnLScgfHwgbm9kZS52YWx1ZVtub2RlLnZhbHVlLmxlbmd0aCAtIDFdID09PSAnKycpXG4gICAgKTtcbn1cblxuY29uc3QgdmFsdWUgPSB7XG4gICAgZ2V0Tm9kZTogX2RlZmF1bHQsXG4gICAgb25XaGl0ZVNwYWNlKG5leHQsIGNoaWxkcmVuKSB7XG4gICAgICAgIGlmIChpc1BsdXNNaW51c09wZXJhdG9yKG5leHQpKSB7XG4gICAgICAgICAgICBuZXh0LnZhbHVlID0gJyAnICsgbmV4dC52YWx1ZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNQbHVzTWludXNPcGVyYXRvcihjaGlsZHJlbi5sYXN0KSkge1xuICAgICAgICAgICAgY2hpbGRyZW4ubGFzdC52YWx1ZSArPSAnICc7XG4gICAgICAgIH1cbiAgICB9LFxuICAgICdleHByZXNzaW9uJzogZXhwcmVzc2lvbixcbiAgICAndmFyJzogX3ZhclxufTtcblxubW9kdWxlLmV4cG9ydHMgPSB2YWx1ZTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///15504\n")},24587:(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";eval("\n\nconst adoptBuffer = __webpack_require__(40397);\nconst charCodeDefinitions = __webpack_require__(87351);\n\nconst N = 10;\nconst F = 12;\nconst R = 13;\n\nfunction computeLinesAndColumns(host) {\n    const source = host.source;\n    const sourceLength = source.length;\n    const startOffset = source.length > 0 ? charCodeDefinitions.isBOM(source.charCodeAt(0)) : 0;\n    const lines = adoptBuffer.adoptBuffer(host.lines, sourceLength);\n    const columns = adoptBuffer.adoptBuffer(host.columns, sourceLength);\n    let line = host.startLine;\n    let column = host.startColumn;\n\n    for (let i = startOffset; i < sourceLength; i++) {\n        const code = source.charCodeAt(i);\n\n        lines[i] = line;\n        columns[i] = column++;\n\n        if (code === N || code === R || code === F) {\n            if (code === R && i + 1 < sourceLength && source.charCodeAt(i + 1) === N) {\n                i++;\n                lines[i] = line;\n                columns[i] = column;\n            }\n\n            line++;\n            column = 1;\n        }\n    }\n\n    lines[sourceLength] = line;\n    columns[sourceLength] = column;\n\n    host.lines = lines;\n    host.columns = columns;\n    host.computed = true;\n}\n\nclass OffsetToLocation {\n    constructor() {\n        this.lines = null;\n        this.columns = null;\n        this.computed = false;\n    }\n    setSource(source, startOffset = 0, startLine = 1, startColumn = 1) {\n        this.source = source;\n        this.startOffset = startOffset;\n        this.startLine = startLine;\n        this.startColumn = startColumn;\n        this.computed = false;\n    }\n    getLocation(offset, filename) {\n        if (!this.computed) {\n            computeLinesAndColumns(this);\n        }\n\n        return {\n            source: filename,\n            offset: this.startOffset + offset,\n            line: this.lines[offset],\n            column: this.columns[offset]\n        };\n    }\n    getLocationRange(start, end, filename) {\n        if (!this.computed) {\n            computeLinesAndColumns(this);\n        }\n\n        return {\n            source: filename,\n            start: {\n                offset: this.startOffset + start,\n                line: this.lines[start],\n                column: this.columns[start]\n            },\n            end: {\n                offset: this.startOffset + end,\n                line: this.lines[end],\n                column: this.columns[end]\n            }\n        };\n    }\n}\n\nexports.OffsetToLocation = OffsetToLocation;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjQ1ODcuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsb0JBQW9CLG1CQUFPLENBQUMsS0FBb0I7QUFDaEQsNEJBQTRCLG1CQUFPLENBQUMsS0FBNkI7O0FBRWpFO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLDhCQUE4QixrQkFBa0I7QUFDaEQ7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsd0JBQXdCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYmxvY2tiaXRlLy4vbm9kZV9tb2R1bGVzL2Nzc28vbm9kZV9tb2R1bGVzL2Nzcy10cmVlL2Nqcy90b2tlbml6ZXIvT2Zmc2V0VG9Mb2NhdGlvbi5janM/MDE1MiJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmNvbnN0IGFkb3B0QnVmZmVyID0gcmVxdWlyZSgnLi9hZG9wdC1idWZmZXIuY2pzJyk7XG5jb25zdCBjaGFyQ29kZURlZmluaXRpb25zID0gcmVxdWlyZSgnLi9jaGFyLWNvZGUtZGVmaW5pdGlvbnMuY2pzJyk7XG5cbmNvbnN0IE4gPSAxMDtcbmNvbnN0IEYgPSAxMjtcbmNvbnN0IFIgPSAxMztcblxuZnVuY3Rpb24gY29tcHV0ZUxpbmVzQW5kQ29sdW1ucyhob3N0KSB7XG4gICAgY29uc3Qgc291cmNlID0gaG9zdC5zb3VyY2U7XG4gICAgY29uc3Qgc291cmNlTGVuZ3RoID0gc291cmNlLmxlbmd0aDtcbiAgICBjb25zdCBzdGFydE9mZnNldCA9IHNvdXJjZS5sZW5ndGggPiAwID8gY2hhckNvZGVEZWZpbml0aW9ucy5pc0JPTShzb3VyY2UuY2hhckNvZGVBdCgwKSkgOiAwO1xuICAgIGNvbnN0IGxpbmVzID0gYWRvcHRCdWZmZXIuYWRvcHRCdWZmZXIoaG9zdC5saW5lcywgc291cmNlTGVuZ3RoKTtcbiAgICBjb25zdCBjb2x1bW5zID0gYWRvcHRCdWZmZXIuYWRvcHRCdWZmZXIoaG9zdC5jb2x1bW5zLCBzb3VyY2VMZW5ndGgpO1xuICAgIGxldCBsaW5lID0gaG9zdC5zdGFydExpbmU7XG4gICAgbGV0IGNvbHVtbiA9IGhvc3Quc3RhcnRDb2x1bW47XG5cbiAgICBmb3IgKGxldCBpID0gc3RhcnRPZmZzZXQ7IGkgPCBzb3VyY2VMZW5ndGg7IGkrKykge1xuICAgICAgICBjb25zdCBjb2RlID0gc291cmNlLmNoYXJDb2RlQXQoaSk7XG5cbiAgICAgICAgbGluZXNbaV0gPSBsaW5lO1xuICAgICAgICBjb2x1bW5zW2ldID0gY29sdW1uKys7XG5cbiAgICAgICAgaWYgKGNvZGUgPT09IE4gfHwgY29kZSA9PT0gUiB8fCBjb2RlID09PSBGKSB7XG4gICAgICAgICAgICBpZiAoY29kZSA9PT0gUiAmJiBpICsgMSA8IHNvdXJjZUxlbmd0aCAmJiBzb3VyY2UuY2hhckNvZGVBdChpICsgMSkgPT09IE4pIHtcbiAgICAgICAgICAgICAgICBpKys7XG4gICAgICAgICAgICAgICAgbGluZXNbaV0gPSBsaW5lO1xuICAgICAgICAgICAgICAgIGNvbHVtbnNbaV0gPSBjb2x1bW47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGxpbmUrKztcbiAgICAgICAgICAgIGNvbHVtbiA9IDE7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBsaW5lc1tzb3VyY2VMZW5ndGhdID0gbGluZTtcbiAgICBjb2x1bW5zW3NvdXJjZUxlbmd0aF0gPSBjb2x1bW47XG5cbiAgICBob3N0LmxpbmVzID0gbGluZXM7XG4gICAgaG9zdC5jb2x1bW5zID0gY29sdW1ucztcbiAgICBob3N0LmNvbXB1dGVkID0gdHJ1ZTtcbn1cblxuY2xhc3MgT2Zmc2V0VG9Mb2NhdGlvbiB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHRoaXMubGluZXMgPSBudWxsO1xuICAgICAgICB0aGlzLmNvbHVtbnMgPSBudWxsO1xuICAgICAgICB0aGlzLmNvbXB1dGVkID0gZmFsc2U7XG4gICAgfVxuICAgIHNldFNvdXJjZShzb3VyY2UsIHN0YXJ0T2Zmc2V0ID0gMCwgc3RhcnRMaW5lID0gMSwgc3RhcnRDb2x1bW4gPSAxKSB7XG4gICAgICAgIHRoaXMuc291cmNlID0gc291cmNlO1xuICAgICAgICB0aGlzLnN0YXJ0T2Zmc2V0ID0gc3RhcnRPZmZzZXQ7XG4gICAgICAgIHRoaXMuc3RhcnRMaW5lID0gc3RhcnRMaW5lO1xuICAgICAgICB0aGlzLnN0YXJ0Q29sdW1uID0gc3RhcnRDb2x1bW47XG4gICAgICAgIHRoaXMuY29tcHV0ZWQgPSBmYWxzZTtcbiAgICB9XG4gICAgZ2V0TG9jYXRpb24ob2Zmc2V0LCBmaWxlbmFtZSkge1xuICAgICAgICBpZiAoIXRoaXMuY29tcHV0ZWQpIHtcbiAgICAgICAgICAgIGNvbXB1dGVMaW5lc0FuZENvbHVtbnModGhpcyk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgc291cmNlOiBmaWxlbmFtZSxcbiAgICAgICAgICAgIG9mZnNldDogdGhpcy5zdGFydE9mZnNldCArIG9mZnNldCxcbiAgICAgICAgICAgIGxpbmU6IHRoaXMubGluZXNbb2Zmc2V0XSxcbiAgICAgICAgICAgIGNvbHVtbjogdGhpcy5jb2x1bW5zW29mZnNldF1cbiAgICAgICAgfTtcbiAgICB9XG4gICAgZ2V0TG9jYXRpb25SYW5nZShzdGFydCwgZW5kLCBmaWxlbmFtZSkge1xuICAgICAgICBpZiAoIXRoaXMuY29tcHV0ZWQpIHtcbiAgICAgICAgICAgIGNvbXB1dGVMaW5lc0FuZENvbHVtbnModGhpcyk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgc291cmNlOiBmaWxlbmFtZSxcbiAgICAgICAgICAgIHN0YXJ0OiB7XG4gICAgICAgICAgICAgICAgb2Zmc2V0OiB0aGlzLnN0YXJ0T2Zmc2V0ICsgc3RhcnQsXG4gICAgICAgICAgICAgICAgbGluZTogdGhpcy5saW5lc1tzdGFydF0sXG4gICAgICAgICAgICAgICAgY29sdW1uOiB0aGlzLmNvbHVtbnNbc3RhcnRdXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZW5kOiB7XG4gICAgICAgICAgICAgICAgb2Zmc2V0OiB0aGlzLnN0YXJ0T2Zmc2V0ICsgZW5kLFxuICAgICAgICAgICAgICAgIGxpbmU6IHRoaXMubGluZXNbZW5kXSxcbiAgICAgICAgICAgICAgICBjb2x1bW46IHRoaXMuY29sdW1uc1tlbmRdXG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgfVxufVxuXG5leHBvcnRzLk9mZnNldFRvTG9jYXRpb24gPSBPZmZzZXRUb0xvY2F0aW9uO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///24587\n")},68411:(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";eval("\n\nconst adoptBuffer = __webpack_require__(40397);\nconst utils = __webpack_require__(79955);\nconst names = __webpack_require__(49404);\nconst types = __webpack_require__(78783);\n\nconst OFFSET_MASK = 0x00FFFFFF;\nconst TYPE_SHIFT = 24;\nconst balancePair = new Map([\n    [types.Function, types.RightParenthesis],\n    [types.LeftParenthesis, types.RightParenthesis],\n    [types.LeftSquareBracket, types.RightSquareBracket],\n    [types.LeftCurlyBracket, types.RightCurlyBracket]\n]);\n\nclass TokenStream {\n    constructor(source, tokenize) {\n        this.setSource(source, tokenize);\n    }\n    reset() {\n        this.eof = false;\n        this.tokenIndex = -1;\n        this.tokenType = 0;\n        this.tokenStart = this.firstCharOffset;\n        this.tokenEnd = this.firstCharOffset;\n    }\n    setSource(source = '', tokenize = () => {}) {\n        source = String(source || '');\n\n        const sourceLength = source.length;\n        const offsetAndType = adoptBuffer.adoptBuffer(this.offsetAndType, source.length + 1); // +1 because of eof-token\n        const balance = adoptBuffer.adoptBuffer(this.balance, source.length + 1);\n        let tokenCount = 0;\n        let balanceCloseType = 0;\n        let balanceStart = 0;\n        let firstCharOffset = -1;\n\n        // capture buffers\n        this.offsetAndType = null;\n        this.balance = null;\n\n        tokenize(source, (type, start, end) => {\n            switch (type) {\n                default:\n                    balance[tokenCount] = sourceLength;\n                    break;\n\n                case balanceCloseType: {\n                    let balancePrev = balanceStart & OFFSET_MASK;\n                    balanceStart = balance[balancePrev];\n                    balanceCloseType = balanceStart >> TYPE_SHIFT;\n                    balance[tokenCount] = balancePrev;\n                    balance[balancePrev++] = tokenCount;\n                    for (; balancePrev < tokenCount; balancePrev++) {\n                        if (balance[balancePrev] === sourceLength) {\n                            balance[balancePrev] = tokenCount;\n                        }\n                    }\n                    break;\n                }\n\n                case types.LeftParenthesis:\n                case types.Function:\n                case types.LeftSquareBracket:\n                case types.LeftCurlyBracket:\n                    balance[tokenCount] = balanceStart;\n                    balanceCloseType = balancePair.get(type);\n                    balanceStart = (balanceCloseType << TYPE_SHIFT) | tokenCount;\n                    break;\n            }\n\n            offsetAndType[tokenCount++] = (type << TYPE_SHIFT) | end;\n            if (firstCharOffset === -1) {\n                firstCharOffset = start;\n            }\n        });\n\n        // finalize buffers\n        offsetAndType[tokenCount] = (types.EOF << TYPE_SHIFT) | sourceLength; // <EOF-token>\n        balance[tokenCount] = sourceLength;\n        balance[sourceLength] = sourceLength; // prevents false positive balance match with any token\n        while (balanceStart !== 0) {\n            const balancePrev = balanceStart & OFFSET_MASK;\n            balanceStart = balance[balancePrev];\n            balance[balancePrev] = sourceLength;\n        }\n\n        this.source = source;\n        this.firstCharOffset = firstCharOffset === -1 ? 0 : firstCharOffset;\n        this.tokenCount = tokenCount;\n        this.offsetAndType = offsetAndType;\n        this.balance = balance;\n\n        this.reset();\n        this.next();\n    }\n\n    lookupType(offset) {\n        offset += this.tokenIndex;\n\n        if (offset < this.tokenCount) {\n            return this.offsetAndType[offset] >> TYPE_SHIFT;\n        }\n\n        return types.EOF;\n    }\n    lookupOffset(offset) {\n        offset += this.tokenIndex;\n\n        if (offset < this.tokenCount) {\n            return this.offsetAndType[offset - 1] & OFFSET_MASK;\n        }\n\n        return this.source.length;\n    }\n    lookupValue(offset, referenceStr) {\n        offset += this.tokenIndex;\n\n        if (offset < this.tokenCount) {\n            return utils.cmpStr(\n                this.source,\n                this.offsetAndType[offset - 1] & OFFSET_MASK,\n                this.offsetAndType[offset] & OFFSET_MASK,\n                referenceStr\n            );\n        }\n\n        return false;\n    }\n    getTokenStart(tokenIndex) {\n        if (tokenIndex === this.tokenIndex) {\n            return this.tokenStart;\n        }\n\n        if (tokenIndex > 0) {\n            return tokenIndex < this.tokenCount\n                ? this.offsetAndType[tokenIndex - 1] & OFFSET_MASK\n                : this.offsetAndType[this.tokenCount] & OFFSET_MASK;\n        }\n\n        return this.firstCharOffset;\n    }\n    substrToCursor(start) {\n        return this.source.substring(start, this.tokenStart);\n    }\n\n    isBalanceEdge(pos) {\n        return this.balance[this.tokenIndex] < pos;\n    }\n    isDelim(code, offset) {\n        if (offset) {\n            return (\n                this.lookupType(offset) === types.Delim &&\n                this.source.charCodeAt(this.lookupOffset(offset)) === code\n            );\n        }\n\n        return (\n            this.tokenType === types.Delim &&\n            this.source.charCodeAt(this.tokenStart) === code\n        );\n    }\n\n    skip(tokenCount) {\n        let next = this.tokenIndex + tokenCount;\n\n        if (next < this.tokenCount) {\n            this.tokenIndex = next;\n            this.tokenStart = this.offsetAndType[next - 1] & OFFSET_MASK;\n            next = this.offsetAndType[next];\n            this.tokenType = next >> TYPE_SHIFT;\n            this.tokenEnd = next & OFFSET_MASK;\n        } else {\n            this.tokenIndex = this.tokenCount;\n            this.next();\n        }\n    }\n    next() {\n        let next = this.tokenIndex + 1;\n\n        if (next < this.tokenCount) {\n            this.tokenIndex = next;\n            this.tokenStart = this.tokenEnd;\n            next = this.offsetAndType[next];\n            this.tokenType = next >> TYPE_SHIFT;\n            this.tokenEnd = next & OFFSET_MASK;\n        } else {\n            this.eof = true;\n            this.tokenIndex = this.tokenCount;\n            this.tokenType = types.EOF;\n            this.tokenStart = this.tokenEnd = this.source.length;\n        }\n    }\n    skipSC() {\n        while (this.tokenType === types.WhiteSpace || this.tokenType === types.Comment) {\n            this.next();\n        }\n    }\n    skipUntilBalanced(startToken, stopConsume) {\n        let cursor = startToken;\n        let balanceEnd;\n        let offset;\n\n        loop:\n        for (; cursor < this.tokenCount; cursor++) {\n            balanceEnd = this.balance[cursor];\n\n            // stop scanning on balance edge that points to offset before start token\n            if (balanceEnd < startToken) {\n                break loop;\n            }\n\n            offset = cursor > 0 ? this.offsetAndType[cursor - 1] & OFFSET_MASK : this.firstCharOffset;\n\n            // check stop condition\n            switch (stopConsume(this.source.charCodeAt(offset))) {\n                case 1: // just stop\n                    break loop;\n\n                case 2: // stop & included\n                    cursor++;\n                    break loop;\n\n                default:\n                    // fast forward to the end of balanced block\n                    if (this.balance[balanceEnd] === cursor) {\n                        cursor = balanceEnd;\n                    }\n            }\n        }\n\n        this.skip(cursor - this.tokenIndex);\n    }\n\n    forEachToken(fn) {\n        for (let i = 0, offset = this.firstCharOffset; i < this.tokenCount; i++) {\n            const start = offset;\n            const item = this.offsetAndType[i];\n            const end = item & OFFSET_MASK;\n            const type = item >> TYPE_SHIFT;\n\n            offset = end;\n\n            fn(type, start, end, i);\n        }\n    }\n    dump() {\n        const tokens = new Array(this.tokenCount);\n\n        this.forEachToken((type, start, end, index) => {\n            tokens[index] = {\n                idx: index,\n                type: names[type],\n                chunk: this.source.substring(start, end),\n                balance: this.balance[index]\n            };\n        });\n\n        return tokens;\n    }\n}\n\nexports.TokenStream = TokenStream;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///68411\n")},40397:(__unused_webpack_module,exports)=>{"use strict";eval("\n\nconst MIN_SIZE = 16 * 1024;\n\nfunction adoptBuffer(buffer = null, size) {\n    if (buffer === null || buffer.length < size) {\n        return new Uint32Array(Math.max(size + 1024, MIN_SIZE));\n    }\n\n    return buffer;\n}\n\nexports.adoptBuffer = adoptBuffer;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDAzOTcuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWI7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQSxtQkFBbUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ibG9ja2JpdGUvLi9ub2RlX21vZHVsZXMvY3Nzby9ub2RlX21vZHVsZXMvY3NzLXRyZWUvY2pzL3Rva2VuaXplci9hZG9wdC1idWZmZXIuY2pzPzJmODQiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBNSU5fU0laRSA9IDE2ICogMTAyNDtcblxuZnVuY3Rpb24gYWRvcHRCdWZmZXIoYnVmZmVyID0gbnVsbCwgc2l6ZSkge1xuICAgIGlmIChidWZmZXIgPT09IG51bGwgfHwgYnVmZmVyLmxlbmd0aCA8IHNpemUpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBVaW50MzJBcnJheShNYXRoLm1heChzaXplICsgMTAyNCwgTUlOX1NJWkUpKTtcbiAgICB9XG5cbiAgICByZXR1cm4gYnVmZmVyO1xufVxuXG5leHBvcnRzLmFkb3B0QnVmZmVyID0gYWRvcHRCdWZmZXI7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///40397\n")},87351:(__unused_webpack_module,exports)=>{"use strict";eval("\n\nconst EOF = 0;\n\n// https://drafts.csswg.org/css-syntax-3/\n// § 4.2. Definitions\n\n// digit\n// A code point between U+0030 DIGIT ZERO (0) and U+0039 DIGIT NINE (9).\nfunction isDigit(code) {\n    return code >= 0x0030 && code <= 0x0039;\n}\n\n// hex digit\n// A digit, or a code point between U+0041 LATIN CAPITAL LETTER A (A) and U+0046 LATIN CAPITAL LETTER F (F),\n// or a code point between U+0061 LATIN SMALL LETTER A (a) and U+0066 LATIN SMALL LETTER F (f).\nfunction isHexDigit(code) {\n    return (\n        isDigit(code) || // 0 .. 9\n        (code >= 0x0041 && code <= 0x0046) || // A .. F\n        (code >= 0x0061 && code <= 0x0066)    // a .. f\n    );\n}\n\n// uppercase letter\n// A code point between U+0041 LATIN CAPITAL LETTER A (A) and U+005A LATIN CAPITAL LETTER Z (Z).\nfunction isUppercaseLetter(code) {\n    return code >= 0x0041 && code <= 0x005A;\n}\n\n// lowercase letter\n// A code point between U+0061 LATIN SMALL LETTER A (a) and U+007A LATIN SMALL LETTER Z (z).\nfunction isLowercaseLetter(code) {\n    return code >= 0x0061 && code <= 0x007A;\n}\n\n// letter\n// An uppercase letter or a lowercase letter.\nfunction isLetter(code) {\n    return isUppercaseLetter(code) || isLowercaseLetter(code);\n}\n\n// non-ASCII code point\n// A code point with a value equal to or greater than U+0080 <control>.\nfunction isNonAscii(code) {\n    return code >= 0x0080;\n}\n\n// name-start code point\n// A letter, a non-ASCII code point, or U+005F LOW LINE (_).\nfunction isNameStart(code) {\n    return isLetter(code) || isNonAscii(code) || code === 0x005F;\n}\n\n// name code point\n// A name-start code point, a digit, or U+002D HYPHEN-MINUS (-).\nfunction isName(code) {\n    return isNameStart(code) || isDigit(code) || code === 0x002D;\n}\n\n// non-printable code point\n// A code point between U+0000 NULL and U+0008 BACKSPACE, or U+000B LINE TABULATION,\n// or a code point between U+000E SHIFT OUT and U+001F INFORMATION SEPARATOR ONE, or U+007F DELETE.\nfunction isNonPrintable(code) {\n    return (\n        (code >= 0x0000 && code <= 0x0008) ||\n        (code === 0x000B) ||\n        (code >= 0x000E && code <= 0x001F) ||\n        (code === 0x007F)\n    );\n}\n\n// newline\n// U+000A LINE FEED. Note that U+000D CARRIAGE RETURN and U+000C FORM FEED are not included in this definition,\n// as they are converted to U+000A LINE FEED during preprocessing.\n// TODO: we doesn't do a preprocessing, so check a code point for U+000D CARRIAGE RETURN and U+000C FORM FEED\nfunction isNewline(code) {\n    return code === 0x000A || code === 0x000D || code === 0x000C;\n}\n\n// whitespace\n// A newline, U+0009 CHARACTER TABULATION, or U+0020 SPACE.\nfunction isWhiteSpace(code) {\n    return isNewline(code) || code === 0x0020 || code === 0x0009;\n}\n\n// § 4.3.8. Check if two code points are a valid escape\nfunction isValidEscape(first, second) {\n    // If the first code point is not U+005C REVERSE SOLIDUS (\\), return false.\n    if (first !== 0x005C) {\n        return false;\n    }\n\n    // Otherwise, if the second code point is a newline or EOF, return false.\n    if (isNewline(second) || second === EOF) {\n        return false;\n    }\n\n    // Otherwise, return true.\n    return true;\n}\n\n// § 4.3.9. Check if three code points would start an identifier\nfunction isIdentifierStart(first, second, third) {\n    // Look at the first code point:\n\n    // U+002D HYPHEN-MINUS\n    if (first === 0x002D) {\n        // If the second code point is a name-start code point or a U+002D HYPHEN-MINUS,\n        // or the second and third code points are a valid escape, return true. Otherwise, return false.\n        return (\n            isNameStart(second) ||\n            second === 0x002D ||\n            isValidEscape(second, third)\n        );\n    }\n\n    // name-start code point\n    if (isNameStart(first)) {\n        // Return true.\n        return true;\n    }\n\n    // U+005C REVERSE SOLIDUS (\\)\n    if (first === 0x005C) {\n        // If the first and second code points are a valid escape, return true. Otherwise, return false.\n        return isValidEscape(first, second);\n    }\n\n    // anything else\n    // Return false.\n    return false;\n}\n\n// § 4.3.10. Check if three code points would start a number\nfunction isNumberStart(first, second, third) {\n    // Look at the first code point:\n\n    // U+002B PLUS SIGN (+)\n    // U+002D HYPHEN-MINUS (-)\n    if (first === 0x002B || first === 0x002D) {\n        // If the second code point is a digit, return true.\n        if (isDigit(second)) {\n            return 2;\n        }\n\n        // Otherwise, if the second code point is a U+002E FULL STOP (.)\n        // and the third code point is a digit, return true.\n        // Otherwise, return false.\n        return second === 0x002E && isDigit(third) ? 3 : 0;\n    }\n\n    // U+002E FULL STOP (.)\n    if (first === 0x002E) {\n        // If the second code point is a digit, return true. Otherwise, return false.\n        return isDigit(second) ? 2 : 0;\n    }\n\n    // digit\n    if (isDigit(first)) {\n        // Return true.\n        return 1;\n    }\n\n    // anything else\n    // Return false.\n    return 0;\n}\n\n//\n// Misc\n//\n\n// detect BOM (https://en.wikipedia.org/wiki/Byte_order_mark)\nfunction isBOM(code) {\n    // UTF-16BE\n    if (code === 0xFEFF) {\n        return 1;\n    }\n\n    // UTF-16LE\n    if (code === 0xFFFE) {\n        return 1;\n    }\n\n    return 0;\n}\n\n// Fast code category\n// Only ASCII code points has a special meaning, that's why we define a maps for 0..127 codes only\nconst CATEGORY = new Array(0x80);\nconst EofCategory = 0x80;\nconst WhiteSpaceCategory = 0x82;\nconst DigitCategory = 0x83;\nconst NameStartCategory = 0x84;\nconst NonPrintableCategory = 0x85;\n\nfor (let i = 0; i < CATEGORY.length; i++) {\n    CATEGORY[i] =\n        isWhiteSpace(i) && WhiteSpaceCategory ||\n        isDigit(i) && DigitCategory ||\n        isNameStart(i) && NameStartCategory ||\n        isNonPrintable(i) && NonPrintableCategory ||\n        i || EofCategory;\n}\n\nfunction charCodeCategory(code) {\n    return code < 0x80 ? CATEGORY[code] : NameStartCategory;\n}\n\nexports.DigitCategory = DigitCategory;\nexports.EofCategory = EofCategory;\nexports.NameStartCategory = NameStartCategory;\nexports.NonPrintableCategory = NonPrintableCategory;\nexports.WhiteSpaceCategory = WhiteSpaceCategory;\nexports.charCodeCategory = charCodeCategory;\nexports.isBOM = isBOM;\nexports.isDigit = isDigit;\nexports.isHexDigit = isHexDigit;\nexports.isIdentifierStart = isIdentifierStart;\nexports.isLetter = isLetter;\nexports.isLowercaseLetter = isLowercaseLetter;\nexports.isName = isName;\nexports.isNameStart = isNameStart;\nexports.isNewline = isNewline;\nexports.isNonAscii = isNonAscii;\nexports.isNonPrintable = isNonPrintable;\nexports.isNumberStart = isNumberStart;\nexports.isUppercaseLetter = isUppercaseLetter;\nexports.isValidEscape = isValidEscape;\nexports.isWhiteSpace = isWhiteSpace;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///87351\n")},68328:(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";eval('\n\nconst types = __webpack_require__(78783);\nconst charCodeDefinitions = __webpack_require__(87351);\nconst utils = __webpack_require__(79955);\nconst names = __webpack_require__(49404);\nconst OffsetToLocation = __webpack_require__(24587);\nconst TokenStream = __webpack_require__(68411);\n\nfunction tokenize(source, onToken) {\n    function getCharCode(offset) {\n        return offset < sourceLength ? source.charCodeAt(offset) : 0;\n    }\n\n    // § 4.3.3. Consume a numeric token\n    function consumeNumericToken() {\n        // Consume a number and let number be the result.\n        offset = utils.consumeNumber(source, offset);\n\n        // If the next 3 input code points would start an identifier, then:\n        if (charCodeDefinitions.isIdentifierStart(getCharCode(offset), getCharCode(offset + 1), getCharCode(offset + 2))) {\n            // Create a <dimension-token> with the same value and type flag as number, and a unit set initially to the empty string.\n            // Consume a name. Set the <dimension-token>’s unit to the returned value.\n            // Return the <dimension-token>.\n            type = types.Dimension;\n            offset = utils.consumeName(source, offset);\n            return;\n        }\n\n        // Otherwise, if the next input code point is U+0025 PERCENTAGE SIGN (%), consume it.\n        if (getCharCode(offset) === 0x0025) {\n            // Create a <percentage-token> with the same value as number, and return it.\n            type = types.Percentage;\n            offset++;\n            return;\n        }\n\n        // Otherwise, create a <number-token> with the same value and type flag as number, and return it.\n        type = types.Number;\n    }\n\n    // § 4.3.4. Consume an ident-like token\n    function consumeIdentLikeToken() {\n        const nameStartOffset = offset;\n\n        // Consume a name, and let string be the result.\n        offset = utils.consumeName(source, offset);\n\n        // If string’s value is an ASCII case-insensitive match for "url",\n        // and the next input code point is U+0028 LEFT PARENTHESIS ((), consume it.\n        if (utils.cmpStr(source, nameStartOffset, offset, \'url\') && getCharCode(offset) === 0x0028) {\n            // While the next two input code points are whitespace, consume the next input code point.\n            offset = utils.findWhiteSpaceEnd(source, offset + 1);\n\n            // If the next one or two input code points are U+0022 QUOTATION MARK ("), U+0027 APOSTROPHE (\'),\n            // or whitespace followed by U+0022 QUOTATION MARK (") or U+0027 APOSTROPHE (\'),\n            // then create a <function-token> with its value set to string and return it.\n            if (getCharCode(offset) === 0x0022 ||\n                getCharCode(offset) === 0x0027) {\n                type = types.Function;\n                offset = nameStartOffset + 4;\n                return;\n            }\n\n            // Otherwise, consume a url token, and return it.\n            consumeUrlToken();\n            return;\n        }\n\n        // Otherwise, if the next input code point is U+0028 LEFT PARENTHESIS ((), consume it.\n        // Create a <function-token> with its value set to string and return it.\n        if (getCharCode(offset) === 0x0028) {\n            type = types.Function;\n            offset++;\n            return;\n        }\n\n        // Otherwise, create an <ident-token> with its value set to string and return it.\n        type = types.Ident;\n    }\n\n    // § 4.3.5. Consume a string token\n    function consumeStringToken(endingCodePoint) {\n        // This algorithm may be called with an ending code point, which denotes the code point\n        // that ends the string. If an ending code point is not specified,\n        // the current input code point is used.\n        if (!endingCodePoint) {\n            endingCodePoint = getCharCode(offset++);\n        }\n\n        // Initially create a <string-token> with its value set to the empty string.\n        type = types.String;\n\n        // Repeatedly consume the next input code point from the stream:\n        for (; offset < source.length; offset++) {\n            const code = source.charCodeAt(offset);\n\n            switch (charCodeDefinitions.charCodeCategory(code)) {\n                // ending code point\n                case endingCodePoint:\n                    // Return the <string-token>.\n                    offset++;\n                    return;\n\n                    // EOF\n                    // case EofCategory:\n                    // This is a parse error. Return the <string-token>.\n                    // return;\n\n                // newline\n                case charCodeDefinitions.WhiteSpaceCategory:\n                    if (charCodeDefinitions.isNewline(code)) {\n                        // This is a parse error. Reconsume the current input code point,\n                        // create a <bad-string-token>, and return it.\n                        offset += utils.getNewlineLength(source, offset, code);\n                        type = types.BadString;\n                        return;\n                    }\n                    break;\n\n                // U+005C REVERSE SOLIDUS (\\)\n                case 0x005C:\n                    // If the next input code point is EOF, do nothing.\n                    if (offset === source.length - 1) {\n                        break;\n                    }\n\n                    const nextCode = getCharCode(offset + 1);\n\n                    // Otherwise, if the next input code point is a newline, consume it.\n                    if (charCodeDefinitions.isNewline(nextCode)) {\n                        offset += utils.getNewlineLength(source, offset + 1, nextCode);\n                    } else if (charCodeDefinitions.isValidEscape(code, nextCode)) {\n                        // Otherwise, (the stream starts with a valid escape) consume\n                        // an escaped code point and append the returned code point to\n                        // the <string-token>’s value.\n                        offset = utils.consumeEscaped(source, offset) - 1;\n                    }\n                    break;\n\n                // anything else\n                // Append the current input code point to the <string-token>’s value.\n            }\n        }\n    }\n\n    // § 4.3.6. Consume a url token\n    // Note: This algorithm assumes that the initial "url(" has already been consumed.\n    // This algorithm also assumes that it’s being called to consume an "unquoted" value, like url(foo).\n    // A quoted value, like url("foo"), is parsed as a <function-token>. Consume an ident-like token\n    // automatically handles this distinction; this algorithm shouldn’t be called directly otherwise.\n    function consumeUrlToken() {\n        // Initially create a <url-token> with its value set to the empty string.\n        type = types.Url;\n\n        // Consume as much whitespace as possible.\n        offset = utils.findWhiteSpaceEnd(source, offset);\n\n        // Repeatedly consume the next input code point from the stream:\n        for (; offset < source.length; offset++) {\n            const code = source.charCodeAt(offset);\n\n            switch (charCodeDefinitions.charCodeCategory(code)) {\n                // U+0029 RIGHT PARENTHESIS ())\n                case 0x0029:\n                    // Return the <url-token>.\n                    offset++;\n                    return;\n\n                    // EOF\n                    // case EofCategory:\n                    // This is a parse error. Return the <url-token>.\n                    // return;\n\n                // whitespace\n                case charCodeDefinitions.WhiteSpaceCategory:\n                    // Consume as much whitespace as possible.\n                    offset = utils.findWhiteSpaceEnd(source, offset);\n\n                    // If the next input code point is U+0029 RIGHT PARENTHESIS ()) or EOF,\n                    // consume it and return the <url-token>\n                    // (if EOF was encountered, this is a parse error);\n                    if (getCharCode(offset) === 0x0029 || offset >= source.length) {\n                        if (offset < source.length) {\n                            offset++;\n                        }\n                        return;\n                    }\n\n                    // otherwise, consume the remnants of a bad url, create a <bad-url-token>,\n                    // and return it.\n                    offset = utils.consumeBadUrlRemnants(source, offset);\n                    type = types.BadUrl;\n                    return;\n\n                // U+0022 QUOTATION MARK (")\n                // U+0027 APOSTROPHE (\')\n                // U+0028 LEFT PARENTHESIS (()\n                // non-printable code point\n                case 0x0022:\n                case 0x0027:\n                case 0x0028:\n                case charCodeDefinitions.NonPrintableCategory:\n                    // This is a parse error. Consume the remnants of a bad url,\n                    // create a <bad-url-token>, and return it.\n                    offset = utils.consumeBadUrlRemnants(source, offset);\n                    type = types.BadUrl;\n                    return;\n\n                // U+005C REVERSE SOLIDUS (\\)\n                case 0x005C:\n                    // If the stream starts with a valid escape, consume an escaped code point and\n                    // append the returned code point to the <url-token>’s value.\n                    if (charCodeDefinitions.isValidEscape(code, getCharCode(offset + 1))) {\n                        offset = utils.consumeEscaped(source, offset) - 1;\n                        break;\n                    }\n\n                    // Otherwise, this is a parse error. Consume the remnants of a bad url,\n                    // create a <bad-url-token>, and return it.\n                    offset = utils.consumeBadUrlRemnants(source, offset);\n                    type = types.BadUrl;\n                    return;\n\n                // anything else\n                // Append the current input code point to the <url-token>’s value.\n            }\n        }\n    }\n\n    // ensure source is a string\n    source = String(source || \'\');\n\n    const sourceLength = source.length;\n    let start = charCodeDefinitions.isBOM(getCharCode(0));\n    let offset = start;\n    let type;\n\n    // https://drafts.csswg.org/css-syntax-3/#consume-token\n    // § 4.3.1. Consume a token\n    while (offset < sourceLength) {\n        const code = source.charCodeAt(offset);\n\n        switch (charCodeDefinitions.charCodeCategory(code)) {\n            // whitespace\n            case charCodeDefinitions.WhiteSpaceCategory:\n                // Consume as much whitespace as possible. Return a <whitespace-token>.\n                type = types.WhiteSpace;\n                offset = utils.findWhiteSpaceEnd(source, offset + 1);\n                break;\n\n            // U+0022 QUOTATION MARK (")\n            case 0x0022:\n                // Consume a string token and return it.\n                consumeStringToken();\n                break;\n\n            // U+0023 NUMBER SIGN (#)\n            case 0x0023:\n                // If the next input code point is a name code point or the next two input code points are a valid escape, then:\n                if (charCodeDefinitions.isName(getCharCode(offset + 1)) || charCodeDefinitions.isValidEscape(getCharCode(offset + 1), getCharCode(offset + 2))) {\n                    // Create a <hash-token>.\n                    type = types.Hash;\n\n                    // If the next 3 input code points would start an identifier, set the <hash-token>’s type flag to "id".\n                    // if (isIdentifierStart(getCharCode(offset + 1), getCharCode(offset + 2), getCharCode(offset + 3))) {\n                    //     // TODO: set id flag\n                    // }\n\n                    // Consume a name, and set the <hash-token>’s value to the returned string.\n                    offset = utils.consumeName(source, offset + 1);\n\n                    // Return the <hash-token>.\n                } else {\n                    // Otherwise, return a <delim-token> with its value set to the current input code point.\n                    type = types.Delim;\n                    offset++;\n                }\n\n                break;\n\n            // U+0027 APOSTROPHE (\')\n            case 0x0027:\n                // Consume a string token and return it.\n                consumeStringToken();\n                break;\n\n            // U+0028 LEFT PARENTHESIS (()\n            case 0x0028:\n                // Return a <(-token>.\n                type = types.LeftParenthesis;\n                offset++;\n                break;\n\n            // U+0029 RIGHT PARENTHESIS ())\n            case 0x0029:\n                // Return a <)-token>.\n                type = types.RightParenthesis;\n                offset++;\n                break;\n\n            // U+002B PLUS SIGN (+)\n            case 0x002B:\n                // If the input stream starts with a number, ...\n                if (charCodeDefinitions.isNumberStart(code, getCharCode(offset + 1), getCharCode(offset + 2))) {\n                    // ... reconsume the current input code point, consume a numeric token, and return it.\n                    consumeNumericToken();\n                } else {\n                    // Otherwise, return a <delim-token> with its value set to the current input code point.\n                    type = types.Delim;\n                    offset++;\n                }\n                break;\n\n            // U+002C COMMA (,)\n            case 0x002C:\n                // Return a <comma-token>.\n                type = types.Comma;\n                offset++;\n                break;\n\n            // U+002D HYPHEN-MINUS (-)\n            case 0x002D:\n                // If the input stream starts with a number, reconsume the current input code point, consume a numeric token, and return it.\n                if (charCodeDefinitions.isNumberStart(code, getCharCode(offset + 1), getCharCode(offset + 2))) {\n                    consumeNumericToken();\n                } else {\n                    // Otherwise, if the next 2 input code points are U+002D HYPHEN-MINUS U+003E GREATER-THAN SIGN (->), consume them and return a <CDC-token>.\n                    if (getCharCode(offset + 1) === 0x002D &&\n                        getCharCode(offset + 2) === 0x003E) {\n                        type = types.CDC;\n                        offset = offset + 3;\n                    } else {\n                        // Otherwise, if the input stream starts with an identifier, ...\n                        if (charCodeDefinitions.isIdentifierStart(code, getCharCode(offset + 1), getCharCode(offset + 2))) {\n                            // ... reconsume the current input code point, consume an ident-like token, and return it.\n                            consumeIdentLikeToken();\n                        } else {\n                            // Otherwise, return a <delim-token> with its value set to the current input code point.\n                            type = types.Delim;\n                            offset++;\n                        }\n                    }\n                }\n                break;\n\n            // U+002E FULL STOP (.)\n            case 0x002E:\n                // If the input stream starts with a number, ...\n                if (charCodeDefinitions.isNumberStart(code, getCharCode(offset + 1), getCharCode(offset + 2))) {\n                    // ... reconsume the current input code point, consume a numeric token, and return it.\n                    consumeNumericToken();\n                } else {\n                    // Otherwise, return a <delim-token> with its value set to the current input code point.\n                    type = types.Delim;\n                    offset++;\n                }\n\n                break;\n\n            // U+002F SOLIDUS (/)\n            case 0x002F:\n                // If the next two input code point are U+002F SOLIDUS (/) followed by a U+002A ASTERISK (*),\n                if (getCharCode(offset + 1) === 0x002A) {\n                    // ... consume them and all following code points up to and including the first U+002A ASTERISK (*)\n                    // followed by a U+002F SOLIDUS (/), or up to an EOF code point.\n                    type = types.Comment;\n                    offset = source.indexOf(\'*/\', offset + 2);\n                    offset = offset === -1 ? source.length : offset + 2;\n                } else {\n                    type = types.Delim;\n                    offset++;\n                }\n                break;\n\n            // U+003A COLON (:)\n            case 0x003A:\n                // Return a <colon-token>.\n                type = types.Colon;\n                offset++;\n                break;\n\n            // U+003B SEMICOLON (;)\n            case 0x003B:\n                // Return a <semicolon-token>.\n                type = types.Semicolon;\n                offset++;\n                break;\n\n            // U+003C LESS-THAN SIGN (<)\n            case 0x003C:\n                // If the next 3 input code points are U+0021 EXCLAMATION MARK U+002D HYPHEN-MINUS U+002D HYPHEN-MINUS (!--), ...\n                if (getCharCode(offset + 1) === 0x0021 &&\n                    getCharCode(offset + 2) === 0x002D &&\n                    getCharCode(offset + 3) === 0x002D) {\n                    // ... consume them and return a <CDO-token>.\n                    type = types.CDO;\n                    offset = offset + 4;\n                } else {\n                    // Otherwise, return a <delim-token> with its value set to the current input code point.\n                    type = types.Delim;\n                    offset++;\n                }\n\n                break;\n\n            // U+0040 COMMERCIAL AT (@)\n            case 0x0040:\n                // If the next 3 input code points would start an identifier, ...\n                if (charCodeDefinitions.isIdentifierStart(getCharCode(offset + 1), getCharCode(offset + 2), getCharCode(offset + 3))) {\n                    // ... consume a name, create an <at-keyword-token> with its value set to the returned value, and return it.\n                    type = types.AtKeyword;\n                    offset = utils.consumeName(source, offset + 1);\n                } else {\n                    // Otherwise, return a <delim-token> with its value set to the current input code point.\n                    type = types.Delim;\n                    offset++;\n                }\n\n                break;\n\n            // U+005B LEFT SQUARE BRACKET ([)\n            case 0x005B:\n                // Return a <[-token>.\n                type = types.LeftSquareBracket;\n                offset++;\n                break;\n\n            // U+005C REVERSE SOLIDUS (\\)\n            case 0x005C:\n                // If the input stream starts with a valid escape, ...\n                if (charCodeDefinitions.isValidEscape(code, getCharCode(offset + 1))) {\n                    // ... reconsume the current input code point, consume an ident-like token, and return it.\n                    consumeIdentLikeToken();\n                } else {\n                    // Otherwise, this is a parse error. Return a <delim-token> with its value set to the current input code point.\n                    type = types.Delim;\n                    offset++;\n                }\n                break;\n\n            // U+005D RIGHT SQUARE BRACKET (])\n            case 0x005D:\n                // Return a <]-token>.\n                type = types.RightSquareBracket;\n                offset++;\n                break;\n\n            // U+007B LEFT CURLY BRACKET ({)\n            case 0x007B:\n                // Return a <{-token>.\n                type = types.LeftCurlyBracket;\n                offset++;\n                break;\n\n            // U+007D RIGHT CURLY BRACKET (})\n            case 0x007D:\n                // Return a <}-token>.\n                type = types.RightCurlyBracket;\n                offset++;\n                break;\n\n            // digit\n            case charCodeDefinitions.DigitCategory:\n                // Reconsume the current input code point, consume a numeric token, and return it.\n                consumeNumericToken();\n                break;\n\n            // name-start code point\n            case charCodeDefinitions.NameStartCategory:\n                // Reconsume the current input code point, consume an ident-like token, and return it.\n                consumeIdentLikeToken();\n                break;\n\n                // EOF\n                // case EofCategory:\n                // Return an <EOF-token>.\n                // break;\n\n            // anything else\n            default:\n                // Return a <delim-token> with its value set to the current input code point.\n                type = types.Delim;\n                offset++;\n        }\n\n        // put token to stream\n        onToken(type, start, start = offset);\n    }\n}\n\nexports.AtKeyword = types.AtKeyword;\nexports.BadString = types.BadString;\nexports.BadUrl = types.BadUrl;\nexports.CDC = types.CDC;\nexports.CDO = types.CDO;\nexports.Colon = types.Colon;\nexports.Comma = types.Comma;\nexports.Comment = types.Comment;\nexports.Delim = types.Delim;\nexports.Dimension = types.Dimension;\nexports.EOF = types.EOF;\nexports.Function = types.Function;\nexports.Hash = types.Hash;\nexports.Ident = types.Ident;\nexports.LeftCurlyBracket = types.LeftCurlyBracket;\nexports.LeftParenthesis = types.LeftParenthesis;\nexports.LeftSquareBracket = types.LeftSquareBracket;\nexports.Number = types.Number;\nexports.Percentage = types.Percentage;\nexports.RightCurlyBracket = types.RightCurlyBracket;\nexports.RightParenthesis = types.RightParenthesis;\nexports.RightSquareBracket = types.RightSquareBracket;\nexports.Semicolon = types.Semicolon;\nexports.String = types.String;\nexports.Url = types.Url;\nexports.WhiteSpace = types.WhiteSpace;\nexports.tokenTypes = types;\nexports.DigitCategory = charCodeDefinitions.DigitCategory;\nexports.EofCategory = charCodeDefinitions.EofCategory;\nexports.NameStartCategory = charCodeDefinitions.NameStartCategory;\nexports.NonPrintableCategory = charCodeDefinitions.NonPrintableCategory;\nexports.WhiteSpaceCategory = charCodeDefinitions.WhiteSpaceCategory;\nexports.charCodeCategory = charCodeDefinitions.charCodeCategory;\nexports.isBOM = charCodeDefinitions.isBOM;\nexports.isDigit = charCodeDefinitions.isDigit;\nexports.isHexDigit = charCodeDefinitions.isHexDigit;\nexports.isIdentifierStart = charCodeDefinitions.isIdentifierStart;\nexports.isLetter = charCodeDefinitions.isLetter;\nexports.isLowercaseLetter = charCodeDefinitions.isLowercaseLetter;\nexports.isName = charCodeDefinitions.isName;\nexports.isNameStart = charCodeDefinitions.isNameStart;\nexports.isNewline = charCodeDefinitions.isNewline;\nexports.isNonAscii = charCodeDefinitions.isNonAscii;\nexports.isNonPrintable = charCodeDefinitions.isNonPrintable;\nexports.isNumberStart = charCodeDefinitions.isNumberStart;\nexports.isUppercaseLetter = charCodeDefinitions.isUppercaseLetter;\nexports.isValidEscape = charCodeDefinitions.isValidEscape;\nexports.isWhiteSpace = charCodeDefinitions.isWhiteSpace;\nexports.cmpChar = utils.cmpChar;\nexports.cmpStr = utils.cmpStr;\nexports.consumeBadUrlRemnants = utils.consumeBadUrlRemnants;\nexports.consumeEscaped = utils.consumeEscaped;\nexports.consumeName = utils.consumeName;\nexports.consumeNumber = utils.consumeNumber;\nexports.decodeEscaped = utils.decodeEscaped;\nexports.findDecimalNumberEnd = utils.findDecimalNumberEnd;\nexports.findWhiteSpaceEnd = utils.findWhiteSpaceEnd;\nexports.findWhiteSpaceStart = utils.findWhiteSpaceStart;\nexports.getNewlineLength = utils.getNewlineLength;\nexports.tokenNames = names;\nexports.OffsetToLocation = OffsetToLocation.OffsetToLocation;\nexports.TokenStream = TokenStream.TokenStream;\nexports.tokenize = tokenize;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///68328\n')},49404:module=>{"use strict";eval("\n\nconst tokenNames = [\n    'EOF-token',\n    'ident-token',\n    'function-token',\n    'at-keyword-token',\n    'hash-token',\n    'string-token',\n    'bad-string-token',\n    'url-token',\n    'bad-url-token',\n    'delim-token',\n    'number-token',\n    'percentage-token',\n    'dimension-token',\n    'whitespace-token',\n    'CDO-token',\n    'CDC-token',\n    'colon-token',\n    'semicolon-token',\n    'comma-token',\n    '[-token',\n    ']-token',\n    '(-token',\n    ')-token',\n    '{-token',\n    '}-token'\n];\n\nmodule.exports = tokenNames;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDk0MDQuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOLE1BQU07QUFDTjs7QUFFQSIsInNvdXJjZXMiOlsid2VicGFjazovL2Jsb2NrYml0ZS8uL25vZGVfbW9kdWxlcy9jc3NvL25vZGVfbW9kdWxlcy9jc3MtdHJlZS9janMvdG9rZW5pemVyL25hbWVzLmNqcz9mNDIxIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuY29uc3QgdG9rZW5OYW1lcyA9IFtcbiAgICAnRU9GLXRva2VuJyxcbiAgICAnaWRlbnQtdG9rZW4nLFxuICAgICdmdW5jdGlvbi10b2tlbicsXG4gICAgJ2F0LWtleXdvcmQtdG9rZW4nLFxuICAgICdoYXNoLXRva2VuJyxcbiAgICAnc3RyaW5nLXRva2VuJyxcbiAgICAnYmFkLXN0cmluZy10b2tlbicsXG4gICAgJ3VybC10b2tlbicsXG4gICAgJ2JhZC11cmwtdG9rZW4nLFxuICAgICdkZWxpbS10b2tlbicsXG4gICAgJ251bWJlci10b2tlbicsXG4gICAgJ3BlcmNlbnRhZ2UtdG9rZW4nLFxuICAgICdkaW1lbnNpb24tdG9rZW4nLFxuICAgICd3aGl0ZXNwYWNlLXRva2VuJyxcbiAgICAnQ0RPLXRva2VuJyxcbiAgICAnQ0RDLXRva2VuJyxcbiAgICAnY29sb24tdG9rZW4nLFxuICAgICdzZW1pY29sb24tdG9rZW4nLFxuICAgICdjb21tYS10b2tlbicsXG4gICAgJ1stdG9rZW4nLFxuICAgICddLXRva2VuJyxcbiAgICAnKC10b2tlbicsXG4gICAgJyktdG9rZW4nLFxuICAgICd7LXRva2VuJyxcbiAgICAnfS10b2tlbidcbl07XG5cbm1vZHVsZS5leHBvcnRzID0gdG9rZW5OYW1lcztcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///49404\n")},78783:(__unused_webpack_module,exports)=>{"use strict";eval("\n\n// CSS Syntax Module Level 3\n// https://www.w3.org/TR/css-syntax-3/\nconst EOF = 0;                 // <EOF-token>\nconst Ident = 1;               // <ident-token>\nconst Function = 2;            // <function-token>\nconst AtKeyword = 3;           // <at-keyword-token>\nconst Hash = 4;                // <hash-token>\nconst String = 5;              // <string-token>\nconst BadString = 6;           // <bad-string-token>\nconst Url = 7;                 // <url-token>\nconst BadUrl = 8;              // <bad-url-token>\nconst Delim = 9;               // <delim-token>\nconst Number = 10;             // <number-token>\nconst Percentage = 11;         // <percentage-token>\nconst Dimension = 12;          // <dimension-token>\nconst WhiteSpace = 13;         // <whitespace-token>\nconst CDO = 14;                // <CDO-token>\nconst CDC = 15;                // <CDC-token>\nconst Colon = 16;              // <colon-token>     :\nconst Semicolon = 17;          // <semicolon-token> ;\nconst Comma = 18;              // <comma-token>     ,\nconst LeftSquareBracket = 19;  // <[-token>\nconst RightSquareBracket = 20; // <]-token>\nconst LeftParenthesis = 21;    // <(-token>\nconst RightParenthesis = 22;   // <)-token>\nconst LeftCurlyBracket = 23;   // <{-token>\nconst RightCurlyBracket = 24;  // <}-token>\nconst Comment = 25;\n\nexports.AtKeyword = AtKeyword;\nexports.BadString = BadString;\nexports.BadUrl = BadUrl;\nexports.CDC = CDC;\nexports.CDO = CDO;\nexports.Colon = Colon;\nexports.Comma = Comma;\nexports.Comment = Comment;\nexports.Delim = Delim;\nexports.Dimension = Dimension;\nexports.EOF = EOF;\nexports.Function = Function;\nexports.Hash = Hash;\nexports.Ident = Ident;\nexports.LeftCurlyBracket = LeftCurlyBracket;\nexports.LeftParenthesis = LeftParenthesis;\nexports.LeftSquareBracket = LeftSquareBracket;\nexports.Number = Number;\nexports.Percentage = Percentage;\nexports.RightCurlyBracket = RightCurlyBracket;\nexports.RightParenthesis = RightParenthesis;\nexports.RightSquareBracket = RightSquareBracket;\nexports.Semicolon = Semicolon;\nexports.String = String;\nexports.Url = Url;\nexports.WhiteSpace = WhiteSpace;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNzg3ODMuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWI7QUFDQTtBQUNBLCtCQUErQjtBQUMvQiwrQkFBK0I7QUFDL0IsK0JBQStCO0FBQy9CLCtCQUErQjtBQUMvQiwrQkFBK0I7QUFDL0IsK0JBQStCO0FBQy9CLCtCQUErQjtBQUMvQiwrQkFBK0I7QUFDL0IsK0JBQStCO0FBQy9CLCtCQUErQjtBQUMvQiwrQkFBK0I7QUFDL0IsK0JBQStCO0FBQy9CLCtCQUErQjtBQUMvQiwrQkFBK0I7QUFDL0IsK0JBQStCO0FBQy9CLCtCQUErQjtBQUMvQiwrQkFBK0I7QUFDL0IsK0JBQStCO0FBQy9CLCtCQUErQjtBQUMvQiwrQkFBK0I7QUFDL0IsK0JBQStCO0FBQy9CLCtCQUErQjtBQUMvQiwrQkFBK0I7QUFDL0IsK0JBQStCLEtBQUs7QUFDcEMsK0JBQStCLEtBQUs7QUFDcEM7O0FBRUEsaUJBQWlCO0FBQ2pCLGlCQUFpQjtBQUNqQixjQUFjO0FBQ2QsV0FBVztBQUNYLFdBQVc7QUFDWCxhQUFhO0FBQ2IsYUFBYTtBQUNiLGVBQWU7QUFDZixhQUFhO0FBQ2IsaUJBQWlCO0FBQ2pCLFdBQVc7QUFDWCxnQkFBZ0I7QUFDaEIsWUFBWTtBQUNaLGFBQWE7QUFDYix3QkFBd0I7QUFDeEIsdUJBQXVCO0FBQ3ZCLHlCQUF5QjtBQUN6QixjQUFjO0FBQ2Qsa0JBQWtCO0FBQ2xCLHlCQUF5QjtBQUN6Qix3QkFBd0I7QUFDeEIsMEJBQTBCO0FBQzFCLGlCQUFpQjtBQUNqQixjQUFjO0FBQ2QsV0FBVztBQUNYLGtCQUFrQiIsInNvdXJjZXMiOlsid2VicGFjazovL2Jsb2NrYml0ZS8uL25vZGVfbW9kdWxlcy9jc3NvL25vZGVfbW9kdWxlcy9jc3MtdHJlZS9janMvdG9rZW5pemVyL3R5cGVzLmNqcz9mNTAzIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuLy8gQ1NTIFN5bnRheCBNb2R1bGUgTGV2ZWwgM1xuLy8gaHR0cHM6Ly93d3cudzMub3JnL1RSL2Nzcy1zeW50YXgtMy9cbmNvbnN0IEVPRiA9IDA7ICAgICAgICAgICAgICAgICAvLyA8RU9GLXRva2VuPlxuY29uc3QgSWRlbnQgPSAxOyAgICAgICAgICAgICAgIC8vIDxpZGVudC10b2tlbj5cbmNvbnN0IEZ1bmN0aW9uID0gMjsgICAgICAgICAgICAvLyA8ZnVuY3Rpb24tdG9rZW4+XG5jb25zdCBBdEtleXdvcmQgPSAzOyAgICAgICAgICAgLy8gPGF0LWtleXdvcmQtdG9rZW4+XG5jb25zdCBIYXNoID0gNDsgICAgICAgICAgICAgICAgLy8gPGhhc2gtdG9rZW4+XG5jb25zdCBTdHJpbmcgPSA1OyAgICAgICAgICAgICAgLy8gPHN0cmluZy10b2tlbj5cbmNvbnN0IEJhZFN0cmluZyA9IDY7ICAgICAgICAgICAvLyA8YmFkLXN0cmluZy10b2tlbj5cbmNvbnN0IFVybCA9IDc7ICAgICAgICAgICAgICAgICAvLyA8dXJsLXRva2VuPlxuY29uc3QgQmFkVXJsID0gODsgICAgICAgICAgICAgIC8vIDxiYWQtdXJsLXRva2VuPlxuY29uc3QgRGVsaW0gPSA5OyAgICAgICAgICAgICAgIC8vIDxkZWxpbS10b2tlbj5cbmNvbnN0IE51bWJlciA9IDEwOyAgICAgICAgICAgICAvLyA8bnVtYmVyLXRva2VuPlxuY29uc3QgUGVyY2VudGFnZSA9IDExOyAgICAgICAgIC8vIDxwZXJjZW50YWdlLXRva2VuPlxuY29uc3QgRGltZW5zaW9uID0gMTI7ICAgICAgICAgIC8vIDxkaW1lbnNpb24tdG9rZW4+XG5jb25zdCBXaGl0ZVNwYWNlID0gMTM7ICAgICAgICAgLy8gPHdoaXRlc3BhY2UtdG9rZW4+XG5jb25zdCBDRE8gPSAxNDsgICAgICAgICAgICAgICAgLy8gPENETy10b2tlbj5cbmNvbnN0IENEQyA9IDE1OyAgICAgICAgICAgICAgICAvLyA8Q0RDLXRva2VuPlxuY29uc3QgQ29sb24gPSAxNjsgICAgICAgICAgICAgIC8vIDxjb2xvbi10b2tlbj4gICAgIDpcbmNvbnN0IFNlbWljb2xvbiA9IDE3OyAgICAgICAgICAvLyA8c2VtaWNvbG9uLXRva2VuPiA7XG5jb25zdCBDb21tYSA9IDE4OyAgICAgICAgICAgICAgLy8gPGNvbW1hLXRva2VuPiAgICAgLFxuY29uc3QgTGVmdFNxdWFyZUJyYWNrZXQgPSAxOTsgIC8vIDxbLXRva2VuPlxuY29uc3QgUmlnaHRTcXVhcmVCcmFja2V0ID0gMjA7IC8vIDxdLXRva2VuPlxuY29uc3QgTGVmdFBhcmVudGhlc2lzID0gMjE7ICAgIC8vIDwoLXRva2VuPlxuY29uc3QgUmlnaHRQYXJlbnRoZXNpcyA9IDIyOyAgIC8vIDwpLXRva2VuPlxuY29uc3QgTGVmdEN1cmx5QnJhY2tldCA9IDIzOyAgIC8vIDx7LXRva2VuPlxuY29uc3QgUmlnaHRDdXJseUJyYWNrZXQgPSAyNDsgIC8vIDx9LXRva2VuPlxuY29uc3QgQ29tbWVudCA9IDI1O1xuXG5leHBvcnRzLkF0S2V5d29yZCA9IEF0S2V5d29yZDtcbmV4cG9ydHMuQmFkU3RyaW5nID0gQmFkU3RyaW5nO1xuZXhwb3J0cy5CYWRVcmwgPSBCYWRVcmw7XG5leHBvcnRzLkNEQyA9IENEQztcbmV4cG9ydHMuQ0RPID0gQ0RPO1xuZXhwb3J0cy5Db2xvbiA9IENvbG9uO1xuZXhwb3J0cy5Db21tYSA9IENvbW1hO1xuZXhwb3J0cy5Db21tZW50ID0gQ29tbWVudDtcbmV4cG9ydHMuRGVsaW0gPSBEZWxpbTtcbmV4cG9ydHMuRGltZW5zaW9uID0gRGltZW5zaW9uO1xuZXhwb3J0cy5FT0YgPSBFT0Y7XG5leHBvcnRzLkZ1bmN0aW9uID0gRnVuY3Rpb247XG5leHBvcnRzLkhhc2ggPSBIYXNoO1xuZXhwb3J0cy5JZGVudCA9IElkZW50O1xuZXhwb3J0cy5MZWZ0Q3VybHlCcmFja2V0ID0gTGVmdEN1cmx5QnJhY2tldDtcbmV4cG9ydHMuTGVmdFBhcmVudGhlc2lzID0gTGVmdFBhcmVudGhlc2lzO1xuZXhwb3J0cy5MZWZ0U3F1YXJlQnJhY2tldCA9IExlZnRTcXVhcmVCcmFja2V0O1xuZXhwb3J0cy5OdW1iZXIgPSBOdW1iZXI7XG5leHBvcnRzLlBlcmNlbnRhZ2UgPSBQZXJjZW50YWdlO1xuZXhwb3J0cy5SaWdodEN1cmx5QnJhY2tldCA9IFJpZ2h0Q3VybHlCcmFja2V0O1xuZXhwb3J0cy5SaWdodFBhcmVudGhlc2lzID0gUmlnaHRQYXJlbnRoZXNpcztcbmV4cG9ydHMuUmlnaHRTcXVhcmVCcmFja2V0ID0gUmlnaHRTcXVhcmVCcmFja2V0O1xuZXhwb3J0cy5TZW1pY29sb24gPSBTZW1pY29sb247XG5leHBvcnRzLlN0cmluZyA9IFN0cmluZztcbmV4cG9ydHMuVXJsID0gVXJsO1xuZXhwb3J0cy5XaGl0ZVNwYWNlID0gV2hpdGVTcGFjZTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///78783\n")},79955:(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";eval('\n\nconst charCodeDefinitions = __webpack_require__(87351);\n\nfunction getCharCode(source, offset) {\n    return offset < source.length ? source.charCodeAt(offset) : 0;\n}\n\nfunction getNewlineLength(source, offset, code) {\n    if (code === 13 /* \\r */ && getCharCode(source, offset + 1) === 10 /* \\n */) {\n        return 2;\n    }\n\n    return 1;\n}\n\nfunction cmpChar(testStr, offset, referenceCode) {\n    let code = testStr.charCodeAt(offset);\n\n    // code.toLowerCase() for A..Z\n    if (charCodeDefinitions.isUppercaseLetter(code)) {\n        code = code | 32;\n    }\n\n    return code === referenceCode;\n}\n\nfunction cmpStr(testStr, start, end, referenceStr) {\n    if (end - start !== referenceStr.length) {\n        return false;\n    }\n\n    if (start < 0 || end > testStr.length) {\n        return false;\n    }\n\n    for (let i = start; i < end; i++) {\n        const referenceCode = referenceStr.charCodeAt(i - start);\n        let testCode = testStr.charCodeAt(i);\n\n        // testCode.toLowerCase() for A..Z\n        if (charCodeDefinitions.isUppercaseLetter(testCode)) {\n            testCode = testCode | 32;\n        }\n\n        if (testCode !== referenceCode) {\n            return false;\n        }\n    }\n\n    return true;\n}\n\nfunction findWhiteSpaceStart(source, offset) {\n    for (; offset >= 0; offset--) {\n        if (!charCodeDefinitions.isWhiteSpace(source.charCodeAt(offset))) {\n            break;\n        }\n    }\n\n    return offset + 1;\n}\n\nfunction findWhiteSpaceEnd(source, offset) {\n    for (; offset < source.length; offset++) {\n        if (!charCodeDefinitions.isWhiteSpace(source.charCodeAt(offset))) {\n            break;\n        }\n    }\n\n    return offset;\n}\n\nfunction findDecimalNumberEnd(source, offset) {\n    for (; offset < source.length; offset++) {\n        if (!charCodeDefinitions.isDigit(source.charCodeAt(offset))) {\n            break;\n        }\n    }\n\n    return offset;\n}\n\n// § 4.3.7. Consume an escaped code point\nfunction consumeEscaped(source, offset) {\n    // It assumes that the U+005C REVERSE SOLIDUS (\\) has already been consumed and\n    // that the next input code point has already been verified to be part of a valid escape.\n    offset += 2;\n\n    // hex digit\n    if (charCodeDefinitions.isHexDigit(getCharCode(source, offset - 1))) {\n        // Consume as many hex digits as possible, but no more than 5.\n        // Note that this means 1-6 hex digits have been consumed in total.\n        for (const maxOffset = Math.min(source.length, offset + 5); offset < maxOffset; offset++) {\n            if (!charCodeDefinitions.isHexDigit(getCharCode(source, offset))) {\n                break;\n            }\n        }\n\n        // If the next input code point is whitespace, consume it as well.\n        const code = getCharCode(source, offset);\n        if (charCodeDefinitions.isWhiteSpace(code)) {\n            offset += getNewlineLength(source, offset, code);\n        }\n    }\n\n    return offset;\n}\n\n// §4.3.11. Consume a name\n// Note: This algorithm does not do the verification of the first few code points that are necessary\n// to ensure the returned code points would constitute an <ident-token>. If that is the intended use,\n// ensure that the stream starts with an identifier before calling this algorithm.\nfunction consumeName(source, offset) {\n    // Let result initially be an empty string.\n    // Repeatedly consume the next input code point from the stream:\n    for (; offset < source.length; offset++) {\n        const code = source.charCodeAt(offset);\n\n        // name code point\n        if (charCodeDefinitions.isName(code)) {\n            // Append the code point to result.\n            continue;\n        }\n\n        // the stream starts with a valid escape\n        if (charCodeDefinitions.isValidEscape(code, getCharCode(source, offset + 1))) {\n            // Consume an escaped code point. Append the returned code point to result.\n            offset = consumeEscaped(source, offset) - 1;\n            continue;\n        }\n\n        // anything else\n        // Reconsume the current input code point. Return result.\n        break;\n    }\n\n    return offset;\n}\n\n// §4.3.12. Consume a number\nfunction consumeNumber(source, offset) {\n    let code = source.charCodeAt(offset);\n\n    // 2. If the next input code point is U+002B PLUS SIGN (+) or U+002D HYPHEN-MINUS (-),\n    // consume it and append it to repr.\n    if (code === 0x002B || code === 0x002D) {\n        code = source.charCodeAt(offset += 1);\n    }\n\n    // 3. While the next input code point is a digit, consume it and append it to repr.\n    if (charCodeDefinitions.isDigit(code)) {\n        offset = findDecimalNumberEnd(source, offset + 1);\n        code = source.charCodeAt(offset);\n    }\n\n    // 4. If the next 2 input code points are U+002E FULL STOP (.) followed by a digit, then:\n    if (code === 0x002E && charCodeDefinitions.isDigit(source.charCodeAt(offset + 1))) {\n        // 4.1 Consume them.\n        // 4.2 Append them to repr.\n        offset += 2;\n\n        // 4.3 Set type to "number".\n        // TODO\n\n        // 4.4 While the next input code point is a digit, consume it and append it to repr.\n\n        offset = findDecimalNumberEnd(source, offset);\n    }\n\n    // 5. If the next 2 or 3 input code points are U+0045 LATIN CAPITAL LETTER E (E)\n    // or U+0065 LATIN SMALL LETTER E (e), ... , followed by a digit, then:\n    if (cmpChar(source, offset, 101 /* e */)) {\n        let sign = 0;\n        code = source.charCodeAt(offset + 1);\n\n        // ... optionally followed by U+002D HYPHEN-MINUS (-) or U+002B PLUS SIGN (+) ...\n        if (code === 0x002D || code === 0x002B) {\n            sign = 1;\n            code = source.charCodeAt(offset + 2);\n        }\n\n        // ... followed by a digit\n        if (charCodeDefinitions.isDigit(code)) {\n            // 5.1 Consume them.\n            // 5.2 Append them to repr.\n\n            // 5.3 Set type to "number".\n            // TODO\n\n            // 5.4 While the next input code point is a digit, consume it and append it to repr.\n            offset = findDecimalNumberEnd(source, offset + 1 + sign + 1);\n        }\n    }\n\n    return offset;\n}\n\n// § 4.3.14. Consume the remnants of a bad url\n// ... its sole use is to consume enough of the input stream to reach a recovery point\n// where normal tokenizing can resume.\nfunction consumeBadUrlRemnants(source, offset) {\n    // Repeatedly consume the next input code point from the stream:\n    for (; offset < source.length; offset++) {\n        const code = source.charCodeAt(offset);\n\n        // U+0029 RIGHT PARENTHESIS ())\n        // EOF\n        if (code === 0x0029) {\n            // Return.\n            offset++;\n            break;\n        }\n\n        if (charCodeDefinitions.isValidEscape(code, getCharCode(source, offset + 1))) {\n            // Consume an escaped code point.\n            // Note: This allows an escaped right parenthesis ("\\)") to be encountered\n            // without ending the <bad-url-token>. This is otherwise identical to\n            // the "anything else" clause.\n            offset = consumeEscaped(source, offset);\n        }\n    }\n\n    return offset;\n}\n\n// § 4.3.7. Consume an escaped code point\n// Note: This algorithm assumes that escaped is valid without leading U+005C REVERSE SOLIDUS (\\)\nfunction decodeEscaped(escaped) {\n    // Single char escaped that\'s not a hex digit\n    if (escaped.length === 1 && !charCodeDefinitions.isHexDigit(escaped.charCodeAt(0))) {\n        return escaped[0];\n    }\n\n    // Interpret the hex digits as a hexadecimal number.\n    let code = parseInt(escaped, 16);\n\n    if (\n        (code === 0) ||                       // If this number is zero,\n        (code >= 0xD800 && code <= 0xDFFF) || // or is for a surrogate,\n        (code > 0x10FFFF)                     // or is greater than the maximum allowed code point\n    ) {\n        // ... return U+FFFD REPLACEMENT CHARACTER\n        code = 0xFFFD;\n    }\n\n    // Otherwise, return the code point with that value.\n    return String.fromCodePoint(code);\n}\n\nexports.cmpChar = cmpChar;\nexports.cmpStr = cmpStr;\nexports.consumeBadUrlRemnants = consumeBadUrlRemnants;\nexports.consumeEscaped = consumeEscaped;\nexports.consumeName = consumeName;\nexports.consumeNumber = consumeNumber;\nexports.decodeEscaped = decodeEscaped;\nexports.findDecimalNumberEnd = findDecimalNumberEnd;\nexports.findWhiteSpaceEnd = findWhiteSpaceEnd;\nexports.findWhiteSpaceStart = findWhiteSpaceStart;\nexports.getNewlineLength = getNewlineLength;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///79955\n')},28572:(__unused_webpack_module,exports)=>{"use strict";eval("\n\n//\n//                              list\n//                            ┌──────┐\n//             ┌──────────────┼─head │\n//             │              │ tail─┼──────────────┐\n//             │              └──────┘              │\n//             ▼                                    ▼\n//            item        item        item        item\n//          ┌──────┐    ┌──────┐    ┌──────┐    ┌──────┐\n//  null ◀──┼─prev │◀───┼─prev │◀───┼─prev │◀───┼─prev │\n//          │ next─┼───▶│ next─┼───▶│ next─┼───▶│ next─┼──▶ null\n//          ├──────┤    ├──────┤    ├──────┤    ├──────┤\n//          │ data │    │ data │    │ data │    │ data │\n//          └──────┘    └──────┘    └──────┘    └──────┘\n//\n\nlet releasedCursors = null;\n\nclass List {\n    static createItem(data) {\n        return {\n            prev: null,\n            next: null,\n            data\n        };\n    }\n\n    constructor() {\n        this.head = null;\n        this.tail = null;\n        this.cursor = null;\n    }\n    createItem(data) {\n        return List.createItem(data);\n    }\n\n    // cursor helpers\n    allocateCursor(prev, next) {\n        let cursor;\n\n        if (releasedCursors !== null) {\n            cursor = releasedCursors;\n            releasedCursors = releasedCursors.cursor;\n            cursor.prev = prev;\n            cursor.next = next;\n            cursor.cursor = this.cursor;\n        } else {\n            cursor = {\n                prev,\n                next,\n                cursor: this.cursor\n            };\n        }\n\n        this.cursor = cursor;\n\n        return cursor;\n    }\n    releaseCursor() {\n        const { cursor } = this;\n\n        this.cursor = cursor.cursor;\n        cursor.prev = null;\n        cursor.next = null;\n        cursor.cursor = releasedCursors;\n        releasedCursors = cursor;\n    }\n    updateCursors(prevOld, prevNew, nextOld, nextNew) {\n        let { cursor } = this;\n\n        while (cursor !== null) {\n            if (cursor.prev === prevOld) {\n                cursor.prev = prevNew;\n            }\n\n            if (cursor.next === nextOld) {\n                cursor.next = nextNew;\n            }\n\n            cursor = cursor.cursor;\n        }\n    }\n    *[Symbol.iterator]() {\n        for (let cursor = this.head; cursor !== null; cursor = cursor.next) {\n            yield cursor.data;\n        }\n    }\n\n    // getters\n    get size() {\n        let size = 0;\n\n        for (let cursor = this.head; cursor !== null; cursor = cursor.next) {\n            size++;\n        }\n\n        return size;\n    }\n    get isEmpty() {\n        return this.head === null;\n    }\n    get first() {\n        return this.head && this.head.data;\n    }\n    get last() {\n        return this.tail && this.tail.data;\n    }\n\n    // convertors\n    fromArray(array) {\n        let cursor = null;\n        this.head = null;\n\n        for (let data of array) {\n            const item = List.createItem(data);\n\n            if (cursor !== null) {\n                cursor.next = item;\n            } else {\n                this.head = item;\n            }\n\n            item.prev = cursor;\n            cursor = item;\n        }\n\n        this.tail = cursor;\n        return this;\n    }\n    toArray() {\n        return [...this];\n    }\n    toJSON() {\n        return [...this];\n    }\n\n    // array-like methods\n    forEach(fn, thisArg = this) {\n        // push cursor\n        const cursor = this.allocateCursor(null, this.head);\n\n        while (cursor.next !== null) {\n            const item = cursor.next;\n            cursor.next = item.next;\n            fn.call(thisArg, item.data, item, this);\n        }\n\n        // pop cursor\n        this.releaseCursor();\n    }\n    forEachRight(fn, thisArg = this) {\n        // push cursor\n        const cursor = this.allocateCursor(this.tail, null);\n\n        while (cursor.prev !== null) {\n            const item = cursor.prev;\n            cursor.prev = item.prev;\n            fn.call(thisArg, item.data, item, this);\n        }\n\n        // pop cursor\n        this.releaseCursor();\n    }\n    reduce(fn, initialValue, thisArg = this) {\n        // push cursor\n        let cursor = this.allocateCursor(null, this.head);\n        let acc = initialValue;\n        let item;\n\n        while (cursor.next !== null) {\n            item = cursor.next;\n            cursor.next = item.next;\n\n            acc = fn.call(thisArg, acc, item.data, item, this);\n        }\n\n        // pop cursor\n        this.releaseCursor();\n\n        return acc;\n    }\n    reduceRight(fn, initialValue, thisArg = this) {\n        // push cursor\n        let cursor = this.allocateCursor(this.tail, null);\n        let acc = initialValue;\n        let item;\n\n        while (cursor.prev !== null) {\n            item = cursor.prev;\n            cursor.prev = item.prev;\n\n            acc = fn.call(thisArg, acc, item.data, item, this);\n        }\n\n        // pop cursor\n        this.releaseCursor();\n\n        return acc;\n    }\n    some(fn, thisArg = this) {\n        for (let cursor = this.head; cursor !== null; cursor = cursor.next) {\n            if (fn.call(thisArg, cursor.data, cursor, this)) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n    map(fn, thisArg = this) {\n        const result = new List();\n\n        for (let cursor = this.head; cursor !== null; cursor = cursor.next) {\n            result.appendData(fn.call(thisArg, cursor.data, cursor, this));\n        }\n\n        return result;\n    }\n    filter(fn, thisArg = this) {\n        const result = new List();\n\n        for (let cursor = this.head; cursor !== null; cursor = cursor.next) {\n            if (fn.call(thisArg, cursor.data, cursor, this)) {\n                result.appendData(cursor.data);\n            }\n        }\n\n        return result;\n    }\n\n    nextUntil(start, fn, thisArg = this) {\n        if (start === null) {\n            return;\n        }\n\n        // push cursor\n        const cursor = this.allocateCursor(null, start);\n\n        while (cursor.next !== null) {\n            const item = cursor.next;\n            cursor.next = item.next;\n            if (fn.call(thisArg, item.data, item, this)) {\n                break;\n            }\n        }\n\n        // pop cursor\n        this.releaseCursor();\n    }\n    prevUntil(start, fn, thisArg = this) {\n        if (start === null) {\n            return;\n        }\n\n        // push cursor\n        const cursor = this.allocateCursor(start, null);\n\n        while (cursor.prev !== null) {\n            const item = cursor.prev;\n            cursor.prev = item.prev;\n            if (fn.call(thisArg, item.data, item, this)) {\n                break;\n            }\n        }\n\n        // pop cursor\n        this.releaseCursor();\n    }\n\n    // mutation\n    clear() {\n        this.head = null;\n        this.tail = null;\n    }\n    copy() {\n        const result = new List();\n\n        for (let data of this) {\n            result.appendData(data);\n        }\n\n        return result;\n    }\n    prepend(item) {\n        //      head\n        //    ^\n        // item\n        this.updateCursors(null, item, this.head, item);\n\n        // insert to the beginning of the list\n        if (this.head !== null) {\n            // new item <- first item\n            this.head.prev = item;\n            // new item -> first item\n            item.next = this.head;\n        } else {\n            // if list has no head, then it also has no tail\n            // in this case tail points to the new item\n            this.tail = item;\n        }\n\n        // head always points to new item\n        this.head = item;\n        return this;\n    }\n    prependData(data) {\n        return this.prepend(List.createItem(data));\n    }\n    append(item) {\n        return this.insert(item);\n    }\n    appendData(data) {\n        return this.insert(List.createItem(data));\n    }\n    insert(item, before = null) {\n        if (before !== null) {\n            // prev   before\n            //      ^\n            //     item\n            this.updateCursors(before.prev, item, before, item);\n\n            if (before.prev === null) {\n                // insert to the beginning of list\n                if (this.head !== before) {\n                    throw new Error('before doesn\\'t belong to list');\n                }\n                // since head points to before therefore list doesn't empty\n                // no need to check tail\n                this.head = item;\n                before.prev = item;\n                item.next = before;\n                this.updateCursors(null, item);\n            } else {\n                // insert between two items\n                before.prev.next = item;\n                item.prev = before.prev;\n                before.prev = item;\n                item.next = before;\n            }\n        } else {\n            // tail\n            //      ^\n            //      item\n            this.updateCursors(this.tail, item, null, item);\n\n            // insert to the ending of the list\n            if (this.tail !== null) {\n                // last item -> new item\n                this.tail.next = item;\n                // last item <- new item\n                item.prev = this.tail;\n            } else {\n                // if list has no tail, then it also has no head\n                // in this case head points to new item\n                this.head = item;\n            }\n\n            // tail always points to new item\n            this.tail = item;\n        }\n\n        return this;\n    }\n    insertData(data, before) {\n        return this.insert(List.createItem(data), before);\n    }\n    remove(item) {\n        //      item\n        //       ^\n        // prev     next\n        this.updateCursors(item, item.prev, item, item.next);\n\n        if (item.prev !== null) {\n            item.prev.next = item.next;\n        } else {\n            if (this.head !== item) {\n                throw new Error('item doesn\\'t belong to list');\n            }\n\n            this.head = item.next;\n        }\n\n        if (item.next !== null) {\n            item.next.prev = item.prev;\n        } else {\n            if (this.tail !== item) {\n                throw new Error('item doesn\\'t belong to list');\n            }\n\n            this.tail = item.prev;\n        }\n\n        item.prev = null;\n        item.next = null;\n\n        return item;\n    }\n    push(data) {\n        this.insert(List.createItem(data));\n    }\n    pop() {\n        return this.tail !== null ? this.remove(this.tail) : null;\n    }\n    unshift(data) {\n        this.prepend(List.createItem(data));\n    }\n    shift() {\n        return this.head !== null ? this.remove(this.head) : null;\n    }\n    prependList(list) {\n        return this.insertList(list, this.head);\n    }\n    appendList(list) {\n        return this.insertList(list);\n    }\n    insertList(list, before) {\n        // ignore empty lists\n        if (list.head === null) {\n            return this;\n        }\n\n        if (before !== undefined && before !== null) {\n            this.updateCursors(before.prev, list.tail, before, list.head);\n\n            // insert in the middle of dist list\n            if (before.prev !== null) {\n                // before.prev <-> list.head\n                before.prev.next = list.head;\n                list.head.prev = before.prev;\n            } else {\n                this.head = list.head;\n            }\n\n            before.prev = list.tail;\n            list.tail.next = before;\n        } else {\n            this.updateCursors(this.tail, list.tail, null, list.head);\n\n            // insert to end of the list\n            if (this.tail !== null) {\n                // if destination list has a tail, then it also has a head,\n                // but head doesn't change\n                // dest tail -> source head\n                this.tail.next = list.head;\n                // dest tail <- source head\n                list.head.prev = this.tail;\n            } else {\n                // if list has no a tail, then it also has no a head\n                // in this case points head to new item\n                this.head = list.head;\n            }\n\n            // tail always start point to new item\n            this.tail = list.tail;\n        }\n\n        list.head = null;\n        list.tail = null;\n        return this;\n    }\n    replace(oldItem, newItemOrList) {\n        if ('head' in newItemOrList) {\n            this.insertList(newItemOrList, oldItem);\n        } else {\n            this.insert(newItemOrList, oldItem);\n        }\n\n        this.remove(oldItem);\n    }\n}\n\nexports.List = List;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///28572\n")},55363:(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";eval("\n\nconst List = __webpack_require__(28572);\n\nfunction clone(node) {\n    const result = {};\n\n    for (const key in node) {\n        let value = node[key];\n\n        if (value) {\n            if (Array.isArray(value) || value instanceof List.List) {\n                value = value.map(clone);\n            } else if (value.constructor === Object) {\n                value = clone(value);\n            }\n        }\n\n        result[key] = value;\n    }\n\n    return result;\n}\n\nexports.clone = clone;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNTUzNjMuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsYUFBYSxtQkFBTyxDQUFDLEtBQVk7O0FBRWpDO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxjQUFjO0FBQ2Q7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQSxhQUFhIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYmxvY2tiaXRlLy4vbm9kZV9tb2R1bGVzL2Nzc28vbm9kZV9tb2R1bGVzL2Nzcy10cmVlL2Nqcy91dGlscy9jbG9uZS5janM/NWI2YiJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmNvbnN0IExpc3QgPSByZXF1aXJlKCcuL0xpc3QuY2pzJyk7XG5cbmZ1bmN0aW9uIGNsb25lKG5vZGUpIHtcbiAgICBjb25zdCByZXN1bHQgPSB7fTtcblxuICAgIGZvciAoY29uc3Qga2V5IGluIG5vZGUpIHtcbiAgICAgICAgbGV0IHZhbHVlID0gbm9kZVtrZXldO1xuXG4gICAgICAgIGlmICh2YWx1ZSkge1xuICAgICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkodmFsdWUpIHx8IHZhbHVlIGluc3RhbmNlb2YgTGlzdC5MaXN0KSB7XG4gICAgICAgICAgICAgICAgdmFsdWUgPSB2YWx1ZS5tYXAoY2xvbmUpO1xuICAgICAgICAgICAgfSBlbHNlIGlmICh2YWx1ZS5jb25zdHJ1Y3RvciA9PT0gT2JqZWN0KSB7XG4gICAgICAgICAgICAgICAgdmFsdWUgPSBjbG9uZSh2YWx1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXN1bHRba2V5XSA9IHZhbHVlO1xuICAgIH1cblxuICAgIHJldHVybiByZXN1bHQ7XG59XG5cbmV4cG9ydHMuY2xvbmUgPSBjbG9uZTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///55363\n")},79161:(__unused_webpack_module,exports)=>{"use strict";eval("\n\nfunction createCustomError(name, message) {\n    // use Object.create(), because some VMs prevent setting line/column otherwise\n    // (iOS Safari 10 even throws an exception)\n    const error = Object.create(SyntaxError.prototype);\n    const errorStack = new Error();\n\n    return Object.assign(error, {\n        name,\n        message,\n        get stack() {\n            return (errorStack.stack || '').replace(/^(.+\\n){1,3}/, `${name}: ${message}\\n`);\n        }\n    });\n}\n\nexports.createCustomError = createCustomError;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNzkxNjEuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWI7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZEQUE2RCxJQUFJLE1BQU0sS0FBSyxJQUFJLFFBQVE7QUFDeEY7QUFDQSxLQUFLO0FBQ0w7O0FBRUEseUJBQXlCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYmxvY2tiaXRlLy4vbm9kZV9tb2R1bGVzL2Nzc28vbm9kZV9tb2R1bGVzL2Nzcy10cmVlL2Nqcy91dGlscy9jcmVhdGUtY3VzdG9tLWVycm9yLmNqcz9lMWYzIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuZnVuY3Rpb24gY3JlYXRlQ3VzdG9tRXJyb3IobmFtZSwgbWVzc2FnZSkge1xuICAgIC8vIHVzZSBPYmplY3QuY3JlYXRlKCksIGJlY2F1c2Ugc29tZSBWTXMgcHJldmVudCBzZXR0aW5nIGxpbmUvY29sdW1uIG90aGVyd2lzZVxuICAgIC8vIChpT1MgU2FmYXJpIDEwIGV2ZW4gdGhyb3dzIGFuIGV4Y2VwdGlvbilcbiAgICBjb25zdCBlcnJvciA9IE9iamVjdC5jcmVhdGUoU3ludGF4RXJyb3IucHJvdG90eXBlKTtcbiAgICBjb25zdCBlcnJvclN0YWNrID0gbmV3IEVycm9yKCk7XG5cbiAgICByZXR1cm4gT2JqZWN0LmFzc2lnbihlcnJvciwge1xuICAgICAgICBuYW1lLFxuICAgICAgICBtZXNzYWdlLFxuICAgICAgICBnZXQgc3RhY2soKSB7XG4gICAgICAgICAgICByZXR1cm4gKGVycm9yU3RhY2suc3RhY2sgfHwgJycpLnJlcGxhY2UoL14oLitcXG4pezEsM30vLCBgJHtuYW1lfTogJHttZXNzYWdlfVxcbmApO1xuICAgICAgICB9XG4gICAgfSk7XG59XG5cbmV4cG9ydHMuY3JlYXRlQ3VzdG9tRXJyb3IgPSBjcmVhdGVDdXN0b21FcnJvcjtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///79161\n")},4922:(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";eval("\n\nconst charCodeDefinitions = __webpack_require__(87351);\nconst utils = __webpack_require__(79955);\n\nconst REVERSE_SOLIDUS = 0x005c; // U+005C REVERSE SOLIDUS (\\)\n\nfunction decode(str) {\n    const end = str.length - 1;\n    let decoded = '';\n\n    for (let i = 0; i < str.length; i++) {\n        let code = str.charCodeAt(i);\n\n        if (code === REVERSE_SOLIDUS) {\n            // special case at the ending\n            if (i === end) {\n                // if the next input code point is EOF, do nothing\n                break;\n            }\n\n            code = str.charCodeAt(++i);\n\n            // consume escaped\n            if (charCodeDefinitions.isValidEscape(REVERSE_SOLIDUS, code)) {\n                const escapeStart = i - 1;\n                const escapeEnd = utils.consumeEscaped(str, escapeStart);\n\n                i = escapeEnd - 1;\n                decoded += utils.decodeEscaped(str.substring(escapeStart + 1, escapeEnd));\n            } else {\n                // \\r\\n\n                if (code === 0x000d && str.charCodeAt(i + 1) === 0x000a) {\n                    i++;\n                }\n            }\n        } else {\n            decoded += str[i];\n        }\n    }\n\n    return decoded;\n}\n\n// https://drafts.csswg.org/cssom/#serialize-an-identifier\n// § 2.1. Common Serializing Idioms\nfunction encode(str) {\n    let encoded = '';\n\n    // If the character is the first character and is a \"-\" (U+002D),\n    // and there is no second character, then the escaped character.\n    // Note: That's means a single dash string \"-\" return as escaped dash,\n    // so move the condition out of the main loop\n    if (str.length === 1 && str.charCodeAt(0) === 0x002D) {\n        return '\\\\-';\n    }\n\n    // To serialize an identifier means to create a string represented\n    // by the concatenation of, for each character of the identifier:\n    for (let i = 0; i < str.length; i++) {\n        const code = str.charCodeAt(i);\n\n        // If the character is NULL (U+0000), then the REPLACEMENT CHARACTER (U+FFFD).\n        if (code === 0x0000) {\n            encoded += '\\uFFFD';\n            continue;\n        }\n\n        if (\n            // If the character is in the range [\\1-\\1f] (U+0001 to U+001F) or is U+007F ...\n            // Note: Do not compare with 0x0001 since 0x0000 is precessed before\n            code <= 0x001F || code === 0x007F ||\n            // [or] ... is in the range [0-9] (U+0030 to U+0039),\n            (code >= 0x0030 && code <= 0x0039 && (\n                // If the character is the first character ...\n                i === 0 ||\n                // If the character is the second character ... and the first character is a \"-\" (U+002D)\n                i === 1 && str.charCodeAt(0) === 0x002D\n            ))\n        ) {\n            // ... then the character escaped as code point.\n            encoded += '\\\\' + code.toString(16) + ' ';\n            continue;\n        }\n\n        // If the character is not handled by one of the above rules and is greater\n        // than or equal to U+0080, is \"-\" (U+002D) or \"_\" (U+005F), or is in one\n        // of the ranges [0-9] (U+0030 to U+0039), [A-Z] (U+0041 to U+005A),\n        // or \\[a-z] (U+0061 to U+007A), then the character itself.\n        if (charCodeDefinitions.isName(code)) {\n            encoded += str.charAt(i);\n        } else {\n            // Otherwise, the escaped character.\n            encoded += '\\\\' + str.charAt(i);\n        }\n    }\n\n    return encoded;\n}\n\nexports.decode = decode;\nexports.encode = encode;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDkyMi5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYiw0QkFBNEIsbUJBQU8sQ0FBQyxLQUF3QztBQUM1RSxjQUFjLG1CQUFPLENBQUMsS0FBd0I7O0FBRTlDLGdDQUFnQzs7QUFFaEM7QUFDQTtBQUNBOztBQUVBLG9CQUFvQixnQkFBZ0I7QUFDcEM7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxjQUFjO0FBQ2Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0Esb0JBQW9CLGdCQUFnQjtBQUNwQzs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBLGNBQWM7QUFDZCxjQUFjIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYmxvY2tiaXRlLy4vbm9kZV9tb2R1bGVzL2Nzc28vbm9kZV9tb2R1bGVzL2Nzcy10cmVlL2Nqcy91dGlscy9pZGVudC5janM/N2IwNCJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmNvbnN0IGNoYXJDb2RlRGVmaW5pdGlvbnMgPSByZXF1aXJlKCcuLi90b2tlbml6ZXIvY2hhci1jb2RlLWRlZmluaXRpb25zLmNqcycpO1xuY29uc3QgdXRpbHMgPSByZXF1aXJlKCcuLi90b2tlbml6ZXIvdXRpbHMuY2pzJyk7XG5cbmNvbnN0IFJFVkVSU0VfU09MSURVUyA9IDB4MDA1YzsgLy8gVSswMDVDIFJFVkVSU0UgU09MSURVUyAoXFwpXG5cbmZ1bmN0aW9uIGRlY29kZShzdHIpIHtcbiAgICBjb25zdCBlbmQgPSBzdHIubGVuZ3RoIC0gMTtcbiAgICBsZXQgZGVjb2RlZCA9ICcnO1xuXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzdHIubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgbGV0IGNvZGUgPSBzdHIuY2hhckNvZGVBdChpKTtcblxuICAgICAgICBpZiAoY29kZSA9PT0gUkVWRVJTRV9TT0xJRFVTKSB7XG4gICAgICAgICAgICAvLyBzcGVjaWFsIGNhc2UgYXQgdGhlIGVuZGluZ1xuICAgICAgICAgICAgaWYgKGkgPT09IGVuZCkge1xuICAgICAgICAgICAgICAgIC8vIGlmIHRoZSBuZXh0IGlucHV0IGNvZGUgcG9pbnQgaXMgRU9GLCBkbyBub3RoaW5nXG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGNvZGUgPSBzdHIuY2hhckNvZGVBdCgrK2kpO1xuXG4gICAgICAgICAgICAvLyBjb25zdW1lIGVzY2FwZWRcbiAgICAgICAgICAgIGlmIChjaGFyQ29kZURlZmluaXRpb25zLmlzVmFsaWRFc2NhcGUoUkVWRVJTRV9TT0xJRFVTLCBjb2RlKSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGVzY2FwZVN0YXJ0ID0gaSAtIDE7XG4gICAgICAgICAgICAgICAgY29uc3QgZXNjYXBlRW5kID0gdXRpbHMuY29uc3VtZUVzY2FwZWQoc3RyLCBlc2NhcGVTdGFydCk7XG5cbiAgICAgICAgICAgICAgICBpID0gZXNjYXBlRW5kIC0gMTtcbiAgICAgICAgICAgICAgICBkZWNvZGVkICs9IHV0aWxzLmRlY29kZUVzY2FwZWQoc3RyLnN1YnN0cmluZyhlc2NhcGVTdGFydCArIDEsIGVzY2FwZUVuZCkpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAvLyBcXHJcXG5cbiAgICAgICAgICAgICAgICBpZiAoY29kZSA9PT0gMHgwMDBkICYmIHN0ci5jaGFyQ29kZUF0KGkgKyAxKSA9PT0gMHgwMDBhKSB7XG4gICAgICAgICAgICAgICAgICAgIGkrKztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBkZWNvZGVkICs9IHN0cltpXTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBkZWNvZGVkO1xufVxuXG4vLyBodHRwczovL2RyYWZ0cy5jc3N3Zy5vcmcvY3Nzb20vI3NlcmlhbGl6ZS1hbi1pZGVudGlmaWVyXG4vLyDCpyAyLjEuIENvbW1vbiBTZXJpYWxpemluZyBJZGlvbXNcbmZ1bmN0aW9uIGVuY29kZShzdHIpIHtcbiAgICBsZXQgZW5jb2RlZCA9ICcnO1xuXG4gICAgLy8gSWYgdGhlIGNoYXJhY3RlciBpcyB0aGUgZmlyc3QgY2hhcmFjdGVyIGFuZCBpcyBhIFwiLVwiIChVKzAwMkQpLFxuICAgIC8vIGFuZCB0aGVyZSBpcyBubyBzZWNvbmQgY2hhcmFjdGVyLCB0aGVuIHRoZSBlc2NhcGVkIGNoYXJhY3Rlci5cbiAgICAvLyBOb3RlOiBUaGF0J3MgbWVhbnMgYSBzaW5nbGUgZGFzaCBzdHJpbmcgXCItXCIgcmV0dXJuIGFzIGVzY2FwZWQgZGFzaCxcbiAgICAvLyBzbyBtb3ZlIHRoZSBjb25kaXRpb24gb3V0IG9mIHRoZSBtYWluIGxvb3BcbiAgICBpZiAoc3RyLmxlbmd0aCA9PT0gMSAmJiBzdHIuY2hhckNvZGVBdCgwKSA9PT0gMHgwMDJEKSB7XG4gICAgICAgIHJldHVybiAnXFxcXC0nO1xuICAgIH1cblxuICAgIC8vIFRvIHNlcmlhbGl6ZSBhbiBpZGVudGlmaWVyIG1lYW5zIHRvIGNyZWF0ZSBhIHN0cmluZyByZXByZXNlbnRlZFxuICAgIC8vIGJ5IHRoZSBjb25jYXRlbmF0aW9uIG9mLCBmb3IgZWFjaCBjaGFyYWN0ZXIgb2YgdGhlIGlkZW50aWZpZXI6XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzdHIubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgY29uc3QgY29kZSA9IHN0ci5jaGFyQ29kZUF0KGkpO1xuXG4gICAgICAgIC8vIElmIHRoZSBjaGFyYWN0ZXIgaXMgTlVMTCAoVSswMDAwKSwgdGhlbiB0aGUgUkVQTEFDRU1FTlQgQ0hBUkFDVEVSIChVK0ZGRkQpLlxuICAgICAgICBpZiAoY29kZSA9PT0gMHgwMDAwKSB7XG4gICAgICAgICAgICBlbmNvZGVkICs9ICdcXHVGRkZEJztcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKFxuICAgICAgICAgICAgLy8gSWYgdGhlIGNoYXJhY3RlciBpcyBpbiB0aGUgcmFuZ2UgW1xcMS1cXDFmXSAoVSswMDAxIHRvIFUrMDAxRikgb3IgaXMgVSswMDdGIC4uLlxuICAgICAgICAgICAgLy8gTm90ZTogRG8gbm90IGNvbXBhcmUgd2l0aCAweDAwMDEgc2luY2UgMHgwMDAwIGlzIHByZWNlc3NlZCBiZWZvcmVcbiAgICAgICAgICAgIGNvZGUgPD0gMHgwMDFGIHx8IGNvZGUgPT09IDB4MDA3RiB8fFxuICAgICAgICAgICAgLy8gW29yXSAuLi4gaXMgaW4gdGhlIHJhbmdlIFswLTldIChVKzAwMzAgdG8gVSswMDM5KSxcbiAgICAgICAgICAgIChjb2RlID49IDB4MDAzMCAmJiBjb2RlIDw9IDB4MDAzOSAmJiAoXG4gICAgICAgICAgICAgICAgLy8gSWYgdGhlIGNoYXJhY3RlciBpcyB0aGUgZmlyc3QgY2hhcmFjdGVyIC4uLlxuICAgICAgICAgICAgICAgIGkgPT09IDAgfHxcbiAgICAgICAgICAgICAgICAvLyBJZiB0aGUgY2hhcmFjdGVyIGlzIHRoZSBzZWNvbmQgY2hhcmFjdGVyIC4uLiBhbmQgdGhlIGZpcnN0IGNoYXJhY3RlciBpcyBhIFwiLVwiIChVKzAwMkQpXG4gICAgICAgICAgICAgICAgaSA9PT0gMSAmJiBzdHIuY2hhckNvZGVBdCgwKSA9PT0gMHgwMDJEXG4gICAgICAgICAgICApKVxuICAgICAgICApIHtcbiAgICAgICAgICAgIC8vIC4uLiB0aGVuIHRoZSBjaGFyYWN0ZXIgZXNjYXBlZCBhcyBjb2RlIHBvaW50LlxuICAgICAgICAgICAgZW5jb2RlZCArPSAnXFxcXCcgKyBjb2RlLnRvU3RyaW5nKDE2KSArICcgJztcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gSWYgdGhlIGNoYXJhY3RlciBpcyBub3QgaGFuZGxlZCBieSBvbmUgb2YgdGhlIGFib3ZlIHJ1bGVzIGFuZCBpcyBncmVhdGVyXG4gICAgICAgIC8vIHRoYW4gb3IgZXF1YWwgdG8gVSswMDgwLCBpcyBcIi1cIiAoVSswMDJEKSBvciBcIl9cIiAoVSswMDVGKSwgb3IgaXMgaW4gb25lXG4gICAgICAgIC8vIG9mIHRoZSByYW5nZXMgWzAtOV0gKFUrMDAzMCB0byBVKzAwMzkpLCBbQS1aXSAoVSswMDQxIHRvIFUrMDA1QSksXG4gICAgICAgIC8vIG9yIFxcW2Etel0gKFUrMDA2MSB0byBVKzAwN0EpLCB0aGVuIHRoZSBjaGFyYWN0ZXIgaXRzZWxmLlxuICAgICAgICBpZiAoY2hhckNvZGVEZWZpbml0aW9ucy5pc05hbWUoY29kZSkpIHtcbiAgICAgICAgICAgIGVuY29kZWQgKz0gc3RyLmNoYXJBdChpKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vIE90aGVyd2lzZSwgdGhlIGVzY2FwZWQgY2hhcmFjdGVyLlxuICAgICAgICAgICAgZW5jb2RlZCArPSAnXFxcXCcgKyBzdHIuY2hhckF0KGkpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGVuY29kZWQ7XG59XG5cbmV4cG9ydHMuZGVjb2RlID0gZGVjb2RlO1xuZXhwb3J0cy5lbmNvZGUgPSBlbmNvZGU7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///4922\n")},60356:(__unused_webpack_module,exports)=>{"use strict";eval("\n\nconst keywords = new Map();\nconst properties = new Map();\nconst HYPHENMINUS = 45; // '-'.charCodeAt()\n\nconst keyword = getKeywordDescriptor;\nconst property = getPropertyDescriptor;\nconst vendorPrefix = getVendorPrefix;\nfunction isCustomProperty(str, offset) {\n    offset = offset || 0;\n\n    return str.length - offset >= 2 &&\n           str.charCodeAt(offset) === HYPHENMINUS &&\n           str.charCodeAt(offset + 1) === HYPHENMINUS;\n}\n\nfunction getVendorPrefix(str, offset) {\n    offset = offset || 0;\n\n    // verdor prefix should be at least 3 chars length\n    if (str.length - offset >= 3) {\n        // vendor prefix starts with hyper minus following non-hyper minus\n        if (str.charCodeAt(offset) === HYPHENMINUS &&\n            str.charCodeAt(offset + 1) !== HYPHENMINUS) {\n            // vendor prefix should contain a hyper minus at the ending\n            const secondDashIndex = str.indexOf('-', offset + 2);\n\n            if (secondDashIndex !== -1) {\n                return str.substring(offset, secondDashIndex + 1);\n            }\n        }\n    }\n\n    return '';\n}\n\nfunction getKeywordDescriptor(keyword) {\n    if (keywords.has(keyword)) {\n        return keywords.get(keyword);\n    }\n\n    const name = keyword.toLowerCase();\n    let descriptor = keywords.get(name);\n\n    if (descriptor === undefined) {\n        const custom = isCustomProperty(name, 0);\n        const vendor = !custom ? getVendorPrefix(name, 0) : '';\n        descriptor = Object.freeze({\n            basename: name.substr(vendor.length),\n            name,\n            prefix: vendor,\n            vendor,\n            custom\n        });\n    }\n\n    keywords.set(keyword, descriptor);\n\n    return descriptor;\n}\n\nfunction getPropertyDescriptor(property) {\n    if (properties.has(property)) {\n        return properties.get(property);\n    }\n\n    let name = property;\n    let hack = property[0];\n\n    if (hack === '/') {\n        hack = property[1] === '/' ? '//' : '/';\n    } else if (hack !== '_' &&\n               hack !== '*' &&\n               hack !== '$' &&\n               hack !== '#' &&\n               hack !== '+' &&\n               hack !== '&') {\n        hack = '';\n    }\n\n    const custom = isCustomProperty(name, hack.length);\n\n    // re-use result when possible (the same as for lower case)\n    if (!custom) {\n        name = name.toLowerCase();\n        if (properties.has(name)) {\n            const descriptor = properties.get(name);\n            properties.set(property, descriptor);\n            return descriptor;\n        }\n    }\n\n    const vendor = !custom ? getVendorPrefix(name, hack.length) : '';\n    const prefix = name.substr(0, hack.length + vendor.length);\n    const descriptor = Object.freeze({\n        basename: name.substr(prefix.length),\n        name: name.substr(hack.length),\n        hack,\n        vendor,\n        prefix,\n        custom\n    });\n\n    properties.set(property, descriptor);\n\n    return descriptor;\n}\n\nexports.isCustomProperty = isCustomProperty;\nexports.keyword = keyword;\nexports.property = property;\nexports.vendorPrefix = vendorPrefix;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNjAzNTYuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWI7QUFDQTtBQUNBLHdCQUF3Qjs7QUFFeEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDs7QUFFQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDs7QUFFQTtBQUNBOztBQUVBLHdCQUF3QjtBQUN4QixlQUFlO0FBQ2YsZ0JBQWdCO0FBQ2hCLG9CQUFvQiIsInNvdXJjZXMiOlsid2VicGFjazovL2Jsb2NrYml0ZS8uL25vZGVfbW9kdWxlcy9jc3NvL25vZGVfbW9kdWxlcy9jc3MtdHJlZS9janMvdXRpbHMvbmFtZXMuY2pzPzBkYzciXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBrZXl3b3JkcyA9IG5ldyBNYXAoKTtcbmNvbnN0IHByb3BlcnRpZXMgPSBuZXcgTWFwKCk7XG5jb25zdCBIWVBIRU5NSU5VUyA9IDQ1OyAvLyAnLScuY2hhckNvZGVBdCgpXG5cbmNvbnN0IGtleXdvcmQgPSBnZXRLZXl3b3JkRGVzY3JpcHRvcjtcbmNvbnN0IHByb3BlcnR5ID0gZ2V0UHJvcGVydHlEZXNjcmlwdG9yO1xuY29uc3QgdmVuZG9yUHJlZml4ID0gZ2V0VmVuZG9yUHJlZml4O1xuZnVuY3Rpb24gaXNDdXN0b21Qcm9wZXJ0eShzdHIsIG9mZnNldCkge1xuICAgIG9mZnNldCA9IG9mZnNldCB8fCAwO1xuXG4gICAgcmV0dXJuIHN0ci5sZW5ndGggLSBvZmZzZXQgPj0gMiAmJlxuICAgICAgICAgICBzdHIuY2hhckNvZGVBdChvZmZzZXQpID09PSBIWVBIRU5NSU5VUyAmJlxuICAgICAgICAgICBzdHIuY2hhckNvZGVBdChvZmZzZXQgKyAxKSA9PT0gSFlQSEVOTUlOVVM7XG59XG5cbmZ1bmN0aW9uIGdldFZlbmRvclByZWZpeChzdHIsIG9mZnNldCkge1xuICAgIG9mZnNldCA9IG9mZnNldCB8fCAwO1xuXG4gICAgLy8gdmVyZG9yIHByZWZpeCBzaG91bGQgYmUgYXQgbGVhc3QgMyBjaGFycyBsZW5ndGhcbiAgICBpZiAoc3RyLmxlbmd0aCAtIG9mZnNldCA+PSAzKSB7XG4gICAgICAgIC8vIHZlbmRvciBwcmVmaXggc3RhcnRzIHdpdGggaHlwZXIgbWludXMgZm9sbG93aW5nIG5vbi1oeXBlciBtaW51c1xuICAgICAgICBpZiAoc3RyLmNoYXJDb2RlQXQob2Zmc2V0KSA9PT0gSFlQSEVOTUlOVVMgJiZcbiAgICAgICAgICAgIHN0ci5jaGFyQ29kZUF0KG9mZnNldCArIDEpICE9PSBIWVBIRU5NSU5VUykge1xuICAgICAgICAgICAgLy8gdmVuZG9yIHByZWZpeCBzaG91bGQgY29udGFpbiBhIGh5cGVyIG1pbnVzIGF0IHRoZSBlbmRpbmdcbiAgICAgICAgICAgIGNvbnN0IHNlY29uZERhc2hJbmRleCA9IHN0ci5pbmRleE9mKCctJywgb2Zmc2V0ICsgMik7XG5cbiAgICAgICAgICAgIGlmIChzZWNvbmREYXNoSW5kZXggIT09IC0xKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHN0ci5zdWJzdHJpbmcob2Zmc2V0LCBzZWNvbmREYXNoSW5kZXggKyAxKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiAnJztcbn1cblxuZnVuY3Rpb24gZ2V0S2V5d29yZERlc2NyaXB0b3Ioa2V5d29yZCkge1xuICAgIGlmIChrZXl3b3Jkcy5oYXMoa2V5d29yZCkpIHtcbiAgICAgICAgcmV0dXJuIGtleXdvcmRzLmdldChrZXl3b3JkKTtcbiAgICB9XG5cbiAgICBjb25zdCBuYW1lID0ga2V5d29yZC50b0xvd2VyQ2FzZSgpO1xuICAgIGxldCBkZXNjcmlwdG9yID0ga2V5d29yZHMuZ2V0KG5hbWUpO1xuXG4gICAgaWYgKGRlc2NyaXB0b3IgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICBjb25zdCBjdXN0b20gPSBpc0N1c3RvbVByb3BlcnR5KG5hbWUsIDApO1xuICAgICAgICBjb25zdCB2ZW5kb3IgPSAhY3VzdG9tID8gZ2V0VmVuZG9yUHJlZml4KG5hbWUsIDApIDogJyc7XG4gICAgICAgIGRlc2NyaXB0b3IgPSBPYmplY3QuZnJlZXplKHtcbiAgICAgICAgICAgIGJhc2VuYW1lOiBuYW1lLnN1YnN0cih2ZW5kb3IubGVuZ3RoKSxcbiAgICAgICAgICAgIG5hbWUsXG4gICAgICAgICAgICBwcmVmaXg6IHZlbmRvcixcbiAgICAgICAgICAgIHZlbmRvcixcbiAgICAgICAgICAgIGN1c3RvbVxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBrZXl3b3Jkcy5zZXQoa2V5d29yZCwgZGVzY3JpcHRvcik7XG5cbiAgICByZXR1cm4gZGVzY3JpcHRvcjtcbn1cblxuZnVuY3Rpb24gZ2V0UHJvcGVydHlEZXNjcmlwdG9yKHByb3BlcnR5KSB7XG4gICAgaWYgKHByb3BlcnRpZXMuaGFzKHByb3BlcnR5KSkge1xuICAgICAgICByZXR1cm4gcHJvcGVydGllcy5nZXQocHJvcGVydHkpO1xuICAgIH1cblxuICAgIGxldCBuYW1lID0gcHJvcGVydHk7XG4gICAgbGV0IGhhY2sgPSBwcm9wZXJ0eVswXTtcblxuICAgIGlmIChoYWNrID09PSAnLycpIHtcbiAgICAgICAgaGFjayA9IHByb3BlcnR5WzFdID09PSAnLycgPyAnLy8nIDogJy8nO1xuICAgIH0gZWxzZSBpZiAoaGFjayAhPT0gJ18nICYmXG4gICAgICAgICAgICAgICBoYWNrICE9PSAnKicgJiZcbiAgICAgICAgICAgICAgIGhhY2sgIT09ICckJyAmJlxuICAgICAgICAgICAgICAgaGFjayAhPT0gJyMnICYmXG4gICAgICAgICAgICAgICBoYWNrICE9PSAnKycgJiZcbiAgICAgICAgICAgICAgIGhhY2sgIT09ICcmJykge1xuICAgICAgICBoYWNrID0gJyc7XG4gICAgfVxuXG4gICAgY29uc3QgY3VzdG9tID0gaXNDdXN0b21Qcm9wZXJ0eShuYW1lLCBoYWNrLmxlbmd0aCk7XG5cbiAgICAvLyByZS11c2UgcmVzdWx0IHdoZW4gcG9zc2libGUgKHRoZSBzYW1lIGFzIGZvciBsb3dlciBjYXNlKVxuICAgIGlmICghY3VzdG9tKSB7XG4gICAgICAgIG5hbWUgPSBuYW1lLnRvTG93ZXJDYXNlKCk7XG4gICAgICAgIGlmIChwcm9wZXJ0aWVzLmhhcyhuYW1lKSkge1xuICAgICAgICAgICAgY29uc3QgZGVzY3JpcHRvciA9IHByb3BlcnRpZXMuZ2V0KG5hbWUpO1xuICAgICAgICAgICAgcHJvcGVydGllcy5zZXQocHJvcGVydHksIGRlc2NyaXB0b3IpO1xuICAgICAgICAgICAgcmV0dXJuIGRlc2NyaXB0b3I7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBjb25zdCB2ZW5kb3IgPSAhY3VzdG9tID8gZ2V0VmVuZG9yUHJlZml4KG5hbWUsIGhhY2subGVuZ3RoKSA6ICcnO1xuICAgIGNvbnN0IHByZWZpeCA9IG5hbWUuc3Vic3RyKDAsIGhhY2subGVuZ3RoICsgdmVuZG9yLmxlbmd0aCk7XG4gICAgY29uc3QgZGVzY3JpcHRvciA9IE9iamVjdC5mcmVlemUoe1xuICAgICAgICBiYXNlbmFtZTogbmFtZS5zdWJzdHIocHJlZml4Lmxlbmd0aCksXG4gICAgICAgIG5hbWU6IG5hbWUuc3Vic3RyKGhhY2subGVuZ3RoKSxcbiAgICAgICAgaGFjayxcbiAgICAgICAgdmVuZG9yLFxuICAgICAgICBwcmVmaXgsXG4gICAgICAgIGN1c3RvbVxuICAgIH0pO1xuXG4gICAgcHJvcGVydGllcy5zZXQocHJvcGVydHksIGRlc2NyaXB0b3IpO1xuXG4gICAgcmV0dXJuIGRlc2NyaXB0b3I7XG59XG5cbmV4cG9ydHMuaXNDdXN0b21Qcm9wZXJ0eSA9IGlzQ3VzdG9tUHJvcGVydHk7XG5leHBvcnRzLmtleXdvcmQgPSBrZXl3b3JkO1xuZXhwb3J0cy5wcm9wZXJ0eSA9IHByb3BlcnR5O1xuZXhwb3J0cy52ZW5kb3JQcmVmaXggPSB2ZW5kb3JQcmVmaXg7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///60356\n")},83500:(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";eval("\n\nconst charCodeDefinitions = __webpack_require__(87351);\nconst utils = __webpack_require__(79955);\n\nconst REVERSE_SOLIDUS = 0x005c; // U+005C REVERSE SOLIDUS (\\)\nconst QUOTATION_MARK = 0x0022;  // \"\nconst APOSTROPHE = 0x0027;      // '\n\nfunction decode(str) {\n    const len = str.length;\n    const firstChar = str.charCodeAt(0);\n    const start = firstChar === QUOTATION_MARK || firstChar === APOSTROPHE ? 1 : 0;\n    const end = start === 1 && len > 1 && str.charCodeAt(len - 1) === firstChar ? len - 2 : len - 1;\n    let decoded = '';\n\n    for (let i = start; i <= end; i++) {\n        let code = str.charCodeAt(i);\n\n        if (code === REVERSE_SOLIDUS) {\n            // special case at the ending\n            if (i === end) {\n                // if the next input code point is EOF, do nothing\n                // otherwise include last quote as escaped\n                if (i !== len - 1) {\n                    decoded = str.substr(i + 1);\n                }\n                break;\n            }\n\n            code = str.charCodeAt(++i);\n\n            // consume escaped\n            if (charCodeDefinitions.isValidEscape(REVERSE_SOLIDUS, code)) {\n                const escapeStart = i - 1;\n                const escapeEnd = utils.consumeEscaped(str, escapeStart);\n\n                i = escapeEnd - 1;\n                decoded += utils.decodeEscaped(str.substring(escapeStart + 1, escapeEnd));\n            } else {\n                // \\r\\n\n                if (code === 0x000d && str.charCodeAt(i + 1) === 0x000a) {\n                    i++;\n                }\n            }\n        } else {\n            decoded += str[i];\n        }\n    }\n\n    return decoded;\n}\n\n// https://drafts.csswg.org/cssom/#serialize-a-string\n// § 2.1. Common Serializing Idioms\nfunction encode(str, apostrophe) {\n    const quote = apostrophe ? '\\'' : '\"';\n    const quoteCode = apostrophe ? APOSTROPHE : QUOTATION_MARK;\n    let encoded = '';\n    let wsBeforeHexIsNeeded = false;\n\n    for (let i = 0; i < str.length; i++) {\n        const code = str.charCodeAt(i);\n\n        // If the character is NULL (U+0000), then the REPLACEMENT CHARACTER (U+FFFD).\n        if (code === 0x0000) {\n            encoded += '\\uFFFD';\n            continue;\n        }\n\n        // If the character is in the range [\\1-\\1f] (U+0001 to U+001F) or is U+007F,\n        // the character escaped as code point.\n        // Note: Do not compare with 0x0001 since 0x0000 is precessed before\n        if (code <= 0x001f || code === 0x007F) {\n            encoded += '\\\\' + code.toString(16);\n            wsBeforeHexIsNeeded = true;\n            continue;\n        }\n\n        // If the character is '\"' (U+0022) or \"\\\" (U+005C), the escaped character.\n        if (code === quoteCode || code === REVERSE_SOLIDUS) {\n            encoded += '\\\\' + str.charAt(i);\n            wsBeforeHexIsNeeded = false;\n        } else {\n            if (wsBeforeHexIsNeeded && (charCodeDefinitions.isHexDigit(code) || charCodeDefinitions.isWhiteSpace(code))) {\n                encoded += ' ';\n            }\n\n            // Otherwise, the character itself.\n            encoded += str.charAt(i);\n            wsBeforeHexIsNeeded = false;\n        }\n    }\n\n    return quote + encoded + quote;\n}\n\nexports.decode = decode;\nexports.encode = encode;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiODM1MDAuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsNEJBQTRCLG1CQUFPLENBQUMsS0FBd0M7QUFDNUUsY0FBYyxtQkFBTyxDQUFDLEtBQXdCOztBQUU5QyxnQ0FBZ0M7QUFDaEMsZ0NBQWdDO0FBQ2hDLGdDQUFnQzs7QUFFaEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLHdCQUF3QixVQUFVO0FBQ2xDOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxjQUFjO0FBQ2Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxvQkFBb0IsZ0JBQWdCO0FBQ3BDOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBLGNBQWM7QUFDZCxjQUFjIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYmxvY2tiaXRlLy4vbm9kZV9tb2R1bGVzL2Nzc28vbm9kZV9tb2R1bGVzL2Nzcy10cmVlL2Nqcy91dGlscy9zdHJpbmcuY2pzP2U4MDIiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBjaGFyQ29kZURlZmluaXRpb25zID0gcmVxdWlyZSgnLi4vdG9rZW5pemVyL2NoYXItY29kZS1kZWZpbml0aW9ucy5janMnKTtcbmNvbnN0IHV0aWxzID0gcmVxdWlyZSgnLi4vdG9rZW5pemVyL3V0aWxzLmNqcycpO1xuXG5jb25zdCBSRVZFUlNFX1NPTElEVVMgPSAweDAwNWM7IC8vIFUrMDA1QyBSRVZFUlNFIFNPTElEVVMgKFxcKVxuY29uc3QgUVVPVEFUSU9OX01BUksgPSAweDAwMjI7ICAvLyBcIlxuY29uc3QgQVBPU1RST1BIRSA9IDB4MDAyNzsgICAgICAvLyAnXG5cbmZ1bmN0aW9uIGRlY29kZShzdHIpIHtcbiAgICBjb25zdCBsZW4gPSBzdHIubGVuZ3RoO1xuICAgIGNvbnN0IGZpcnN0Q2hhciA9IHN0ci5jaGFyQ29kZUF0KDApO1xuICAgIGNvbnN0IHN0YXJ0ID0gZmlyc3RDaGFyID09PSBRVU9UQVRJT05fTUFSSyB8fCBmaXJzdENoYXIgPT09IEFQT1NUUk9QSEUgPyAxIDogMDtcbiAgICBjb25zdCBlbmQgPSBzdGFydCA9PT0gMSAmJiBsZW4gPiAxICYmIHN0ci5jaGFyQ29kZUF0KGxlbiAtIDEpID09PSBmaXJzdENoYXIgPyBsZW4gLSAyIDogbGVuIC0gMTtcbiAgICBsZXQgZGVjb2RlZCA9ICcnO1xuXG4gICAgZm9yIChsZXQgaSA9IHN0YXJ0OyBpIDw9IGVuZDsgaSsrKSB7XG4gICAgICAgIGxldCBjb2RlID0gc3RyLmNoYXJDb2RlQXQoaSk7XG5cbiAgICAgICAgaWYgKGNvZGUgPT09IFJFVkVSU0VfU09MSURVUykge1xuICAgICAgICAgICAgLy8gc3BlY2lhbCBjYXNlIGF0IHRoZSBlbmRpbmdcbiAgICAgICAgICAgIGlmIChpID09PSBlbmQpIHtcbiAgICAgICAgICAgICAgICAvLyBpZiB0aGUgbmV4dCBpbnB1dCBjb2RlIHBvaW50IGlzIEVPRiwgZG8gbm90aGluZ1xuICAgICAgICAgICAgICAgIC8vIG90aGVyd2lzZSBpbmNsdWRlIGxhc3QgcXVvdGUgYXMgZXNjYXBlZFxuICAgICAgICAgICAgICAgIGlmIChpICE9PSBsZW4gLSAxKSB7XG4gICAgICAgICAgICAgICAgICAgIGRlY29kZWQgPSBzdHIuc3Vic3RyKGkgKyAxKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGNvZGUgPSBzdHIuY2hhckNvZGVBdCgrK2kpO1xuXG4gICAgICAgICAgICAvLyBjb25zdW1lIGVzY2FwZWRcbiAgICAgICAgICAgIGlmIChjaGFyQ29kZURlZmluaXRpb25zLmlzVmFsaWRFc2NhcGUoUkVWRVJTRV9TT0xJRFVTLCBjb2RlKSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGVzY2FwZVN0YXJ0ID0gaSAtIDE7XG4gICAgICAgICAgICAgICAgY29uc3QgZXNjYXBlRW5kID0gdXRpbHMuY29uc3VtZUVzY2FwZWQoc3RyLCBlc2NhcGVTdGFydCk7XG5cbiAgICAgICAgICAgICAgICBpID0gZXNjYXBlRW5kIC0gMTtcbiAgICAgICAgICAgICAgICBkZWNvZGVkICs9IHV0aWxzLmRlY29kZUVzY2FwZWQoc3RyLnN1YnN0cmluZyhlc2NhcGVTdGFydCArIDEsIGVzY2FwZUVuZCkpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAvLyBcXHJcXG5cbiAgICAgICAgICAgICAgICBpZiAoY29kZSA9PT0gMHgwMDBkICYmIHN0ci5jaGFyQ29kZUF0KGkgKyAxKSA9PT0gMHgwMDBhKSB7XG4gICAgICAgICAgICAgICAgICAgIGkrKztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBkZWNvZGVkICs9IHN0cltpXTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBkZWNvZGVkO1xufVxuXG4vLyBodHRwczovL2RyYWZ0cy5jc3N3Zy5vcmcvY3Nzb20vI3NlcmlhbGl6ZS1hLXN0cmluZ1xuLy8gwqcgMi4xLiBDb21tb24gU2VyaWFsaXppbmcgSWRpb21zXG5mdW5jdGlvbiBlbmNvZGUoc3RyLCBhcG9zdHJvcGhlKSB7XG4gICAgY29uc3QgcXVvdGUgPSBhcG9zdHJvcGhlID8gJ1xcJycgOiAnXCInO1xuICAgIGNvbnN0IHF1b3RlQ29kZSA9IGFwb3N0cm9waGUgPyBBUE9TVFJPUEhFIDogUVVPVEFUSU9OX01BUks7XG4gICAgbGV0IGVuY29kZWQgPSAnJztcbiAgICBsZXQgd3NCZWZvcmVIZXhJc05lZWRlZCA9IGZhbHNlO1xuXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzdHIubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgY29uc3QgY29kZSA9IHN0ci5jaGFyQ29kZUF0KGkpO1xuXG4gICAgICAgIC8vIElmIHRoZSBjaGFyYWN0ZXIgaXMgTlVMTCAoVSswMDAwKSwgdGhlbiB0aGUgUkVQTEFDRU1FTlQgQ0hBUkFDVEVSIChVK0ZGRkQpLlxuICAgICAgICBpZiAoY29kZSA9PT0gMHgwMDAwKSB7XG4gICAgICAgICAgICBlbmNvZGVkICs9ICdcXHVGRkZEJztcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gSWYgdGhlIGNoYXJhY3RlciBpcyBpbiB0aGUgcmFuZ2UgW1xcMS1cXDFmXSAoVSswMDAxIHRvIFUrMDAxRikgb3IgaXMgVSswMDdGLFxuICAgICAgICAvLyB0aGUgY2hhcmFjdGVyIGVzY2FwZWQgYXMgY29kZSBwb2ludC5cbiAgICAgICAgLy8gTm90ZTogRG8gbm90IGNvbXBhcmUgd2l0aCAweDAwMDEgc2luY2UgMHgwMDAwIGlzIHByZWNlc3NlZCBiZWZvcmVcbiAgICAgICAgaWYgKGNvZGUgPD0gMHgwMDFmIHx8IGNvZGUgPT09IDB4MDA3Rikge1xuICAgICAgICAgICAgZW5jb2RlZCArPSAnXFxcXCcgKyBjb2RlLnRvU3RyaW5nKDE2KTtcbiAgICAgICAgICAgIHdzQmVmb3JlSGV4SXNOZWVkZWQgPSB0cnVlO1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBJZiB0aGUgY2hhcmFjdGVyIGlzICdcIicgKFUrMDAyMikgb3IgXCJcXFwiIChVKzAwNUMpLCB0aGUgZXNjYXBlZCBjaGFyYWN0ZXIuXG4gICAgICAgIGlmIChjb2RlID09PSBxdW90ZUNvZGUgfHwgY29kZSA9PT0gUkVWRVJTRV9TT0xJRFVTKSB7XG4gICAgICAgICAgICBlbmNvZGVkICs9ICdcXFxcJyArIHN0ci5jaGFyQXQoaSk7XG4gICAgICAgICAgICB3c0JlZm9yZUhleElzTmVlZGVkID0gZmFsc2U7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAod3NCZWZvcmVIZXhJc05lZWRlZCAmJiAoY2hhckNvZGVEZWZpbml0aW9ucy5pc0hleERpZ2l0KGNvZGUpIHx8IGNoYXJDb2RlRGVmaW5pdGlvbnMuaXNXaGl0ZVNwYWNlKGNvZGUpKSkge1xuICAgICAgICAgICAgICAgIGVuY29kZWQgKz0gJyAnO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBPdGhlcndpc2UsIHRoZSBjaGFyYWN0ZXIgaXRzZWxmLlxuICAgICAgICAgICAgZW5jb2RlZCArPSBzdHIuY2hhckF0KGkpO1xuICAgICAgICAgICAgd3NCZWZvcmVIZXhJc05lZWRlZCA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHF1b3RlICsgZW5jb2RlZCArIHF1b3RlO1xufVxuXG5leHBvcnRzLmRlY29kZSA9IGRlY29kZTtcbmV4cG9ydHMuZW5jb2RlID0gZW5jb2RlO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///83500\n")},84135:(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";eval("\n\nconst charCodeDefinitions = __webpack_require__(87351);\nconst utils = __webpack_require__(79955);\n\nconst SPACE = 0x0020;            // U+0020 SPACE\nconst REVERSE_SOLIDUS = 0x005c;  // U+005C REVERSE SOLIDUS (\\)\nconst QUOTATION_MARK = 0x0022;   // \"\nconst APOSTROPHE = 0x0027;       // '\nconst LEFTPARENTHESIS = 0x0028;  // U+0028 LEFT PARENTHESIS (()\nconst RIGHTPARENTHESIS = 0x0029; // U+0029 RIGHT PARENTHESIS ())\n\nfunction decode(str) {\n    const len = str.length;\n    let start = 4; // length of \"url(\"\n    let end = str.charCodeAt(len - 1) === RIGHTPARENTHESIS ? len - 2 : len - 1;\n    let decoded = '';\n\n    while (start < end && charCodeDefinitions.isWhiteSpace(str.charCodeAt(start))) {\n        start++;\n    }\n\n    while (start < end && charCodeDefinitions.isWhiteSpace(str.charCodeAt(end))) {\n        end--;\n    }\n\n    for (let i = start; i <= end; i++) {\n        let code = str.charCodeAt(i);\n\n        if (code === REVERSE_SOLIDUS) {\n            // special case at the ending\n            if (i === end) {\n                // if the next input code point is EOF, do nothing\n                // otherwise include last left parenthesis as escaped\n                if (i !== len - 1) {\n                    decoded = str.substr(i + 1);\n                }\n                break;\n            }\n\n            code = str.charCodeAt(++i);\n\n            // consume escaped\n            if (charCodeDefinitions.isValidEscape(REVERSE_SOLIDUS, code)) {\n                const escapeStart = i - 1;\n                const escapeEnd = utils.consumeEscaped(str, escapeStart);\n\n                i = escapeEnd - 1;\n                decoded += utils.decodeEscaped(str.substring(escapeStart + 1, escapeEnd));\n            } else {\n                // \\r\\n\n                if (code === 0x000d && str.charCodeAt(i + 1) === 0x000a) {\n                    i++;\n                }\n            }\n        } else {\n            decoded += str[i];\n        }\n    }\n\n    return decoded;\n}\n\nfunction encode(str) {\n    let encoded = '';\n    let wsBeforeHexIsNeeded = false;\n\n    for (let i = 0; i < str.length; i++) {\n        const code = str.charCodeAt(i);\n\n        // If the character is NULL (U+0000), then the REPLACEMENT CHARACTER (U+FFFD).\n        if (code === 0x0000) {\n            encoded += '\\uFFFD';\n            continue;\n        }\n\n        // If the character is in the range [\\1-\\1f] (U+0001 to U+001F) or is U+007F,\n        // the character escaped as code point.\n        // Note: Do not compare with 0x0001 since 0x0000 is precessed before\n        if (code <= 0x001f || code === 0x007F) {\n            encoded += '\\\\' + code.toString(16);\n            wsBeforeHexIsNeeded = true;\n            continue;\n        }\n\n        if (code === SPACE ||\n            code === REVERSE_SOLIDUS ||\n            code === QUOTATION_MARK ||\n            code === APOSTROPHE ||\n            code === LEFTPARENTHESIS ||\n            code === RIGHTPARENTHESIS) {\n            encoded += '\\\\' + str.charAt(i);\n            wsBeforeHexIsNeeded = false;\n        } else {\n            if (wsBeforeHexIsNeeded && charCodeDefinitions.isHexDigit(code)) {\n                encoded += ' ';\n            }\n\n            encoded += str.charAt(i);\n            wsBeforeHexIsNeeded = false;\n        }\n    }\n\n    return 'url(' + encoded + ')';\n}\n\nexports.decode = decode;\nexports.encode = encode;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiODQxMzUuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsNEJBQTRCLG1CQUFPLENBQUMsS0FBd0M7QUFDNUUsY0FBYyxtQkFBTyxDQUFDLEtBQXdCOztBQUU5QyxpQ0FBaUM7QUFDakMsaUNBQWlDO0FBQ2pDLGlDQUFpQztBQUNqQyxpQ0FBaUM7QUFDakMsaUNBQWlDO0FBQ2pDLGlDQUFpQzs7QUFFakM7QUFDQTtBQUNBLG1CQUFtQjtBQUNuQjtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUEsd0JBQXdCLFVBQVU7QUFDbEM7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLGNBQWM7QUFDZDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQSxvQkFBb0IsZ0JBQWdCO0FBQ3BDOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBLGNBQWM7QUFDZCxjQUFjIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYmxvY2tiaXRlLy4vbm9kZV9tb2R1bGVzL2Nzc28vbm9kZV9tb2R1bGVzL2Nzcy10cmVlL2Nqcy91dGlscy91cmwuY2pzP2EzYWEiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBjaGFyQ29kZURlZmluaXRpb25zID0gcmVxdWlyZSgnLi4vdG9rZW5pemVyL2NoYXItY29kZS1kZWZpbml0aW9ucy5janMnKTtcbmNvbnN0IHV0aWxzID0gcmVxdWlyZSgnLi4vdG9rZW5pemVyL3V0aWxzLmNqcycpO1xuXG5jb25zdCBTUEFDRSA9IDB4MDAyMDsgICAgICAgICAgICAvLyBVKzAwMjAgU1BBQ0VcbmNvbnN0IFJFVkVSU0VfU09MSURVUyA9IDB4MDA1YzsgIC8vIFUrMDA1QyBSRVZFUlNFIFNPTElEVVMgKFxcKVxuY29uc3QgUVVPVEFUSU9OX01BUksgPSAweDAwMjI7ICAgLy8gXCJcbmNvbnN0IEFQT1NUUk9QSEUgPSAweDAwMjc7ICAgICAgIC8vICdcbmNvbnN0IExFRlRQQVJFTlRIRVNJUyA9IDB4MDAyODsgIC8vIFUrMDAyOCBMRUZUIFBBUkVOVEhFU0lTICgoKVxuY29uc3QgUklHSFRQQVJFTlRIRVNJUyA9IDB4MDAyOTsgLy8gVSswMDI5IFJJR0hUIFBBUkVOVEhFU0lTICgpKVxuXG5mdW5jdGlvbiBkZWNvZGUoc3RyKSB7XG4gICAgY29uc3QgbGVuID0gc3RyLmxlbmd0aDtcbiAgICBsZXQgc3RhcnQgPSA0OyAvLyBsZW5ndGggb2YgXCJ1cmwoXCJcbiAgICBsZXQgZW5kID0gc3RyLmNoYXJDb2RlQXQobGVuIC0gMSkgPT09IFJJR0hUUEFSRU5USEVTSVMgPyBsZW4gLSAyIDogbGVuIC0gMTtcbiAgICBsZXQgZGVjb2RlZCA9ICcnO1xuXG4gICAgd2hpbGUgKHN0YXJ0IDwgZW5kICYmIGNoYXJDb2RlRGVmaW5pdGlvbnMuaXNXaGl0ZVNwYWNlKHN0ci5jaGFyQ29kZUF0KHN0YXJ0KSkpIHtcbiAgICAgICAgc3RhcnQrKztcbiAgICB9XG5cbiAgICB3aGlsZSAoc3RhcnQgPCBlbmQgJiYgY2hhckNvZGVEZWZpbml0aW9ucy5pc1doaXRlU3BhY2Uoc3RyLmNoYXJDb2RlQXQoZW5kKSkpIHtcbiAgICAgICAgZW5kLS07XG4gICAgfVxuXG4gICAgZm9yIChsZXQgaSA9IHN0YXJ0OyBpIDw9IGVuZDsgaSsrKSB7XG4gICAgICAgIGxldCBjb2RlID0gc3RyLmNoYXJDb2RlQXQoaSk7XG5cbiAgICAgICAgaWYgKGNvZGUgPT09IFJFVkVSU0VfU09MSURVUykge1xuICAgICAgICAgICAgLy8gc3BlY2lhbCBjYXNlIGF0IHRoZSBlbmRpbmdcbiAgICAgICAgICAgIGlmIChpID09PSBlbmQpIHtcbiAgICAgICAgICAgICAgICAvLyBpZiB0aGUgbmV4dCBpbnB1dCBjb2RlIHBvaW50IGlzIEVPRiwgZG8gbm90aGluZ1xuICAgICAgICAgICAgICAgIC8vIG90aGVyd2lzZSBpbmNsdWRlIGxhc3QgbGVmdCBwYXJlbnRoZXNpcyBhcyBlc2NhcGVkXG4gICAgICAgICAgICAgICAgaWYgKGkgIT09IGxlbiAtIDEpIHtcbiAgICAgICAgICAgICAgICAgICAgZGVjb2RlZCA9IHN0ci5zdWJzdHIoaSArIDEpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY29kZSA9IHN0ci5jaGFyQ29kZUF0KCsraSk7XG5cbiAgICAgICAgICAgIC8vIGNvbnN1bWUgZXNjYXBlZFxuICAgICAgICAgICAgaWYgKGNoYXJDb2RlRGVmaW5pdGlvbnMuaXNWYWxpZEVzY2FwZShSRVZFUlNFX1NPTElEVVMsIGNvZGUpKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgZXNjYXBlU3RhcnQgPSBpIC0gMTtcbiAgICAgICAgICAgICAgICBjb25zdCBlc2NhcGVFbmQgPSB1dGlscy5jb25zdW1lRXNjYXBlZChzdHIsIGVzY2FwZVN0YXJ0KTtcblxuICAgICAgICAgICAgICAgIGkgPSBlc2NhcGVFbmQgLSAxO1xuICAgICAgICAgICAgICAgIGRlY29kZWQgKz0gdXRpbHMuZGVjb2RlRXNjYXBlZChzdHIuc3Vic3RyaW5nKGVzY2FwZVN0YXJ0ICsgMSwgZXNjYXBlRW5kKSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIC8vIFxcclxcblxuICAgICAgICAgICAgICAgIGlmIChjb2RlID09PSAweDAwMGQgJiYgc3RyLmNoYXJDb2RlQXQoaSArIDEpID09PSAweDAwMGEpIHtcbiAgICAgICAgICAgICAgICAgICAgaSsrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGRlY29kZWQgKz0gc3RyW2ldO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGRlY29kZWQ7XG59XG5cbmZ1bmN0aW9uIGVuY29kZShzdHIpIHtcbiAgICBsZXQgZW5jb2RlZCA9ICcnO1xuICAgIGxldCB3c0JlZm9yZUhleElzTmVlZGVkID0gZmFsc2U7XG5cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHN0ci5sZW5ndGg7IGkrKykge1xuICAgICAgICBjb25zdCBjb2RlID0gc3RyLmNoYXJDb2RlQXQoaSk7XG5cbiAgICAgICAgLy8gSWYgdGhlIGNoYXJhY3RlciBpcyBOVUxMIChVKzAwMDApLCB0aGVuIHRoZSBSRVBMQUNFTUVOVCBDSEFSQUNURVIgKFUrRkZGRCkuXG4gICAgICAgIGlmIChjb2RlID09PSAweDAwMDApIHtcbiAgICAgICAgICAgIGVuY29kZWQgKz0gJ1xcdUZGRkQnO1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBJZiB0aGUgY2hhcmFjdGVyIGlzIGluIHRoZSByYW5nZSBbXFwxLVxcMWZdIChVKzAwMDEgdG8gVSswMDFGKSBvciBpcyBVKzAwN0YsXG4gICAgICAgIC8vIHRoZSBjaGFyYWN0ZXIgZXNjYXBlZCBhcyBjb2RlIHBvaW50LlxuICAgICAgICAvLyBOb3RlOiBEbyBub3QgY29tcGFyZSB3aXRoIDB4MDAwMSBzaW5jZSAweDAwMDAgaXMgcHJlY2Vzc2VkIGJlZm9yZVxuICAgICAgICBpZiAoY29kZSA8PSAweDAwMWYgfHwgY29kZSA9PT0gMHgwMDdGKSB7XG4gICAgICAgICAgICBlbmNvZGVkICs9ICdcXFxcJyArIGNvZGUudG9TdHJpbmcoMTYpO1xuICAgICAgICAgICAgd3NCZWZvcmVIZXhJc05lZWRlZCA9IHRydWU7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChjb2RlID09PSBTUEFDRSB8fFxuICAgICAgICAgICAgY29kZSA9PT0gUkVWRVJTRV9TT0xJRFVTIHx8XG4gICAgICAgICAgICBjb2RlID09PSBRVU9UQVRJT05fTUFSSyB8fFxuICAgICAgICAgICAgY29kZSA9PT0gQVBPU1RST1BIRSB8fFxuICAgICAgICAgICAgY29kZSA9PT0gTEVGVFBBUkVOVEhFU0lTIHx8XG4gICAgICAgICAgICBjb2RlID09PSBSSUdIVFBBUkVOVEhFU0lTKSB7XG4gICAgICAgICAgICBlbmNvZGVkICs9ICdcXFxcJyArIHN0ci5jaGFyQXQoaSk7XG4gICAgICAgICAgICB3c0JlZm9yZUhleElzTmVlZGVkID0gZmFsc2U7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAod3NCZWZvcmVIZXhJc05lZWRlZCAmJiBjaGFyQ29kZURlZmluaXRpb25zLmlzSGV4RGlnaXQoY29kZSkpIHtcbiAgICAgICAgICAgICAgICBlbmNvZGVkICs9ICcgJztcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZW5jb2RlZCArPSBzdHIuY2hhckF0KGkpO1xuICAgICAgICAgICAgd3NCZWZvcmVIZXhJc05lZWRlZCA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuICd1cmwoJyArIGVuY29kZWQgKyAnKSc7XG59XG5cbmV4cG9ydHMuZGVjb2RlID0gZGVjb2RlO1xuZXhwb3J0cy5lbmNvZGUgPSBlbmNvZGU7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///84135\n")},7339:(__unused_webpack_module,exports)=>{"use strict";eval("\n\nconst { hasOwnProperty } = Object.prototype;\nconst noop = function() {};\n\nfunction ensureFunction(value) {\n    return typeof value === 'function' ? value : noop;\n}\n\nfunction invokeForType(fn, type) {\n    return function(node, item, list) {\n        if (node.type === type) {\n            fn.call(this, node, item, list);\n        }\n    };\n}\n\nfunction getWalkersFromStructure(name, nodeType) {\n    const structure = nodeType.structure;\n    const walkers = [];\n\n    for (const key in structure) {\n        if (hasOwnProperty.call(structure, key) === false) {\n            continue;\n        }\n\n        let fieldTypes = structure[key];\n        const walker = {\n            name: key,\n            type: false,\n            nullable: false\n        };\n\n        if (!Array.isArray(fieldTypes)) {\n            fieldTypes = [fieldTypes];\n        }\n\n        for (const fieldType of fieldTypes) {\n            if (fieldType === null) {\n                walker.nullable = true;\n            } else if (typeof fieldType === 'string') {\n                walker.type = 'node';\n            } else if (Array.isArray(fieldType)) {\n                walker.type = 'list';\n            }\n        }\n\n        if (walker.type) {\n            walkers.push(walker);\n        }\n    }\n\n    if (walkers.length) {\n        return {\n            context: nodeType.walkContext,\n            fields: walkers\n        };\n    }\n\n    return null;\n}\n\nfunction getTypesFromConfig(config) {\n    const types = {};\n\n    for (const name in config.node) {\n        if (hasOwnProperty.call(config.node, name)) {\n            const nodeType = config.node[name];\n\n            if (!nodeType.structure) {\n                throw new Error('Missed `structure` field in `' + name + '` node type definition');\n            }\n\n            types[name] = getWalkersFromStructure(name, nodeType);\n        }\n    }\n\n    return types;\n}\n\nfunction createTypeIterator(config, reverse) {\n    const fields = config.fields.slice();\n    const contextName = config.context;\n    const useContext = typeof contextName === 'string';\n\n    if (reverse) {\n        fields.reverse();\n    }\n\n    return function(node, context, walk, walkReducer) {\n        let prevContextValue;\n\n        if (useContext) {\n            prevContextValue = context[contextName];\n            context[contextName] = node;\n        }\n\n        for (const field of fields) {\n            const ref = node[field.name];\n\n            if (!field.nullable || ref) {\n                if (field.type === 'list') {\n                    const breakWalk = reverse\n                        ? ref.reduceRight(walkReducer, false)\n                        : ref.reduce(walkReducer, false);\n\n                    if (breakWalk) {\n                        return true;\n                    }\n                } else if (walk(ref)) {\n                    return true;\n                }\n            }\n        }\n\n        if (useContext) {\n            context[contextName] = prevContextValue;\n        }\n    };\n}\n\nfunction createFastTraveralMap({\n    StyleSheet,\n    Atrule,\n    Rule,\n    Block,\n    DeclarationList\n}) {\n    return {\n        Atrule: {\n            StyleSheet,\n            Atrule,\n            Rule,\n            Block\n        },\n        Rule: {\n            StyleSheet,\n            Atrule,\n            Rule,\n            Block\n        },\n        Declaration: {\n            StyleSheet,\n            Atrule,\n            Rule,\n            Block,\n            DeclarationList\n        }\n    };\n}\n\nfunction createWalker(config) {\n    const types = getTypesFromConfig(config);\n    const iteratorsNatural = {};\n    const iteratorsReverse = {};\n    const breakWalk = Symbol('break-walk');\n    const skipNode = Symbol('skip-node');\n\n    for (const name in types) {\n        if (hasOwnProperty.call(types, name) && types[name] !== null) {\n            iteratorsNatural[name] = createTypeIterator(types[name], false);\n            iteratorsReverse[name] = createTypeIterator(types[name], true);\n        }\n    }\n\n    const fastTraversalIteratorsNatural = createFastTraveralMap(iteratorsNatural);\n    const fastTraversalIteratorsReverse = createFastTraveralMap(iteratorsReverse);\n\n    const walk = function(root, options) {\n        function walkNode(node, item, list) {\n            const enterRet = enter.call(context, node, item, list);\n\n            if (enterRet === breakWalk) {\n                return true;\n            }\n\n            if (enterRet === skipNode) {\n                return false;\n            }\n\n            if (iterators.hasOwnProperty(node.type)) {\n                if (iterators[node.type](node, context, walkNode, walkReducer)) {\n                    return true;\n                }\n            }\n\n            if (leave.call(context, node, item, list) === breakWalk) {\n                return true;\n            }\n\n            return false;\n        }\n\n        let enter = noop;\n        let leave = noop;\n        let iterators = iteratorsNatural;\n        let walkReducer = (ret, data, item, list) => ret || walkNode(data, item, list);\n        const context = {\n            break: breakWalk,\n            skip: skipNode,\n\n            root,\n            stylesheet: null,\n            atrule: null,\n            atrulePrelude: null,\n            rule: null,\n            selector: null,\n            block: null,\n            declaration: null,\n            function: null\n        };\n\n        if (typeof options === 'function') {\n            enter = options;\n        } else if (options) {\n            enter = ensureFunction(options.enter);\n            leave = ensureFunction(options.leave);\n\n            if (options.reverse) {\n                iterators = iteratorsReverse;\n            }\n\n            if (options.visit) {\n                if (fastTraversalIteratorsNatural.hasOwnProperty(options.visit)) {\n                    iterators = options.reverse\n                        ? fastTraversalIteratorsReverse[options.visit]\n                        : fastTraversalIteratorsNatural[options.visit];\n                } else if (!types.hasOwnProperty(options.visit)) {\n                    throw new Error('Bad value `' + options.visit + '` for `visit` option (should be: ' + Object.keys(types).sort().join(', ') + ')');\n                }\n\n                enter = invokeForType(enter, options.visit);\n                leave = invokeForType(leave, options.visit);\n            }\n        }\n\n        if (enter === noop && leave === noop) {\n            throw new Error('Neither `enter` nor `leave` walker handler is set or both aren\\'t a function');\n        }\n\n        walkNode(root);\n    };\n\n    walk.break = breakWalk;\n    walk.skip = skipNode;\n\n    walk.find = function(ast, fn) {\n        let found = null;\n\n        walk(ast, function(node, item, list) {\n            if (fn.call(this, node, item, list)) {\n                found = node;\n                return breakWalk;\n            }\n        });\n\n        return found;\n    };\n\n    walk.findLast = function(ast, fn) {\n        let found = null;\n\n        walk(ast, {\n            reverse: true,\n            enter(node, item, list) {\n                if (fn.call(this, node, item, list)) {\n                    found = node;\n                    return breakWalk;\n                }\n            }\n        });\n\n        return found;\n    };\n\n    walk.findAll = function(ast, fn) {\n        const found = [];\n\n        walk(ast, function(node, item, list) {\n            if (fn.call(this, node, item, list)) {\n                found.push(node);\n            }\n        });\n\n        return found;\n    };\n\n    return walk;\n}\n\nexports.createWalker = createWalker;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///7339\n")},28594:module=>{eval('module.exports = {\n    "generic": true,\n    "types": {\n        "absolute-size": "xx-small|x-small|small|medium|large|x-large|xx-large|xxx-large",\n        "alpha-value": "<number>|<percentage>",\n        "angle-percentage": "<angle>|<percentage>",\n        "angular-color-hint": "<angle-percentage>",\n        "angular-color-stop": "<color>&&<color-stop-angle>?",\n        "angular-color-stop-list": "[<angular-color-stop> [, <angular-color-hint>]?]# , <angular-color-stop>",\n        "animateable-feature": "scroll-position|contents|<custom-ident>",\n        "attachment": "scroll|fixed|local",\n        "attr()": "attr( <attr-name> <type-or-unit>? [, <attr-fallback>]? )",\n        "attr-matcher": "[\'~\'|\'|\'|\'^\'|\'$\'|\'*\']? \'=\'",\n        "attr-modifier": "i|s",\n        "attribute-selector": "\'[\' <wq-name> \']\'|\'[\' <wq-name> <attr-matcher> [<string-token>|<ident-token>] <attr-modifier>? \']\'",\n        "auto-repeat": "repeat( [auto-fill|auto-fit] , [<line-names>? <fixed-size>]+ <line-names>? )",\n        "auto-track-list": "[<line-names>? [<fixed-size>|<fixed-repeat>]]* <line-names>? <auto-repeat> [<line-names>? [<fixed-size>|<fixed-repeat>]]* <line-names>?",\n        "baseline-position": "[first|last]? baseline",\n        "basic-shape": "<inset()>|<circle()>|<ellipse()>|<polygon()>|<path()>",\n        "bg-image": "none|<image>",\n        "bg-layer": "<bg-image>||<bg-position> [/ <bg-size>]?||<repeat-style>||<attachment>||<box>||<box>",\n        "bg-position": "[[left|center|right|top|bottom|<length-percentage>]|[left|center|right|<length-percentage>] [top|center|bottom|<length-percentage>]|[center|[left|right] <length-percentage>?]&&[center|[top|bottom] <length-percentage>?]]",\n        "bg-size": "[<length-percentage>|auto]{1,2}|cover|contain",\n        "blur()": "blur( <length> )",\n        "blend-mode": "normal|multiply|screen|overlay|darken|lighten|color-dodge|color-burn|hard-light|soft-light|difference|exclusion|hue|saturation|color|luminosity",\n        "box": "border-box|padding-box|content-box",\n        "brightness()": "brightness( <number-percentage> )",\n        "calc()": "calc( <calc-sum> )",\n        "calc-sum": "<calc-product> [[\'+\'|\'-\'] <calc-product>]*",\n        "calc-product": "<calc-value> [\'*\' <calc-value>|\'/\' <number>]*",\n        "calc-value": "<number>|<dimension>|<percentage>|( <calc-sum> )",\n        "cf-final-image": "<image>|<color>",\n        "cf-mixing-image": "<percentage>?&&<image>",\n        "circle()": "circle( [<shape-radius>]? [at <position>]? )",\n        "clamp()": "clamp( <calc-sum>#{3} )",\n        "class-selector": "\'.\' <ident-token>",\n        "clip-source": "<url>",\n        "color": "<rgb()>|<rgba()>|<hsl()>|<hsla()>|<hwb()>|<lab()>|<lch()>|<hex-color>|<named-color>|currentcolor|<deprecated-system-color>",\n        "color-stop": "<color-stop-length>|<color-stop-angle>",\n        "color-stop-angle": "<angle-percentage>{1,2}",\n        "color-stop-length": "<length-percentage>{1,2}",\n        "color-stop-list": "[<linear-color-stop> [, <linear-color-hint>]?]# , <linear-color-stop>",\n        "combinator": "\'>\'|\'+\'|\'~\'|[\'||\']",\n        "common-lig-values": "[common-ligatures|no-common-ligatures]",\n        "compat-auto": "searchfield|textarea|push-button|slider-horizontal|checkbox|radio|square-button|menulist|listbox|meter|progress-bar|button",\n        "composite-style": "clear|copy|source-over|source-in|source-out|source-atop|destination-over|destination-in|destination-out|destination-atop|xor",\n        "compositing-operator": "add|subtract|intersect|exclude",\n        "compound-selector": "[<type-selector>? <subclass-selector>* [<pseudo-element-selector> <pseudo-class-selector>*]*]!",\n        "compound-selector-list": "<compound-selector>#",\n        "complex-selector": "<compound-selector> [<combinator>? <compound-selector>]*",\n        "complex-selector-list": "<complex-selector>#",\n        "conic-gradient()": "conic-gradient( [from <angle>]? [at <position>]? , <angular-color-stop-list> )",\n        "contextual-alt-values": "[contextual|no-contextual]",\n        "content-distribution": "space-between|space-around|space-evenly|stretch",\n        "content-list": "[<string>|contents|<image>|<counter>|<quote>|<target>|<leader()>|<attr()>]+",\n        "content-position": "center|start|end|flex-start|flex-end",\n        "content-replacement": "<image>",\n        "contrast()": "contrast( [<number-percentage>] )",\n        "counter": "<counter()>|<counters()>",\n        "counter()": "counter( <counter-name> , <counter-style>? )",\n        "counter-name": "<custom-ident>",\n        "counter-style": "<counter-style-name>|symbols( )",\n        "counter-style-name": "<custom-ident>",\n        "counters()": "counters( <counter-name> , <string> , <counter-style>? )",\n        "cross-fade()": "cross-fade( <cf-mixing-image> , <cf-final-image>? )",\n        "cubic-bezier-timing-function": "ease|ease-in|ease-out|ease-in-out|cubic-bezier( <number [0,1]> , <number> , <number [0,1]> , <number> )",\n        "deprecated-system-color": "ActiveBorder|ActiveCaption|AppWorkspace|Background|ButtonFace|ButtonHighlight|ButtonShadow|ButtonText|CaptionText|GrayText|Highlight|HighlightText|InactiveBorder|InactiveCaption|InactiveCaptionText|InfoBackground|InfoText|Menu|MenuText|Scrollbar|ThreeDDarkShadow|ThreeDFace|ThreeDHighlight|ThreeDLightShadow|ThreeDShadow|Window|WindowFrame|WindowText",\n        "discretionary-lig-values": "[discretionary-ligatures|no-discretionary-ligatures]",\n        "display-box": "contents|none",\n        "display-inside": "flow|flow-root|table|flex|grid|ruby",\n        "display-internal": "table-row-group|table-header-group|table-footer-group|table-row|table-cell|table-column-group|table-column|table-caption|ruby-base|ruby-text|ruby-base-container|ruby-text-container",\n        "display-legacy": "inline-block|inline-list-item|inline-table|inline-flex|inline-grid",\n        "display-listitem": "<display-outside>?&&[flow|flow-root]?&&list-item",\n        "display-outside": "block|inline|run-in",\n        "drop-shadow()": "drop-shadow( <length>{2,3} <color>? )",\n        "east-asian-variant-values": "[jis78|jis83|jis90|jis04|simplified|traditional]",\n        "east-asian-width-values": "[full-width|proportional-width]",\n        "element()": "element( <custom-ident> , [first|start|last|first-except]? )|element( <id-selector> )",\n        "ellipse()": "ellipse( [<shape-radius>{2}]? [at <position>]? )",\n        "ending-shape": "circle|ellipse",\n        "env()": "env( <custom-ident> , <declaration-value>? )",\n        "explicit-track-list": "[<line-names>? <track-size>]+ <line-names>?",\n        "family-name": "<string>|<custom-ident>+",\n        "feature-tag-value": "<string> [<integer>|on|off]?",\n        "feature-type": "@stylistic|@historical-forms|@styleset|@character-variant|@swash|@ornaments|@annotation",\n        "feature-value-block": "<feature-type> \'{\' <feature-value-declaration-list> \'}\'",\n        "feature-value-block-list": "<feature-value-block>+",\n        "feature-value-declaration": "<custom-ident> : <integer>+ ;",\n        "feature-value-declaration-list": "<feature-value-declaration>",\n        "feature-value-name": "<custom-ident>",\n        "fill-rule": "nonzero|evenodd",\n        "filter-function": "<blur()>|<brightness()>|<contrast()>|<drop-shadow()>|<grayscale()>|<hue-rotate()>|<invert()>|<opacity()>|<saturate()>|<sepia()>",\n        "filter-function-list": "[<filter-function>|<url>]+",\n        "final-bg-layer": "<\'background-color\'>||<bg-image>||<bg-position> [/ <bg-size>]?||<repeat-style>||<attachment>||<box>||<box>",\n        "fit-content()": "fit-content( [<length>|<percentage>] )",\n        "fixed-breadth": "<length-percentage>",\n        "fixed-repeat": "repeat( [<integer [1,∞]>] , [<line-names>? <fixed-size>]+ <line-names>? )",\n        "fixed-size": "<fixed-breadth>|minmax( <fixed-breadth> , <track-breadth> )|minmax( <inflexible-breadth> , <fixed-breadth> )",\n        "font-stretch-absolute": "normal|ultra-condensed|extra-condensed|condensed|semi-condensed|semi-expanded|expanded|extra-expanded|ultra-expanded|<percentage>",\n        "font-variant-css21": "[normal|small-caps]",\n        "font-weight-absolute": "normal|bold|<number [1,1000]>",\n        "frequency-percentage": "<frequency>|<percentage>",\n        "general-enclosed": "[<function-token> <any-value> )]|( <ident> <any-value> )",\n        "generic-family": "serif|sans-serif|cursive|fantasy|monospace|-apple-system",\n        "generic-name": "serif|sans-serif|cursive|fantasy|monospace",\n        "geometry-box": "<shape-box>|fill-box|stroke-box|view-box",\n        "gradient": "<linear-gradient()>|<repeating-linear-gradient()>|<radial-gradient()>|<repeating-radial-gradient()>|<conic-gradient()>|<repeating-conic-gradient()>|<-legacy-gradient>",\n        "grayscale()": "grayscale( <number-percentage> )",\n        "grid-line": "auto|<custom-ident>|[<integer>&&<custom-ident>?]|[span&&[<integer>||<custom-ident>]]",\n        "historical-lig-values": "[historical-ligatures|no-historical-ligatures]",\n        "hsl()": "hsl( <hue> <percentage> <percentage> [/ <alpha-value>]? )|hsl( <hue> , <percentage> , <percentage> , <alpha-value>? )",\n        "hsla()": "hsla( <hue> <percentage> <percentage> [/ <alpha-value>]? )|hsla( <hue> , <percentage> , <percentage> , <alpha-value>? )",\n        "hue": "<number>|<angle>",\n        "hue-rotate()": "hue-rotate( <angle> )",\n        "hwb()": "hwb( [<hue>|none] [<percentage>|none] [<percentage>|none] [/ [<alpha-value>|none]]? )",\n        "image": "<url>|<image()>|<image-set()>|<element()>|<paint()>|<cross-fade()>|<gradient>",\n        "image()": "image( <image-tags>? [<image-src>? , <color>?]! )",\n        "image-set()": "image-set( <image-set-option># )",\n        "image-set-option": "[<image>|<string>] [<resolution>||type( <string> )]",\n        "image-src": "<url>|<string>",\n        "image-tags": "ltr|rtl",\n        "inflexible-breadth": "<length>|<percentage>|min-content|max-content|auto",\n        "inset()": "inset( <length-percentage>{1,4} [round <\'border-radius\'>]? )",\n        "invert()": "invert( <number-percentage> )",\n        "keyframes-name": "<custom-ident>|<string>",\n        "keyframe-block": "<keyframe-selector># { <declaration-list> }",\n        "keyframe-block-list": "<keyframe-block>+",\n        "keyframe-selector": "from|to|<percentage>",\n        "layer()": "layer( <layer-name> )",\n        "layer-name": "<ident> [\'.\' <ident>]*",\n        "leader()": "leader( <leader-type> )",\n        "leader-type": "dotted|solid|space|<string>",\n        "length-percentage": "<length>|<percentage>",\n        "line-names": "\'[\' <custom-ident>* \']\'",\n        "line-name-list": "[<line-names>|<name-repeat>]+",\n        "line-style": "none|hidden|dotted|dashed|solid|double|groove|ridge|inset|outset",\n        "line-width": "<length>|thin|medium|thick",\n        "linear-color-hint": "<length-percentage>",\n        "linear-color-stop": "<color> <color-stop-length>?",\n        "linear-gradient()": "linear-gradient( [<angle>|to <side-or-corner>]? , <color-stop-list> )",\n        "mask-layer": "<mask-reference>||<position> [/ <bg-size>]?||<repeat-style>||<geometry-box>||[<geometry-box>|no-clip]||<compositing-operator>||<masking-mode>",\n        "mask-position": "[<length-percentage>|left|center|right] [<length-percentage>|top|center|bottom]?",\n        "mask-reference": "none|<image>|<mask-source>",\n        "mask-source": "<url>",\n        "masking-mode": "alpha|luminance|match-source",\n        "matrix()": "matrix( <number>#{6} )",\n        "matrix3d()": "matrix3d( <number>#{16} )",\n        "max()": "max( <calc-sum># )",\n        "media-and": "<media-in-parens> [and <media-in-parens>]+",\n        "media-condition": "<media-not>|<media-and>|<media-or>|<media-in-parens>",\n        "media-condition-without-or": "<media-not>|<media-and>|<media-in-parens>",\n        "media-feature": "( [<mf-plain>|<mf-boolean>|<mf-range>] )",\n        "media-in-parens": "( <media-condition> )|<media-feature>|<general-enclosed>",\n        "media-not": "not <media-in-parens>",\n        "media-or": "<media-in-parens> [or <media-in-parens>]+",\n        "media-query": "<media-condition>|[not|only]? <media-type> [and <media-condition-without-or>]?",\n        "media-query-list": "<media-query>#",\n        "media-type": "<ident>",\n        "mf-boolean": "<mf-name>",\n        "mf-name": "<ident>",\n        "mf-plain": "<mf-name> : <mf-value>",\n        "mf-range": "<mf-name> [\'<\'|\'>\']? \'=\'? <mf-value>|<mf-value> [\'<\'|\'>\']? \'=\'? <mf-name>|<mf-value> \'<\' \'=\'? <mf-name> \'<\' \'=\'? <mf-value>|<mf-value> \'>\' \'=\'? <mf-name> \'>\' \'=\'? <mf-value>",\n        "mf-value": "<number>|<dimension>|<ident>|<ratio>",\n        "min()": "min( <calc-sum># )",\n        "minmax()": "minmax( [<length>|<percentage>|min-content|max-content|auto] , [<length>|<percentage>|<flex>|min-content|max-content|auto] )",\n        "name-repeat": "repeat( [<integer [1,∞]>|auto-fill] , <line-names>+ )",\n        "named-color": "transparent|aliceblue|antiquewhite|aqua|aquamarine|azure|beige|bisque|black|blanchedalmond|blue|blueviolet|brown|burlywood|cadetblue|chartreuse|chocolate|coral|cornflowerblue|cornsilk|crimson|cyan|darkblue|darkcyan|darkgoldenrod|darkgray|darkgreen|darkgrey|darkkhaki|darkmagenta|darkolivegreen|darkorange|darkorchid|darkred|darksalmon|darkseagreen|darkslateblue|darkslategray|darkslategrey|darkturquoise|darkviolet|deeppink|deepskyblue|dimgray|dimgrey|dodgerblue|firebrick|floralwhite|forestgreen|fuchsia|gainsboro|ghostwhite|gold|goldenrod|gray|green|greenyellow|grey|honeydew|hotpink|indianred|indigo|ivory|khaki|lavender|lavenderblush|lawngreen|lemonchiffon|lightblue|lightcoral|lightcyan|lightgoldenrodyellow|lightgray|lightgreen|lightgrey|lightpink|lightsalmon|lightseagreen|lightskyblue|lightslategray|lightslategrey|lightsteelblue|lightyellow|lime|limegreen|linen|magenta|maroon|mediumaquamarine|mediumblue|mediumorchid|mediumpurple|mediumseagreen|mediumslateblue|mediumspringgreen|mediumturquoise|mediumvioletred|midnightblue|mintcream|mistyrose|moccasin|navajowhite|navy|oldlace|olive|olivedrab|orange|orangered|orchid|palegoldenrod|palegreen|paleturquoise|palevioletred|papayawhip|peachpuff|peru|pink|plum|powderblue|purple|rebeccapurple|red|rosybrown|royalblue|saddlebrown|salmon|sandybrown|seagreen|seashell|sienna|silver|skyblue|slateblue|slategray|slategrey|snow|springgreen|steelblue|tan|teal|thistle|tomato|turquoise|violet|wheat|white|whitesmoke|yellow|yellowgreen|<-non-standard-color>",\n        "namespace-prefix": "<ident>",\n        "ns-prefix": "[<ident-token>|\'*\']? \'|\'",\n        "number-percentage": "<number>|<percentage>",\n        "numeric-figure-values": "[lining-nums|oldstyle-nums]",\n        "numeric-fraction-values": "[diagonal-fractions|stacked-fractions]",\n        "numeric-spacing-values": "[proportional-nums|tabular-nums]",\n        "nth": "<an-plus-b>|even|odd",\n        "opacity()": "opacity( [<number-percentage>] )",\n        "overflow-position": "unsafe|safe",\n        "outline-radius": "<length>|<percentage>",\n        "page-body": "<declaration>? [; <page-body>]?|<page-margin-box> <page-body>",\n        "page-margin-box": "<page-margin-box-type> \'{\' <declaration-list> \'}\'",\n        "page-margin-box-type": "@top-left-corner|@top-left|@top-center|@top-right|@top-right-corner|@bottom-left-corner|@bottom-left|@bottom-center|@bottom-right|@bottom-right-corner|@left-top|@left-middle|@left-bottom|@right-top|@right-middle|@right-bottom",\n        "page-selector-list": "[<page-selector>#]?",\n        "page-selector": "<pseudo-page>+|<ident> <pseudo-page>*",\n        "page-size": "A5|A4|A3|B5|B4|JIS-B5|JIS-B4|letter|legal|ledger",\n        "path()": "path( [<fill-rule> ,]? <string> )",\n        "paint()": "paint( <ident> , <declaration-value>? )",\n        "perspective()": "perspective( <length> )",\n        "polygon()": "polygon( <fill-rule>? , [<length-percentage> <length-percentage>]# )",\n        "position": "[[left|center|right]||[top|center|bottom]|[left|center|right|<length-percentage>] [top|center|bottom|<length-percentage>]?|[[left|right] <length-percentage>]&&[[top|bottom] <length-percentage>]]",\n        "pseudo-class-selector": "\':\' <ident-token>|\':\' <function-token> <any-value> \')\'",\n        "pseudo-element-selector": "\':\' <pseudo-class-selector>",\n        "pseudo-page": ": [left|right|first|blank]",\n        "quote": "open-quote|close-quote|no-open-quote|no-close-quote",\n        "radial-gradient()": "radial-gradient( [<ending-shape>||<size>]? [at <position>]? , <color-stop-list> )",\n        "relative-selector": "<combinator>? <complex-selector>",\n        "relative-selector-list": "<relative-selector>#",\n        "relative-size": "larger|smaller",\n        "repeat-style": "repeat-x|repeat-y|[repeat|space|round|no-repeat]{1,2}",\n        "repeating-conic-gradient()": "repeating-conic-gradient( [from <angle>]? [at <position>]? , <angular-color-stop-list> )",\n        "repeating-linear-gradient()": "repeating-linear-gradient( [<angle>|to <side-or-corner>]? , <color-stop-list> )",\n        "repeating-radial-gradient()": "repeating-radial-gradient( [<ending-shape>||<size>]? [at <position>]? , <color-stop-list> )",\n        "rgb()": "rgb( <percentage>{3} [/ <alpha-value>]? )|rgb( <number>{3} [/ <alpha-value>]? )|rgb( <percentage>#{3} , <alpha-value>? )|rgb( <number>#{3} , <alpha-value>? )",\n        "rgba()": "rgba( <percentage>{3} [/ <alpha-value>]? )|rgba( <number>{3} [/ <alpha-value>]? )|rgba( <percentage>#{3} , <alpha-value>? )|rgba( <number>#{3} , <alpha-value>? )",\n        "rotate()": "rotate( [<angle>|<zero>] )",\n        "rotate3d()": "rotate3d( <number> , <number> , <number> , [<angle>|<zero>] )",\n        "rotateX()": "rotateX( [<angle>|<zero>] )",\n        "rotateY()": "rotateY( [<angle>|<zero>] )",\n        "rotateZ()": "rotateZ( [<angle>|<zero>] )",\n        "saturate()": "saturate( <number-percentage> )",\n        "scale()": "scale( <number> , <number>? )",\n        "scale3d()": "scale3d( <number> , <number> , <number> )",\n        "scaleX()": "scaleX( <number> )",\n        "scaleY()": "scaleY( <number> )",\n        "scaleZ()": "scaleZ( <number> )",\n        "self-position": "center|start|end|self-start|self-end|flex-start|flex-end",\n        "shape-radius": "<length-percentage>|closest-side|farthest-side",\n        "skew()": "skew( [<angle>|<zero>] , [<angle>|<zero>]? )",\n        "skewX()": "skewX( [<angle>|<zero>] )",\n        "skewY()": "skewY( [<angle>|<zero>] )",\n        "sepia()": "sepia( <number-percentage> )",\n        "shadow": "inset?&&<length>{2,4}&&<color>?",\n        "shadow-t": "[<length>{2,3}&&<color>?]",\n        "shape": "rect( <top> , <right> , <bottom> , <left> )|rect( <top> <right> <bottom> <left> )",\n        "shape-box": "<box>|margin-box",\n        "side-or-corner": "[left|right]||[top|bottom]",\n        "single-animation": "<time>||<easing-function>||<time>||<single-animation-iteration-count>||<single-animation-direction>||<single-animation-fill-mode>||<single-animation-play-state>||[none|<keyframes-name>]",\n        "single-animation-direction": "normal|reverse|alternate|alternate-reverse",\n        "single-animation-fill-mode": "none|forwards|backwards|both",\n        "single-animation-iteration-count": "infinite|<number>",\n        "single-animation-play-state": "running|paused",\n        "single-animation-timeline": "auto|none|<timeline-name>",\n        "single-transition": "[none|<single-transition-property>]||<time>||<easing-function>||<time>",\n        "single-transition-property": "all|<custom-ident>",\n        "size": "closest-side|farthest-side|closest-corner|farthest-corner|<length>|<length-percentage>{2}",\n        "step-position": "jump-start|jump-end|jump-none|jump-both|start|end",\n        "step-timing-function": "step-start|step-end|steps( <integer> [, <step-position>]? )",\n        "subclass-selector": "<id-selector>|<class-selector>|<attribute-selector>|<pseudo-class-selector>",\n        "supports-condition": "not <supports-in-parens>|<supports-in-parens> [and <supports-in-parens>]*|<supports-in-parens> [or <supports-in-parens>]*",\n        "supports-in-parens": "( <supports-condition> )|<supports-feature>|<general-enclosed>",\n        "supports-feature": "<supports-decl>|<supports-selector-fn>",\n        "supports-decl": "( <declaration> )",\n        "supports-selector-fn": "selector( <complex-selector> )",\n        "symbol": "<string>|<image>|<custom-ident>",\n        "target": "<target-counter()>|<target-counters()>|<target-text()>",\n        "target-counter()": "target-counter( [<string>|<url>] , <custom-ident> , <counter-style>? )",\n        "target-counters()": "target-counters( [<string>|<url>] , <custom-ident> , <string> , <counter-style>? )",\n        "target-text()": "target-text( [<string>|<url>] , [content|before|after|first-letter]? )",\n        "time-percentage": "<time>|<percentage>",\n        "timeline-name": "<custom-ident>|<string>",\n        "easing-function": "linear|<cubic-bezier-timing-function>|<step-timing-function>",\n        "track-breadth": "<length-percentage>|<flex>|min-content|max-content|auto",\n        "track-list": "[<line-names>? [<track-size>|<track-repeat>]]+ <line-names>?",\n        "track-repeat": "repeat( [<integer [1,∞]>] , [<line-names>? <track-size>]+ <line-names>? )",\n        "track-size": "<track-breadth>|minmax( <inflexible-breadth> , <track-breadth> )|fit-content( [<length>|<percentage>] )",\n        "transform-function": "<matrix()>|<translate()>|<translateX()>|<translateY()>|<scale()>|<scaleX()>|<scaleY()>|<rotate()>|<skew()>|<skewX()>|<skewY()>|<matrix3d()>|<translate3d()>|<translateZ()>|<scale3d()>|<scaleZ()>|<rotate3d()>|<rotateX()>|<rotateY()>|<rotateZ()>|<perspective()>",\n        "transform-list": "<transform-function>+",\n        "translate()": "translate( <length-percentage> , <length-percentage>? )",\n        "translate3d()": "translate3d( <length-percentage> , <length-percentage> , <length> )",\n        "translateX()": "translateX( <length-percentage> )",\n        "translateY()": "translateY( <length-percentage> )",\n        "translateZ()": "translateZ( <length> )",\n        "type-or-unit": "string|color|url|integer|number|length|angle|time|frequency|cap|ch|em|ex|ic|lh|rlh|rem|vb|vi|vw|vh|vmin|vmax|mm|Q|cm|in|pt|pc|px|deg|grad|rad|turn|ms|s|Hz|kHz|%",\n        "type-selector": "<wq-name>|<ns-prefix>? \'*\'",\n        "var()": "var( <custom-property-name> , <declaration-value>? )",\n        "viewport-length": "auto|<length-percentage>",\n        "visual-box": "content-box|padding-box|border-box",\n        "wq-name": "<ns-prefix>? <ident-token>",\n        "-legacy-gradient": "<-webkit-gradient()>|<-legacy-linear-gradient>|<-legacy-repeating-linear-gradient>|<-legacy-radial-gradient>|<-legacy-repeating-radial-gradient>",\n        "-legacy-linear-gradient": "-moz-linear-gradient( <-legacy-linear-gradient-arguments> )|-webkit-linear-gradient( <-legacy-linear-gradient-arguments> )|-o-linear-gradient( <-legacy-linear-gradient-arguments> )",\n        "-legacy-repeating-linear-gradient": "-moz-repeating-linear-gradient( <-legacy-linear-gradient-arguments> )|-webkit-repeating-linear-gradient( <-legacy-linear-gradient-arguments> )|-o-repeating-linear-gradient( <-legacy-linear-gradient-arguments> )",\n        "-legacy-linear-gradient-arguments": "[<angle>|<side-or-corner>]? , <color-stop-list>",\n        "-legacy-radial-gradient": "-moz-radial-gradient( <-legacy-radial-gradient-arguments> )|-webkit-radial-gradient( <-legacy-radial-gradient-arguments> )|-o-radial-gradient( <-legacy-radial-gradient-arguments> )",\n        "-legacy-repeating-radial-gradient": "-moz-repeating-radial-gradient( <-legacy-radial-gradient-arguments> )|-webkit-repeating-radial-gradient( <-legacy-radial-gradient-arguments> )|-o-repeating-radial-gradient( <-legacy-radial-gradient-arguments> )",\n        "-legacy-radial-gradient-arguments": "[<position> ,]? [[[<-legacy-radial-gradient-shape>||<-legacy-radial-gradient-size>]|[<length>|<percentage>]{2}] ,]? <color-stop-list>",\n        "-legacy-radial-gradient-size": "closest-side|closest-corner|farthest-side|farthest-corner|contain|cover",\n        "-legacy-radial-gradient-shape": "circle|ellipse",\n        "-non-standard-font": "-apple-system-body|-apple-system-headline|-apple-system-subheadline|-apple-system-caption1|-apple-system-caption2|-apple-system-footnote|-apple-system-short-body|-apple-system-short-headline|-apple-system-short-subheadline|-apple-system-short-caption1|-apple-system-short-footnote|-apple-system-tall-body",\n        "-non-standard-color": "-moz-ButtonDefault|-moz-ButtonHoverFace|-moz-ButtonHoverText|-moz-CellHighlight|-moz-CellHighlightText|-moz-Combobox|-moz-ComboboxText|-moz-Dialog|-moz-DialogText|-moz-dragtargetzone|-moz-EvenTreeRow|-moz-Field|-moz-FieldText|-moz-html-CellHighlight|-moz-html-CellHighlightText|-moz-mac-accentdarkestshadow|-moz-mac-accentdarkshadow|-moz-mac-accentface|-moz-mac-accentlightesthighlight|-moz-mac-accentlightshadow|-moz-mac-accentregularhighlight|-moz-mac-accentregularshadow|-moz-mac-chrome-active|-moz-mac-chrome-inactive|-moz-mac-focusring|-moz-mac-menuselect|-moz-mac-menushadow|-moz-mac-menutextselect|-moz-MenuHover|-moz-MenuHoverText|-moz-MenuBarText|-moz-MenuBarHoverText|-moz-nativehyperlinktext|-moz-OddTreeRow|-moz-win-communicationstext|-moz-win-mediatext|-moz-activehyperlinktext|-moz-default-background-color|-moz-default-color|-moz-hyperlinktext|-moz-visitedhyperlinktext|-webkit-activelink|-webkit-focus-ring-color|-webkit-link|-webkit-text",\n        "-non-standard-image-rendering": "optimize-contrast|-moz-crisp-edges|-o-crisp-edges|-webkit-optimize-contrast",\n        "-non-standard-overflow": "-moz-scrollbars-none|-moz-scrollbars-horizontal|-moz-scrollbars-vertical|-moz-hidden-unscrollable",\n        "-non-standard-width": "fill-available|min-intrinsic|intrinsic|-moz-available|-moz-fit-content|-moz-min-content|-moz-max-content|-webkit-min-content|-webkit-max-content",\n        "-webkit-gradient()": "-webkit-gradient( <-webkit-gradient-type> , <-webkit-gradient-point> [, <-webkit-gradient-point>|, <-webkit-gradient-radius> , <-webkit-gradient-point>] [, <-webkit-gradient-radius>]? [, <-webkit-gradient-color-stop>]* )",\n        "-webkit-gradient-color-stop": "from( <color> )|color-stop( [<number-zero-one>|<percentage>] , <color> )|to( <color> )",\n        "-webkit-gradient-point": "[left|center|right|<length-percentage>] [top|center|bottom|<length-percentage>]",\n        "-webkit-gradient-radius": "<length>|<percentage>",\n        "-webkit-gradient-type": "linear|radial",\n        "-webkit-mask-box-repeat": "repeat|stretch|round",\n        "-webkit-mask-clip-style": "border|border-box|padding|padding-box|content|content-box|text",\n        "-ms-filter-function-list": "<-ms-filter-function>+",\n        "-ms-filter-function": "<-ms-filter-function-progid>|<-ms-filter-function-legacy>",\n        "-ms-filter-function-progid": "\'progid:\' [<ident-token> \'.\']* [<ident-token>|<function-token> <any-value>? )]",\n        "-ms-filter-function-legacy": "<ident-token>|<function-token> <any-value>? )",\n        "-ms-filter": "<string>",\n        "age": "child|young|old",\n        "attr-name": "<wq-name>",\n        "attr-fallback": "<any-value>",\n        "bg-clip": "<box>|border|text",\n        "border-radius": "<length-percentage>{1,2}",\n        "bottom": "<length>|auto",\n        "generic-voice": "[<age>? <gender> <integer>?]",\n        "gender": "male|female|neutral",\n        "lab()": "lab( [<percentage>|<number>|none] [<percentage>|<number>|none] [<percentage>|<number>|none] [/ [<alpha-value>|none]]? )",\n        "lch()": "lch( [<percentage>|<number>|none] [<percentage>|<number>|none] [<hue>|none] [/ [<alpha-value>|none]]? )",\n        "left": "<length>|auto",\n        "mask-image": "<mask-reference>#",\n        "paint": "none|<color>|<url> [none|<color>]?|context-fill|context-stroke",\n        "ratio": "<number [0,∞]> [/ <number [0,∞]>]?",\n        "reversed-counter-name": "reversed( <counter-name> )",\n        "right": "<length>|auto",\n        "svg-length": "<percentage>|<length>|<number>",\n        "svg-writing-mode": "lr-tb|rl-tb|tb-rl|lr|rl|tb",\n        "top": "<length>|auto",\n        "track-group": "\'(\' [<string>* <track-minmax> <string>*]+ \')\' [\'[\' <positive-integer> \']\']?|<track-minmax>",\n        "track-list-v0": "[<string>* <track-group> <string>*]+|none",\n        "track-minmax": "minmax( <track-breadth> , <track-breadth> )|auto|<track-breadth>|fit-content",\n        "x": "<number>",\n        "y": "<number>",\n        "declaration": "<ident-token> : <declaration-value>? [\'!\' important]?",\n        "declaration-list": "[<declaration>? \';\']* <declaration>?",\n        "url": "url( <string> <url-modifier>* )|<url-token>",\n        "url-modifier": "<ident>|<function-token> <any-value> )",\n        "number-zero-one": "<number [0,1]>",\n        "number-one-or-greater": "<number [1,∞]>",\n        "positive-integer": "<integer [0,∞]>",\n        "-non-standard-display": "-ms-inline-flexbox|-ms-grid|-ms-inline-grid|-webkit-flex|-webkit-inline-flex|-webkit-box|-webkit-inline-box|-moz-inline-stack|-moz-box|-moz-inline-box"\n    },\n    "properties": {\n        "--*": "<declaration-value>",\n        "-ms-accelerator": "false|true",\n        "-ms-block-progression": "tb|rl|bt|lr",\n        "-ms-content-zoom-chaining": "none|chained",\n        "-ms-content-zooming": "none|zoom",\n        "-ms-content-zoom-limit": "<\'-ms-content-zoom-limit-min\'> <\'-ms-content-zoom-limit-max\'>",\n        "-ms-content-zoom-limit-max": "<percentage>",\n        "-ms-content-zoom-limit-min": "<percentage>",\n        "-ms-content-zoom-snap": "<\'-ms-content-zoom-snap-type\'>||<\'-ms-content-zoom-snap-points\'>",\n        "-ms-content-zoom-snap-points": "snapInterval( <percentage> , <percentage> )|snapList( <percentage># )",\n        "-ms-content-zoom-snap-type": "none|proximity|mandatory",\n        "-ms-filter": "<string>",\n        "-ms-flow-from": "[none|<custom-ident>]#",\n        "-ms-flow-into": "[none|<custom-ident>]#",\n        "-ms-grid-columns": "none|<track-list>|<auto-track-list>",\n        "-ms-grid-rows": "none|<track-list>|<auto-track-list>",\n        "-ms-high-contrast-adjust": "auto|none",\n        "-ms-hyphenate-limit-chars": "auto|<integer>{1,3}",\n        "-ms-hyphenate-limit-lines": "no-limit|<integer>",\n        "-ms-hyphenate-limit-zone": "<percentage>|<length>",\n        "-ms-ime-align": "auto|after",\n        "-ms-overflow-style": "auto|none|scrollbar|-ms-autohiding-scrollbar",\n        "-ms-scrollbar-3dlight-color": "<color>",\n        "-ms-scrollbar-arrow-color": "<color>",\n        "-ms-scrollbar-base-color": "<color>",\n        "-ms-scrollbar-darkshadow-color": "<color>",\n        "-ms-scrollbar-face-color": "<color>",\n        "-ms-scrollbar-highlight-color": "<color>",\n        "-ms-scrollbar-shadow-color": "<color>",\n        "-ms-scrollbar-track-color": "<color>",\n        "-ms-scroll-chaining": "chained|none",\n        "-ms-scroll-limit": "<\'-ms-scroll-limit-x-min\'> <\'-ms-scroll-limit-y-min\'> <\'-ms-scroll-limit-x-max\'> <\'-ms-scroll-limit-y-max\'>",\n        "-ms-scroll-limit-x-max": "auto|<length>",\n        "-ms-scroll-limit-x-min": "<length>",\n        "-ms-scroll-limit-y-max": "auto|<length>",\n        "-ms-scroll-limit-y-min": "<length>",\n        "-ms-scroll-rails": "none|railed",\n        "-ms-scroll-snap-points-x": "snapInterval( <length-percentage> , <length-percentage> )|snapList( <length-percentage># )",\n        "-ms-scroll-snap-points-y": "snapInterval( <length-percentage> , <length-percentage> )|snapList( <length-percentage># )",\n        "-ms-scroll-snap-type": "none|proximity|mandatory",\n        "-ms-scroll-snap-x": "<\'-ms-scroll-snap-type\'> <\'-ms-scroll-snap-points-x\'>",\n        "-ms-scroll-snap-y": "<\'-ms-scroll-snap-type\'> <\'-ms-scroll-snap-points-y\'>",\n        "-ms-scroll-translation": "none|vertical-to-horizontal",\n        "-ms-text-autospace": "none|ideograph-alpha|ideograph-numeric|ideograph-parenthesis|ideograph-space",\n        "-ms-touch-select": "grippers|none",\n        "-ms-user-select": "none|element|text",\n        "-ms-wrap-flow": "auto|both|start|end|maximum|clear",\n        "-ms-wrap-margin": "<length>",\n        "-ms-wrap-through": "wrap|none",\n        "-moz-appearance": "none|button|button-arrow-down|button-arrow-next|button-arrow-previous|button-arrow-up|button-bevel|button-focus|caret|checkbox|checkbox-container|checkbox-label|checkmenuitem|dualbutton|groupbox|listbox|listitem|menuarrow|menubar|menucheckbox|menuimage|menuitem|menuitemtext|menulist|menulist-button|menulist-text|menulist-textfield|menupopup|menuradio|menuseparator|meterbar|meterchunk|progressbar|progressbar-vertical|progresschunk|progresschunk-vertical|radio|radio-container|radio-label|radiomenuitem|range|range-thumb|resizer|resizerpanel|scale-horizontal|scalethumbend|scalethumb-horizontal|scalethumbstart|scalethumbtick|scalethumb-vertical|scale-vertical|scrollbarbutton-down|scrollbarbutton-left|scrollbarbutton-right|scrollbarbutton-up|scrollbarthumb-horizontal|scrollbarthumb-vertical|scrollbartrack-horizontal|scrollbartrack-vertical|searchfield|separator|sheet|spinner|spinner-downbutton|spinner-textfield|spinner-upbutton|splitter|statusbar|statusbarpanel|tab|tabpanel|tabpanels|tab-scroll-arrow-back|tab-scroll-arrow-forward|textfield|textfield-multiline|toolbar|toolbarbutton|toolbarbutton-dropdown|toolbargripper|toolbox|tooltip|treeheader|treeheadercell|treeheadersortarrow|treeitem|treeline|treetwisty|treetwistyopen|treeview|-moz-mac-unified-toolbar|-moz-win-borderless-glass|-moz-win-browsertabbar-toolbox|-moz-win-communicationstext|-moz-win-communications-toolbox|-moz-win-exclude-glass|-moz-win-glass|-moz-win-mediatext|-moz-win-media-toolbox|-moz-window-button-box|-moz-window-button-box-maximized|-moz-window-button-close|-moz-window-button-maximize|-moz-window-button-minimize|-moz-window-button-restore|-moz-window-frame-bottom|-moz-window-frame-left|-moz-window-frame-right|-moz-window-titlebar|-moz-window-titlebar-maximized",\n        "-moz-binding": "<url>|none",\n        "-moz-border-bottom-colors": "<color>+|none",\n        "-moz-border-left-colors": "<color>+|none",\n        "-moz-border-right-colors": "<color>+|none",\n        "-moz-border-top-colors": "<color>+|none",\n        "-moz-context-properties": "none|[fill|fill-opacity|stroke|stroke-opacity]#",\n        "-moz-float-edge": "border-box|content-box|margin-box|padding-box",\n        "-moz-force-broken-image-icon": "0|1",\n        "-moz-image-region": "<shape>|auto",\n        "-moz-orient": "inline|block|horizontal|vertical",\n        "-moz-outline-radius": "<outline-radius>{1,4} [/ <outline-radius>{1,4}]?",\n        "-moz-outline-radius-bottomleft": "<outline-radius>",\n        "-moz-outline-radius-bottomright": "<outline-radius>",\n        "-moz-outline-radius-topleft": "<outline-radius>",\n        "-moz-outline-radius-topright": "<outline-radius>",\n        "-moz-stack-sizing": "ignore|stretch-to-fit",\n        "-moz-text-blink": "none|blink",\n        "-moz-user-focus": "ignore|normal|select-after|select-before|select-menu|select-same|select-all|none",\n        "-moz-user-input": "auto|none|enabled|disabled",\n        "-moz-user-modify": "read-only|read-write|write-only",\n        "-moz-window-dragging": "drag|no-drag",\n        "-moz-window-shadow": "default|menu|tooltip|sheet|none",\n        "-webkit-appearance": "none|button|button-bevel|caps-lock-indicator|caret|checkbox|default-button|inner-spin-button|listbox|listitem|media-controls-background|media-controls-fullscreen-background|media-current-time-display|media-enter-fullscreen-button|media-exit-fullscreen-button|media-fullscreen-button|media-mute-button|media-overlay-play-button|media-play-button|media-seek-back-button|media-seek-forward-button|media-slider|media-sliderthumb|media-time-remaining-display|media-toggle-closed-captions-button|media-volume-slider|media-volume-slider-container|media-volume-sliderthumb|menulist|menulist-button|menulist-text|menulist-textfield|meter|progress-bar|progress-bar-value|push-button|radio|scrollbarbutton-down|scrollbarbutton-left|scrollbarbutton-right|scrollbarbutton-up|scrollbargripper-horizontal|scrollbargripper-vertical|scrollbarthumb-horizontal|scrollbarthumb-vertical|scrollbartrack-horizontal|scrollbartrack-vertical|searchfield|searchfield-cancel-button|searchfield-decoration|searchfield-results-button|searchfield-results-decoration|slider-horizontal|slider-vertical|sliderthumb-horizontal|sliderthumb-vertical|square-button|textarea|textfield|-apple-pay-button",\n        "-webkit-border-before": "<\'border-width\'>||<\'border-style\'>||<color>",\n        "-webkit-border-before-color": "<color>",\n        "-webkit-border-before-style": "<\'border-style\'>",\n        "-webkit-border-before-width": "<\'border-width\'>",\n        "-webkit-box-reflect": "[above|below|right|left]? <length>? <image>?",\n        "-webkit-line-clamp": "none|<integer>",\n        "-webkit-mask": "[<mask-reference>||<position> [/ <bg-size>]?||<repeat-style>||[<box>|border|padding|content|text]||[<box>|border|padding|content]]#",\n        "-webkit-mask-attachment": "<attachment>#",\n        "-webkit-mask-clip": "[<box>|border|padding|content|text]#",\n        "-webkit-mask-composite": "<composite-style>#",\n        "-webkit-mask-image": "<mask-reference>#",\n        "-webkit-mask-origin": "[<box>|border|padding|content]#",\n        "-webkit-mask-position": "<position>#",\n        "-webkit-mask-position-x": "[<length-percentage>|left|center|right]#",\n        "-webkit-mask-position-y": "[<length-percentage>|top|center|bottom]#",\n        "-webkit-mask-repeat": "<repeat-style>#",\n        "-webkit-mask-repeat-x": "repeat|no-repeat|space|round",\n        "-webkit-mask-repeat-y": "repeat|no-repeat|space|round",\n        "-webkit-mask-size": "<bg-size>#",\n        "-webkit-overflow-scrolling": "auto|touch",\n        "-webkit-tap-highlight-color": "<color>",\n        "-webkit-text-fill-color": "<color>",\n        "-webkit-text-stroke": "<length>||<color>",\n        "-webkit-text-stroke-color": "<color>",\n        "-webkit-text-stroke-width": "<length>",\n        "-webkit-touch-callout": "default|none",\n        "-webkit-user-modify": "read-only|read-write|read-write-plaintext-only",\n        "accent-color": "auto|<color>",\n        "align-content": "normal|<baseline-position>|<content-distribution>|<overflow-position>? <content-position>",\n        "align-items": "normal|stretch|<baseline-position>|[<overflow-position>? <self-position>]",\n        "align-self": "auto|normal|stretch|<baseline-position>|<overflow-position>? <self-position>",\n        "align-tracks": "[normal|<baseline-position>|<content-distribution>|<overflow-position>? <content-position>]#",\n        "all": "initial|inherit|unset|revert|revert-layer",\n        "animation": "<single-animation>#",\n        "animation-delay": "<time>#",\n        "animation-direction": "<single-animation-direction>#",\n        "animation-duration": "<time>#",\n        "animation-fill-mode": "<single-animation-fill-mode>#",\n        "animation-iteration-count": "<single-animation-iteration-count>#",\n        "animation-name": "[none|<keyframes-name>]#",\n        "animation-play-state": "<single-animation-play-state>#",\n        "animation-timing-function": "<easing-function>#",\n        "animation-timeline": "<single-animation-timeline>#",\n        "appearance": "none|auto|textfield|menulist-button|<compat-auto>",\n        "aspect-ratio": "auto|<ratio>",\n        "azimuth": "<angle>|[[left-side|far-left|left|center-left|center|center-right|right|far-right|right-side]||behind]|leftwards|rightwards",\n        "backdrop-filter": "none|<filter-function-list>",\n        "backface-visibility": "visible|hidden",\n        "background": "[<bg-layer> ,]* <final-bg-layer>",\n        "background-attachment": "<attachment>#",\n        "background-blend-mode": "<blend-mode>#",\n        "background-clip": "<bg-clip>#",\n        "background-color": "<color>",\n        "background-image": "<bg-image>#",\n        "background-origin": "<box>#",\n        "background-position": "<bg-position>#",\n        "background-position-x": "[center|[[left|right|x-start|x-end]? <length-percentage>?]!]#",\n        "background-position-y": "[center|[[top|bottom|y-start|y-end]? <length-percentage>?]!]#",\n        "background-repeat": "<repeat-style>#",\n        "background-size": "<bg-size>#",\n        "block-overflow": "clip|ellipsis|<string>",\n        "block-size": "<\'width\'>",\n        "border": "<line-width>||<line-style>||<color>",\n        "border-block": "<\'border-top-width\'>||<\'border-top-style\'>||<color>",\n        "border-block-color": "<\'border-top-color\'>{1,2}",\n        "border-block-style": "<\'border-top-style\'>",\n        "border-block-width": "<\'border-top-width\'>",\n        "border-block-end": "<\'border-top-width\'>||<\'border-top-style\'>||<color>",\n        "border-block-end-color": "<\'border-top-color\'>",\n        "border-block-end-style": "<\'border-top-style\'>",\n        "border-block-end-width": "<\'border-top-width\'>",\n        "border-block-start": "<\'border-top-width\'>||<\'border-top-style\'>||<color>",\n        "border-block-start-color": "<\'border-top-color\'>",\n        "border-block-start-style": "<\'border-top-style\'>",\n        "border-block-start-width": "<\'border-top-width\'>",\n        "border-bottom": "<line-width>||<line-style>||<color>",\n        "border-bottom-color": "<\'border-top-color\'>",\n        "border-bottom-left-radius": "<length-percentage>{1,2}",\n        "border-bottom-right-radius": "<length-percentage>{1,2}",\n        "border-bottom-style": "<line-style>",\n        "border-bottom-width": "<line-width>",\n        "border-collapse": "collapse|separate",\n        "border-color": "<color>{1,4}",\n        "border-end-end-radius": "<length-percentage>{1,2}",\n        "border-end-start-radius": "<length-percentage>{1,2}",\n        "border-image": "<\'border-image-source\'>||<\'border-image-slice\'> [/ <\'border-image-width\'>|/ <\'border-image-width\'>? / <\'border-image-outset\'>]?||<\'border-image-repeat\'>",\n        "border-image-outset": "[<length>|<number>]{1,4}",\n        "border-image-repeat": "[stretch|repeat|round|space]{1,2}",\n        "border-image-slice": "<number-percentage>{1,4}&&fill?",\n        "border-image-source": "none|<image>",\n        "border-image-width": "[<length-percentage>|<number>|auto]{1,4}",\n        "border-inline": "<\'border-top-width\'>||<\'border-top-style\'>||<color>",\n        "border-inline-end": "<\'border-top-width\'>||<\'border-top-style\'>||<color>",\n        "border-inline-color": "<\'border-top-color\'>{1,2}",\n        "border-inline-style": "<\'border-top-style\'>",\n        "border-inline-width": "<\'border-top-width\'>",\n        "border-inline-end-color": "<\'border-top-color\'>",\n        "border-inline-end-style": "<\'border-top-style\'>",\n        "border-inline-end-width": "<\'border-top-width\'>",\n        "border-inline-start": "<\'border-top-width\'>||<\'border-top-style\'>||<color>",\n        "border-inline-start-color": "<\'border-top-color\'>",\n        "border-inline-start-style": "<\'border-top-style\'>",\n        "border-inline-start-width": "<\'border-top-width\'>",\n        "border-left": "<line-width>||<line-style>||<color>",\n        "border-left-color": "<color>",\n        "border-left-style": "<line-style>",\n        "border-left-width": "<line-width>",\n        "border-radius": "<length-percentage>{1,4} [/ <length-percentage>{1,4}]?",\n        "border-right": "<line-width>||<line-style>||<color>",\n        "border-right-color": "<color>",\n        "border-right-style": "<line-style>",\n        "border-right-width": "<line-width>",\n        "border-spacing": "<length> <length>?",\n        "border-start-end-radius": "<length-percentage>{1,2}",\n        "border-start-start-radius": "<length-percentage>{1,2}",\n        "border-style": "<line-style>{1,4}",\n        "border-top": "<line-width>||<line-style>||<color>",\n        "border-top-color": "<color>",\n        "border-top-left-radius": "<length-percentage>{1,2}",\n        "border-top-right-radius": "<length-percentage>{1,2}",\n        "border-top-style": "<line-style>",\n        "border-top-width": "<line-width>",\n        "border-width": "<line-width>{1,4}",\n        "bottom": "<length>|<percentage>|auto",\n        "box-align": "start|center|end|baseline|stretch",\n        "box-decoration-break": "slice|clone",\n        "box-direction": "normal|reverse|inherit",\n        "box-flex": "<number>",\n        "box-flex-group": "<integer>",\n        "box-lines": "single|multiple",\n        "box-ordinal-group": "<integer>",\n        "box-orient": "horizontal|vertical|inline-axis|block-axis|inherit",\n        "box-pack": "start|center|end|justify",\n        "box-shadow": "none|<shadow>#",\n        "box-sizing": "content-box|border-box",\n        "break-after": "auto|avoid|always|all|avoid-page|page|left|right|recto|verso|avoid-column|column|avoid-region|region",\n        "break-before": "auto|avoid|always|all|avoid-page|page|left|right|recto|verso|avoid-column|column|avoid-region|region",\n        "break-inside": "auto|avoid|avoid-page|avoid-column|avoid-region",\n        "caption-side": "top|bottom|block-start|block-end|inline-start|inline-end",\n        "caret-color": "auto|<color>",\n        "clear": "none|left|right|both|inline-start|inline-end",\n        "clip": "<shape>|auto",\n        "clip-path": "<clip-source>|[<basic-shape>||<geometry-box>]|none",\n        "color": "<color>",\n        "print-color-adjust": "economy|exact",\n        "color-scheme": "normal|[light|dark|<custom-ident>]+&&only?",\n        "column-count": "<integer>|auto",\n        "column-fill": "auto|balance|balance-all",\n        "column-gap": "normal|<length-percentage>",\n        "column-rule": "<\'column-rule-width\'>||<\'column-rule-style\'>||<\'column-rule-color\'>",\n        "column-rule-color": "<color>",\n        "column-rule-style": "<\'border-style\'>",\n        "column-rule-width": "<\'border-width\'>",\n        "column-span": "none|all",\n        "column-width": "<length>|auto",\n        "columns": "<\'column-width\'>||<\'column-count\'>",\n        "contain": "none|strict|content|[size||layout||style||paint]",\n        "content": "normal|none|[<content-replacement>|<content-list>] [/ [<string>|<counter>]+]?",\n        "content-visibility": "visible|auto|hidden",\n        "counter-increment": "[<counter-name> <integer>?]+|none",\n        "counter-reset": "[<counter-name> <integer>?|<reversed-counter-name> <integer>?]+|none",\n        "counter-set": "[<counter-name> <integer>?]+|none",\n        "cursor": "[[<url> [<x> <y>]? ,]* [auto|default|none|context-menu|help|pointer|progress|wait|cell|crosshair|text|vertical-text|alias|copy|move|no-drop|not-allowed|e-resize|n-resize|ne-resize|nw-resize|s-resize|se-resize|sw-resize|w-resize|ew-resize|ns-resize|nesw-resize|nwse-resize|col-resize|row-resize|all-scroll|zoom-in|zoom-out|grab|grabbing|hand|-webkit-grab|-webkit-grabbing|-webkit-zoom-in|-webkit-zoom-out|-moz-grab|-moz-grabbing|-moz-zoom-in|-moz-zoom-out]]",\n        "direction": "ltr|rtl",\n        "display": "[<display-outside>||<display-inside>]|<display-listitem>|<display-internal>|<display-box>|<display-legacy>|<-non-standard-display>",\n        "empty-cells": "show|hide",\n        "filter": "none|<filter-function-list>|<-ms-filter-function-list>",\n        "flex": "none|[<\'flex-grow\'> <\'flex-shrink\'>?||<\'flex-basis\'>]",\n        "flex-basis": "content|<\'width\'>",\n        "flex-direction": "row|row-reverse|column|column-reverse",\n        "flex-flow": "<\'flex-direction\'>||<\'flex-wrap\'>",\n        "flex-grow": "<number>",\n        "flex-shrink": "<number>",\n        "flex-wrap": "nowrap|wrap|wrap-reverse",\n        "float": "left|right|none|inline-start|inline-end",\n        "font": "[[<\'font-style\'>||<font-variant-css21>||<\'font-weight\'>||<\'font-stretch\'>]? <\'font-size\'> [/ <\'line-height\'>]? <\'font-family\'>]|caption|icon|menu|message-box|small-caption|status-bar",\n        "font-family": "[<family-name>|<generic-family>]#",\n        "font-feature-settings": "normal|<feature-tag-value>#",\n        "font-kerning": "auto|normal|none",\n        "font-language-override": "normal|<string>",\n        "font-optical-sizing": "auto|none",\n        "font-variation-settings": "normal|[<string> <number>]#",\n        "font-size": "<absolute-size>|<relative-size>|<length-percentage>",\n        "font-size-adjust": "none|[ex-height|cap-height|ch-width|ic-width|ic-height]? [from-font|<number>]",\n        "font-smooth": "auto|never|always|<absolute-size>|<length>",\n        "font-stretch": "<font-stretch-absolute>",\n        "font-style": "normal|italic|oblique <angle>?",\n        "font-synthesis": "none|[weight||style||small-caps]",\n        "font-variant": "normal|none|[<common-lig-values>||<discretionary-lig-values>||<historical-lig-values>||<contextual-alt-values>||stylistic( <feature-value-name> )||historical-forms||styleset( <feature-value-name># )||character-variant( <feature-value-name># )||swash( <feature-value-name> )||ornaments( <feature-value-name> )||annotation( <feature-value-name> )||[small-caps|all-small-caps|petite-caps|all-petite-caps|unicase|titling-caps]||<numeric-figure-values>||<numeric-spacing-values>||<numeric-fraction-values>||ordinal||slashed-zero||<east-asian-variant-values>||<east-asian-width-values>||ruby]",\n        "font-variant-alternates": "normal|[stylistic( <feature-value-name> )||historical-forms||styleset( <feature-value-name># )||character-variant( <feature-value-name># )||swash( <feature-value-name> )||ornaments( <feature-value-name> )||annotation( <feature-value-name> )]",\n        "font-variant-caps": "normal|small-caps|all-small-caps|petite-caps|all-petite-caps|unicase|titling-caps",\n        "font-variant-east-asian": "normal|[<east-asian-variant-values>||<east-asian-width-values>||ruby]",\n        "font-variant-ligatures": "normal|none|[<common-lig-values>||<discretionary-lig-values>||<historical-lig-values>||<contextual-alt-values>]",\n        "font-variant-numeric": "normal|[<numeric-figure-values>||<numeric-spacing-values>||<numeric-fraction-values>||ordinal||slashed-zero]",\n        "font-variant-position": "normal|sub|super",\n        "font-weight": "<font-weight-absolute>|bolder|lighter",\n        "forced-color-adjust": "auto|none",\n        "gap": "<\'row-gap\'> <\'column-gap\'>?",\n        "grid": "<\'grid-template\'>|<\'grid-template-rows\'> / [auto-flow&&dense?] <\'grid-auto-columns\'>?|[auto-flow&&dense?] <\'grid-auto-rows\'>? / <\'grid-template-columns\'>",\n        "grid-area": "<grid-line> [/ <grid-line>]{0,3}",\n        "grid-auto-columns": "<track-size>+",\n        "grid-auto-flow": "[row|column]||dense",\n        "grid-auto-rows": "<track-size>+",\n        "grid-column": "<grid-line> [/ <grid-line>]?",\n        "grid-column-end": "<grid-line>",\n        "grid-column-gap": "<length-percentage>",\n        "grid-column-start": "<grid-line>",\n        "grid-gap": "<\'grid-row-gap\'> <\'grid-column-gap\'>?",\n        "grid-row": "<grid-line> [/ <grid-line>]?",\n        "grid-row-end": "<grid-line>",\n        "grid-row-gap": "<length-percentage>",\n        "grid-row-start": "<grid-line>",\n        "grid-template": "none|[<\'grid-template-rows\'> / <\'grid-template-columns\'>]|[<line-names>? <string> <track-size>? <line-names>?]+ [/ <explicit-track-list>]?",\n        "grid-template-areas": "none|<string>+",\n        "grid-template-columns": "none|<track-list>|<auto-track-list>|subgrid <line-name-list>?",\n        "grid-template-rows": "none|<track-list>|<auto-track-list>|subgrid <line-name-list>?",\n        "hanging-punctuation": "none|[first||[force-end|allow-end]||last]",\n        "height": "auto|<length>|<percentage>|min-content|max-content|fit-content|fit-content( <length-percentage> )",\n        "hyphenate-character": "auto|<string>",\n        "hyphens": "none|manual|auto",\n        "image-orientation": "from-image|<angle>|[<angle>? flip]",\n        "image-rendering": "auto|crisp-edges|pixelated|optimizeSpeed|optimizeQuality|<-non-standard-image-rendering>",\n        "image-resolution": "[from-image||<resolution>]&&snap?",\n        "ime-mode": "auto|normal|active|inactive|disabled",\n        "initial-letter": "normal|[<number> <integer>?]",\n        "initial-letter-align": "[auto|alphabetic|hanging|ideographic]",\n        "inline-size": "<\'width\'>",\n        "input-security": "auto|none",\n        "inset": "<\'top\'>{1,4}",\n        "inset-block": "<\'top\'>{1,2}",\n        "inset-block-end": "<\'top\'>",\n        "inset-block-start": "<\'top\'>",\n        "inset-inline": "<\'top\'>{1,2}",\n        "inset-inline-end": "<\'top\'>",\n        "inset-inline-start": "<\'top\'>",\n        "isolation": "auto|isolate",\n        "justify-content": "normal|<content-distribution>|<overflow-position>? [<content-position>|left|right]",\n        "justify-items": "normal|stretch|<baseline-position>|<overflow-position>? [<self-position>|left|right]|legacy|legacy&&[left|right|center]",\n        "justify-self": "auto|normal|stretch|<baseline-position>|<overflow-position>? [<self-position>|left|right]",\n        "justify-tracks": "[normal|<content-distribution>|<overflow-position>? [<content-position>|left|right]]#",\n        "left": "<length>|<percentage>|auto",\n        "letter-spacing": "normal|<length-percentage>",\n        "line-break": "auto|loose|normal|strict|anywhere",\n        "line-clamp": "none|<integer>",\n        "line-height": "normal|<number>|<length>|<percentage>",\n        "line-height-step": "<length>",\n        "list-style": "<\'list-style-type\'>||<\'list-style-position\'>||<\'list-style-image\'>",\n        "list-style-image": "<image>|none",\n        "list-style-position": "inside|outside",\n        "list-style-type": "<counter-style>|<string>|none",\n        "margin": "[<length>|<percentage>|auto]{1,4}",\n        "margin-block": "<\'margin-left\'>{1,2}",\n        "margin-block-end": "<\'margin-left\'>",\n        "margin-block-start": "<\'margin-left\'>",\n        "margin-bottom": "<length>|<percentage>|auto",\n        "margin-inline": "<\'margin-left\'>{1,2}",\n        "margin-inline-end": "<\'margin-left\'>",\n        "margin-inline-start": "<\'margin-left\'>",\n        "margin-left": "<length>|<percentage>|auto",\n        "margin-right": "<length>|<percentage>|auto",\n        "margin-top": "<length>|<percentage>|auto",\n        "margin-trim": "none|in-flow|all",\n        "mask": "<mask-layer>#",\n        "mask-border": "<\'mask-border-source\'>||<\'mask-border-slice\'> [/ <\'mask-border-width\'>? [/ <\'mask-border-outset\'>]?]?||<\'mask-border-repeat\'>||<\'mask-border-mode\'>",\n        "mask-border-mode": "luminance|alpha",\n        "mask-border-outset": "[<length>|<number>]{1,4}",\n        "mask-border-repeat": "[stretch|repeat|round|space]{1,2}",\n        "mask-border-slice": "<number-percentage>{1,4} fill?",\n        "mask-border-source": "none|<image>",\n        "mask-border-width": "[<length-percentage>|<number>|auto]{1,4}",\n        "mask-clip": "[<geometry-box>|no-clip]#",\n        "mask-composite": "<compositing-operator>#",\n        "mask-image": "<mask-reference>#",\n        "mask-mode": "<masking-mode>#",\n        "mask-origin": "<geometry-box>#",\n        "mask-position": "<position>#",\n        "mask-repeat": "<repeat-style>#",\n        "mask-size": "<bg-size>#",\n        "mask-type": "luminance|alpha",\n        "masonry-auto-flow": "[pack|next]||[definite-first|ordered]",\n        "math-style": "normal|compact",\n        "max-block-size": "<\'max-width\'>",\n        "max-height": "none|<length-percentage>|min-content|max-content|fit-content|fit-content( <length-percentage> )",\n        "max-inline-size": "<\'max-width\'>",\n        "max-lines": "none|<integer>",\n        "max-width": "none|<length-percentage>|min-content|max-content|fit-content|fit-content( <length-percentage> )|<-non-standard-width>",\n        "min-block-size": "<\'min-width\'>",\n        "min-height": "auto|<length>|<percentage>|min-content|max-content|fit-content|fit-content( <length-percentage> )",\n        "min-inline-size": "<\'min-width\'>",\n        "min-width": "auto|<length>|<percentage>|min-content|max-content|fit-content|fit-content( <length-percentage> )|<-non-standard-width>",\n        "mix-blend-mode": "<blend-mode>|plus-lighter",\n        "object-fit": "fill|contain|cover|none|scale-down",\n        "object-position": "<position>",\n        "offset": "[<\'offset-position\'>? [<\'offset-path\'> [<\'offset-distance\'>||<\'offset-rotate\'>]?]?]! [/ <\'offset-anchor\'>]?",\n        "offset-anchor": "auto|<position>",\n        "offset-distance": "<length-percentage>",\n        "offset-path": "none|ray( [<angle>&&<size>&&contain?] )|<path()>|<url>|[<basic-shape>||<geometry-box>]",\n        "offset-position": "auto|<position>",\n        "offset-rotate": "[auto|reverse]||<angle>",\n        "opacity": "<alpha-value>",\n        "order": "<integer>",\n        "orphans": "<integer>",\n        "outline": "[<\'outline-color\'>||<\'outline-style\'>||<\'outline-width\'>]",\n        "outline-color": "<color>|invert",\n        "outline-offset": "<length>",\n        "outline-style": "auto|<\'border-style\'>",\n        "outline-width": "<line-width>",\n        "overflow": "[visible|hidden|clip|scroll|auto]{1,2}|<-non-standard-overflow>",\n        "overflow-anchor": "auto|none",\n        "overflow-block": "visible|hidden|clip|scroll|auto",\n        "overflow-clip-box": "padding-box|content-box",\n        "overflow-clip-margin": "<visual-box>||<length [0,∞]>",\n        "overflow-inline": "visible|hidden|clip|scroll|auto",\n        "overflow-wrap": "normal|break-word|anywhere",\n        "overflow-x": "visible|hidden|clip|scroll|auto",\n        "overflow-y": "visible|hidden|clip|scroll|auto",\n        "overscroll-behavior": "[contain|none|auto]{1,2}",\n        "overscroll-behavior-block": "contain|none|auto",\n        "overscroll-behavior-inline": "contain|none|auto",\n        "overscroll-behavior-x": "contain|none|auto",\n        "overscroll-behavior-y": "contain|none|auto",\n        "padding": "[<length>|<percentage>]{1,4}",\n        "padding-block": "<\'padding-left\'>{1,2}",\n        "padding-block-end": "<\'padding-left\'>",\n        "padding-block-start": "<\'padding-left\'>",\n        "padding-bottom": "<length>|<percentage>",\n        "padding-inline": "<\'padding-left\'>{1,2}",\n        "padding-inline-end": "<\'padding-left\'>",\n        "padding-inline-start": "<\'padding-left\'>",\n        "padding-left": "<length>|<percentage>",\n        "padding-right": "<length>|<percentage>",\n        "padding-top": "<length>|<percentage>",\n        "page-break-after": "auto|always|avoid|left|right|recto|verso",\n        "page-break-before": "auto|always|avoid|left|right|recto|verso",\n        "page-break-inside": "auto|avoid",\n        "paint-order": "normal|[fill||stroke||markers]",\n        "perspective": "none|<length>",\n        "perspective-origin": "<position>",\n        "place-content": "<\'align-content\'> <\'justify-content\'>?",\n        "place-items": "<\'align-items\'> <\'justify-items\'>?",\n        "place-self": "<\'align-self\'> <\'justify-self\'>?",\n        "pointer-events": "auto|none|visiblePainted|visibleFill|visibleStroke|visible|painted|fill|stroke|all|inherit",\n        "position": "static|relative|absolute|sticky|fixed|-webkit-sticky",\n        "quotes": "none|auto|[<string> <string>]+",\n        "resize": "none|both|horizontal|vertical|block|inline",\n        "right": "<length>|<percentage>|auto",\n        "rotate": "none|<angle>|[x|y|z|<number>{3}]&&<angle>",\n        "row-gap": "normal|<length-percentage>",\n        "ruby-align": "start|center|space-between|space-around",\n        "ruby-merge": "separate|collapse|auto",\n        "ruby-position": "[alternate||[over|under]]|inter-character",\n        "scale": "none|<number>{1,3}",\n        "scrollbar-color": "auto|<color>{2}",\n        "scrollbar-gutter": "auto|stable&&both-edges?",\n        "scrollbar-width": "auto|thin|none",\n        "scroll-behavior": "auto|smooth",\n        "scroll-margin": "<length>{1,4}",\n        "scroll-margin-block": "<length>{1,2}",\n        "scroll-margin-block-start": "<length>",\n        "scroll-margin-block-end": "<length>",\n        "scroll-margin-bottom": "<length>",\n        "scroll-margin-inline": "<length>{1,2}",\n        "scroll-margin-inline-start": "<length>",\n        "scroll-margin-inline-end": "<length>",\n        "scroll-margin-left": "<length>",\n        "scroll-margin-right": "<length>",\n        "scroll-margin-top": "<length>",\n        "scroll-padding": "[auto|<length-percentage>]{1,4}",\n        "scroll-padding-block": "[auto|<length-percentage>]{1,2}",\n        "scroll-padding-block-start": "auto|<length-percentage>",\n        "scroll-padding-block-end": "auto|<length-percentage>",\n        "scroll-padding-bottom": "auto|<length-percentage>",\n        "scroll-padding-inline": "[auto|<length-percentage>]{1,2}",\n        "scroll-padding-inline-start": "auto|<length-percentage>",\n        "scroll-padding-inline-end": "auto|<length-percentage>",\n        "scroll-padding-left": "auto|<length-percentage>",\n        "scroll-padding-right": "auto|<length-percentage>",\n        "scroll-padding-top": "auto|<length-percentage>",\n        "scroll-snap-align": "[none|start|end|center]{1,2}",\n        "scroll-snap-coordinate": "none|<position>#",\n        "scroll-snap-destination": "<position>",\n        "scroll-snap-points-x": "none|repeat( <length-percentage> )",\n        "scroll-snap-points-y": "none|repeat( <length-percentage> )",\n        "scroll-snap-stop": "normal|always",\n        "scroll-snap-type": "none|[x|y|block|inline|both] [mandatory|proximity]?",\n        "scroll-snap-type-x": "none|mandatory|proximity",\n        "scroll-snap-type-y": "none|mandatory|proximity",\n        "shape-image-threshold": "<alpha-value>",\n        "shape-margin": "<length-percentage>",\n        "shape-outside": "none|[<shape-box>||<basic-shape>]|<image>",\n        "tab-size": "<integer>|<length>",\n        "table-layout": "auto|fixed",\n        "text-align": "start|end|left|right|center|justify|match-parent",\n        "text-align-last": "auto|start|end|left|right|center|justify",\n        "text-combine-upright": "none|all|[digits <integer>?]",\n        "text-decoration": "<\'text-decoration-line\'>||<\'text-decoration-style\'>||<\'text-decoration-color\'>||<\'text-decoration-thickness\'>",\n        "text-decoration-color": "<color>",\n        "text-decoration-line": "none|[underline||overline||line-through||blink]|spelling-error|grammar-error",\n        "text-decoration-skip": "none|[objects||[spaces|[leading-spaces||trailing-spaces]]||edges||box-decoration]",\n        "text-decoration-skip-ink": "auto|all|none",\n        "text-decoration-style": "solid|double|dotted|dashed|wavy",\n        "text-decoration-thickness": "auto|from-font|<length>|<percentage>",\n        "text-emphasis": "<\'text-emphasis-style\'>||<\'text-emphasis-color\'>",\n        "text-emphasis-color": "<color>",\n        "text-emphasis-position": "[over|under]&&[right|left]",\n        "text-emphasis-style": "none|[[filled|open]||[dot|circle|double-circle|triangle|sesame]]|<string>",\n        "text-indent": "<length-percentage>&&hanging?&&each-line?",\n        "text-justify": "auto|inter-character|inter-word|none",\n        "text-orientation": "mixed|upright|sideways",\n        "text-overflow": "[clip|ellipsis|<string>]{1,2}",\n        "text-rendering": "auto|optimizeSpeed|optimizeLegibility|geometricPrecision",\n        "text-shadow": "none|<shadow-t>#",\n        "text-size-adjust": "none|auto|<percentage>",\n        "text-transform": "none|capitalize|uppercase|lowercase|full-width|full-size-kana",\n        "text-underline-offset": "auto|<length>|<percentage>",\n        "text-underline-position": "auto|from-font|[under||[left|right]]",\n        "top": "<length>|<percentage>|auto",\n        "touch-action": "auto|none|[[pan-x|pan-left|pan-right]||[pan-y|pan-up|pan-down]||pinch-zoom]|manipulation",\n        "transform": "none|<transform-list>",\n        "transform-box": "content-box|border-box|fill-box|stroke-box|view-box",\n        "transform-origin": "[<length-percentage>|left|center|right|top|bottom]|[[<length-percentage>|left|center|right]&&[<length-percentage>|top|center|bottom]] <length>?",\n        "transform-style": "flat|preserve-3d",\n        "transition": "<single-transition>#",\n        "transition-delay": "<time>#",\n        "transition-duration": "<time>#",\n        "transition-property": "none|<single-transition-property>#",\n        "transition-timing-function": "<easing-function>#",\n        "translate": "none|<length-percentage> [<length-percentage> <length>?]?",\n        "unicode-bidi": "normal|embed|isolate|bidi-override|isolate-override|plaintext|-moz-isolate|-moz-isolate-override|-moz-plaintext|-webkit-isolate|-webkit-isolate-override|-webkit-plaintext",\n        "user-select": "auto|text|none|contain|all",\n        "vertical-align": "baseline|sub|super|text-top|text-bottom|middle|top|bottom|<percentage>|<length>",\n        "visibility": "visible|hidden|collapse",\n        "white-space": "normal|pre|nowrap|pre-wrap|pre-line|break-spaces",\n        "widows": "<integer>",\n        "width": "auto|<length>|<percentage>|min-content|max-content|fit-content|fit-content( <length-percentage> )|fill|stretch|intrinsic|-moz-max-content|-webkit-max-content|-moz-fit-content|-webkit-fit-content",\n        "will-change": "auto|<animateable-feature>#",\n        "word-break": "normal|break-all|keep-all|break-word",\n        "word-spacing": "normal|<length>",\n        "word-wrap": "normal|break-word",\n        "writing-mode": "horizontal-tb|vertical-rl|vertical-lr|sideways-rl|sideways-lr|<svg-writing-mode>",\n        "z-index": "auto|<integer>",\n        "zoom": "normal|reset|<number>|<percentage>",\n        "-moz-background-clip": "padding|border",\n        "-moz-border-radius-bottomleft": "<\'border-bottom-left-radius\'>",\n        "-moz-border-radius-bottomright": "<\'border-bottom-right-radius\'>",\n        "-moz-border-radius-topleft": "<\'border-top-left-radius\'>",\n        "-moz-border-radius-topright": "<\'border-bottom-right-radius\'>",\n        "-moz-control-character-visibility": "visible|hidden",\n        "-moz-osx-font-smoothing": "auto|grayscale",\n        "-moz-user-select": "none|text|all|-moz-none",\n        "-ms-flex-align": "start|end|center|baseline|stretch",\n        "-ms-flex-item-align": "auto|start|end|center|baseline|stretch",\n        "-ms-flex-line-pack": "start|end|center|justify|distribute|stretch",\n        "-ms-flex-negative": "<\'flex-shrink\'>",\n        "-ms-flex-pack": "start|end|center|justify|distribute",\n        "-ms-flex-order": "<integer>",\n        "-ms-flex-positive": "<\'flex-grow\'>",\n        "-ms-flex-preferred-size": "<\'flex-basis\'>",\n        "-ms-interpolation-mode": "nearest-neighbor|bicubic",\n        "-ms-grid-column-align": "start|end|center|stretch",\n        "-ms-grid-row-align": "start|end|center|stretch",\n        "-ms-hyphenate-limit-last": "none|always|column|page|spread",\n        "-webkit-background-clip": "[<box>|border|padding|content|text]#",\n        "-webkit-column-break-after": "always|auto|avoid",\n        "-webkit-column-break-before": "always|auto|avoid",\n        "-webkit-column-break-inside": "always|auto|avoid",\n        "-webkit-font-smoothing": "auto|none|antialiased|subpixel-antialiased",\n        "-webkit-mask-box-image": "[<url>|<gradient>|none] [<length-percentage>{4} <-webkit-mask-box-repeat>{2}]?",\n        "-webkit-print-color-adjust": "economy|exact",\n        "-webkit-text-security": "none|circle|disc|square",\n        "-webkit-user-drag": "none|element|auto",\n        "-webkit-user-select": "auto|none|text|all",\n        "alignment-baseline": "auto|baseline|before-edge|text-before-edge|middle|central|after-edge|text-after-edge|ideographic|alphabetic|hanging|mathematical",\n        "baseline-shift": "baseline|sub|super|<svg-length>",\n        "behavior": "<url>+",\n        "clip-rule": "nonzero|evenodd",\n        "cue": "<\'cue-before\'> <\'cue-after\'>?",\n        "cue-after": "<url> <decibel>?|none",\n        "cue-before": "<url> <decibel>?|none",\n        "dominant-baseline": "auto|use-script|no-change|reset-size|ideographic|alphabetic|hanging|mathematical|central|middle|text-after-edge|text-before-edge",\n        "fill": "<paint>",\n        "fill-opacity": "<number-zero-one>",\n        "fill-rule": "nonzero|evenodd",\n        "glyph-orientation-horizontal": "<angle>",\n        "glyph-orientation-vertical": "<angle>",\n        "kerning": "auto|<svg-length>",\n        "marker": "none|<url>",\n        "marker-end": "none|<url>",\n        "marker-mid": "none|<url>",\n        "marker-start": "none|<url>",\n        "pause": "<\'pause-before\'> <\'pause-after\'>?",\n        "pause-after": "<time>|none|x-weak|weak|medium|strong|x-strong",\n        "pause-before": "<time>|none|x-weak|weak|medium|strong|x-strong",\n        "rest": "<\'rest-before\'> <\'rest-after\'>?",\n        "rest-after": "<time>|none|x-weak|weak|medium|strong|x-strong",\n        "rest-before": "<time>|none|x-weak|weak|medium|strong|x-strong",\n        "shape-rendering": "auto|optimizeSpeed|crispEdges|geometricPrecision",\n        "src": "[<url> [format( <string># )]?|local( <family-name> )]#",\n        "speak": "auto|none|normal",\n        "speak-as": "normal|spell-out||digits||[literal-punctuation|no-punctuation]",\n        "stroke": "<paint>",\n        "stroke-dasharray": "none|[<svg-length>+]#",\n        "stroke-dashoffset": "<svg-length>",\n        "stroke-linecap": "butt|round|square",\n        "stroke-linejoin": "miter|round|bevel",\n        "stroke-miterlimit": "<number-one-or-greater>",\n        "stroke-opacity": "<number-zero-one>",\n        "stroke-width": "<svg-length>",\n        "text-anchor": "start|middle|end",\n        "unicode-range": "<urange>#",\n        "voice-balance": "<number>|left|center|right|leftwards|rightwards",\n        "voice-duration": "auto|<time>",\n        "voice-family": "[[<family-name>|<generic-voice>] ,]* [<family-name>|<generic-voice>]|preserve",\n        "voice-pitch": "<frequency>&&absolute|[[x-low|low|medium|high|x-high]||[<frequency>|<semitones>|<percentage>]]",\n        "voice-range": "<frequency>&&absolute|[[x-low|low|medium|high|x-high]||[<frequency>|<semitones>|<percentage>]]",\n        "voice-rate": "[normal|x-slow|slow|medium|fast|x-fast]||<percentage>",\n        "voice-stress": "normal|strong|moderate|none|reduced",\n        "voice-volume": "silent|[[x-soft|soft|medium|loud|x-loud]||<decibel>]"\n    },\n    "atrules": {\n        "charset": {\n            "prelude": "<string>",\n            "descriptors": null\n        },\n        "counter-style": {\n            "prelude": "<counter-style-name>",\n            "descriptors": {\n                "additive-symbols": "[<integer>&&<symbol>]#",\n                "fallback": "<counter-style-name>",\n                "negative": "<symbol> <symbol>?",\n                "pad": "<integer>&&<symbol>",\n                "prefix": "<symbol>",\n                "range": "[[<integer>|infinite]{2}]#|auto",\n                "speak-as": "auto|bullets|numbers|words|spell-out|<counter-style-name>",\n                "suffix": "<symbol>",\n                "symbols": "<symbol>+",\n                "system": "cyclic|numeric|alphabetic|symbolic|additive|[fixed <integer>?]|[extends <counter-style-name>]"\n            }\n        },\n        "document": {\n            "prelude": "[<url>|url-prefix( <string> )|domain( <string> )|media-document( <string> )|regexp( <string> )]#",\n            "descriptors": null\n        },\n        "font-face": {\n            "prelude": null,\n            "descriptors": {\n                "ascent-override": "normal|<percentage>",\n                "descent-override": "normal|<percentage>",\n                "font-display": "[auto|block|swap|fallback|optional]",\n                "font-family": "<family-name>",\n                "font-feature-settings": "normal|<feature-tag-value>#",\n                "font-variation-settings": "normal|[<string> <number>]#",\n                "font-stretch": "<font-stretch-absolute>{1,2}",\n                "font-style": "normal|italic|oblique <angle>{0,2}",\n                "font-weight": "<font-weight-absolute>{1,2}",\n                "font-variant": "normal|none|[<common-lig-values>||<discretionary-lig-values>||<historical-lig-values>||<contextual-alt-values>||stylistic( <feature-value-name> )||historical-forms||styleset( <feature-value-name># )||character-variant( <feature-value-name># )||swash( <feature-value-name> )||ornaments( <feature-value-name> )||annotation( <feature-value-name> )||[small-caps|all-small-caps|petite-caps|all-petite-caps|unicase|titling-caps]||<numeric-figure-values>||<numeric-spacing-values>||<numeric-fraction-values>||ordinal||slashed-zero||<east-asian-variant-values>||<east-asian-width-values>||ruby]",\n                "line-gap-override": "normal|<percentage>",\n                "size-adjust": "<percentage>",\n                "src": "[<url> [format( <string># )]?|local( <family-name> )]#",\n                "unicode-range": "<urange>#"\n            }\n        },\n        "font-feature-values": {\n            "prelude": "<family-name>#",\n            "descriptors": null\n        },\n        "import": {\n            "prelude": "[<string>|<url>] [layer|layer( <layer-name> )]? [supports( [<supports-condition>|<declaration>] )]? <media-query-list>?",\n            "descriptors": null\n        },\n        "keyframes": {\n            "prelude": "<keyframes-name>",\n            "descriptors": null\n        },\n        "layer": {\n            "prelude": "[<layer-name>#|<layer-name>?]",\n            "descriptors": null\n        },\n        "media": {\n            "prelude": "<media-query-list>",\n            "descriptors": null\n        },\n        "namespace": {\n            "prelude": "<namespace-prefix>? [<string>|<url>]",\n            "descriptors": null\n        },\n        "page": {\n            "prelude": "<page-selector-list>",\n            "descriptors": {\n                "bleed": "auto|<length>",\n                "marks": "none|[crop||cross]",\n                "size": "<length>{1,2}|auto|[<page-size>||[portrait|landscape]]"\n            }\n        },\n        "property": {\n            "prelude": "<custom-property-name>",\n            "descriptors": {\n                "syntax": "<string>",\n                "inherits": "true|false",\n                "initial-value": "<string>"\n            }\n        },\n        "scroll-timeline": {\n            "prelude": "<timeline-name>",\n            "descriptors": null\n        },\n        "supports": {\n            "prelude": "<supports-condition>",\n            "descriptors": null\n        },\n        "viewport": {\n            "prelude": null,\n            "descriptors": {\n                "height": "<viewport-length>{1,2}",\n                "max-height": "<viewport-length>",\n                "max-width": "<viewport-length>",\n                "max-zoom": "auto|<number>|<percentage>",\n                "min-height": "<viewport-length>",\n                "min-width": "<viewport-length>",\n                "min-zoom": "auto|<number>|<percentage>",\n                "orientation": "auto|portrait|landscape",\n                "user-zoom": "zoom|fixed",\n                "viewport-fit": "auto|contain|cover",\n                "width": "<viewport-length>{1,2}",\n                "zoom": "auto|<number>|<percentage>"\n            }\n        }\n    }\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///28594\n')},51606:module=>{eval('module.exports = "2.2.1";//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNTE2MDYuanMiLCJtYXBwaW5ncyI6IkFBQUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ibG9ja2JpdGUvLi9ub2RlX21vZHVsZXMvY3Nzby9ub2RlX21vZHVsZXMvY3NzLXRyZWUvZGlzdC92ZXJzaW9uLmNqcz8yMTkyIl0sInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gXCIyLjIuMVwiOyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///51606\n')},45463:module=>{eval("let urlAlphabet =\n  'useandom-26T198340PX75pxJACKVERYMINDBUSHWOLF_GQZbfghjklqvwyzrict'\nlet customAlphabet = (alphabet, defaultSize = 21) => {\n  return (size = defaultSize) => {\n    let id = ''\n    let i = size\n    while (i--) {\n      id += alphabet[(Math.random() * alphabet.length) | 0]\n    }\n    return id\n  }\n}\nlet nanoid = (size = 21) => {\n  let id = ''\n  let i = size\n  while (i--) {\n    id += urlAlphabet[(Math.random() * 64) | 0]\n  }\n  return id\n}\nmodule.exports = { nanoid, customAlphabet }\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDU0NjMuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1CQUFtQiIsInNvdXJjZXMiOlsid2VicGFjazovL2Jsb2NrYml0ZS8uL25vZGVfbW9kdWxlcy9wb3N0Y3NzL25vZGVfbW9kdWxlcy9uYW5vaWQvbm9uLXNlY3VyZS9pbmRleC5janM/MzE1MyJdLCJzb3VyY2VzQ29udGVudCI6WyJsZXQgdXJsQWxwaGFiZXQgPVxuICAndXNlYW5kb20tMjZUMTk4MzQwUFg3NXB4SkFDS1ZFUllNSU5EQlVTSFdPTEZfR1FaYmZnaGprbHF2d3l6cmljdCdcbmxldCBjdXN0b21BbHBoYWJldCA9IChhbHBoYWJldCwgZGVmYXVsdFNpemUgPSAyMSkgPT4ge1xuICByZXR1cm4gKHNpemUgPSBkZWZhdWx0U2l6ZSkgPT4ge1xuICAgIGxldCBpZCA9ICcnXG4gICAgbGV0IGkgPSBzaXplXG4gICAgd2hpbGUgKGktLSkge1xuICAgICAgaWQgKz0gYWxwaGFiZXRbKE1hdGgucmFuZG9tKCkgKiBhbHBoYWJldC5sZW5ndGgpIHwgMF1cbiAgICB9XG4gICAgcmV0dXJuIGlkXG4gIH1cbn1cbmxldCBuYW5vaWQgPSAoc2l6ZSA9IDIxKSA9PiB7XG4gIGxldCBpZCA9ICcnXG4gIGxldCBpID0gc2l6ZVxuICB3aGlsZSAoaS0tKSB7XG4gICAgaWQgKz0gdXJsQWxwaGFiZXRbKE1hdGgucmFuZG9tKCkgKiA2NCkgfCAwXVxuICB9XG4gIHJldHVybiBpZFxufVxubW9kdWxlLmV4cG9ydHMgPSB7IG5hbm9pZCwgY3VzdG9tQWxwaGFiZXQgfVxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///45463\n")}},__webpack_module_cache__={};function __webpack_require__(I){var n=__webpack_module_cache__[I];if(void 0!==n)return n.exports;var g=__webpack_module_cache__[I]={exports:{}};return __webpack_modules__[I].call(g.exports,g,g.exports,__webpack_require__),g.exports}__webpack_require__.n=I=>{var n=I&&I.__esModule?()=>I.default:()=>I;return __webpack_require__.d(n,{a:n}),n},__webpack_require__.d=(I,n)=>{for(var g in n)__webpack_require__.o(n,g)&&!__webpack_require__.o(I,g)&&Object.defineProperty(I,g,{enumerable:!0,get:n[g]})},__webpack_require__.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(I){if("object"==typeof window)return window}}(),__webpack_require__.o=(I,n)=>Object.prototype.hasOwnProperty.call(I,n),__webpack_require__.r=I=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(I,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(I,"__esModule",{value:!0})};var __webpack_exports__=__webpack_require__(69596)})();