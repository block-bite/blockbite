"use strict";(self.webpackChunkblockbite=self.webpackChunkblockbite||[]).push([[234],{14234:(__unused_webpack_module,exports,__webpack_require__)=>{eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.optionsToSpaceValues = exports.spaceValuesToOptions = exports.getSpacingModifiers = void 0;\nconst Helpers_1 = __webpack_require__(59795);\n// Formatter for converting positions to options\nconst getSpacingModifiers = controlId => {\n  let spacingModifiers = {\n    t: '',\n    r: '',\n    b: '',\n    l: '',\n    x: '',\n    y: '',\n    a: ''\n  };\n  if (controlId === 'padding') {\n    spacingModifiers = {\n      t: 'pt',\n      r: 'pr',\n      b: 'pb',\n      l: 'pl',\n      x: 'px',\n      y: 'py',\n      a: 'pa'\n    };\n  } else if (controlId === 'margin') {\n    spacingModifiers = {\n      t: 'mt',\n      r: 'mr',\n      b: 'mb',\n      l: 'ml',\n      x: 'mx',\n      y: 'my',\n      a: 'ma'\n    };\n  } else if (controlId === 'transform') {\n    spacingModifiers = {\n      t: 'tt',\n      r: 'tr',\n      b: 'tb',\n      l: 'tl',\n      x: false,\n      y: false,\n      a: false\n    };\n  } else if (controlId === 'positionabsolute') {\n    spacingModifiers = {\n      t: 'post',\n      r: 'posr',\n      b: 'posb',\n      l: 'posl',\n      x: false,\n      y: false,\n      a: false\n    };\n  }\n  return spacingModifiers;\n};\nexports.getSpacingModifiers = getSpacingModifiers;\nconst resetSpacingValues = (options, modifiers) => {\n  modifiers.forEach(modifier => {\n    options.push({\n      id: modifier,\n      value: ''\n    });\n  });\n};\nconst spaceValuesToOptions = (spaceValues, controlId) => {\n  const spacingModifiers = (0, exports.getSpacingModifiers)(controlId);\n  const {\n    top,\n    right,\n    bottom,\n    left\n  } = spaceValues;\n  const options = [];\n  // First reset all values to empty strings\n  resetSpacingValues(options, [spacingModifiers.a, spacingModifiers.x, spacingModifiers.y, spacingModifiers.t, spacingModifiers.r, spacingModifiers.b, spacingModifiers.l]);\n  // Check if all sides are equal and the 'a' modifier exists\n  if (spacingModifiers.a && top.value === right.value && right.value === bottom.value && bottom.value === left.value) {\n    options.push({\n      id: spacingModifiers.a,\n      value: (0, Helpers_1.formatUnit)(top.value, top.unit, 'px')\n    });\n    return options;\n  }\n  // Check if horizontal sides (left and right) are equal and the 'x' modifier exists\n  if (spacingModifiers.x && left.value === right.value) {\n    options.push({\n      id: spacingModifiers.x,\n      value: (0, Helpers_1.formatUnit)(left.value, left.unit, 'px')\n    });\n  } else {\n    // Otherwise, use individual left and right modifiers\n    options.push({\n      id: spacingModifiers.l,\n      value: (0, Helpers_1.formatUnit)(left.value, left.unit, 'px')\n    });\n    options.push({\n      id: spacingModifiers.r,\n      value: (0, Helpers_1.formatUnit)(right.value, right.unit, 'px')\n    });\n  }\n  // Check if vertical sides (top and bottom) are equal and the 'y' modifier exists\n  if (spacingModifiers.y && top.value === bottom.value) {\n    options.push({\n      id: spacingModifiers.y,\n      value: (0, Helpers_1.formatUnit)(top.value, top.unit, 'px')\n    });\n  } else {\n    // Otherwise, use individual top and bottom modifiers\n    options.push({\n      id: spacingModifiers.t,\n      value: (0, Helpers_1.formatUnit)(top.value, top.unit, 'px')\n    });\n    options.push({\n      id: spacingModifiers.b,\n      value: (0, Helpers_1.formatUnit)(bottom.value, bottom.unit, 'px')\n    });\n  }\n  return options;\n};\nexports.spaceValuesToOptions = spaceValuesToOptions;\nconst optionsToSpaceValues = (options, controlId) => {\n  // Get the spacing modifiers based on the controlId\n  const spacingModifiers = (0, exports.getSpacingModifiers)(controlId);\n  // Initialize the spaceValues object with default values\n  const spaceValues = {\n    top: {\n      value: '',\n      unit: 'arbitrary'\n    },\n    right: {\n      value: '',\n      unit: 'arbitrary'\n    },\n    bottom: {\n      value: '',\n      unit: 'arbitrary'\n    },\n    left: {\n      value: '',\n      unit: 'arbitrary'\n    }\n  };\n  options.forEach(({\n    id,\n    value\n  }) => {\n    const {\n      foundUnit,\n      foundValue\n    } = (0, Helpers_1.getValueUnit)(value);\n    const setValues = positions => {\n      if (foundValue !== '') {\n        positions.forEach(pos => {\n          spaceValues[pos].value = foundValue;\n          spaceValues[pos].unit = foundUnit;\n        });\n      }\n    };\n    // Check the id against spacingModifiers and update the corresponding positions\n    if (id === spacingModifiers.a) {\n      setValues(['top', 'right', 'bottom', 'left']);\n    } else if (id === spacingModifiers.x) {\n      setValues(['left', 'right']);\n    } else if (id === spacingModifiers.y) {\n      setValues(['top', 'bottom']);\n    } else if (id === spacingModifiers.t) {\n      setValues(['top']);\n    } else if (id === spacingModifiers.r) {\n      setValues(['right']);\n    } else if (id === spacingModifiers.b) {\n      setValues(['bottom']);\n    } else if (id === spacingModifiers.l) {\n      setValues(['left']);\n    }\n  });\n  return spaceValues;\n};\nexports.optionsToSpaceValues = optionsToSpaceValues;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///14234\n")}}]);