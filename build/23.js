"use strict";(self.webpackChunkblockbite=self.webpackChunkblockbite||[]).push([[23],{36023:function(__unused_webpack_module,exports,__webpack_require__){eval('\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    "default": mod\n  };\n};\nObject.defineProperty(exports, "__esModule", ({\n  value: true\n}));\nexports.ThemeOrNative = void 0;\nconst jsx_runtime_1 = __webpack_require__(74848);\nconst element_1 = __webpack_require__(86087);\nconst ChapterDivider_1 = __webpack_require__(48324);\nconst ButtonToggle_1 = __importDefault(__webpack_require__(27162));\nconst Tailwind_1 = __importDefault(__webpack_require__(75069));\nconst Half3_1 = __importDefault(__webpack_require__(84635));\nconst ThemeOrNative = ({\n  currentControlId,\n  currentControlLabel,\n  modifiers,\n  emitOptions\n}) => {\n  const [category, setCategory] = (0, element_1.useState)(\'theme\');\n  const [activeControl, setActiveControl] = (0, element_1.useState)(null);\n  const [codexValue, setCodexValue] = (0, element_1.useState)(null);\n  const [currentModifier, setCurrentModifier] = (0, element_1.useState)();\n  // Set the first modifier on mount\n  (0, element_1.useEffect)(() => {\n    setCurrentModifier(modifiers[0]);\n  }, []);\n  // Update activeControl and codexValue when category or currentModifier changes\n  (0, element_1.useEffect)(() => {\n    var _a, _b;\n    if (currentModifier === null || currentModifier === void 0 ? void 0 : currentModifier.id) {\n      const dynamicSplit = ((_a = currentModifier.dynamicControl) === null || _a === void 0 ? void 0 : _a.split(\'|\')) || [];\n      const codexSplit = ((_b = currentModifier.codex) === null || _b === void 0 ? void 0 : _b.split(\'|\')) || [];\n      if (dynamicSplit.length > 0 && codexSplit.length > 0) {\n        setActiveControl(dynamicSplit[category === \'theme\' ? 0 : 1] || null);\n        setCodexValue(codexSplit[category === \'theme\' ? 0 : 1] || null);\n      }\n    }\n  }, [category, currentModifier === null || currentModifier === void 0 ? void 0 : currentModifier.id]);\n  // Lazy load the dynamic component\n  const DynamicComponent = (0, element_1.useMemo)(() => {\n    return activeControl ? (0, element_1.lazy)(() => __webpack_require__(58534)(`./${activeControl}`)) : null;\n  }, [activeControl]);\n  return (0, jsx_runtime_1.jsxs)("div", {\n    children: [(0, jsx_runtime_1.jsxs)("div", {\n      children: [(0, jsx_runtime_1.jsx)(ChapterDivider_1.ChapterDivider, {\n        title: currentControlLabel\n      }), modifiers.length > 1 && (0, jsx_runtime_1.jsx)(ButtonToggle_1.default, {\n        defaultPressed: currentModifier === null || currentModifier === void 0 ? void 0 : currentModifier.id,\n        onPressedChange: value => {\n          if (value) {\n            const selectedModifier = modifiers.find(modifier => modifier.id === value);\n            if (selectedModifier) {\n              setCurrentModifier(selectedModifier);\n            }\n          }\n        },\n        display: "icon",\n        size: "small",\n        tabs: modifiers.length < 4,\n        options: modifiers.map(modifier => ({\n          label: modifier.label,\n          value: modifier.id,\n          icon: modifier.icon\n        })),\n        className: "mb-4"\n      })]\n    }), (0, jsx_runtime_1.jsx)(ButtonToggle_1.default, {\n      size: "small",\n      display: "icon",\n      defaultPressed: "theme",\n      className: "mb-4",\n      options: [{\n        label: \'Theme\',\n        value: \'theme\',\n        icon: Half3_1.default\n      }, {\n        label: \'Native\',\n        value: \'native\',\n        icon: Tailwind_1.default\n      }],\n      onPressedChange: value => {\n        setCategory(value);\n      }\n    }), DynamicComponent && (0, jsx_runtime_1.jsx)(element_1.Suspense, {\n      children: (0, jsx_runtime_1.jsx)(DynamicComponent, {\n        activeOptionValue: (currentModifier === null || currentModifier === void 0 ? void 0 : currentModifier.activeOptionValue) || null,\n        options: category === \'theme\' ? [] : currentModifier === null || currentModifier === void 0 ? void 0 : currentModifier.options,\n        codex: codexValue,\n        emitOptions: emitOptions,\n        modifierId: currentModifier === null || currentModifier === void 0 ? void 0 : currentModifier.id\n      })\n    }, `${category}-${activeControl}`)]\n  }, currentControlId);\n};\nexports.ThemeOrNative = ThemeOrNative;\nexports["default"] = exports.ThemeOrNative;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///36023\n')}}]);