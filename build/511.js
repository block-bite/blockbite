"use strict";(self.webpackChunkblockbite=self.webpackChunkblockbite||[]).push([[511],{16511:function(__unused_webpack_module,exports,__webpack_require__){eval('\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    "default": mod\n  };\n};\nObject.defineProperty(exports, "__esModule", ({\n  value: true\n}));\nexports.LayoutAlign = void 0;\nconst jsx_runtime_1 = __webpack_require__(74848);\nconst element_1 = __webpack_require__(86087);\nconst zustand_1 = __webpack_require__(82510);\nconst DesignStore_1 = __webpack_require__(2649);\nconst ButtonToggle_1 = __importDefault(__webpack_require__(27162));\nconst useActiveOptionvalue_1 = __webpack_require__(63840);\nconst ChapterDivider_1 = __webpack_require__(48324);\nconst LayoutAlign = ({\n  currentControlId,\n  modifiers,\n  emitOptions\n}) => {\n  const [layoutXValue, setLayoutXValue] = (0, element_1.useState)(\'\');\n  const [layoutYValue, setLayoutYValue] = (0, element_1.useState)(\'\');\n  const [modifierX, setModifierX] = (0, element_1.useState)({});\n  const [modifierY, setModifierY] = (0, element_1.useState)({});\n  const store = (0, zustand_1.useStore)((0, element_1.useContext)(DesignStore_1.DesignContext));\n  const activeFlexTypeDirection = (0, useActiveOptionvalue_1.useActiveOptionValue)(\'flexdirection\', store, true);\n  const activeFlexType = (0, useActiveOptionvalue_1.useActiveOptionValue)(\'flextype\', store, true);\n  (0, element_1.useEffect)(() => {\n    /* keep horizontal, horizontal and vertical vertical  */\n    if (modifiers.length === 2 && activeFlexTypeDirection.includes(\'row\') && activeFlexType === \'flex\') {\n      setModifierX(Object.assign({}, modifiers[0]));\n      setModifierY(Object.assign({}, modifiers[1]));\n    } else if (modifiers.length === 2 && activeFlexTypeDirection.includes(\'col\') && activeFlexType === \'flex\') {\n      // Rotate the option icon 90 degrees cw for modifierY and 90 degrees ccw for modifierX\n      const rotatedModifierX = Object.assign(Object.assign({}, modifiers[1]), {\n        options: modifiers[1].options.map(option => {\n          return Object.assign(Object.assign({}, option), {\n            icon: () => {\n              const IconComponent = option.icon;\n              return (0, jsx_runtime_1.jsx)(IconComponent, {\n                style: {\n                  transform: \'rotate(-90deg)\'\n                }\n              });\n            }\n          });\n        })\n      });\n      const rotatedModifierY = Object.assign(Object.assign({}, modifiers[0]), {\n        options: modifiers[0].options.map(option => {\n          return Object.assign(Object.assign({}, option), {\n            icon: () => {\n              const IconComponent = option.icon;\n              return (0, jsx_runtime_1.jsx)(IconComponent, {\n                style: {\n                  transform: \'rotate(90deg)\'\n                }\n              });\n            }\n          });\n        })\n      });\n      setModifierX(Object.assign({}, rotatedModifierX));\n      setModifierY(Object.assign({}, rotatedModifierY));\n    } else if (activeFlexType === \'grid\') {\n      setModifierX(Object.assign({}, modifiers[0]));\n      setModifierY(Object.assign({}, modifiers[1]));\n    }\n  }, [activeFlexTypeDirection, activeFlexType]);\n  return (0, jsx_runtime_1.jsxs)("div", {\n    children: [(0, jsx_runtime_1.jsx)(ChapterDivider_1.ChapterDivider, {\n      title: "Layout Align"\n    }), (modifierX === null || modifierX === void 0 ? void 0 : modifierX.id) && (modifierY === null || modifierY === void 0 ? void 0 : modifierY.id) && (0, jsx_runtime_1.jsxs)("div", {\n      className: "flex flex-col gap-2",\n      children: [(0, jsx_runtime_1.jsx)("div", {\n        children: (0, jsx_runtime_1.jsx)(ButtonToggle_1.default, {\n          size: "small",\n          display: "icon",\n          defaultPressed: layoutXValue,\n          onPressedChange: value => {\n            setLayoutXValue(value);\n            emitOptions([{\n              id: modifierX.id,\n              value: value\n            }]);\n          },\n          options: modifierX.options\n        })\n      }, "layoutX"), (0, jsx_runtime_1.jsx)("div", {\n        children: (0, jsx_runtime_1.jsx)(ButtonToggle_1.default, {\n          size: "small",\n          display: "icon",\n          defaultPressed: layoutYValue,\n          onPressedChange: value => {\n            setLayoutYValue(value);\n            emitOptions([{\n              id: modifierY.id,\n              value: value\n            }]);\n          },\n          options: modifierY.options\n        })\n      }, "layoutY")]\n    })]\n  }, `LayoutAlign${currentControlId}`);\n};\nexports.LayoutAlign = LayoutAlign;\nexports["default"] = exports.LayoutAlign;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///16511\n')}}]);